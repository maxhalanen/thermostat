
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ac64  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002698  0801aeb8  0801aeb8  0001beb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d550  0801d550  0001f090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801d550  0801d550  0001e550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d558  0801d558  0001f090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d558  0801d558  0001e558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d55c  0801d55c  0001e55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0801d560  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a560  20000090  0801d5f0  0001f090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a5f0  0801d5f0  0001f5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001f090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d01c  00000000  00000000  0001f0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a22  00000000  00000000  0004c0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e88  00000000  00000000  00052b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000182f  00000000  00000000  00054990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e029  00000000  00000000  000561bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fd8b  00000000  00000000  000941e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00150dae  00000000  00000000  000c3f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00214d21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d24  00000000  00000000  00214d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0021da88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000090 	.word	0x20000090
 800026c:	00000000 	.word	0x00000000
 8000270:	0801ae9c 	.word	0x0801ae9c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000094 	.word	0x20000094
 800028c:	0801ae9c 	.word	0x0801ae9c

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9b0 	b.w	8001010 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ccc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000cce:	4688      	mov	r8, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	468e      	mov	lr, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d95f      	bls.n	8000d9e <__udivmoddi4+0xd6>
 8000cde:	fab2 f682 	clz	r6, r2
 8000ce2:	b14e      	cbz	r6, 8000cf8 <__udivmoddi4+0x30>
 8000ce4:	f1c6 0320 	rsb	r3, r6, #32
 8000ce8:	fa01 fe06 	lsl.w	lr, r1, r6
 8000cec:	40b7      	lsls	r7, r6
 8000cee:	40b4      	lsls	r4, r6
 8000cf0:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf4:	ea43 0e0e 	orr.w	lr, r3, lr
 8000cf8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	fbbe f1f8 	udiv	r1, lr, r8
 8000d06:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d0e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x5e>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x5c>
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	f200 8154 	bhi.w	8000fcc <__udivmoddi4+0x304>
 8000d24:	4601      	mov	r1, r0
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	b2a2      	uxth	r2, r4
 8000d2a:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d2e:	fb08 3310 	mls	r3, r8, r0, r3
 8000d32:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d36:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000d3a:	4594      	cmp	ip, r2
 8000d3c:	d90b      	bls.n	8000d56 <__udivmoddi4+0x8e>
 8000d3e:	18ba      	adds	r2, r7, r2
 8000d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d44:	bf2c      	ite	cs
 8000d46:	2401      	movcs	r4, #1
 8000d48:	2400      	movcc	r4, #0
 8000d4a:	4594      	cmp	ip, r2
 8000d4c:	d902      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d4e:	2c00      	cmp	r4, #0
 8000d50:	f000 813f 	beq.w	8000fd2 <__udivmoddi4+0x30a>
 8000d54:	4618      	mov	r0, r3
 8000d56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5a:	eba2 020c 	sub.w	r2, r2, ip
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40f2      	lsrs	r2, r6
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c5 2300 	strd	r2, r3, [r5]
 8000d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xb6>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb0>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d14e      	bne.n	8000e24 <__udivmoddi4+0x15c>
 8000d86:	4543      	cmp	r3, r8
 8000d88:	f0c0 8112 	bcc.w	8000fb0 <__udivmoddi4+0x2e8>
 8000d8c:	4282      	cmp	r2, r0
 8000d8e:	f240 810f 	bls.w	8000fb0 <__udivmoddi4+0x2e8>
 8000d92:	4608      	mov	r0, r1
 8000d94:	2d00      	cmp	r5, #0
 8000d96:	d0e8      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000d98:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9c:	e7e5      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000d9e:	2a00      	cmp	r2, #0
 8000da0:	f000 80ac 	beq.w	8000efc <__udivmoddi4+0x234>
 8000da4:	fab2 f682 	clz	r6, r2
 8000da8:	2e00      	cmp	r6, #0
 8000daa:	f040 80bb 	bne.w	8000f24 <__udivmoddi4+0x25c>
 8000dae:	1a8b      	subs	r3, r1, r2
 8000db0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000db4:	b2bc      	uxth	r4, r7
 8000db6:	2101      	movs	r1, #1
 8000db8:	0c02      	lsrs	r2, r0, #16
 8000dba:	b280      	uxth	r0, r0
 8000dbc:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dc0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dc4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000dc8:	fb04 f20c 	mul.w	r2, r4, ip
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d90e      	bls.n	8000dee <__udivmoddi4+0x126>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dd6:	bf2c      	ite	cs
 8000dd8:	f04f 0901 	movcs.w	r9, #1
 8000ddc:	f04f 0900 	movcc.w	r9, #0
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d903      	bls.n	8000dec <__udivmoddi4+0x124>
 8000de4:	f1b9 0f00 	cmp.w	r9, #0
 8000de8:	f000 80ec 	beq.w	8000fc4 <__udivmoddi4+0x2fc>
 8000dec:	46c4      	mov	ip, r8
 8000dee:	1a9b      	subs	r3, r3, r2
 8000df0:	fbb3 f8fe 	udiv	r8, r3, lr
 8000df4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000df8:	fb04 f408 	mul.w	r4, r4, r8
 8000dfc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e00:	4294      	cmp	r4, r2
 8000e02:	d90b      	bls.n	8000e1c <__udivmoddi4+0x154>
 8000e04:	18ba      	adds	r2, r7, r2
 8000e06:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e0a:	bf2c      	ite	cs
 8000e0c:	2001      	movcs	r0, #1
 8000e0e:	2000      	movcc	r0, #0
 8000e10:	4294      	cmp	r4, r2
 8000e12:	d902      	bls.n	8000e1a <__udivmoddi4+0x152>
 8000e14:	2800      	cmp	r0, #0
 8000e16:	f000 80d1 	beq.w	8000fbc <__udivmoddi4+0x2f4>
 8000e1a:	4698      	mov	r8, r3
 8000e1c:	1b12      	subs	r2, r2, r4
 8000e1e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e22:	e79d      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa08 f401 	lsl.w	r4, r8, r1
 8000e2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000e32:	fa22 f706 	lsr.w	r7, r2, r6
 8000e36:	fa28 f806 	lsr.w	r8, r8, r6
 8000e3a:	408a      	lsls	r2, r1
 8000e3c:	431f      	orrs	r7, r3
 8000e3e:	fa20 f306 	lsr.w	r3, r0, r6
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	4323      	orrs	r3, r4
 8000e46:	fa1f fc87 	uxth.w	ip, r7
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	fbb8 fef0 	udiv	lr, r8, r0
 8000e50:	fb00 881e 	mls	r8, r0, lr, r8
 8000e54:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000e58:	fb0e f80c 	mul.w	r8, lr, ip
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d90e      	bls.n	8000e7e <__udivmoddi4+0x1b6>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e66:	bf2c      	ite	cs
 8000e68:	f04f 0b01 	movcs.w	fp, #1
 8000e6c:	f04f 0b00 	movcc.w	fp, #0
 8000e70:	45a0      	cmp	r8, r4
 8000e72:	d903      	bls.n	8000e7c <__udivmoddi4+0x1b4>
 8000e74:	f1bb 0f00 	cmp.w	fp, #0
 8000e78:	f000 80b8 	beq.w	8000fec <__udivmoddi4+0x324>
 8000e7c:	46d6      	mov	lr, sl
 8000e7e:	eba4 0408 	sub.w	r4, r4, r8
 8000e82:	fa1f f883 	uxth.w	r8, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d90e      	bls.n	8000eb8 <__udivmoddi4+0x1f0>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	bf2c      	ite	cs
 8000ea2:	f04f 0801 	movcs.w	r8, #1
 8000ea6:	f04f 0800 	movcc.w	r8, #0
 8000eaa:	45a4      	cmp	ip, r4
 8000eac:	d903      	bls.n	8000eb6 <__udivmoddi4+0x1ee>
 8000eae:	f1b8 0f00 	cmp.w	r8, #0
 8000eb2:	f000 809f 	beq.w	8000ff4 <__udivmoddi4+0x32c>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebc:	eba4 040c 	sub.w	r4, r4, ip
 8000ec0:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ec4:	4564      	cmp	r4, ip
 8000ec6:	4673      	mov	r3, lr
 8000ec8:	46e0      	mov	r8, ip
 8000eca:	d302      	bcc.n	8000ed2 <__udivmoddi4+0x20a>
 8000ecc:	d107      	bne.n	8000ede <__udivmoddi4+0x216>
 8000ece:	45f1      	cmp	r9, lr
 8000ed0:	d205      	bcs.n	8000ede <__udivmoddi4+0x216>
 8000ed2:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed6:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	46e0      	mov	r8, ip
 8000ede:	b15d      	cbz	r5, 8000ef8 <__udivmoddi4+0x230>
 8000ee0:	ebb9 0203 	subs.w	r2, r9, r3
 8000ee4:	eb64 0408 	sbc.w	r4, r4, r8
 8000ee8:	fa04 f606 	lsl.w	r6, r4, r6
 8000eec:	fa22 f301 	lsr.w	r3, r2, r1
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	431e      	orrs	r6, r3
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e736      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000efc:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	4614      	mov	r4, r2
 8000f04:	b280      	uxth	r0, r0
 8000f06:	4696      	mov	lr, r2
 8000f08:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f0c:	2620      	movs	r6, #32
 8000f0e:	4690      	mov	r8, r2
 8000f10:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f14:	4610      	mov	r0, r2
 8000f16:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f1a:	eba3 0308 	sub.w	r3, r3, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e74b      	b.n	8000dbc <__udivmoddi4+0xf4>
 8000f24:	40b7      	lsls	r7, r6
 8000f26:	f1c6 0320 	rsb	r3, r6, #32
 8000f2a:	fa01 f206 	lsl.w	r2, r1, r6
 8000f2e:	fa21 f803 	lsr.w	r8, r1, r3
 8000f32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f36:	fa20 f303 	lsr.w	r3, r0, r3
 8000f3a:	b2bc      	uxth	r4, r7
 8000f3c:	40b0      	lsls	r0, r6
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	0c02      	lsrs	r2, r0, #16
 8000f42:	0c19      	lsrs	r1, r3, #16
 8000f44:	b280      	uxth	r0, r0
 8000f46:	fbb8 f9fe 	udiv	r9, r8, lr
 8000f4a:	fb0e 8819 	mls	r8, lr, r9, r8
 8000f4e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f52:	fb09 f804 	mul.w	r8, r9, r4
 8000f56:	4588      	cmp	r8, r1
 8000f58:	d951      	bls.n	8000ffe <__udivmoddi4+0x336>
 8000f5a:	1879      	adds	r1, r7, r1
 8000f5c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000f60:	bf2c      	ite	cs
 8000f62:	f04f 0a01 	movcs.w	sl, #1
 8000f66:	f04f 0a00 	movcc.w	sl, #0
 8000f6a:	4588      	cmp	r8, r1
 8000f6c:	d902      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000f6e:	f1ba 0f00 	cmp.w	sl, #0
 8000f72:	d031      	beq.n	8000fd8 <__udivmoddi4+0x310>
 8000f74:	eba1 0108 	sub.w	r1, r1, r8
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f8a:	4543      	cmp	r3, r8
 8000f8c:	d235      	bcs.n	8000ffa <__udivmoddi4+0x332>
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f94:	bf2c      	ite	cs
 8000f96:	f04f 0a01 	movcs.w	sl, #1
 8000f9a:	f04f 0a00 	movcc.w	sl, #0
 8000f9e:	4543      	cmp	r3, r8
 8000fa0:	d2bb      	bcs.n	8000f1a <__udivmoddi4+0x252>
 8000fa2:	f1ba 0f00 	cmp.w	sl, #0
 8000fa6:	d1b8      	bne.n	8000f1a <__udivmoddi4+0x252>
 8000fa8:	f1a9 0102 	sub.w	r1, r9, #2
 8000fac:	443b      	add	r3, r7
 8000fae:	e7b4      	b.n	8000f1a <__udivmoddi4+0x252>
 8000fb0:	1a84      	subs	r4, r0, r2
 8000fb2:	eb68 0203 	sbc.w	r2, r8, r3
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	4696      	mov	lr, r2
 8000fba:	e6eb      	b.n	8000d94 <__udivmoddi4+0xcc>
 8000fbc:	443a      	add	r2, r7
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	e72b      	b.n	8000e1c <__udivmoddi4+0x154>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	443b      	add	r3, r7
 8000fca:	e710      	b.n	8000dee <__udivmoddi4+0x126>
 8000fcc:	3902      	subs	r1, #2
 8000fce:	443b      	add	r3, r7
 8000fd0:	e6a9      	b.n	8000d26 <__udivmoddi4+0x5e>
 8000fd2:	443a      	add	r2, r7
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e6be      	b.n	8000d56 <__udivmoddi4+0x8e>
 8000fd8:	eba7 0808 	sub.w	r8, r7, r8
 8000fdc:	f1a9 0c02 	sub.w	ip, r9, #2
 8000fe0:	4441      	add	r1, r8
 8000fe2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe6:	fb09 f804 	mul.w	r8, r9, r4
 8000fea:	e7c9      	b.n	8000f80 <__udivmoddi4+0x2b8>
 8000fec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ff0:	443c      	add	r4, r7
 8000ff2:	e744      	b.n	8000e7e <__udivmoddi4+0x1b6>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	443c      	add	r4, r7
 8000ff8:	e75e      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000ffa:	4649      	mov	r1, r9
 8000ffc:	e78d      	b.n	8000f1a <__udivmoddi4+0x252>
 8000ffe:	eba1 0108 	sub.w	r1, r1, r8
 8001002:	46cc      	mov	ip, r9
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7b8      	b.n	8000f80 <__udivmoddi4+0x2b8>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	829a      	strh	r2, [r3, #20]
	uint16_t Callib_Start = 0xAA;
 800102a:	23aa      	movs	r3, #170	@ 0xaa
 800102c:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 800102e:	8afa      	ldrh	r2, [r7, #22]
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2316      	movs	r3, #22
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	463b      	mov	r3, r7
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	21ee      	movs	r1, #238	@ 0xee
 8001042:	483c      	ldr	r0, [pc, #240]	@ (8001134 <read_calliberation_data+0x120>)
 8001044:	f003 fde4 	bl	8004c10 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8001048:	783b      	ldrb	r3, [r7, #0]
 800104a:	b21b      	sxth	r3, r3
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	787b      	ldrb	r3, [r7, #1]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b37      	ldr	r3, [pc, #220]	@ (8001138 <read_calliberation_data+0x124>)
 800105a:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 800105c:	78bb      	ldrb	r3, [r7, #2]
 800105e:	b21b      	sxth	r3, r3
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b33      	ldr	r3, [pc, #204]	@ (800113c <read_calliberation_data+0x128>)
 800106e:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8001070:	793b      	ldrb	r3, [r7, #4]
 8001072:	b21b      	sxth	r3, r3
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	797b      	ldrb	r3, [r7, #5]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <read_calliberation_data+0x12c>)
 8001082:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	b21b      	sxth	r3, r3
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21b      	sxth	r3, r3
 8001094:	b29a      	uxth	r2, r3
 8001096:	4b2b      	ldr	r3, [pc, #172]	@ (8001144 <read_calliberation_data+0x130>)
 8001098:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 800109a:	7a3b      	ldrb	r3, [r7, #8]
 800109c:	b21b      	sxth	r3, r3
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	7a7b      	ldrb	r3, [r7, #9]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b26      	ldr	r3, [pc, #152]	@ (8001148 <read_calliberation_data+0x134>)
 80010ae:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 80010b0:	7abb      	ldrb	r3, [r7, #10]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	b21b      	sxth	r3, r3
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <read_calliberation_data+0x138>)
 80010c4:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 80010c6:	7b3b      	ldrb	r3, [r7, #12]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	7b7b      	ldrb	r3, [r7, #13]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <read_calliberation_data+0x13c>)
 80010d8:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 80010da:	7bbb      	ldrb	r3, [r7, #14]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <read_calliberation_data+0x140>)
 80010ec:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 80010ee:	7c3b      	ldrb	r3, [r7, #16]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	7c7b      	ldrb	r3, [r7, #17]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <read_calliberation_data+0x144>)
 8001100:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001102:	7cbb      	ldrb	r3, [r7, #18]
 8001104:	b21b      	sxth	r3, r3
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	7cfb      	ldrb	r3, [r7, #19]
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b12      	ldr	r3, [pc, #72]	@ (800115c <read_calliberation_data+0x148>)
 8001114:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001116:	7d3b      	ldrb	r3, [r7, #20]
 8001118:	b21b      	sxth	r3, r3
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	7d7b      	ldrb	r3, [r7, #21]
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <read_calliberation_data+0x14c>)
 8001128:	801a      	strh	r2, [r3, #0]

}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200002ac 	.word	0x200002ac
 8001138:	200000ac 	.word	0x200000ac
 800113c:	200000ae 	.word	0x200000ae
 8001140:	200000b0 	.word	0x200000b0
 8001144:	200000b2 	.word	0x200000b2
 8001148:	200000b4 	.word	0x200000b4
 800114c:	200000b6 	.word	0x200000b6
 8001150:	200000b8 	.word	0x200000b8
 8001154:	200000ba 	.word	0x200000ba
 8001158:	200000bc 	.word	0x200000bc
 800115c:	200000be 	.word	0x200000be
 8001160:	200000c0 	.word	0x200000c0

08001164 <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 800116a:	232e      	movs	r3, #46	@ 0x2e
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 800116e:	2300      	movs	r3, #0
 8001170:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2301      	movs	r3, #1
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	1dfb      	adds	r3, r7, #7
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	22f4      	movs	r2, #244	@ 0xf4
 8001184:	21ee      	movs	r1, #238	@ 0xee
 8001186:	480e      	ldr	r0, [pc, #56]	@ (80011c0 <Get_UTemp+0x5c>)
 8001188:	f003 fc2e 	bl	80049e8 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 800118c:	2005      	movs	r0, #5
 800118e:	f001 fc7f 	bl	8002a90 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8001192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2302      	movs	r3, #2
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	22f6      	movs	r2, #246	@ 0xf6
 80011a4:	21ee      	movs	r1, #238	@ 0xee
 80011a6:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <Get_UTemp+0x5c>)
 80011a8:	f003 fd32 	bl	8004c10 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 80011ac:	793b      	ldrb	r3, [r7, #4]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	797a      	ldrb	r2, [r7, #5]
 80011b4:	4413      	add	r3, r2
 80011b6:	b29b      	uxth	r3, r3
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200002ac 	.word	0x200002ac

080011c4 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 80011c8:	f7ff ffcc 	bl	8001164 <Get_UTemp>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b3e      	ldr	r3, [pc, #248]	@ (80012cc <BMP180_GetTemp+0x108>)
 80011d2:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80011d4:	4b3d      	ldr	r3, [pc, #244]	@ (80012cc <BMP180_GetTemp+0x108>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a3d      	ldr	r2, [pc, #244]	@ (80012d0 <BMP180_GetTemp+0x10c>)
 80011da:	8812      	ldrh	r2, [r2, #0]
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9a8 	bl	8000534 <__aeabi_i2d>
 80011e4:	4604      	mov	r4, r0
 80011e6:	460d      	mov	r5, r1
 80011e8:	4b3a      	ldr	r3, [pc, #232]	@ (80012d4 <BMP180_GetTemp+0x110>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9a1 	bl	8000534 <__aeabi_i2d>
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <BMP180_GetTemp+0x114>)
 80011f8:	f7ff fb30 	bl	800085c <__aeabi_ddiv>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4620      	mov	r0, r4
 8001202:	4629      	mov	r1, r5
 8001204:	f7ff fa00 	bl	8000608 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fcaa 	bl	8000b68 <__aeabi_d2iz>
 8001214:	4603      	mov	r3, r0
 8001216:	4a31      	ldr	r2, [pc, #196]	@ (80012dc <BMP180_GetTemp+0x118>)
 8001218:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 800121a:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <BMP180_GetTemp+0x11c>)
 800121c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f987 	bl	8000534 <__aeabi_i2d>
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <BMP180_GetTemp+0x120>)
 800122c:	f7ff f9ec 	bl	8000608 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4614      	mov	r4, r2
 8001236:	461d      	mov	r5, r3
 8001238:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <BMP180_GetTemp+0x124>)
 800123a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123e:	461a      	mov	r2, r3
 8001240:	4b26      	ldr	r3, [pc, #152]	@ (80012dc <BMP180_GetTemp+0x118>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4413      	add	r3, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f974 	bl	8000534 <__aeabi_i2d>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4620      	mov	r0, r4
 8001252:	4629      	mov	r1, r5
 8001254:	f7ff fb02 	bl	800085c <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc82 	bl	8000b68 <__aeabi_d2iz>
 8001264:	4603      	mov	r3, r0
 8001266:	4a21      	ldr	r2, [pc, #132]	@ (80012ec <BMP180_GetTemp+0x128>)
 8001268:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 800126a:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <BMP180_GetTemp+0x118>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <BMP180_GetTemp+0x128>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a1e      	ldr	r2, [pc, #120]	@ (80012f0 <BMP180_GetTemp+0x12c>)
 8001276:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001278:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <BMP180_GetTemp+0x12c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3308      	adds	r3, #8
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f958 	bl	8000534 <__aeabi_i2d>
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <BMP180_GetTemp+0x130>)
 800128a:	f7ff fae7 	bl	800085c <__aeabi_ddiv>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fc67 	bl	8000b68 <__aeabi_d2iz>
 800129a:	4603      	mov	r3, r0
 800129c:	4a16      	ldr	r2, [pc, #88]	@ (80012f8 <BMP180_GetTemp+0x134>)
 800129e:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <BMP180_GetTemp+0x134>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f945 	bl	8000534 <__aeabi_i2d>
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <BMP180_GetTemp+0x138>)
 80012b0:	f7ff fad4 	bl	800085c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc9c 	bl	8000bf8 <__aeabi_d2f>
 80012c0:	4603      	mov	r3, r0
 80012c2:	ee07 3a90 	vmov	s15, r3
}
 80012c6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ca:	bdb0      	pop	{r4, r5, r7, pc}
 80012cc:	200000c4 	.word	0x200000c4
 80012d0:	200000b6 	.word	0x200000b6
 80012d4:	200000b4 	.word	0x200000b4
 80012d8:	40e00000 	.word	0x40e00000
 80012dc:	200000cc 	.word	0x200000cc
 80012e0:	200000be 	.word	0x200000be
 80012e4:	40a00000 	.word	0x40a00000
 80012e8:	200000c0 	.word	0x200000c0
 80012ec:	200000d0 	.word	0x200000d0
 80012f0:	200000dc 	.word	0x200000dc
 80012f4:	40300000 	.word	0x40300000
 80012f8:	200000f0 	.word	0x200000f0
 80012fc:	40240000 	.word	0x40240000

08001300 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af04      	add	r7, sp, #16
 8001306:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	019b      	lsls	r3, r3, #6
 800130e:	b2db      	uxtb	r3, r3
 8001310:	3334      	adds	r3, #52	@ 0x34
 8001312:	b2db      	uxtb	r3, r3
 8001314:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2100      	movs	r1, #0
 800131c:	460a      	mov	r2, r1
 800131e:	801a      	strh	r2, [r3, #0]
 8001320:	460a      	mov	r2, r1
 8001322:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001324:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2301      	movs	r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	f107 030f 	add.w	r3, r7, #15
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	22f4      	movs	r2, #244	@ 0xf4
 8001338:	21ee      	movs	r1, #238	@ 0xee
 800133a:	481f      	ldr	r0, [pc, #124]	@ (80013b8 <Get_UPress+0xb8>)
 800133c:	f003 fb54 	bl	80049e8 <HAL_I2C_Mem_Write>
	switch (oss)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d81a      	bhi.n	800137c <Get_UPress+0x7c>
 8001346:	a201      	add	r2, pc, #4	@ (adr r2, 800134c <Get_UPress+0x4c>)
 8001348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134c:	0800135d 	.word	0x0800135d
 8001350:	08001365 	.word	0x08001365
 8001354:	0800136d 	.word	0x0800136d
 8001358:	08001375 	.word	0x08001375
	{
		case (0):
			HAL_Delay (5);
 800135c:	2005      	movs	r0, #5
 800135e:	f001 fb97 	bl	8002a90 <HAL_Delay>
			break;
 8001362:	e00b      	b.n	800137c <Get_UPress+0x7c>
		case (1):
			HAL_Delay (8);
 8001364:	2008      	movs	r0, #8
 8001366:	f001 fb93 	bl	8002a90 <HAL_Delay>
			break;
 800136a:	e007      	b.n	800137c <Get_UPress+0x7c>
		case (2):
			HAL_Delay (14);
 800136c:	200e      	movs	r0, #14
 800136e:	f001 fb8f 	bl	8002a90 <HAL_Delay>
			break;
 8001372:	e003      	b.n	800137c <Get_UPress+0x7c>
		case (3):
			HAL_Delay (26);
 8001374:	201a      	movs	r0, #26
 8001376:	f001 fb8b 	bl	8002a90 <HAL_Delay>
			break;
 800137a:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 800137c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	2303      	movs	r3, #3
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	22f6      	movs	r2, #246	@ 0xf6
 8001390:	21ee      	movs	r1, #238	@ 0xee
 8001392:	4809      	ldr	r0, [pc, #36]	@ (80013b8 <Get_UPress+0xb8>)
 8001394:	f003 fc3c 	bl	8004c10 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001398:	7b3b      	ldrb	r3, [r7, #12]
 800139a:	041a      	lsls	r2, r3, #16
 800139c:	7b7b      	ldrb	r3, [r7, #13]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	4413      	add	r3, r2
 80013a2:	7bba      	ldrb	r2, [r7, #14]
 80013a4:	441a      	add	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f1c3 0308 	rsb	r3, r3, #8
 80013ac:	fa42 f303 	asr.w	r3, r2, r3
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200002ac 	.word	0x200002ac

080013bc <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 80013bc:	b5b0      	push	{r4, r5, r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff9b 	bl	8001300 <Get_UPress>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	4ba8      	ldr	r3, [pc, #672]	@ (8001670 <BMP180_GetPress+0x2b4>)
 80013d0:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80013d2:	4ba8      	ldr	r3, [pc, #672]	@ (8001674 <BMP180_GetPress+0x2b8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4aa8      	ldr	r2, [pc, #672]	@ (8001678 <BMP180_GetPress+0x2bc>)
 80013d8:	8812      	ldrh	r2, [r2, #0]
 80013da:	1a9b      	subs	r3, r3, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8a9 	bl	8000534 <__aeabi_i2d>
 80013e2:	4604      	mov	r4, r0
 80013e4:	460d      	mov	r5, r1
 80013e6:	4ba5      	ldr	r3, [pc, #660]	@ (800167c <BMP180_GetPress+0x2c0>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8a2 	bl	8000534 <__aeabi_i2d>
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	4ba2      	ldr	r3, [pc, #648]	@ (8001680 <BMP180_GetPress+0x2c4>)
 80013f6:	f7ff fa31 	bl	800085c <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4620      	mov	r0, r4
 8001400:	4629      	mov	r1, r5
 8001402:	f7ff f901 	bl	8000608 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fbab 	bl	8000b68 <__aeabi_d2iz>
 8001412:	4603      	mov	r3, r0
 8001414:	4a9b      	ldr	r2, [pc, #620]	@ (8001684 <BMP180_GetPress+0x2c8>)
 8001416:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001418:	4b9b      	ldr	r3, [pc, #620]	@ (8001688 <BMP180_GetPress+0x2cc>)
 800141a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f888 	bl	8000534 <__aeabi_i2d>
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b98      	ldr	r3, [pc, #608]	@ (800168c <BMP180_GetPress+0x2d0>)
 800142a:	f7ff f8ed 	bl	8000608 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4614      	mov	r4, r2
 8001434:	461d      	mov	r5, r3
 8001436:	4b96      	ldr	r3, [pc, #600]	@ (8001690 <BMP180_GetPress+0x2d4>)
 8001438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143c:	461a      	mov	r2, r3
 800143e:	4b91      	ldr	r3, [pc, #580]	@ (8001684 <BMP180_GetPress+0x2c8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4413      	add	r3, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f875 	bl	8000534 <__aeabi_i2d>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4620      	mov	r0, r4
 8001450:	4629      	mov	r1, r5
 8001452:	f7ff fa03 	bl	800085c <__aeabi_ddiv>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fb83 	bl	8000b68 <__aeabi_d2iz>
 8001462:	4603      	mov	r3, r0
 8001464:	4a8b      	ldr	r2, [pc, #556]	@ (8001694 <BMP180_GetPress+0x2d8>)
 8001466:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001468:	4b86      	ldr	r3, [pc, #536]	@ (8001684 <BMP180_GetPress+0x2c8>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b89      	ldr	r3, [pc, #548]	@ (8001694 <BMP180_GetPress+0x2d8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4413      	add	r3, r2
 8001472:	4a89      	ldr	r2, [pc, #548]	@ (8001698 <BMP180_GetPress+0x2dc>)
 8001474:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8001476:	4b88      	ldr	r3, [pc, #544]	@ (8001698 <BMP180_GetPress+0x2dc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 800147e:	4a87      	ldr	r2, [pc, #540]	@ (800169c <BMP180_GetPress+0x2e0>)
 8001480:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001482:	4b87      	ldr	r3, [pc, #540]	@ (80016a0 <BMP180_GetPress+0x2e4>)
 8001484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f853 	bl	8000534 <__aeabi_i2d>
 800148e:	4604      	mov	r4, r0
 8001490:	460d      	mov	r5, r1
 8001492:	4b82      	ldr	r3, [pc, #520]	@ (800169c <BMP180_GetPress+0x2e0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a81      	ldr	r2, [pc, #516]	@ (800169c <BMP180_GetPress+0x2e0>)
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f848 	bl	8000534 <__aeabi_i2d>
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	4b7e      	ldr	r3, [pc, #504]	@ (80016a4 <BMP180_GetPress+0x2e8>)
 80014aa:	f7ff f9d7 	bl	800085c <__aeabi_ddiv>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4620      	mov	r0, r4
 80014b4:	4629      	mov	r1, r5
 80014b6:	f7ff f8a7 	bl	8000608 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b71      	ldr	r3, [pc, #452]	@ (800168c <BMP180_GetPress+0x2d0>)
 80014c8:	f7ff f9c8 	bl	800085c <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fb48 	bl	8000b68 <__aeabi_d2iz>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a6a      	ldr	r2, [pc, #424]	@ (8001684 <BMP180_GetPress+0x2c8>)
 80014dc:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80014de:	4b72      	ldr	r3, [pc, #456]	@ (80016a8 <BMP180_GetPress+0x2ec>)
 80014e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b6d      	ldr	r3, [pc, #436]	@ (800169c <BMP180_GetPress+0x2e0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f820 	bl	8000534 <__aeabi_i2d>
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b64      	ldr	r3, [pc, #400]	@ (800168c <BMP180_GetPress+0x2d0>)
 80014fa:	f7ff f9af 	bl	800085c <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fb2f 	bl	8000b68 <__aeabi_d2iz>
 800150a:	4603      	mov	r3, r0
 800150c:	4a61      	ldr	r2, [pc, #388]	@ (8001694 <BMP180_GetPress+0x2d8>)
 800150e:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 8001510:	4b5c      	ldr	r3, [pc, #368]	@ (8001684 <BMP180_GetPress+0x2c8>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b5f      	ldr	r3, [pc, #380]	@ (8001694 <BMP180_GetPress+0x2d8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4413      	add	r3, r2
 800151a:	4a64      	ldr	r2, [pc, #400]	@ (80016ac <BMP180_GetPress+0x2f0>)
 800151c:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 800151e:	4b64      	ldr	r3, [pc, #400]	@ (80016b0 <BMP180_GetPress+0x2f4>)
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	009a      	lsls	r2, r3, #2
 8001526:	4b61      	ldr	r3, [pc, #388]	@ (80016ac <BMP180_GetPress+0x2f0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	441a      	add	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	3302      	adds	r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	da00      	bge.n	800153a <BMP180_GetPress+0x17e>
 8001538:	3303      	adds	r3, #3
 800153a:	109b      	asrs	r3, r3, #2
 800153c:	461a      	mov	r2, r3
 800153e:	4b5d      	ldr	r3, [pc, #372]	@ (80016b4 <BMP180_GetPress+0x2f8>)
 8001540:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001542:	4b5d      	ldr	r3, [pc, #372]	@ (80016b8 <BMP180_GetPress+0x2fc>)
 8001544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001548:	461a      	mov	r2, r3
 800154a:	4b54      	ldr	r3, [pc, #336]	@ (800169c <BMP180_GetPress+0x2e0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ffee 	bl	8000534 <__aeabi_i2d>
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	4b57      	ldr	r3, [pc, #348]	@ (80016bc <BMP180_GetPress+0x300>)
 800155e:	f7ff f97d 	bl	800085c <__aeabi_ddiv>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fafd 	bl	8000b68 <__aeabi_d2iz>
 800156e:	4603      	mov	r3, r0
 8001570:	4a44      	ldr	r2, [pc, #272]	@ (8001684 <BMP180_GetPress+0x2c8>)
 8001572:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001574:	4b52      	ldr	r3, [pc, #328]	@ (80016c0 <BMP180_GetPress+0x304>)
 8001576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffda 	bl	8000534 <__aeabi_i2d>
 8001580:	4604      	mov	r4, r0
 8001582:	460d      	mov	r5, r1
 8001584:	4b45      	ldr	r3, [pc, #276]	@ (800169c <BMP180_GetPress+0x2e0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a44      	ldr	r2, [pc, #272]	@ (800169c <BMP180_GetPress+0x2e0>)
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ffcf 	bl	8000534 <__aeabi_i2d>
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	4b42      	ldr	r3, [pc, #264]	@ (80016a4 <BMP180_GetPress+0x2e8>)
 800159c:	f7ff f95e 	bl	800085c <__aeabi_ddiv>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4620      	mov	r0, r4
 80015a6:	4629      	mov	r1, r5
 80015a8:	f7ff f82e 	bl	8000608 <__aeabi_dmul>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	4b42      	ldr	r3, [pc, #264]	@ (80016c4 <BMP180_GetPress+0x308>)
 80015ba:	f7ff f94f 	bl	800085c <__aeabi_ddiv>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff facf 	bl	8000b68 <__aeabi_d2iz>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a31      	ldr	r2, [pc, #196]	@ (8001694 <BMP180_GetPress+0x2d8>)
 80015ce:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80015d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001684 <BMP180_GetPress+0x2c8>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001694 <BMP180_GetPress+0x2d8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4413      	add	r3, r2
 80015da:	3302      	adds	r3, #2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffa9 	bl	8000534 <__aeabi_i2d>
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	4b38      	ldr	r3, [pc, #224]	@ (80016c8 <BMP180_GetPress+0x30c>)
 80015e8:	f7ff f938 	bl	800085c <__aeabi_ddiv>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f7ff fab8 	bl	8000b68 <__aeabi_d2iz>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4a2c      	ldr	r2, [pc, #176]	@ (80016ac <BMP180_GetPress+0x2f0>)
 80015fc:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80015fe:	4b33      	ldr	r3, [pc, #204]	@ (80016cc <BMP180_GetPress+0x310>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4b29      	ldr	r3, [pc, #164]	@ (80016ac <BMP180_GetPress+0x2f0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff7f 	bl	8000514 <__aeabi_ui2d>
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <BMP180_GetPress+0x2c4>)
 800161c:	f7ff f91e 	bl	800085c <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fac6 	bl	8000bb8 <__aeabi_d2uiz>
 800162c:	4603      	mov	r3, r0
 800162e:	4a28      	ldr	r2, [pc, #160]	@ (80016d0 <BMP180_GetPress+0x314>)
 8001630:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001632:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <BMP180_GetPress+0x2b4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <BMP180_GetPress+0x2f8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	fa41 f202 	asr.w	r2, r1, r2
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	4a21      	ldr	r2, [pc, #132]	@ (80016d4 <BMP180_GetPress+0x318>)
 800164e:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001650:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <BMP180_GetPress+0x318>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db41      	blt.n	80016dc <BMP180_GetPress+0x320>
 8001658:	4b1e      	ldr	r3, [pc, #120]	@ (80016d4 <BMP180_GetPress+0x318>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	005a      	lsls	r2, r3, #1
 800165e:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <BMP180_GetPress+0x314>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	461a      	mov	r2, r3
 8001668:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <BMP180_GetPress+0x31c>)
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e040      	b.n	80016f0 <BMP180_GetPress+0x334>
 800166e:	bf00      	nop
 8001670:	200000c8 	.word	0x200000c8
 8001674:	200000c4 	.word	0x200000c4
 8001678:	200000b6 	.word	0x200000b6
 800167c:	200000b4 	.word	0x200000b4
 8001680:	40e00000 	.word	0x40e00000
 8001684:	200000cc 	.word	0x200000cc
 8001688:	200000be 	.word	0x200000be
 800168c:	40a00000 	.word	0x40a00000
 8001690:	200000c0 	.word	0x200000c0
 8001694:	200000d0 	.word	0x200000d0
 8001698:	200000dc 	.word	0x200000dc
 800169c:	200000e4 	.word	0x200000e4
 80016a0:	200000ba 	.word	0x200000ba
 80016a4:	40b00000 	.word	0x40b00000
 80016a8:	200000ae 	.word	0x200000ae
 80016ac:	200000d4 	.word	0x200000d4
 80016b0:	200000ac 	.word	0x200000ac
 80016b4:	200000d8 	.word	0x200000d8
 80016b8:	200000b0 	.word	0x200000b0
 80016bc:	40c00000 	.word	0x40c00000
 80016c0:	200000b8 	.word	0x200000b8
 80016c4:	40f00000 	.word	0x40f00000
 80016c8:	40100000 	.word	0x40100000
 80016cc:	200000b2 	.word	0x200000b2
 80016d0:	200000e0 	.word	0x200000e0
 80016d4:	200000e8 	.word	0x200000e8
 80016d8:	200000ec 	.word	0x200000ec
	else Press = (B7/B4)*2;
 80016dc:	4b46      	ldr	r3, [pc, #280]	@ (80017f8 <BMP180_GetPress+0x43c>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b46      	ldr	r3, [pc, #280]	@ (80017fc <BMP180_GetPress+0x440>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b44      	ldr	r3, [pc, #272]	@ (8001800 <BMP180_GetPress+0x444>)
 80016ee:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80016f0:	4b43      	ldr	r3, [pc, #268]	@ (8001800 <BMP180_GetPress+0x444>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff1d 	bl	8000534 <__aeabi_i2d>
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b41      	ldr	r3, [pc, #260]	@ (8001804 <BMP180_GetPress+0x448>)
 8001700:	f7ff f8ac 	bl	800085c <__aeabi_ddiv>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4614      	mov	r4, r2
 800170a:	461d      	mov	r5, r3
 800170c:	4b3c      	ldr	r3, [pc, #240]	@ (8001800 <BMP180_GetPress+0x444>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff0f 	bl	8000534 <__aeabi_i2d>
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b3a      	ldr	r3, [pc, #232]	@ (8001804 <BMP180_GetPress+0x448>)
 800171c:	f7ff f89e 	bl	800085c <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4620      	mov	r0, r4
 8001726:	4629      	mov	r1, r5
 8001728:	f7fe ff6e 	bl	8000608 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff fa18 	bl	8000b68 <__aeabi_d2iz>
 8001738:	4603      	mov	r3, r0
 800173a:	4a33      	ldr	r2, [pc, #204]	@ (8001808 <BMP180_GetPress+0x44c>)
 800173c:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 800173e:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <BMP180_GetPress+0x44c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f640 32de 	movw	r2, #3038	@ 0xbde
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fef2 	bl	8000534 <__aeabi_i2d>
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <BMP180_GetPress+0x450>)
 8001756:	f7ff f881 	bl	800085c <__aeabi_ddiv>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff fa01 	bl	8000b68 <__aeabi_d2iz>
 8001766:	4603      	mov	r3, r0
 8001768:	4a27      	ldr	r2, [pc, #156]	@ (8001808 <BMP180_GetPress+0x44c>)
 800176a:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 800176c:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <BMP180_GetPress+0x444>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a27      	ldr	r2, [pc, #156]	@ (8001810 <BMP180_GetPress+0x454>)
 8001772:	fb02 f303 	mul.w	r3, r2, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fedc 	bl	8000534 <__aeabi_i2d>
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4b22      	ldr	r3, [pc, #136]	@ (800180c <BMP180_GetPress+0x450>)
 8001782:	f7ff f86b 	bl	800085c <__aeabi_ddiv>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff f9eb 	bl	8000b68 <__aeabi_d2iz>
 8001792:	4603      	mov	r3, r0
 8001794:	4a1f      	ldr	r2, [pc, #124]	@ (8001814 <BMP180_GetPress+0x458>)
 8001796:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 8001798:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <BMP180_GetPress+0x444>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fec9 	bl	8000534 <__aeabi_i2d>
 80017a2:	4604      	mov	r4, r0
 80017a4:	460d      	mov	r5, r1
 80017a6:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <BMP180_GetPress+0x44c>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <BMP180_GetPress+0x458>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe febd 	bl	8000534 <__aeabi_i2d>
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <BMP180_GetPress+0x45c>)
 80017c0:	f7ff f84c 	bl	800085c <__aeabi_ddiv>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7fe fd66 	bl	800029c <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f9c6 	bl	8000b68 <__aeabi_d2iz>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a08      	ldr	r2, [pc, #32]	@ (8001800 <BMP180_GetPress+0x444>)
 80017e0:	6013      	str	r3, [r2, #0]

	return Press;
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <BMP180_GetPress+0x444>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80017ee:	eeb0 0a67 	vmov.f32	s0, s15
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bdb0      	pop	{r4, r5, r7, pc}
 80017f8:	200000e8 	.word	0x200000e8
 80017fc:	200000e0 	.word	0x200000e0
 8001800:	200000ec 	.word	0x200000ec
 8001804:	40700000 	.word	0x40700000
 8001808:	200000cc 	.word	0x200000cc
 800180c:	40f00000 	.word	0x40f00000
 8001810:	ffffe343 	.word	0xffffe343
 8001814:	200000d0 	.word	0x200000d0
 8001818:	40300000 	.word	0x40300000
 800181c:	00000000 	.word	0x00000000

08001820 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff fdc7 	bl	80013bc <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 800182e:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <BMP180_GetAlt+0x88>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80018ac <BMP180_GetAlt+0x8c>
 800183e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001842:	ee16 0a90 	vmov	r0, s13
 8001846:	f7fe fe87 	bl	8000558 <__aeabi_f2d>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001898 <BMP180_GetAlt+0x78>
 8001852:	ec43 2b10 	vmov	d0, r2, r3
 8001856:	f018 fbbf 	bl	8019fd8 <pow>
 800185a:	ec53 2b10 	vmov	r2, r3, d0
 800185e:	f04f 0000 	mov.w	r0, #0
 8001862:	4913      	ldr	r1, [pc, #76]	@ (80018b0 <BMP180_GetAlt+0x90>)
 8001864:	f7fe fd18 	bl	8000298 <__aeabi_dsub>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	a30b      	add	r3, pc, #44	@ (adr r3, 80018a0 <BMP180_GetAlt+0x80>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe fec7 	bl	8000608 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f9b9 	bl	8000bf8 <__aeabi_d2f>
 8001886:	4603      	mov	r3, r0
 8001888:	ee07 3a90 	vmov	s15, r3
}
 800188c:	eeb0 0a67 	vmov.f32	s0, s15
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	ccd745e4 	.word	0xccd745e4
 800189c:	3fc85b95 	.word	0x3fc85b95
 80018a0:	00000000 	.word	0x00000000
 80018a4:	40e5a540 	.word	0x40e5a540
 80018a8:	200000ec 	.word	0x200000ec
 80018ac:	47c5e680 	.word	0x47c5e680
 80018b0:	3ff00000 	.word	0x3ff00000

080018b4 <BMP180_Start>:

void BMP180_Start (void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	read_calliberation_data();
 80018b8:	f7ff fbac 	bl	8001014 <read_calliberation_data>
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c4:	f001 f826 	bl	8002914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c8:	f000 f838 	bl	800193c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018cc:	f000 f946 	bl	8001b5c <MX_GPIO_Init>
  MX_ICACHE_Init();
 80018d0:	f000 f930 	bl	8001b34 <MX_ICACHE_Init>
  MX_I2C1_Init();
 80018d4:	f000 f8ee 	bl	8001ab4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BMP180_Start();
 80018d8:	f7ff ffec 	bl	80018b4 <BMP180_Start>

	lwip_init();
 80018dc:	f00a ff76 	bl	800c7cc <lwip_init>
	udpServer_init();
 80018e0:	f000 fd58 	bl	8002394 <udpServer_init>
	Netif_Config();
 80018e4:	f000 fa4c 	bl	8001d80 <Netif_Config>

  /* USER CODE END 2 */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <main+0x74>)
 80018ea:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018ee:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80018f0:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <main+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80018f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <main+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <main+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001902:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <main+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001908:	490a      	ldr	r1, [pc, #40]	@ (8001934 <main+0x74>)
 800190a:	2000      	movs	r0, #0
 800190c:	f000 fe24 	bl	8002558 <BSP_COM_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <main+0x5a>
  {
    Error_Handler();
 8001916:	f000 fa63 	bl	8001de0 <Error_Handler>
  /* USER CODE BEGIN WHILE */
	while (1) {

		/* Read a received packet from the Ethernet buffers and send it
		 to the lwIP for handling */
		ethernetif_input(&gnetif);
 800191a:	4807      	ldr	r0, [pc, #28]	@ (8001938 <main+0x78>)
 800191c:	f00a fcfe 	bl	800c31c <ethernetif_input>

		/* Handle timeouts */
		sys_check_timeouts();
 8001920:	f011 ffd6 	bl	80138d0 <sys_check_timeouts>

#if LWIP_NETIF_LINK_CALLBACK
		Ethernet_Link_Periodic_Handle(&gnetif);
 8001924:	4804      	ldr	r0, [pc, #16]	@ (8001938 <main+0x78>)
 8001926:	f00a fb1b 	bl	800bf60 <Ethernet_Link_Periodic_Handle>
#endif

#if LWIP_DHCP
		DHCP_Periodic_Handle(&gnetif);
 800192a:	4803      	ldr	r0, [pc, #12]	@ (8001938 <main+0x78>)
 800192c:	f00a fbe4 	bl	800c0f8 <DHCP_Periodic_Handle>
		ethernetif_input(&gnetif);
 8001930:	bf00      	nop
 8001932:	e7f2      	b.n	800191a <main+0x5a>
 8001934:	200001ec 	.word	0x200001ec
 8001938:	200003b4 	.word	0x200003b4

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b09c      	sub	sp, #112	@ 0x70
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 0320 	add.w	r3, r7, #32
 8001946:	2250      	movs	r2, #80	@ 0x50
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f017 fb92 	bl	8019074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
 8001960:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001962:	4b2c      	ldr	r3, [pc, #176]	@ (8001a14 <SystemClock_Config+0xd8>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	4a2b      	ldr	r2, [pc, #172]	@ (8001a14 <SystemClock_Config+0xd8>)
 8001968:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800196c:	6113      	str	r3, [r2, #16]
 800196e:	4b29      	ldr	r3, [pc, #164]	@ (8001a14 <SystemClock_Config+0xd8>)
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800197a:	bf00      	nop
 800197c:	4b25      	ldr	r3, [pc, #148]	@ (8001a14 <SystemClock_Config+0xd8>)
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b08      	cmp	r3, #8
 8001986:	d1f9      	bne.n	800197c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001988:	2301      	movs	r3, #1
 800198a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800198c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001992:	2302      	movs	r3, #2
 8001994:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001996:	2303      	movs	r3, #3
 8001998:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800199a:	2304      	movs	r3, #4
 800199c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 800199e:	23fa      	movs	r3, #250	@ 0xfa
 80019a0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019a2:	2302      	movs	r3, #2
 80019a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019aa:	2302      	movs	r3, #2
 80019ac:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80019ae:	2304      	movs	r3, #4
 80019b0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 fdda 	bl	8005578 <HAL_RCC_OscConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019ca:	f000 fa09 	bl	8001de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ce:	231f      	movs	r3, #31
 80019d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d2:	2303      	movs	r3, #3
 80019d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2105      	movs	r1, #5
 80019ec:	4618      	mov	r0, r3
 80019ee:	f004 f9fb 	bl	8005de8 <HAL_RCC_ClockConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019f8:	f000 f9f2 	bl	8001de0 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <SystemClock_Config+0xdc>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a04:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <SystemClock_Config+0xdc>)
 8001a06:	f043 0320 	orr.w	r3, r3, #32
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	3770      	adds	r7, #112	@ 0x70
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	44020800 	.word	0x44020800
 8001a18:	40022000 	.word	0x40022000

08001a1c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
void MX_ETH_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <MX_ETH_Init+0x80>)
 8001a22:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa0 <MX_ETH_Init+0x84>)
 8001a24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001a26:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <MX_ETH_Init+0x88>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <MX_ETH_Init+0x88>)
 8001a2e:	2280      	movs	r2, #128	@ 0x80
 8001a30:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <MX_ETH_Init+0x88>)
 8001a34:	22e1      	movs	r2, #225	@ 0xe1
 8001a36:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_ETH_Init+0x88>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <MX_ETH_Init+0x88>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001a44:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <MX_ETH_Init+0x88>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001a4a:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <MX_ETH_Init+0x80>)
 8001a4c:	4a15      	ldr	r2, [pc, #84]	@ (8001aa4 <MX_ETH_Init+0x88>)
 8001a4e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001a50:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <MX_ETH_Init+0x80>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001a56:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <MX_ETH_Init+0x80>)
 8001a58:	4a13      	ldr	r2, [pc, #76]	@ (8001aa8 <MX_ETH_Init+0x8c>)
 8001a5a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <MX_ETH_Init+0x80>)
 8001a5e:	4a13      	ldr	r2, [pc, #76]	@ (8001aac <MX_ETH_Init+0x90>)
 8001a60:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <MX_ETH_Init+0x80>)
 8001a64:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001a68:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001a6a:	480c      	ldr	r0, [pc, #48]	@ (8001a9c <MX_ETH_Init+0x80>)
 8001a6c:	f001 f9ae 	bl	8002dcc <HAL_ETH_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001a76:	f000 f9b3 	bl	8001de0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfigTypeDef));
 8001a7a:	2238      	movs	r2, #56	@ 0x38
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <MX_ETH_Init+0x94>)
 8001a80:	f017 faf8 	bl	8019074 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001a84:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab0 <MX_ETH_Init+0x94>)
 8001a86:	2221      	movs	r2, #33	@ 0x21
 8001a88:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <MX_ETH_Init+0x94>)
 8001a8c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a90:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001a92:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <MX_ETH_Init+0x94>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200001fc 	.word	0x200001fc
 8001aa0:	40028000 	.word	0x40028000
 8001aa4:	20000300 	.word	0x20000300
 8001aa8:	2000018c 	.word	0x2000018c
 8001aac:	2000012c 	.word	0x2000012c
 8001ab0:	200000f4 	.word	0x200000f4

08001ab4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001aba:	4a1c      	ldr	r2, [pc, #112]	@ (8001b2c <MX_I2C1_Init+0x78>)
 8001abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b30 <MX_I2C1_Init+0x7c>)
 8001ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aee:	480e      	ldr	r0, [pc, #56]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001af0:	f002 fede 	bl	80048b0 <HAL_I2C_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001afa:	f000 f971 	bl	8001de0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001afe:	2100      	movs	r1, #0
 8001b00:	4809      	ldr	r0, [pc, #36]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001b02:	f003 fc61 	bl	80053c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b0c:	f000 f968 	bl	8001de0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b10:	2100      	movs	r1, #0
 8001b12:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <MX_I2C1_Init+0x74>)
 8001b14:	f003 fca3 	bl	800545e <HAL_I2CEx_ConfigDigitalFilter>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b1e:	f000 f95f 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200002ac 	.word	0x200002ac
 8001b2c:	40005400 	.word	0x40005400
 8001b30:	10c043e5 	.word	0x10c043e5

08001b34 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f003 fcdd 	bl	80054f8 <HAL_ICACHE_ConfigAssociativityMode>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001b44:	f000 f94c 	bl	8001de0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001b48:	f003 fcf6 	bl	8005538 <HAL_ICACHE_Enable>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001b52:	f000 f945 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08c      	sub	sp, #48	@ 0x30
 8001b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b72:	4b7c      	ldr	r3, [pc, #496]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b78:	4a7a      	ldr	r2, [pc, #488]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001b7a:	f043 0310 	orr.w	r3, r3, #16
 8001b7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b82:	4b78      	ldr	r3, [pc, #480]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b90:	4b74      	ldr	r3, [pc, #464]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b96:	4a73      	ldr	r2, [pc, #460]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ba0:	4b70      	ldr	r3, [pc, #448]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bae:	4b6d      	ldr	r3, [pc, #436]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001bb6:	f043 0320 	orr.w	r3, r3, #32
 8001bba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bbe:	4b69      	ldr	r3, [pc, #420]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bcc:	4b65      	ldr	r3, [pc, #404]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bd2:	4a64      	ldr	r2, [pc, #400]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bd8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bdc:	4b61      	ldr	r3, [pc, #388]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4b5e      	ldr	r3, [pc, #376]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bf0:	4a5c      	ldr	r2, [pc, #368]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c08:	4b56      	ldr	r3, [pc, #344]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c0e:	4a55      	ldr	r2, [pc, #340]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c18:	4b52      	ldr	r3, [pc, #328]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c26:	4b4f      	ldr	r3, [pc, #316]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c2c:	4a4d      	ldr	r2, [pc, #308]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c36:	4b4b      	ldr	r3, [pc, #300]	@ (8001d64 <MX_GPIO_Init+0x208>)
 8001c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2110      	movs	r1, #16
 8001c48:	4847      	ldr	r0, [pc, #284]	@ (8001d68 <MX_GPIO_Init+0x20c>)
 8001c4a:	f002 fe19 	bl	8004880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2101      	movs	r1, #1
 8001c52:	4846      	ldr	r0, [pc, #280]	@ (8001d6c <MX_GPIO_Init+0x210>)
 8001c54:	f002 fe14 	bl	8004880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	4844      	ldr	r0, [pc, #272]	@ (8001d70 <MX_GPIO_Init+0x214>)
 8001c5e:	f002 fe0f 	bl	8004880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c68:	4b42      	ldr	r3, [pc, #264]	@ (8001d74 <MX_GPIO_Init+0x218>)
 8001c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	4619      	mov	r1, r3
 8001c76:	4840      	ldr	r0, [pc, #256]	@ (8001d78 <MX_GPIO_Init+0x21c>)
 8001c78:	f002 fca4 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c80:	2301      	movs	r3, #1
 8001c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	4619      	mov	r1, r3
 8001c92:	4835      	ldr	r0, [pc, #212]	@ (8001d68 <MX_GPIO_Init+0x20c>)
 8001c94:	f002 fc96 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001c98:	2310      	movs	r3, #16
 8001c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4834      	ldr	r0, [pc, #208]	@ (8001d7c <MX_GPIO_Init+0x220>)
 8001cac:	f002 fc8a 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	f107 031c 	add.w	r3, r7, #28
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4829      	ldr	r0, [pc, #164]	@ (8001d6c <MX_GPIO_Init+0x210>)
 8001cc8:	f002 fc7c 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8001ccc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4822      	ldr	r0, [pc, #136]	@ (8001d6c <MX_GPIO_Init+0x210>)
 8001ce2:	f002 fc6f 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001ce6:	2310      	movs	r3, #16
 8001ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	481c      	ldr	r0, [pc, #112]	@ (8001d70 <MX_GPIO_Init+0x214>)
 8001cfe:	f002 fc61 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d06:	4b1b      	ldr	r3, [pc, #108]	@ (8001d74 <MX_GPIO_Init+0x218>)
 8001d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	4816      	ldr	r0, [pc, #88]	@ (8001d70 <MX_GPIO_Init+0x214>)
 8001d16:	f002 fc55 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001d1a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001d2c:	230a      	movs	r3, #10
 8001d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	4619      	mov	r1, r3
 8001d36:	4811      	ldr	r0, [pc, #68]	@ (8001d7c <MX_GPIO_Init+0x220>)
 8001d38:	f002 fc44 	bl	80045c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8001d3c:	23c0      	movs	r3, #192	@ 0xc0
 8001d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	4619      	mov	r1, r3
 8001d56:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <MX_GPIO_Init+0x210>)
 8001d58:	f002 fc34 	bl	80045c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d5c:	bf00      	nop
 8001d5e:	3730      	adds	r7, #48	@ 0x30
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	44020c00 	.word	0x44020c00
 8001d68:	42021400 	.word	0x42021400
 8001d6c:	42020400 	.word	0x42020400
 8001d70:	42021800 	.word	0x42021800
 8001d74:	10110000 	.word	0x10110000
 8001d78:	42020800 	.word	0x42020800
 8001d7c:	42020000 	.word	0x42020000

08001d80 <Netif_Config>:
/**
 * @brief  Setup the network interface
 * @param  None
 * @retval None
 */
static void Netif_Config(void) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af04      	add	r7, sp, #16
	ip_addr_t ipaddr;
	ip_addr_t netmask;
	ip_addr_t gw;

#if LWIP_DHCP
	ip_addr_set_zero_ip4(&ipaddr);
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
	ip_addr_set_zero_ip4(&netmask);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
	ip_addr_set_zero_ip4(&gw);
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);

#endif

	/* add the network interface */
	netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init,
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	f107 0208 	add.w	r2, r7, #8
 8001d98:	f107 010c 	add.w	r1, r7, #12
 8001d9c:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <Netif_Config+0x50>)
 8001d9e:	9002      	str	r0, [sp, #8]
 8001da0:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <Netif_Config+0x54>)
 8001da2:	9001      	str	r0, [sp, #4]
 8001da4:	2000      	movs	r0, #0
 8001da6:	9000      	str	r0, [sp, #0]
 8001da8:	480b      	ldr	r0, [pc, #44]	@ (8001dd8 <Netif_Config+0x58>)
 8001daa:	f00b f9dd 	bl	800d168 <netif_add>
			&ethernet_input);

	/*  Registers the default network interface */
	netif_set_default(&gnetif);
 8001dae:	480a      	ldr	r0, [pc, #40]	@ (8001dd8 <Netif_Config+0x58>)
 8001db0:	f00b fb8a 	bl	800d4c8 <netif_set_default>

#if LWIP_NETIF_LINK_CALLBACK
	netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8001db4:	4909      	ldr	r1, [pc, #36]	@ (8001ddc <Netif_Config+0x5c>)
 8001db6:	4808      	ldr	r0, [pc, #32]	@ (8001dd8 <Netif_Config+0x58>)
 8001db8:	f00b fc54 	bl	800d664 <netif_set_link_callback>

	dhcp_start(&gnetif);
 8001dbc:	4806      	ldr	r0, [pc, #24]	@ (8001dd8 <Netif_Config+0x58>)
 8001dbe:	f013 f891 	bl	8014ee4 <dhcp_start>

	ethernet_link_status_updated(&gnetif);
 8001dc2:	4805      	ldr	r0, [pc, #20]	@ (8001dd8 <Netif_Config+0x58>)
 8001dc4:	f00a f8b0 	bl	800bf28 <ethernet_link_status_updated>

#endif
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	08018979 	.word	0x08018979
 8001dd4:	0800c35d 	.word	0x0800c35d
 8001dd8:	200003b4 	.word	0x200003b4
 8001ddc:	0800bf29 	.word	0x0800bf29

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i
}
 8001de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <Error_Handler+0x8>

08001dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  /* Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001df0:	f003 fbb2 	bl	8005558 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08e      	sub	sp, #56	@ 0x38
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a59      	ldr	r2, [pc, #356]	@ (8001f7c <HAL_ETH_MspInit+0x184>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	f040 80ab 	bne.w	8001f72 <HAL_ETH_MspInit+0x17a>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001e1c:	4b58      	ldr	r3, [pc, #352]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e22:	4a57      	ldr	r2, [pc, #348]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e2c:	4b54      	ldr	r3, [pc, #336]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e36:	623b      	str	r3, [r7, #32]
 8001e38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8001e3a:	4b51      	ldr	r3, [pc, #324]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e40:	4a4f      	ldr	r2, [pc, #316]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e46:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8001e58:	4b49      	ldr	r3, [pc, #292]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e5e:	4a48      	ldr	r2, [pc, #288]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e68:	4b45      	ldr	r3, [pc, #276]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e76:	4b42      	ldr	r3, [pc, #264]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e7c:	4a40      	ldr	r2, [pc, #256]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e86:	4b3e      	ldr	r3, [pc, #248]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e94:	4b3a      	ldr	r3, [pc, #232]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e9a:	4a39      	ldr	r2, [pc, #228]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ea4:	4b36      	ldr	r3, [pc, #216]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	4b33      	ldr	r3, [pc, #204]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eb8:	4a31      	ldr	r2, [pc, #196]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001edc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ee0:	4b27      	ldr	r3, [pc, #156]	@ (8001f80 <HAL_ETH_MspInit+0x188>)
 8001ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001eee:	2332      	movs	r3, #50	@ 0x32
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001efa:	2302      	movs	r3, #2
 8001efc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001efe:	230b      	movs	r3, #11
 8001f00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f06:	4619      	mov	r1, r3
 8001f08:	481e      	ldr	r0, [pc, #120]	@ (8001f84 <HAL_ETH_MspInit+0x18c>)
 8001f0a:	f002 fb5b 	bl	80045c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001f0e:	2386      	movs	r3, #134	@ 0x86
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f1e:	230b      	movs	r3, #11
 8001f20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	4817      	ldr	r0, [pc, #92]	@ (8001f88 <HAL_ETH_MspInit+0x190>)
 8001f2a:	f002 fb4b 	bl	80045c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f40:	230b      	movs	r3, #11
 8001f42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4810      	ldr	r0, [pc, #64]	@ (8001f8c <HAL_ETH_MspInit+0x194>)
 8001f4c:	f002 fb3a 	bl	80045c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8001f50:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f62:	230b      	movs	r3, #11
 8001f64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4808      	ldr	r0, [pc, #32]	@ (8001f90 <HAL_ETH_MspInit+0x198>)
 8001f6e:	f002 fb29 	bl	80045c4 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8001f72:	bf00      	nop
 8001f74:	3738      	adds	r7, #56	@ 0x38
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40028000 	.word	0x40028000
 8001f80:	44020c00 	.word	0x44020c00
 8001f84:	42020800 	.word	0x42020800
 8001f88:	42020000 	.word	0x42020000
 8001f8c:	42020400 	.word	0x42020400
 8001f90:	42021800 	.word	0x42021800

08001f94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b0cc      	sub	sp, #304	@ 0x130
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fa2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001fb8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	f017 f855 	bl	8019074 <memset>
  if(hi2c->Instance==I2C1)
 8001fca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001fce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a33      	ldr	r2, [pc, #204]	@ (80020a4 <HAL_I2C_MspInit+0x110>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d15e      	bne.n	800209a <HAL_I2C_MspInit+0x106>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001fe0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001fe4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ff0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ff4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffe:	f107 0310 	add.w	r3, r7, #16
 8002002:	4618      	mov	r0, r3
 8002004:	f004 fa32 	bl	800646c <HAL_RCCEx_PeriphCLKConfig>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 800200e:	f7ff fee7 	bl	8001de0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	4b25      	ldr	r3, [pc, #148]	@ (80020a8 <HAL_I2C_MspInit+0x114>)
 8002014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002018:	4a23      	ldr	r2, [pc, #140]	@ (80020a8 <HAL_I2C_MspInit+0x114>)
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002022:	4b21      	ldr	r3, [pc, #132]	@ (80020a8 <HAL_I2C_MspInit+0x114>)
 8002024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002028:	f003 0202 	and.w	r2, r3, #2
 800202c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002030:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800203a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800203e:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002040:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002044:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002048:	2312      	movs	r3, #18
 800204a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800205a:	2304      	movs	r3, #4
 800205c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002060:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002064:	4619      	mov	r1, r3
 8002066:	4811      	ldr	r0, [pc, #68]	@ (80020ac <HAL_I2C_MspInit+0x118>)
 8002068:	f002 faac 	bl	80045c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <HAL_I2C_MspInit+0x114>)
 800206e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002072:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <HAL_I2C_MspInit+0x114>)
 8002074:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002078:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800207c:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <HAL_I2C_MspInit+0x114>)
 800207e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002082:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002086:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800208a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002094:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002098:	681b      	ldr	r3, [r3, #0]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800209a:	bf00      	nop
 800209c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40005400 	.word	0x40005400
 80020a8:	44020c00 	.word	0x44020c00
 80020ac:	42020400 	.word	0x42020400

080020b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <NMI_Handler+0x4>

080020b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <HardFault_Handler+0x4>

080020c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c4:	bf00      	nop
 80020c6:	e7fd      	b.n	80020c4 <MemManage_Handler+0x4>

080020c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <BusFault_Handler+0x4>

080020d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <UsageFault_Handler+0x4>

080020d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002106:	f000 fca3 	bl	8002a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}

0800210e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  return 1;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_kill>:

int _kill(int pid, int sig)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002128:	f016 fff2 	bl	8019110 <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	2216      	movs	r2, #22
 8002130:	601a      	str	r2, [r3, #0]
  return -1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <_exit>:

void _exit (int status)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002146:	f04f 31ff 	mov.w	r1, #4294967295
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ffe7 	bl	800211e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <_exit+0x12>

08002154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e00a      	b.n	800217c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002166:	f3af 8000 	nop.w
 800216a:	4601      	mov	r1, r0
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	60ba      	str	r2, [r7, #8]
 8002172:	b2ca      	uxtb	r2, r1
 8002174:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	dbf0      	blt.n	8002166 <_read+0x12>
  }

  return len;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b086      	sub	sp, #24
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e009      	b.n	80021b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	60ba      	str	r2, [r7, #8]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fa39 	bl	8002620 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	dbf1      	blt.n	80021a0 <_write+0x12>
  }
  return len;
 80021bc:	687b      	ldr	r3, [r7, #4]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_close>:

int _close(int file)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021ee:	605a      	str	r2, [r3, #4]
  return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_isatty>:

int _isatty(int file)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002238:	4a14      	ldr	r2, [pc, #80]	@ (800228c <_sbrk+0x5c>)
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <_sbrk+0x60>)
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002244:	4b13      	ldr	r3, [pc, #76]	@ (8002294 <_sbrk+0x64>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <_sbrk+0x64>)
 800224e:	4a12      	ldr	r2, [pc, #72]	@ (8002298 <_sbrk+0x68>)
 8002250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	429a      	cmp	r2, r3
 800225e:	d207      	bcs.n	8002270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002260:	f016 ff56 	bl	8019110 <__errno>
 8002264:	4603      	mov	r3, r0
 8002266:	220c      	movs	r2, #12
 8002268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	e009      	b.n	8002284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002270:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002276:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	4a05      	ldr	r2, [pc, #20]	@ (8002294 <_sbrk+0x64>)
 8002280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002282:	68fb      	ldr	r3, [r7, #12]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200a0000 	.word	0x200a0000
 8002290:	00000400 	.word	0x00000400
 8002294:	20000308 	.word	0x20000308
 8002298:	2000a5f0 	.word	0x2000a5f0

0800229c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022a2:	4b35      	ldr	r3, [pc, #212]	@ (8002378 <SystemInit+0xdc>)
 80022a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a8:	4a33      	ldr	r2, [pc, #204]	@ (8002378 <SystemInit+0xdc>)
 80022aa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80022b2:	4b32      	ldr	r3, [pc, #200]	@ (800237c <SystemInit+0xe0>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80022b8:	4b30      	ldr	r3, [pc, #192]	@ (800237c <SystemInit+0xe0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80022be:	4b2f      	ldr	r3, [pc, #188]	@ (800237c <SystemInit+0xe0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80022c4:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <SystemInit+0xe0>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	492c      	ldr	r1, [pc, #176]	@ (800237c <SystemInit+0xe0>)
 80022ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <SystemInit+0xe4>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80022d0:	4b2a      	ldr	r3, [pc, #168]	@ (800237c <SystemInit+0xe0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80022d6:	4b29      	ldr	r3, [pc, #164]	@ (800237c <SystemInit+0xe0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80022dc:	4b27      	ldr	r3, [pc, #156]	@ (800237c <SystemInit+0xe0>)
 80022de:	2200      	movs	r2, #0
 80022e0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80022e2:	4b26      	ldr	r3, [pc, #152]	@ (800237c <SystemInit+0xe0>)
 80022e4:	4a27      	ldr	r2, [pc, #156]	@ (8002384 <SystemInit+0xe8>)
 80022e6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80022e8:	4b24      	ldr	r3, [pc, #144]	@ (800237c <SystemInit+0xe0>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80022ee:	4b23      	ldr	r3, [pc, #140]	@ (800237c <SystemInit+0xe0>)
 80022f0:	4a24      	ldr	r2, [pc, #144]	@ (8002384 <SystemInit+0xe8>)
 80022f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80022f4:	4b21      	ldr	r3, [pc, #132]	@ (800237c <SystemInit+0xe0>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80022fa:	4b20      	ldr	r3, [pc, #128]	@ (800237c <SystemInit+0xe0>)
 80022fc:	4a21      	ldr	r2, [pc, #132]	@ (8002384 <SystemInit+0xe8>)
 80022fe:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002300:	4b1e      	ldr	r3, [pc, #120]	@ (800237c <SystemInit+0xe0>)
 8002302:	2200      	movs	r2, #0
 8002304:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002306:	4b1d      	ldr	r3, [pc, #116]	@ (800237c <SystemInit+0xe0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1c      	ldr	r2, [pc, #112]	@ (800237c <SystemInit+0xe0>)
 800230c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002310:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002312:	4b1a      	ldr	r3, [pc, #104]	@ (800237c <SystemInit+0xe0>)
 8002314:	2200      	movs	r2, #0
 8002316:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002318:	4b17      	ldr	r3, [pc, #92]	@ (8002378 <SystemInit+0xdc>)
 800231a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800231e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002320:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <SystemInit+0xec>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002328:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002330:	d003      	beq.n	800233a <SystemInit+0x9e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002338:	d117      	bne.n	800236a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800233a:	4b13      	ldr	r3, [pc, #76]	@ (8002388 <SystemInit+0xec>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <SystemInit+0xec>)
 8002348:	4a10      	ldr	r2, [pc, #64]	@ (800238c <SystemInit+0xf0>)
 800234a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800234c:	4b0e      	ldr	r3, [pc, #56]	@ (8002388 <SystemInit+0xec>)
 800234e:	4a10      	ldr	r2, [pc, #64]	@ (8002390 <SystemInit+0xf4>)
 8002350:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002352:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <SystemInit+0xec>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4a0c      	ldr	r2, [pc, #48]	@ (8002388 <SystemInit+0xec>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <SystemInit+0xec>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4a09      	ldr	r2, [pc, #36]	@ (8002388 <SystemInit+0xec>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	61d3      	str	r3, [r2, #28]
  }
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00
 800237c:	44020c00 	.word	0x44020c00
 8002380:	eae2eae3 	.word	0xeae2eae3
 8002384:	01010280 	.word	0x01010280
 8002388:	40022000 	.word	0x40022000
 800238c:	08192a3b 	.word	0x08192a3b
 8002390:	4c5d6e7f 	.word	0x4c5d6e7f

08002394 <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 800239a:	f011 ff33 	bl	8014204 <udp_new>
 800239e:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 0, 111);
 80023a0:	4b0c      	ldr	r3, [pc, #48]	@ (80023d4 <udpServer_init+0x40>)
 80023a2:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, IP_ADDR_ANY, 7);  // 7 is the server UDP port
 80023a4:	2207      	movs	r2, #7
 80023a6:	490c      	ldr	r1, [pc, #48]	@ (80023d8 <udpServer_init+0x44>)
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f011 fdf3 	bl	8013f94 <udp_bind>
 80023ae:	4603      	mov	r3, r0
 80023b0:	72fb      	strb	r3, [r7, #11]

   //BMP180_Start();

   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 80023b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <udpServer_init+0x32>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 80023ba:	2200      	movs	r2, #0
 80023bc:	4907      	ldr	r1, [pc, #28]	@ (80023dc <udpServer_init+0x48>)
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f011 fed8 	bl	8014174 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 80023c4:	e002      	b.n	80023cc <udpServer_init+0x38>
	   udp_remove(upcb);
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f011 fee8 	bl	801419c <udp_remove>
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	6f00a8c0 	.word	0x6f00a8c0
 80023d8:	0801d41c 	.word	0x0801d41c
 80023dc:	080023e1 	.word	0x080023e1

080023e0 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0ac      	sub	sp, #176	@ 0xb0
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
//	Temperature = BMP180_GetTemp();
//	Pressure = BMP180_GetPress(3);
//	Altitude = BMP180_GetAlt(3);

	/* Get the IP of the Client */
	char *remoteIP = ipaddr_ntoa(addr);
 80023ee:	6838      	ldr	r0, [r7, #0]
 80023f0:	f015 fbfe 	bl	8017bf0 <ip4addr_ntoa>
 80023f4:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

	char buf[128];

    // 1. Read BMP180 values
    Temperature = BMP180_GetTemp();
 80023f8:	f7fe fee4 	bl	80011c4 <BMP180_GetTemp>
 80023fc:	eef0 7a40 	vmov.f32	s15, s0
 8002400:	4b3c      	ldr	r3, [pc, #240]	@ (80024f4 <udp_receive_callback+0x114>)
 8002402:	edc3 7a00 	vstr	s15, [r3]
    Pressure    = BMP180_GetPress(3);
 8002406:	2003      	movs	r0, #3
 8002408:	f7fe ffd8 	bl	80013bc <BMP180_GetPress>
 800240c:	eef0 7a40 	vmov.f32	s15, s0
 8002410:	4b39      	ldr	r3, [pc, #228]	@ (80024f8 <udp_receive_callback+0x118>)
 8002412:	edc3 7a00 	vstr	s15, [r3]
    Altitude    = BMP180_GetAlt(3);
 8002416:	2003      	movs	r0, #3
 8002418:	f7ff fa02 	bl	8001820 <BMP180_GetAlt>
 800241c:	eef0 7a40 	vmov.f32	s15, s0
 8002420:	4b36      	ldr	r3, [pc, #216]	@ (80024fc <udp_receive_callback+0x11c>)
 8002422:	edc3 7a00 	vstr	s15, [r3]

    int temp = (int)(Temperature + 0.5f);
 8002426:	4b33      	ldr	r3, [pc, #204]	@ (80024f4 <udp_receive_callback+0x114>)
 8002428:	edd3 7a00 	vldr	s15, [r3]
 800242c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002430:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002438:	ee17 3a90 	vmov	r3, s15
 800243c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    int pres = (int)(Pressure + 0.5f);
 8002440:	4b2d      	ldr	r3, [pc, #180]	@ (80024f8 <udp_receive_callback+0x118>)
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800244a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800244e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002452:	ee17 3a90 	vmov	r3, s15
 8002456:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    int alt = (int)(Altitude + 0.5f);
 800245a:	4b28      	ldr	r3, [pc, #160]	@ (80024fc <udp_receive_callback+0x11c>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002464:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800246c:	ee17 3a90 	vmov	r3, s15
 8002470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    int len = snprintf(buf, sizeof(buf),
 8002474:	f107 0010 	add.w	r0, r7, #16
 8002478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002488:	4a1d      	ldr	r2, [pc, #116]	@ (8002500 <udp_receive_callback+0x120>)
 800248a:	2180      	movs	r1, #128	@ 0x80
 800248c:	f016 fcba 	bl	8018e04 <sniprintf>
 8002490:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
                       "Temp: %d C, Press: %d Pa, Alt: %d m\n",
                       temp, pres, alt);

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8002494:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002498:	b29b      	uxth	r3, r3
 800249a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800249e:	4619      	mov	r1, r3
 80024a0:	2036      	movs	r0, #54	@ 0x36
 80024a2:	f00b f97b 	bl	800d79c <pbuf_alloc>
 80024a6:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, len);
 80024aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	4619      	mov	r1, r3
 80024b6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80024ba:	f00b febb 	bl	800e234 <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 80024be:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 80024c2:	461a      	mov	r2, r3
 80024c4:	6839      	ldr	r1, [r7, #0]
 80024c6:	68b8      	ldr	r0, [r7, #8]
 80024c8:	f011 fde0 	bl	801408c <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 80024cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80024d0:	68b8      	ldr	r0, [r7, #8]
 80024d2:	f011 fc01 	bl	8013cd8 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 80024d6:	68b8      	ldr	r0, [r7, #8]
 80024d8:	f011 fe30 	bl	801413c <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 80024dc:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80024e0:	f00b fc42 	bl	800dd68 <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f00b fc3f 	bl	800dd68 <pbuf_free>
}
 80024ea:	bf00      	nop
 80024ec:	37a8      	adds	r7, #168	@ 0xa8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000030c 	.word	0x2000030c
 80024f8:	20000310 	.word	0x20000310
 80024fc:	20000314 	.word	0x20000314
 8002500:	0801aeb8 	.word	0x0801aeb8

08002504 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002504:	480d      	ldr	r0, [pc, #52]	@ (800253c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002506:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002508:	f7ff fec8 	bl	800229c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800250c:	480c      	ldr	r0, [pc, #48]	@ (8002540 <LoopForever+0x6>)
  ldr r1, =_edata
 800250e:	490d      	ldr	r1, [pc, #52]	@ (8002544 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002510:	4a0d      	ldr	r2, [pc, #52]	@ (8002548 <LoopForever+0xe>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002514:	e002      	b.n	800251c <LoopCopyDataInit>

08002516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251a:	3304      	adds	r3, #4

0800251c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800251c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002520:	d3f9      	bcc.n	8002516 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002522:	4a0a      	ldr	r2, [pc, #40]	@ (800254c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002524:	4c0a      	ldr	r4, [pc, #40]	@ (8002550 <LoopForever+0x16>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002528:	e001      	b.n	800252e <LoopFillZerobss>

0800252a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800252c:	3204      	adds	r2, #4

0800252e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002530:	d3fb      	bcc.n	800252a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002532:	f016 fdf3 	bl	801911c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002536:	f7ff f9c3 	bl	80018c0 <main>

0800253a <LoopForever>:

LoopForever:
    b LoopForever
 800253a:	e7fe      	b.n	800253a <LoopForever>
  ldr   r0, =_estack
 800253c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002544:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002548:	0801d560 	.word	0x0801d560
  ldr r2, =_sbss
 800254c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002550:	2000a5f0 	.word	0x2000a5f0

08002554 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002554:	e7fe      	b.n	8002554 <ADC1_IRQHandler>
	...

08002558 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	6039      	str	r1, [r7, #0]
 8002562:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800256e:	f06f 0301 	mvn.w	r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	e018      	b.n	80025a8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	2294      	movs	r2, #148	@ 0x94
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	4a0d      	ldr	r2, [pc, #52]	@ (80025b4 <BSP_COM_Init+0x5c>)
 8002580:	4413      	add	r3, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f868 	bl	8002658 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	2294      	movs	r2, #148	@ 0x94
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	4a08      	ldr	r2, [pc, #32]	@ (80025b4 <BSP_COM_Init+0x5c>)
 8002592:	4413      	add	r3, r2
 8002594:	6839      	ldr	r1, [r7, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f80e 	bl	80025b8 <MX_USART_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80025a2:	f06f 0303 	mvn.w	r3, #3
 80025a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80025a8:	68fb      	ldr	r3, [r7, #12]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000318 	.word	0x20000318

080025b8 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80025c2:	4b16      	ldr	r3, [pc, #88]	@ (800261c <MX_USART_Init+0x64>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	220c      	movs	r2, #12
 80025d6:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	895b      	ldrh	r3, [r3, #10]
 80025dc:	461a      	mov	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	891b      	ldrh	r3, [r3, #8]
 80025ee:	461a      	mov	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	899b      	ldrh	r3, [r3, #12]
 80025f8:	461a      	mov	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002604:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f008 ff85 	bl	800b51c <HAL_UART_Init>
 8002612:	4603      	mov	r3, r0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000004 	.word	0x20000004

08002620 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002628:	4b09      	ldr	r3, [pc, #36]	@ (8002650 <__io_putchar+0x30>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	2394      	movs	r3, #148	@ 0x94
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	4a07      	ldr	r2, [pc, #28]	@ (8002654 <__io_putchar+0x34>)
 8002636:	1898      	adds	r0, r3, r2
 8002638:	1d39      	adds	r1, r7, #4
 800263a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800263e:	2201      	movs	r2, #1
 8002640:	f008 ffc6 	bl	800b5d0 <HAL_UART_Transmit>
  return ch;
 8002644:	687b      	ldr	r3, [r7, #4]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200003ac 	.word	0x200003ac
 8002654:	20000318 	.word	0x20000318

08002658 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	@ 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002660:	4b27      	ldr	r3, [pc, #156]	@ (8002700 <COM1_MspInit+0xa8>)
 8002662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002666:	4a26      	ldr	r2, [pc, #152]	@ (8002700 <COM1_MspInit+0xa8>)
 8002668:	f043 0308 	orr.w	r3, r3, #8
 800266c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002670:	4b23      	ldr	r3, [pc, #140]	@ (8002700 <COM1_MspInit+0xa8>)
 8002672:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800267e:	4b20      	ldr	r3, [pc, #128]	@ (8002700 <COM1_MspInit+0xa8>)
 8002680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002684:	4a1e      	ldr	r2, [pc, #120]	@ (8002700 <COM1_MspInit+0xa8>)
 8002686:	f043 0308 	orr.w	r3, r3, #8
 800268a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800268e:	4b1c      	ldr	r3, [pc, #112]	@ (8002700 <COM1_MspInit+0xa8>)
 8002690:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800269c:	4b18      	ldr	r3, [pc, #96]	@ (8002700 <COM1_MspInit+0xa8>)
 800269e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026a2:	4a17      	ldr	r2, [pc, #92]	@ (8002700 <COM1_MspInit+0xa8>)
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026a8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80026ac:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <COM1_MspInit+0xa8>)
 80026ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80026ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026be:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80026c4:	2302      	movs	r3, #2
 80026c6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80026c8:	2301      	movs	r3, #1
 80026ca:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80026cc:	2307      	movs	r3, #7
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4619      	mov	r1, r3
 80026d6:	480b      	ldr	r0, [pc, #44]	@ (8002704 <COM1_MspInit+0xac>)
 80026d8:	f001 ff74 	bl	80045c4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80026dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026e0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80026e6:	2307      	movs	r3, #7
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	4804      	ldr	r0, [pc, #16]	@ (8002704 <COM1_MspInit+0xac>)
 80026f2:	f001 ff67 	bl	80045c4 <HAL_GPIO_Init>
}
 80026f6:	bf00      	nop
 80026f8:	3728      	adds	r7, #40	@ 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	44020c00 	.word	0x44020c00
 8002704:	42020c00 	.word	0x42020c00

08002708 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <LAN8742_RegisterBusIO+0x28>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <LAN8742_RegisterBusIO+0x28>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <LAN8742_RegisterBusIO+0x28>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002730:	f04f 33ff 	mov.w	r3, #4294967295
 8002734:	e014      	b.n	8002760 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d139      	bne.n	80027fc <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	e01c      	b.n	80027dc <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f107 020c 	add.w	r2, r7, #12
 80027aa:	2112      	movs	r1, #18
 80027ac:	6978      	ldr	r0, [r7, #20]
 80027ae:	4798      	blx	r3
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da03      	bge.n	80027be <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80027b6:	f06f 0304 	mvn.w	r3, #4
 80027ba:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80027bc:	e00b      	b.n	80027d6 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d105      	bne.n	80027d6 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
         break;
 80027d4:	e005      	b.n	80027e2 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	3301      	adds	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b1f      	cmp	r3, #31
 80027e0:	d9df      	bls.n	80027a2 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b1f      	cmp	r3, #31
 80027e8:	d902      	bls.n	80027f0 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80027ea:	f06f 0302 	mvn.w	r3, #2
 80027ee:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80027fc:	693b      	ldr	r3, [r7, #16]
 }
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6810      	ldr	r0, [r2, #0]
 800281a:	f107 020c 	add.w	r2, r7, #12
 800281e:	2101      	movs	r1, #1
 8002820:	4798      	blx	r3
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	da02      	bge.n	800282e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002828:	f06f 0304 	mvn.w	r3, #4
 800282c:	e06e      	b.n	800290c <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6810      	ldr	r0, [r2, #0]
 8002836:	f107 020c 	add.w	r2, r7, #12
 800283a:	2101      	movs	r1, #1
 800283c:	4798      	blx	r3
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	da02      	bge.n	800284a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002844:	f06f 0304 	mvn.w	r3, #4
 8002848:	e060      	b.n	800290c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002854:	2301      	movs	r3, #1
 8002856:	e059      	b.n	800290c <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6810      	ldr	r0, [r2, #0]
 8002860:	f107 020c 	add.w	r2, r7, #12
 8002864:	2100      	movs	r1, #0
 8002866:	4798      	blx	r3
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	da02      	bge.n	8002874 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800286e:	f06f 0304 	mvn.w	r3, #4
 8002872:	e04b      	b.n	800290c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11b      	bne.n	80028b6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d006      	beq.n	8002896 <LAN8742_GetLinkState+0x90>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002892:	2302      	movs	r3, #2
 8002894:	e03a      	b.n	800290c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e033      	b.n	800290c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80028ae:	2304      	movs	r3, #4
 80028b0:	e02c      	b.n	800290c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80028b2:	2305      	movs	r3, #5
 80028b4:	e02a      	b.n	800290c <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6810      	ldr	r0, [r2, #0]
 80028be:	f107 020c 	add.w	r2, r7, #12
 80028c2:	211f      	movs	r1, #31
 80028c4:	4798      	blx	r3
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	da02      	bge.n	80028d2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80028cc:	f06f 0304 	mvn.w	r3, #4
 80028d0:	e01c      	b.n	800290c <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80028dc:	2306      	movs	r3, #6
 80028de:	e015      	b.n	800290c <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 031c 	and.w	r3, r3, #28
 80028e6:	2b18      	cmp	r3, #24
 80028e8:	d101      	bne.n	80028ee <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80028ea:	2302      	movs	r3, #2
 80028ec:	e00e      	b.n	800290c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 031c 	and.w	r3, r3, #28
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d101      	bne.n	80028fc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e007      	b.n	800290c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 031c 	and.w	r3, r3, #28
 8002902:	2b14      	cmp	r3, #20
 8002904:	d101      	bne.n	800290a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002906:	2304      	movs	r3, #4
 8002908:	e000      	b.n	800290c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800290a:	2305      	movs	r3, #5
    }
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002918:	2003      	movs	r0, #3
 800291a:	f000 f982 	bl	8002c22 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800291e:	f003 fc1b 	bl	8006158 <HAL_RCC_GetSysClockFreq>
 8002922:	4602      	mov	r2, r0
 8002924:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <HAL_Init+0x44>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	490b      	ldr	r1, [pc, #44]	@ (800295c <HAL_Init+0x48>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	4a0a      	ldr	r2, [pc, #40]	@ (8002960 <HAL_Init+0x4c>)
 8002936:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002938:	2004      	movs	r0, #4
 800293a:	f000 f9b9 	bl	8002cb0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800293e:	200f      	movs	r0, #15
 8002940:	f000 f810 	bl	8002964 <HAL_InitTick>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e002      	b.n	8002954 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800294e:	f7ff fa4d 	bl	8001dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	44020c00 	.word	0x44020c00
 800295c:	0801d2f8 	.word	0x0801d2f8
 8002960:	20000000 	.word	0x20000000

08002964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002970:	4b33      	ldr	r3, [pc, #204]	@ (8002a40 <HAL_InitTick+0xdc>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e05c      	b.n	8002a36 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800297c:	4b31      	ldr	r3, [pc, #196]	@ (8002a44 <HAL_InitTick+0xe0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d10c      	bne.n	80029a2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002988:	4b2f      	ldr	r3, [pc, #188]	@ (8002a48 <HAL_InitTick+0xe4>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a40 <HAL_InitTick+0xdc>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4619      	mov	r1, r3
 8002992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002996:	fbb3 f3f1 	udiv	r3, r3, r1
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e037      	b.n	8002a12 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80029a2:	f000 f9dd 	bl	8002d60 <HAL_SYSTICK_GetCLKSourceConfig>
 80029a6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d023      	beq.n	80029f6 <HAL_InitTick+0x92>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d82d      	bhi.n	8002a10 <HAL_InitTick+0xac>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_InitTick+0x5e>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d00d      	beq.n	80029dc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80029c0:	e026      	b.n	8002a10 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80029c2:	4b21      	ldr	r3, [pc, #132]	@ (8002a48 <HAL_InitTick+0xe4>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <HAL_InitTick+0xdc>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	4619      	mov	r1, r3
 80029cc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80029d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	60fb      	str	r3, [r7, #12]
        break;
 80029da:	e01a      	b.n	8002a12 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80029dc:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <HAL_InitTick+0xdc>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80029ea:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80029ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f2:	60fb      	str	r3, [r7, #12]
        break;
 80029f4:	e00d      	b.n	8002a12 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80029f6:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <HAL_InitTick+0xdc>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a00:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	60fb      	str	r3, [r7, #12]
        break;
 8002a0e:	e000      	b.n	8002a12 <HAL_InitTick+0xae>
        break;
 8002a10:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f92a 	bl	8002c6c <HAL_SYSTICK_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e009      	b.n	8002a36 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a22:	2200      	movs	r2, #0
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2a:	f000 f905 	bl	8002c38 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002a2e:	4a07      	ldr	r2, [pc, #28]	@ (8002a4c <HAL_InitTick+0xe8>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000000c 	.word	0x2000000c
 8002a44:	e000e010 	.word	0xe000e010
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	20000008 	.word	0x20000008

08002a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a54:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_IncTick+0x20>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_IncTick+0x24>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <HAL_IncTick+0x24>)
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	2000000c 	.word	0x2000000c
 8002a74:	200003b0 	.word	0x200003b0

08002a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	@ (8002a8c <HAL_GetTick+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	200003b0 	.word	0x200003b0

08002a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7ff ffee 	bl	8002a78 <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d005      	beq.n	8002ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <HAL_Delay+0x44>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ab6:	bf00      	nop
 8002ab8:	f7ff ffde 	bl	8002a78 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d8f7      	bhi.n	8002ab8 <HAL_Delay+0x28>
  {
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	2000000c 	.word	0x2000000c

08002ad8 <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8002ae0:	4b07      	ldr	r3, [pc, #28]	@ (8002b00 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8002ae2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002ae6:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002aea:	4905      	ldr	r1, [pc, #20]	@ (8002b00 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	44000400 	.word	0x44000400

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b36:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60d3      	str	r3, [r2, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db0a      	blt.n	8002b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	490c      	ldr	r1, [pc, #48]	@ (8002bb4 <__NVIC_SetPriority+0x4c>)
 8002b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b86:	0112      	lsls	r2, r2, #4
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b90:	e00a      	b.n	8002ba8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4908      	ldr	r1, [pc, #32]	@ (8002bb8 <__NVIC_SetPriority+0x50>)
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	3b04      	subs	r3, #4
 8002ba0:	0112      	lsls	r2, r2, #4
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	761a      	strb	r2, [r3, #24]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000e100 	.word	0xe000e100
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	@ 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f1c3 0307 	rsb	r3, r3, #7
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	bf28      	it	cs
 8002bda:	2304      	movcs	r3, #4
 8002bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3304      	adds	r3, #4
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d902      	bls.n	8002bec <NVIC_EncodePriority+0x30>
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3b03      	subs	r3, #3
 8002bea:	e000      	b.n	8002bee <NVIC_EncodePriority+0x32>
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	401a      	ands	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c04:	f04f 31ff 	mov.w	r1, #4294967295
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	43d9      	mvns	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c14:	4313      	orrs	r3, r2
         );
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3724      	adds	r7, #36	@ 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff ff6a 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c46:	f7ff ff81 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002c4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	6978      	ldr	r0, [r7, #20]
 8002c52:	f7ff ffb3 	bl	8002bbc <NVIC_EncodePriority>
 8002c56:	4602      	mov	r2, r0
 8002c58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ff82 	bl	8002b68 <__NVIC_SetPriority>
}
 8002c64:	bf00      	nop
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c7c:	d301      	bcc.n	8002c82 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00d      	b.n	8002c9e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <HAL_SYSTICK_Config+0x40>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002c8a:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <HAL_SYSTICK_Config+0x40>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <HAL_SYSTICK_Config+0x40>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a05      	ldr	r2, [pc, #20]	@ (8002cac <HAL_SYSTICK_Config+0x40>)
 8002c96:	f043 0303 	orr.w	r3, r3, #3
 8002c9a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010

08002cb0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d844      	bhi.n	8002d48 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc4:	08002ce7 	.word	0x08002ce7
 8002cc8:	08002d05 	.word	0x08002d05
 8002ccc:	08002d27 	.word	0x08002d27
 8002cd0:	08002d49 	.word	0x08002d49
 8002cd4:	08002cd9 	.word	0x08002cd9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1e      	ldr	r2, [pc, #120]	@ (8002d58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002cde:	f043 0304 	orr.w	r3, r3, #4
 8002ce2:	6013      	str	r3, [r2, #0]
      break;
 8002ce4:	e031      	b.n	8002d4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a1b      	ldr	r2, [pc, #108]	@ (8002d58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002cf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002cf8:	4a18      	ldr	r2, [pc, #96]	@ (8002d5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002cfa:	f023 030c 	bic.w	r3, r3, #12
 8002cfe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002d02:	e022      	b.n	8002d4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002d04:	4b14      	ldr	r3, [pc, #80]	@ (8002d58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a13      	ldr	r2, [pc, #76]	@ (8002d58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d0a:	f023 0304 	bic.w	r3, r3, #4
 8002d0e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002d10:	4b12      	ldr	r3, [pc, #72]	@ (8002d5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002d12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002d16:	f023 030c 	bic.w	r3, r3, #12
 8002d1a:	4a10      	ldr	r2, [pc, #64]	@ (8002d5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002d1c:	f043 0304 	orr.w	r3, r3, #4
 8002d20:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002d24:	e011      	b.n	8002d4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002d26:	4b0c      	ldr	r3, [pc, #48]	@ (8002d58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d58 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d2c:	f023 0304 	bic.w	r3, r3, #4
 8002d30:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002d34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002d38:	f023 030c 	bic.w	r3, r3, #12
 8002d3c:	4a07      	ldr	r2, [pc, #28]	@ (8002d5c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002d3e:	f043 0308 	orr.w	r3, r3, #8
 8002d42:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002d46:	e000      	b.n	8002d4a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002d48:	bf00      	nop
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e010 	.word	0xe000e010
 8002d5c:	44020c00 	.word	0x44020c00

08002d60 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002d66:	4b17      	ldr	r3, [pc, #92]	@ (8002dc4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002d72:	2304      	movs	r3, #4
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	e01e      	b.n	8002db6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002d78:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002d7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d00f      	beq.n	8002daa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d80f      	bhi.n	8002db0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d003      	beq.n	8002da4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002d9c:	e008      	b.n	8002db0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
        break;
 8002da2:	e008      	b.n	8002db6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002da4:	2301      	movs	r3, #1
 8002da6:	607b      	str	r3, [r7, #4]
        break;
 8002da8:	e005      	b.n	8002db6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002daa:	2302      	movs	r3, #2
 8002dac:	607b      	str	r3, [r7, #4]
        break;
 8002dae:	e002      	b.n	8002db6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002db0:	2300      	movs	r3, #0
 8002db2:	607b      	str	r3, [r7, #4]
        break;
 8002db4:	bf00      	nop
    }
  }
  return systick_source;
 8002db6:	687b      	ldr	r3, [r7, #4]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000e010 	.word	0xe000e010
 8002dc8:	44020c00 	.word	0x44020c00

08002dcc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e0e8      	b.n	8002fb0 <HAL_ETH_Init+0x1e4>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d106      	bne.n	8002df6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff f801 	bl	8001df8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 8002df6:	4b70      	ldr	r3, [pc, #448]	@ (8002fb8 <HAL_ETH_Init+0x1ec>)
 8002df8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002dfc:	4a6e      	ldr	r2, [pc, #440]	@ (8002fb8 <HAL_ETH_Init+0x1ec>)
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002e06:	4b6c      	ldr	r3, [pc, #432]	@ (8002fb8 <HAL_ETH_Init+0x1ec>)
 8002e08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7a1b      	ldrb	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d103      	bne.n	8002e24 <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7ff fe5b 	bl	8002ad8 <HAL_SBS_ETHInterfaceSelect>
 8002e22:	e003      	b.n	8002e2c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 8002e24:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002e28:	f7ff fe56 	bl	8002ad8 <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8002e2c:	4b63      	ldr	r3, [pc, #396]	@ (8002fbc <HAL_ETH_Init+0x1f0>)
 8002e2e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e4a:	f7ff fe15 	bl	8002a78 <HAL_GetTick>
 8002e4e:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002e50:	e011      	b.n	8002e76 <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002e52:	f7ff fe11 	bl	8002a78 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002e60:	d909      	bls.n	8002e76 <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2204      	movs	r2, #4
 8002e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	22e0      	movs	r2, #224	@ 0xe0
 8002e6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e09c      	b.n	8002fb0 <HAL_ETH_Init+0x1e4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e4      	bne.n	8002e52 <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fdcb 	bl	8003a24 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002e8e:	f003 fa8f 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc0 <HAL_ETH_Init+0x1f4>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	0c9a      	lsrs	r2, r3, #18
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3a01      	subs	r2, #1
 8002ea2:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 ffae 	bl	8003e08 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eb4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002eb8:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ec4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ec8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d009      	beq.n	8002eec <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	22e0      	movs	r2, #224	@ 0xe0
 8002ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e061      	b.n	8002fb0 <HAL_ETH_Init+0x1e4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ef4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ef8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002efc:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6952      	ldr	r2, [r2, #20]
 8002f04:	0051      	lsls	r1, r2, #1
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	430b      	orrs	r3, r1
 8002f0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f10:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f001 f814 	bl	8003f42 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f001 f85a 	bl	8003fd4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	3305      	adds	r3, #5
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	021a      	lsls	r2, r3, #8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	4619      	mov	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	3303      	adds	r3, #3
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	061a      	lsls	r2, r3, #24
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	041b      	lsls	r3, r3, #16
 8002f52:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002f5e:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002f6c:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002f6e:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b11      	ldr	r3, [pc, #68]	@ (8002fc4 <HAL_ETH_Init+0x1f8>)
 8002f80:	430b      	orrs	r3, r1
 8002f82:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 8002f96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f9a:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2210      	movs	r2, #16
 8002faa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	44020c00 	.word	0x44020c00
 8002fbc:	44000400 	.word	0x44000400
 8002fc0:	431bde83 	.word	0x431bde83
 8002fc4:	0c020060 	.word	0x0c020060

08002fc8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d153      	bne.n	8003082 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fa0b 	bl	8003404 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0202 	orr.w	r2, r2, #2
 8002ffc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0201 	orr.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800302a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800303a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003046:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003056:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003062:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 800306e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003072:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2240      	movs	r2, #64	@ 0x40
 800307a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
  }
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800309a:	2b40      	cmp	r3, #64	@ 0x40
 800309c:	d13f      	bne.n	800311e <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030be:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030da:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0202 	bic.w	r2, r2, #2
 8003110:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2210      	movs	r2, #16
 8003116:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
  }
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003144:	f043 0201 	orr.w	r2, r3, #1
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07f      	b.n	8003252 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003158:	2b40      	cmp	r3, #64	@ 0x40
 800315a:	d179      	bne.n	8003250 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800315c:	2200      	movs	r2, #0
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 ff94 	bl	800408e <ETH_Prepare_Tx_Descriptors>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d009      	beq.n	8003180 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	f043 0202 	orr.w	r2, r3, #2
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e068      	b.n	8003252 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8003180:	f3bf 8f4f 	dsb	sy
}
 8003184:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	3206      	adds	r2, #6
 800318e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003192:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	629a      	str	r2, [r3, #40]	@ 0x28
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d904      	bls.n	80031b0 <HAL_ETH_Transmit+0x84>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031aa:	1f1a      	subs	r2, r3, #4
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3106      	adds	r1, #6
 80031bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031c4:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 80031c8:	f7ff fc56 	bl	8002a78 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80031ce:	e039      	b.n	8003244 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031d8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80031dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d012      	beq.n	800320a <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ea:	f043 0208 	orr.w	r2, r3, #8
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031fc:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e023      	b.n	8003252 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d018      	beq.n	8003244 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003212:	f7ff fc31 	bl	8002a78 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <HAL_ETH_Transmit+0xfc>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10d      	bne.n	8003244 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	f043 0204 	orr.w	r2, r3, #4
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800323e:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e006      	b.n	8003252 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	dbc1      	blt.n	80031d0 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b08a      	sub	sp, #40	@ 0x28
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  uint32_t descidx_next;
  ETH_DMADescTypeDef *dmarxdesc_next;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	75fb      	strb	r3, [r7, #23]

  if (pAppBuff == NULL)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e0ba      	b.n	80033fc <HAL_ETH_ReadData+0x1a2>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800328c:	2b40      	cmp	r3, #64	@ 0x40
 800328e:	d001      	beq.n	8003294 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0b3      	b.n	80033fc <HAL_ETH_ReadData+0x1a2>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800329e:	3212      	adds	r2, #18
 80032a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a4:	61fb      	str	r3, [r7, #28]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032aa:	f1c3 0304 	rsb	r3, r3, #4
 80032ae:	613b      	str	r3, [r7, #16]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80032b0:	e07b      	b.n	80033aa <HAL_ETH_ReadData+0x150>
         && (rxdataready == 0U))
  {
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) ||
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <HAL_ETH_ReadData+0x6c>
        (heth->RxDescList.pRxStart != NULL))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) ||
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d05f      	beq.n	8003386 <HAL_ETH_ReadData+0x12c>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_ETH_ReadData+0x84>
      {
        heth->RxDescList.RxDescCnt = 0;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	60fb      	str	r3, [r7, #12]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d02a      	beq.n	8003350 <HAL_ETH_ReadData+0xf6>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003302:	2301      	movs	r3, #1
 8003304:	75fb      	strb	r3, [r7, #23]

        if (READ_BIT(dmarxdesc->DESC1, ETH_DMARXNDESCWBF_TSA) != (uint32_t)RESET)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01e      	beq.n	8003350 <HAL_ETH_ReadData+0xf6>
        {
          descidx_next = descidx;
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	623b      	str	r3, [r7, #32]
          INCR_RX_DESC_INDEX(descidx_next, 1U);
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	3301      	adds	r3, #1
 800331a:	623b      	str	r3, [r7, #32]
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d902      	bls.n	8003328 <HAL_ETH_ReadData+0xce>
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	3b04      	subs	r3, #4
 8003326:	623b      	str	r3, [r7, #32]

          dmarxdesc_next = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx_next];
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a3a      	ldr	r2, [r7, #32]
 800332c:	3212      	adds	r2, #18
 800332e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003332:	60bb      	str	r3, [r7, #8]

          if (READ_BIT(dmarxdesc_next->DESC3, ETH_DMARXNDESCWBF_CTXT) != (uint32_t)RESET)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <HAL_ETH_ReadData+0xf6>
          {
            /* Get timestamp high */
            heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc_next->DESC1;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	679a      	str	r2, [r3, #120]	@ 0x78
            /* Get timestamp low */
            heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc_next->DESC0;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	675a      	str	r2, [r3, #116]	@ 0x74
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003360:	461a      	mov	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	b29b      	uxth	r3, r3
 8003366:	f009 f953 	bl	800c610 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	441a      	add	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2200      	movs	r2, #0
 8003384:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	3301      	adds	r3, #1
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
 800338c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338e:	2b03      	cmp	r3, #3
 8003390:	d902      	bls.n	8003398 <HAL_ETH_ReadData+0x13e>
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003394:	3b04      	subs	r3, #4
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800339c:	3212      	adds	r2, #18
 800339e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a2:	61fb      	str	r3, [r7, #28]
    desccnt++;
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	3301      	adds	r3, #1
 80033a8:	61bb      	str	r3, [r7, #24]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db07      	blt.n	80033c2 <HAL_ETH_ReadData+0x168>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d203      	bcs.n	80033c2 <HAL_ETH_ReadData+0x168>
         && (rxdataready == 0U))
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f43f af78 	beq.w	80032b2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	441a      	add	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_ETH_ReadData+0x182>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f814 	bl	8003404 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e0:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d108      	bne.n	80033fa <HAL_ETH_ReadData+0x1a0>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <HAL_ETH_ReadData+0x1a2>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3728      	adds	r7, #40	@ 0x28
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003410:	2301      	movs	r3, #1
 8003412:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003418:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	3212      	adds	r2, #18
 8003420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003424:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800342a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800342c:	e038      	b.n	80034a0 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d112      	bne.n	800345c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003436:	f107 0308 	add.w	r3, r7, #8
 800343a:	4618      	mov	r0, r3
 800343c:	f009 f8b8 	bl	800c5b0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	74fb      	strb	r3, [r7, #19]
 800344a:	e007      	b.n	800345c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	461a      	mov	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	461a      	mov	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d01e      	beq.n	80034a0 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	e003      	b.n	800347c <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800347a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	3301      	adds	r3, #1
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d902      	bls.n	800348e <ETH_UpdateDescriptor+0x8a>
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	3b04      	subs	r3, #4
 800348c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	3212      	adds	r2, #18
 8003494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003498:	617b      	str	r3, [r7, #20]
      desccount--;
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	3b01      	subs	r3, #1
 800349e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <ETH_UpdateDescriptor+0xa8>
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1c0      	bne.n	800342e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d01b      	beq.n	80034ee <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3303      	adds	r3, #3
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80034c0:	f3bf 8f5f 	dmb	sy
}
 80034c4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6919      	ldr	r1, [r3, #16]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4613      	mov	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	18ca      	adds	r2, r1, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034de:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80034ee:	bf00      	nop
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e03e      	b.n	8003596 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003520:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	055b      	lsls	r3, r3, #21
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f043 030c 	orr.w	r3, r3, #12
 8003544:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8003558:	f7ff fa8e 	bl	8002a78 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800355e:	e009      	b.n	8003574 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8003560:	f7ff fa8a 	bl	8002a78 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800356e:	d901      	bls.n	8003574 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e010      	b.n	8003596 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ed      	bne.n	8003560 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800358c:	b29b      	uxth	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e03c      	b.n	800363c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80035ca:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	055b      	lsls	r3, r3, #21
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	041b      	lsls	r3, r3, #16
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f023 030c 	bic.w	r3, r3, #12
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b29a      	uxth	r2, r3
 8003600:	4b10      	ldr	r3, [pc, #64]	@ (8003644 <HAL_ETH_WritePHYRegister+0xa4>)
 8003602:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8003606:	4a0f      	ldr	r2, [pc, #60]	@ (8003644 <HAL_ETH_WritePHYRegister+0xa4>)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800360e:	f7ff fa33 	bl	8002a78 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003614:	e009      	b.n	800362a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8003616:	f7ff fa2f 	bl	8002a78 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003624:	d901      	bls.n	800362a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e008      	b.n	800363c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1ed      	bne.n	8003616 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40028000 	.word	0x40028000

08003648 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e1c3      	b.n	80039e4 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 020c 	and.w	r2, r3, #12
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf14      	ite	ne
 8003678:	2301      	movne	r3, #1
 800367a:	2300      	moveq	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf0c      	ite	eq
 80036a2:	2301      	moveq	r3, #1
 80036a4:	2300      	movne	r3, #0
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bf14      	ite	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	2300      	moveq	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80036ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	bf14      	ite	ne
 80036f2:	2301      	movne	r3, #1
 80036f4:	2300      	moveq	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800373e:	2b00      	cmp	r3, #0
 8003740:	bf14      	ite	ne
 8003742:	2301      	movne	r3, #1
 8003744:	2300      	moveq	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003772:	2b00      	cmp	r3, #0
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80037d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf14      	ite	ne
 80037de:	2301      	movne	r3, #1
 80037e0:	2300      	moveq	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	bf14      	ite	ne
 8003806:	2301      	movne	r3, #1
 8003808:	2300      	moveq	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf14      	ite	ne
 8003858:	2301      	movne	r3, #1
 800385a:	2300      	moveq	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	461a      	mov	r2, r3
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800386c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf14      	ite	ne
 8003874:	2301      	movne	r3, #1
 8003876:	2300      	moveq	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf14      	ite	ne
 8003890:	2301      	movne	r3, #1
 8003892:	2300      	moveq	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	0e5b      	lsrs	r3, r3, #25
 80038a6:	f003 021f 	and.w	r2, r3, #31
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf14      	ite	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	2300      	moveq	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bf14      	ite	ne
 80038e6:	2301      	movne	r3, #1
 80038e8:	2300      	moveq	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf0c      	ite	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	2300      	movne	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003916:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	b29a      	uxth	r2, r3
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003952:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf14      	ite	ne
 800395a:	2301      	movne	r3, #1
 800395c:	2300      	moveq	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003970:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003980:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	bf14      	ite	ne
 8003998:	2301      	movne	r3, #1
 800399a:	2300      	moveq	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf14      	ite	ne
 80039b6:	2301      	movne	r3, #1
 80039b8:	2300      	moveq	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80039cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e00b      	b.n	8003a1c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	d105      	bne.n	8003a1a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003a0e:	6839      	ldr	r1, [r7, #0]
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f857 	bl	8003ac4 <ETH_SetMACConfig>

    return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
  }
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003a3e:	f002 fcb7 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 8003a42:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4a1a      	ldr	r2, [pc, #104]	@ (8003ab0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d804      	bhi.n	8003a56 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e022      	b.n	8003a9c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4a16      	ldr	r2, [pc, #88]	@ (8003ab4 <HAL_ETH_SetMDIOClockRange+0x90>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d204      	bcs.n	8003a68 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	e019      	b.n	8003a9c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4a13      	ldr	r2, [pc, #76]	@ (8003ab8 <HAL_ETH_SetMDIOClockRange+0x94>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d915      	bls.n	8003a9c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4a12      	ldr	r2, [pc, #72]	@ (8003abc <HAL_ETH_SetMDIOClockRange+0x98>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d804      	bhi.n	8003a82 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e00c      	b.n	8003a9c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d804      	bhi.n	8003a94 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e003      	b.n	8003a9c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	02160ebf 	.word	0x02160ebf
 8003ab4:	03938700 	.word	0x03938700
 8003ab8:	05f5e0ff 	.word	0x05f5e0ff
 8003abc:	08f0d17f 	.word	0x08f0d17f
 8003ac0:	0ee6b27f 	.word	0x0ee6b27f

08003ac4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003ad6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	791b      	ldrb	r3, [r3, #4]
 8003adc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003ade:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	7b1b      	ldrb	r3, [r3, #12]
 8003ae4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003ae6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	7b5b      	ldrb	r3, [r3, #13]
 8003aec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003aee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	7b9b      	ldrb	r3, [r3, #14]
 8003af4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003af6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	7bdb      	ldrb	r3, [r3, #15]
 8003afc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003afe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	7c12      	ldrb	r2, [r2, #16]
 8003b04:	2a00      	cmp	r2, #0
 8003b06:	d102      	bne.n	8003b0e <ETH_SetMACConfig+0x4a>
 8003b08:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b0c:	e000      	b.n	8003b10 <ETH_SetMACConfig+0x4c>
 8003b0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003b10:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	7c52      	ldrb	r2, [r2, #17]
 8003b16:	2a00      	cmp	r2, #0
 8003b18:	d102      	bne.n	8003b20 <ETH_SetMACConfig+0x5c>
 8003b1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b1e:	e000      	b.n	8003b22 <ETH_SetMACConfig+0x5e>
 8003b20:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003b22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	7c9b      	ldrb	r3, [r3, #18]
 8003b28:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003b2a:	431a      	orrs	r2, r3
               macconf->Speed |
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003b30:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003b36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	7f1b      	ldrb	r3, [r3, #28]
 8003b3c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003b3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	7f5b      	ldrb	r3, [r3, #29]
 8003b44:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003b46:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	7f92      	ldrb	r2, [r2, #30]
 8003b4c:	2a00      	cmp	r2, #0
 8003b4e:	d102      	bne.n	8003b56 <ETH_SetMACConfig+0x92>
 8003b50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b54:	e000      	b.n	8003b58 <ETH_SetMACConfig+0x94>
 8003b56:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003b58:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	7fdb      	ldrb	r3, [r3, #31]
 8003b5e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003b60:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b68:	2a00      	cmp	r2, #0
 8003b6a:	d102      	bne.n	8003b72 <ETH_SetMACConfig+0xae>
 8003b6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b70:	e000      	b.n	8003b74 <ETH_SetMACConfig+0xb0>
 8003b72:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003b74:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003b7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b82:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003b84:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b57      	ldr	r3, [pc, #348]	@ (8003cf4 <ETH_SetMACConfig+0x230>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	68f9      	ldr	r1, [r7, #12]
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003bb0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bb8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003bba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003bc2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003bc4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003bcc:	2a00      	cmp	r2, #0
 8003bce:	d102      	bne.n	8003bd6 <ETH_SetMACConfig+0x112>
 8003bd0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003bd4:	e000      	b.n	8003bd8 <ETH_SetMACConfig+0x114>
 8003bd6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003bd8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	4b43      	ldr	r3, [pc, #268]	@ (8003cf8 <ETH_SetMACConfig+0x234>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	68f9      	ldr	r1, [r7, #12]
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bfc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	68f9      	ldr	r1, [r7, #12]
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c24:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003c2a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003c32:	2a00      	cmp	r2, #0
 8003c34:	d101      	bne.n	8003c3a <ETH_SetMACConfig+0x176>
 8003c36:	2280      	movs	r2, #128	@ 0x80
 8003c38:	e000      	b.n	8003c3c <ETH_SetMACConfig+0x178>
 8003c3a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003c3c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c42:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c4e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003c52:	4013      	ands	r3, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	68f9      	ldr	r1, [r7, #12]
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003c64:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003c6c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7a:	f023 0103 	bic.w	r1, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003c92:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003cae:	2a00      	cmp	r2, #0
 8003cb0:	d101      	bne.n	8003cb6 <ETH_SetMACConfig+0x1f2>
 8003cb2:	2240      	movs	r2, #64	@ 0x40
 8003cb4:	e000      	b.n	8003cb8 <ETH_SetMACConfig+0x1f4>
 8003cb6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003cb8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003cc0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003cc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003cca:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003cd8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	00048083 	.word	0x00048083
 8003cf8:	c0f88000 	.word	0xc0f88000

08003cfc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8003d14:	f023 0302 	bic.w	r3, r3, #2
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	6811      	ldr	r1, [r2, #0]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d26:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	791b      	ldrb	r3, [r3, #4]
 8003d2c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003d32:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	7b1b      	ldrb	r3, [r3, #12]
 8003d38:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	68f9      	ldr	r1, [r7, #12]
 8003d56:	430b      	orrs	r3, r1
 8003d58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d5c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	7b5b      	ldrb	r3, [r3, #13]
 8003d62:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d74:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003d78:	4b21      	ldr	r3, [pc, #132]	@ (8003e00 <ETH_SetDMAConfig+0x104>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	68f9      	ldr	r1, [r7, #12]
 8003d82:	430b      	orrs	r3, r1
 8003d84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d88:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	7d1b      	ldrb	r3, [r3, #20]
 8003d94:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d96:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	7f5b      	ldrb	r3, [r3, #29]
 8003d9c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003daa:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003dae:	4b15      	ldr	r3, [pc, #84]	@ (8003e04 <ETH_SetDMAConfig+0x108>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	430b      	orrs	r3, r1
 8003dba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dbe:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	7f1b      	ldrb	r3, [r3, #28]
 8003dc6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003ddc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003de0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	68f9      	ldr	r1, [r7, #12]
 8003dea:	430b      	orrs	r3, r1
 8003dec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003df0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	fffec000 	.word	0xfffec000
 8003e04:	ffc0efef 	.word	0xffc0efef

08003e08 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b0a4      	sub	sp, #144	@ 0x90
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003e16:	2300      	movs	r3, #0
 8003e18:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003e44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e48:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003e60:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003e64:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003e82:	2300      	movs	r3, #0
 8003e84:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003ea0:	2320      	movs	r3, #32
 8003ea2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003eb2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003eb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ebc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003edc:	2301      	movs	r3, #1
 8003ede:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003eec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff fde6 	bl	8003ac4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003efc:	2301      	movs	r3, #1
 8003efe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f12:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f16:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f20:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003f28:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003f2e:	f107 0308 	add.w	r3, r7, #8
 8003f32:	4619      	mov	r1, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff fee1 	bl	8003cfc <ETH_SetDMAConfig>
}
 8003f3a:	bf00      	nop
 8003f3c:	3790      	adds	r7, #144	@ 0x90
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	e01d      	b.n	8003f8c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68d9      	ldr	r1, [r3, #12]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4613      	mov	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4413      	add	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	440b      	add	r3, r1
 8003f60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2200      	movs	r2, #0
 8003f72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2200      	movs	r2, #0
 8003f78:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	3206      	adds	r2, #6
 8003f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d9de      	bls.n	8003f50 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003fc8:	bf00      	nop
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e023      	b.n	800402a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6919      	ldr	r1, [r3, #16]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4413      	add	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	440b      	add	r3, r1
 8003ff2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2200      	movs	r2, #0
 800400a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2200      	movs	r2, #0
 8004016:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	3212      	adds	r2, #18
 8004020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3301      	adds	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d9d8      	bls.n	8003fe2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004056:	461a      	mov	r2, r3
 8004058:	2303      	movs	r3, #3
 800405a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800406a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800407e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004082:	bf00      	nop
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800408e:	b480      	push	{r7}
 8004090:	b091      	sub	sp, #68	@ 0x44
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3318      	adds	r3, #24
 800409e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b8:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80040c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040d0:	d007      	beq.n	80040e2 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80040d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d6:	3304      	adds	r3, #4
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80040e2:	2302      	movs	r3, #2
 80040e4:	e267      	b.n	80045b6 <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d044      	beq.n	800417c <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80040f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	0c1b      	lsrs	r3, r3, #16
 80040f8:	041b      	lsls	r3, r3, #16
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040fe:	431a      	orrs	r2, r3
 8004100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004102:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800410c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410e:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800411e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d027      	beq.n	800417c <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	b29a      	uxth	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004136:	041b      	lsls	r3, r3, #16
 8004138:	431a      	orrs	r2, r3
 800413a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413c:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004148:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800414a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004156:	431a      	orrs	r2, r3
 8004158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415a:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800416a:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800417a:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	d010      	beq.n	80041aa <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8004188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004190:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	6992      	ldr	r2, [r2, #24]
 8004198:	431a      	orrs	r2, r3
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800419e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80041a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a8:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d105      	bne.n	80041c2 <ETH_Prepare_Tx_Descriptors+0x134>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d036      	beq.n	8004230 <ETH_Prepare_Tx_Descriptors+0x1a2>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80041c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80041ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041cc:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80041ce:	f3bf 8f5f 	dmb	sy
}
 80041d2:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80041d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041de:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80041e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e2:	3301      	adds	r3, #1
 80041e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d902      	bls.n	80041f2 <ETH_Prepare_Tx_Descriptors+0x164>
 80041ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ee:	3b04      	subs	r3, #4
 80041f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041fa:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 80041fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041fe:	3301      	adds	r3, #1
 8004200:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800420a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800420e:	d10f      	bne.n	8004230 <ETH_Prepare_Tx_Descriptors+0x1a2>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	6a3a      	ldr	r2, [r7, #32]
 8004214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004218:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800421a:	f3bf 8f5f 	dmb	sy
}
 800421e:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422a:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800422c:	2302      	movs	r3, #2
 800422e:	e1c2      	b.n	80045b6 <ETH_Prepare_Tx_Descriptors+0x528>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8004230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004232:	3301      	adds	r3, #1
 8004234:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423e:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004248:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800424c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800424e:	6852      	ldr	r2, [r2, #4]
 8004250:	431a      	orrs	r2, r3
 8004252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004254:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8004256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d014      	beq.n	8004288 <ETH_Prepare_Tx_Descriptors+0x1fa>
  {
    txbuffer = txbuffer->next;
 800425e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800426e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8004276:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800427a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800427c:	6852      	ldr	r2, [r2, #4]
 800427e:	0412      	lsls	r2, r2, #16
 8004280:	431a      	orrs	r2, r3
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	609a      	str	r2, [r3, #8]
 8004286:	e00a      	b.n	800429e <ETH_Prepare_Tx_Descriptors+0x210>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428a:	2200      	movs	r2, #0
 800428c:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800428e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 8004296:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800429a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800429c:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d019      	beq.n	80042de <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	04db      	lsls	r3, r3, #19
 80042b8:	431a      	orrs	r2, r3
 80042ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042bc:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80042be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	0c9b      	lsrs	r3, r3, #18
 80042c4:	049b      	lsls	r3, r3, #18
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	69d2      	ldr	r2, [r2, #28]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ce:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80042d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	60da      	str	r2, [r3, #12]
 80042dc:	e028      	b.n	8004330 <ETH_Prepare_Tx_Descriptors+0x2a2>
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80042e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	6852      	ldr	r2, [r2, #4]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f2:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <ETH_Prepare_Tx_Descriptors+0x284>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	431a      	orrs	r2, r3
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d008      	beq.n	8004330 <ETH_Prepare_Tx_Descriptors+0x2a2>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	431a      	orrs	r2, r3
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <ETH_Prepare_Tx_Descriptors+0x2c0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800433c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004348:	431a      	orrs	r2, r3
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800434e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004358:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004366:	f3bf 8f5f 	dmb	sy
}
 800436a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800436c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004376:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80d9 	beq.w	8004538 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8004386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	431a      	orrs	r2, r3
 8004394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004396:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004398:	e0ce      	b.n	8004538 <ETH_Prepare_Tx_Descriptors+0x4aa>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800439a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80043a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a4:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80043a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043a8:	3301      	adds	r3, #1
 80043aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d902      	bls.n	80043b8 <ETH_Prepare_Tx_Descriptors+0x32a>
 80043b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b4:	3b04      	subs	r3, #4
 80043b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80043c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80043ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043cc:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043da:	d007      	beq.n	80043ec <ETH_Prepare_Tx_Descriptors+0x35e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80043dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e0:	3304      	adds	r3, #4
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d029      	beq.n	8004440 <ETH_Prepare_Tx_Descriptors+0x3b2>
    {
      descidx = firstdescidx;
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80043fa:	2300      	movs	r3, #0
 80043fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043fe:	e019      	b.n	8004434 <ETH_Prepare_Tx_Descriptors+0x3a6>
  __ASM volatile ("dmb 0xF":::"memory");
 8004400:	f3bf 8f5f 	dmb	sy
}
 8004404:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004414:	3301      	adds	r3, #1
 8004416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800441a:	2b03      	cmp	r3, #3
 800441c:	d902      	bls.n	8004424 <ETH_Prepare_Tx_Descriptors+0x396>
 800441e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004420:	3b04      	subs	r3, #4
 8004422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442c:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800442e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004430:	3301      	adds	r3, #1
 8004432:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004434:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004438:	429a      	cmp	r2, r3
 800443a:	d3e1      	bcc.n	8004400 <ETH_Prepare_Tx_Descriptors+0x372>
      }

      return HAL_ETH_ERROR_BUSY;
 800443c:	2302      	movs	r3, #2
 800443e:	e0ba      	b.n	80045b6 <ETH_Prepare_Tx_Descriptors+0x528>
    }

    descnbr += 1U;
 8004440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004442:	3301      	adds	r3, #1
 8004444:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800444c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800445e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004464:	6852      	ldr	r2, [r2, #4]
 8004466:	431a      	orrs	r2, r3
 8004468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446a:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800446c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d014      	beq.n	800449e <ETH_Prepare_Tx_Descriptors+0x410>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8004474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800447a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004482:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 800448c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8004490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004492:	6852      	ldr	r2, [r2, #4]
 8004494:	0412      	lsls	r2, r2, #16
 8004496:	431a      	orrs	r2, r3
 8004498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	e00a      	b.n	80044b4 <ETH_Prepare_Tx_Descriptors+0x426>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800449e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a0:	2200      	movs	r2, #0
 80044a2:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80044a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f023 537f 	bic.w	r3, r3, #1069547520	@ 0x3fc00000
 80044ac:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80044b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b2:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00f      	beq.n	80044e0 <ETH_Prepare_Tx_Descriptors+0x452>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80044c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	0c9b      	lsrs	r3, r3, #18
 80044c6:	049b      	lsls	r3, r3, #18
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	69d2      	ldr	r2, [r2, #28]
 80044cc:	431a      	orrs	r2, r3
 80044ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d0:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80044d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80044da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044dc:	60da      	str	r2, [r3, #12]
 80044de:	e019      	b.n	8004514 <ETH_Prepare_Tx_Descriptors+0x486>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80044e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80044e8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	6852      	ldr	r2, [r2, #4]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f4:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <ETH_Prepare_Tx_Descriptors+0x486>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	431a      	orrs	r2, r3
 8004510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004512:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8004514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004516:	3301      	adds	r3, #1
 8004518:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800451a:	f3bf 8f5f 	dmb	sy
}
 800451e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004536:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f47f af2c 	bne.w	800439a <ETH_Prepare_Tx_Descriptors+0x30c>
  }

  if (ItMode != ((uint32_t)RESET))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d006      	beq.n	8004556 <ETH_Prepare_Tx_Descriptors+0x4c8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	e005      	b.n	8004562 <ETH_Prepare_Tx_Descriptors+0x4d4>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800455e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004560:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004572:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004576:	3304      	adds	r3, #4
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004582:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004584:	f3ef 8310 	mrs	r3, PRIMASK
 8004588:	61bb      	str	r3, [r7, #24]
  return(result);
 800458a:	69bb      	ldr	r3, [r7, #24]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	2301      	movs	r3, #1
 8004590:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f383 8810 	msr	PRIMASK, r3
}
 8004598:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800459e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a0:	4413      	add	r3, r2
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f383 8810 	msr	PRIMASK, r3
}
 80045b2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3744      	adds	r7, #68	@ 0x44
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80045d2:	e142      	b.n	800485a <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	2101      	movs	r1, #1
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	fa01 f303 	lsl.w	r3, r1, r3
 80045e0:	4013      	ands	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8134 	beq.w	8004854 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_Init+0x38>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b12      	cmp	r3, #18
 80045fa:	d125      	bne.n	8004648 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	08da      	lsrs	r2, r3, #3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3208      	adds	r2, #8
 8004604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004608:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	220f      	movs	r2, #15
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4013      	ands	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f003 020f 	and.w	r2, r3, #15
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	08da      	lsrs	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3208      	adds	r2, #8
 8004642:	6979      	ldr	r1, [r7, #20]
 8004644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	2203      	movs	r2, #3
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4013      	ands	r3, r2
 800465e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 0203 	and.w	r2, r3, #3
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d00b      	beq.n	800469c <HAL_GPIO_Init+0xd8>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d007      	beq.n	800469c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004690:	2b11      	cmp	r3, #17
 8004692:	d003      	beq.n	800469c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b12      	cmp	r3, #18
 800469a:	d130      	bne.n	80046fe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	2203      	movs	r2, #3
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4013      	ands	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046d2:	2201      	movs	r2, #1
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43db      	mvns	r3, r3
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4013      	ands	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	f003 0201 	and.w	r2, r3, #1
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b03      	cmp	r3, #3
 8004708:	d109      	bne.n	800471e <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8004712:	2b03      	cmp	r3, #3
 8004714:	d11b      	bne.n	800474e <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d017      	beq.n	800474e <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	2203      	movs	r2, #3
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	43db      	mvns	r3, r3
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4013      	ands	r3, r2
 8004734:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d07c      	beq.n	8004854 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800475a:	4a47      	ldr	r2, [pc, #284]	@ (8004878 <HAL_GPIO_Init+0x2b4>)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	3318      	adds	r3, #24
 8004762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004766:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	220f      	movs	r2, #15
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43db      	mvns	r3, r3
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4013      	ands	r3, r2
 800477c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0a9a      	lsrs	r2, r3, #10
 8004782:	4b3e      	ldr	r3, [pc, #248]	@ (800487c <HAL_GPIO_Init+0x2b8>)
 8004784:	4013      	ands	r3, r2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	f002 0203 	and.w	r2, r2, #3
 800478c:	00d2      	lsls	r2, r2, #3
 800478e:	4093      	lsls	r3, r2
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8004796:	4938      	ldr	r1, [pc, #224]	@ (8004878 <HAL_GPIO_Init+0x2b4>)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	089b      	lsrs	r3, r3, #2
 800479c:	3318      	adds	r3, #24
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80047a4:	4b34      	ldr	r3, [pc, #208]	@ (8004878 <HAL_GPIO_Init+0x2b4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4013      	ands	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80047c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004878 <HAL_GPIO_Init+0x2b4>)
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80047ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004878 <HAL_GPIO_Init+0x2b4>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	43db      	mvns	r3, r3
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4013      	ands	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80047f2:	4a21      	ldr	r2, [pc, #132]	@ (8004878 <HAL_GPIO_Init+0x2b4>)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80047f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004878 <HAL_GPIO_Init+0x2b4>)
 80047fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047fe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	43db      	mvns	r3, r3
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4013      	ands	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800481e:	4a16      	ldr	r2, [pc, #88]	@ (8004878 <HAL_GPIO_Init+0x2b4>)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8004826:	4b14      	ldr	r3, [pc, #80]	@ (8004878 <HAL_GPIO_Init+0x2b4>)
 8004828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800482c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	43db      	mvns	r3, r3
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4013      	ands	r3, r2
 8004836:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800484c:	4a0a      	ldr	r2, [pc, #40]	@ (8004878 <HAL_GPIO_Init+0x2b4>)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	3301      	adds	r3, #1
 8004858:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	f47f aeb5 	bne.w	80045d4 <HAL_GPIO_Init+0x10>
  }
}
 800486a:	bf00      	nop
 800486c:	bf00      	nop
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	44022000 	.word	0x44022000
 800487c:	002f7f7f 	.word	0x002f7f7f

08004880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	807b      	strh	r3, [r7, #2]
 800488c:	4613      	mov	r3, r2
 800488e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004890:	787b      	ldrb	r3, [r7, #1]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004896:	887a      	ldrh	r2, [r7, #2]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800489c:	e002      	b.n	80048a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e08d      	b.n	80049de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fd fb5c 	bl	8001f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2224      	movs	r2, #36	@ 0x24
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0201 	bic.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004900:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004910:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d107      	bne.n	800492a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004926:	609a      	str	r2, [r3, #8]
 8004928:	e006      	b.n	8004938 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004936:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b02      	cmp	r3, #2
 800493e:	d108      	bne.n	8004952 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800494e:	605a      	str	r2, [r3, #4]
 8004950:	e007      	b.n	8004962 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004960:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004974:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004984:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69d9      	ldr	r1, [r3, #28]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1a      	ldr	r2, [r3, #32]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	4608      	mov	r0, r1
 80049f2:	4611      	mov	r1, r2
 80049f4:	461a      	mov	r2, r3
 80049f6:	4603      	mov	r3, r0
 80049f8:	817b      	strh	r3, [r7, #10]
 80049fa:	460b      	mov	r3, r1
 80049fc:	813b      	strh	r3, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	f040 80f9 	bne.w	8004c02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_I2C_Mem_Write+0x34>
 8004a16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d105      	bne.n	8004a28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0ed      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_I2C_Mem_Write+0x4e>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e0e6      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a3e:	f7fe f81b 	bl	8002a78 <HAL_GetTick>
 8004a42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	2319      	movs	r3, #25
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fac3 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e0d1      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2221      	movs	r2, #33	@ 0x21
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2240      	movs	r2, #64	@ 0x40
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a3a      	ldr	r2, [r7, #32]
 8004a7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a88:	88f8      	ldrh	r0, [r7, #6]
 8004a8a:	893a      	ldrh	r2, [r7, #8]
 8004a8c:	8979      	ldrh	r1, [r7, #10]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	4603      	mov	r3, r0
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f9d3 	bl	8004e44 <I2C_RequestMemoryWrite>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d005      	beq.n	8004ab0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0a9      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2bff      	cmp	r3, #255	@ 0xff
 8004ab8:	d90e      	bls.n	8004ad8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22ff      	movs	r2, #255	@ 0xff
 8004abe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	8979      	ldrh	r1, [r7, #10]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fc47 	bl	8005364 <I2C_TransferConfig>
 8004ad6:	e00f      	b.n	8004af8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	8979      	ldrh	r1, [r7, #10]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fc36 	bl	8005364 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fac6 	bl	800508e <I2C_WaitOnTXISFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e07b      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d034      	beq.n	8004bb0 <HAL_I2C_Mem_Write+0x1c8>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d130      	bne.n	8004bb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b54:	2200      	movs	r2, #0
 8004b56:	2180      	movs	r1, #128	@ 0x80
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fa3f 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e04d      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2bff      	cmp	r3, #255	@ 0xff
 8004b70:	d90e      	bls.n	8004b90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	22ff      	movs	r2, #255	@ 0xff
 8004b76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	8979      	ldrh	r1, [r7, #10]
 8004b80:	2300      	movs	r3, #0
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 fbeb 	bl	8005364 <I2C_TransferConfig>
 8004b8e:	e00f      	b.n	8004bb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	8979      	ldrh	r1, [r7, #10]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 fbda 	bl	8005364 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d19e      	bne.n	8004af8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 faac 	bl	800511c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e01a      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6859      	ldr	r1, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4b0a      	ldr	r3, [pc, #40]	@ (8004c0c <HAL_I2C_Mem_Write+0x224>)
 8004be2:	400b      	ands	r3, r1
 8004be4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e000      	b.n	8004c04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	fe00e800 	.word	0xfe00e800

08004c10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	4608      	mov	r0, r1
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	817b      	strh	r3, [r7, #10]
 8004c22:	460b      	mov	r3, r1
 8004c24:	813b      	strh	r3, [r7, #8]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	f040 80fd 	bne.w	8004e32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_I2C_Mem_Read+0x34>
 8004c3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d105      	bne.n	8004c50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0f1      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_I2C_Mem_Read+0x4e>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e0ea      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c66:	f7fd ff07 	bl	8002a78 <HAL_GetTick>
 8004c6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	2319      	movs	r3, #25
 8004c72:	2201      	movs	r2, #1
 8004c74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f9af 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0d5      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2222      	movs	r2, #34	@ 0x22
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2240      	movs	r2, #64	@ 0x40
 8004c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a3a      	ldr	r2, [r7, #32]
 8004ca2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cb0:	88f8      	ldrh	r0, [r7, #6]
 8004cb2:	893a      	ldrh	r2, [r7, #8]
 8004cb4:	8979      	ldrh	r1, [r7, #10]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f913 	bl	8004eec <I2C_RequestMemoryRead>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0ad      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2bff      	cmp	r3, #255	@ 0xff
 8004ce0:	d90e      	bls.n	8004d00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	22ff      	movs	r2, #255	@ 0xff
 8004ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	8979      	ldrh	r1, [r7, #10]
 8004cf0:	4b52      	ldr	r3, [pc, #328]	@ (8004e3c <HAL_I2C_Mem_Read+0x22c>)
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fb33 	bl	8005364 <I2C_TransferConfig>
 8004cfe:	e00f      	b.n	8004d20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	8979      	ldrh	r1, [r7, #10]
 8004d12:	4b4a      	ldr	r3, [pc, #296]	@ (8004e3c <HAL_I2C_Mem_Read+0x22c>)
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fb22 	bl	8005364 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d26:	2200      	movs	r2, #0
 8004d28:	2104      	movs	r1, #4
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f956 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e07c      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d034      	beq.n	8004de0 <HAL_I2C_Mem_Read+0x1d0>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d130      	bne.n	8004de0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d84:	2200      	movs	r2, #0
 8004d86:	2180      	movs	r1, #128	@ 0x80
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f927 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e04d      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2bff      	cmp	r3, #255	@ 0xff
 8004da0:	d90e      	bls.n	8004dc0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	22ff      	movs	r2, #255	@ 0xff
 8004da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	8979      	ldrh	r1, [r7, #10]
 8004db0:	2300      	movs	r3, #0
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fad3 	bl	8005364 <I2C_TransferConfig>
 8004dbe:	e00f      	b.n	8004de0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	8979      	ldrh	r1, [r7, #10]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fac2 	bl	8005364 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d19a      	bne.n	8004d20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f994 	bl	800511c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e01a      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2220      	movs	r2, #32
 8004e04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6859      	ldr	r1, [r3, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b0b      	ldr	r3, [pc, #44]	@ (8004e40 <HAL_I2C_Mem_Read+0x230>)
 8004e12:	400b      	ands	r3, r1
 8004e14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e000      	b.n	8004e34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004e32:	2302      	movs	r3, #2
  }
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	80002400 	.word	0x80002400
 8004e40:	fe00e800 	.word	0xfe00e800

08004e44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	461a      	mov	r2, r3
 8004e52:	4603      	mov	r3, r0
 8004e54:	817b      	strh	r3, [r7, #10]
 8004e56:	460b      	mov	r3, r1
 8004e58:	813b      	strh	r3, [r7, #8]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	8979      	ldrh	r1, [r7, #10]
 8004e64:	4b20      	ldr	r3, [pc, #128]	@ (8004ee8 <I2C_RequestMemoryWrite+0xa4>)
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fa79 	bl	8005364 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e72:	69fa      	ldr	r2, [r7, #28]
 8004e74:	69b9      	ldr	r1, [r7, #24]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f909 	bl	800508e <I2C_WaitOnTXISFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e02c      	b.n	8004ee0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d105      	bne.n	8004e98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e8c:	893b      	ldrh	r3, [r7, #8]
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e96:	e015      	b.n	8004ec4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e98:	893b      	ldrh	r3, [r7, #8]
 8004e9a:	0a1b      	lsrs	r3, r3, #8
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	69b9      	ldr	r1, [r7, #24]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 f8ef 	bl	800508e <I2C_WaitOnTXISFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e012      	b.n	8004ee0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004eba:	893b      	ldrh	r3, [r7, #8]
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2180      	movs	r1, #128	@ 0x80
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f884 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	80002000 	.word	0x80002000

08004eec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	4608      	mov	r0, r1
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4603      	mov	r3, r0
 8004efc:	817b      	strh	r3, [r7, #10]
 8004efe:	460b      	mov	r3, r1
 8004f00:	813b      	strh	r3, [r7, #8]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	8979      	ldrh	r1, [r7, #10]
 8004f0c:	4b20      	ldr	r3, [pc, #128]	@ (8004f90 <I2C_RequestMemoryRead+0xa4>)
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	2300      	movs	r3, #0
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fa26 	bl	8005364 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	69b9      	ldr	r1, [r7, #24]
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f8b6 	bl	800508e <I2C_WaitOnTXISFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e02c      	b.n	8004f86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f2c:	88fb      	ldrh	r3, [r7, #6]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d105      	bne.n	8004f3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f32:	893b      	ldrh	r3, [r7, #8]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f3c:	e015      	b.n	8004f6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f3e:	893b      	ldrh	r3, [r7, #8]
 8004f40:	0a1b      	lsrs	r3, r3, #8
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	69b9      	ldr	r1, [r7, #24]
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f89c 	bl	800508e <I2C_WaitOnTXISFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e012      	b.n	8004f86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f60:	893b      	ldrh	r3, [r7, #8]
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2200      	movs	r2, #0
 8004f72:	2140      	movs	r1, #64	@ 0x40
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f831 	bl	8004fdc <I2C_WaitOnFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	80002000 	.word	0x80002000

08004f94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d103      	bne.n	8004fb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d007      	beq.n	8004fd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	619a      	str	r2, [r3, #24]
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fec:	e03b      	b.n	8005066 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f8d6 	bl	80051a4 <I2C_IsErrorOccurred>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e041      	b.n	8005086 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005008:	d02d      	beq.n	8005066 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500a:	f7fd fd35 	bl	8002a78 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d302      	bcc.n	8005020 <I2C_WaitOnFlagUntilTimeout+0x44>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d122      	bne.n	8005066 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4013      	ands	r3, r2
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	429a      	cmp	r2, r3
 800502e:	bf0c      	ite	eq
 8005030:	2301      	moveq	r3, #1
 8005032:	2300      	movne	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	429a      	cmp	r2, r3
 800503c:	d113      	bne.n	8005066 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e00f      	b.n	8005086 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699a      	ldr	r2, [r3, #24]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	429a      	cmp	r2, r3
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	429a      	cmp	r2, r3
 8005082:	d0b4      	beq.n	8004fee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800509a:	e033      	b.n	8005104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f87f 	bl	80051a4 <I2C_IsErrorOccurred>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e031      	b.n	8005114 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	d025      	beq.n	8005104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b8:	f7fd fcde 	bl	8002a78 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d302      	bcc.n	80050ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d11a      	bne.n	8005104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d013      	beq.n	8005104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e0:	f043 0220 	orr.w	r2, r3, #32
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e007      	b.n	8005114 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b02      	cmp	r3, #2
 8005110:	d1c4      	bne.n	800509c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005128:	e02f      	b.n	800518a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f838 	bl	80051a4 <I2C_IsErrorOccurred>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e02d      	b.n	800519a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513e:	f7fd fc9b 	bl	8002a78 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	429a      	cmp	r2, r3
 800514c:	d302      	bcc.n	8005154 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d11a      	bne.n	800518a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b20      	cmp	r3, #32
 8005160:	d013      	beq.n	800518a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e007      	b.n	800519a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b20      	cmp	r3, #32
 8005196:	d1c8      	bne.n	800512a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	@ 0x28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d068      	beq.n	80052a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2210      	movs	r2, #16
 80051d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051d8:	e049      	b.n	800526e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d045      	beq.n	800526e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051e2:	f7fd fc49 	bl	8002a78 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <I2C_IsErrorOccurred+0x54>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d13a      	bne.n	800526e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005202:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800520a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800521a:	d121      	bne.n	8005260 <I2C_IsErrorOccurred+0xbc>
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005222:	d01d      	beq.n	8005260 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005224:	7cfb      	ldrb	r3, [r7, #19]
 8005226:	2b20      	cmp	r3, #32
 8005228:	d01a      	beq.n	8005260 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005238:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800523a:	f7fd fc1d 	bl	8002a78 <HAL_GetTick>
 800523e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005240:	e00e      	b.n	8005260 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005242:	f7fd fc19 	bl	8002a78 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b19      	cmp	r3, #25
 800524e:	d907      	bls.n	8005260 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	f043 0320 	orr.w	r3, r3, #32
 8005256:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800525e:	e006      	b.n	800526e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b20      	cmp	r3, #32
 800526c:	d1e9      	bne.n	8005242 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b20      	cmp	r3, #32
 800527a:	d003      	beq.n	8005284 <I2C_IsErrorOccurred+0xe0>
 800527c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0aa      	beq.n	80051da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2220      	movs	r2, #32
 8005292:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	f043 0304 	orr.w	r3, r3, #4
 800529a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	f043 0308 	orr.w	r3, r3, #8
 80052dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	f043 0302 	orr.w	r3, r3, #2
 80052fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005308:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01c      	beq.n	8005352 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff fe3b 	bl	8004f94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	4b0d      	ldr	r3, [pc, #52]	@ (8005360 <I2C_IsErrorOccurred+0x1bc>)
 800532a:	400b      	ands	r3, r1
 800532c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	431a      	orrs	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005352:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005356:	4618      	mov	r0, r3
 8005358:	3728      	adds	r7, #40	@ 0x28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	fe00e800 	.word	0xfe00e800

08005364 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	607b      	str	r3, [r7, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	817b      	strh	r3, [r7, #10]
 8005372:	4613      	mov	r3, r2
 8005374:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005376:	897b      	ldrh	r3, [r7, #10]
 8005378:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800537c:	7a7b      	ldrb	r3, [r7, #9]
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005384:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	4313      	orrs	r3, r2
 800538e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005392:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	0d5b      	lsrs	r3, r3, #21
 800539e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80053a2:	4b08      	ldr	r3, [pc, #32]	@ (80053c4 <I2C_TransferConfig+0x60>)
 80053a4:	430b      	orrs	r3, r1
 80053a6:	43db      	mvns	r3, r3
 80053a8:	ea02 0103 	and.w	r1, r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	03ff63ff 	.word	0x03ff63ff

080053c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b20      	cmp	r3, #32
 80053dc:	d138      	bne.n	8005450 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e032      	b.n	8005452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2224      	movs	r2, #36	@ 0x24
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0201 	bic.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800541a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6819      	ldr	r1, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	e000      	b.n	8005452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005450:	2302      	movs	r3, #2
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b20      	cmp	r3, #32
 8005472:	d139      	bne.n	80054e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800547e:	2302      	movs	r3, #2
 8005480:	e033      	b.n	80054ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2224      	movs	r2, #36	@ 0x24
 800548e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80054b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e000      	b.n	80054ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
  }
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005504:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
 8005514:	e007      	b.n	8005526 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005516:	4b07      	ldr	r3, [pc, #28]	@ (8005534 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f023 0204 	bic.w	r2, r3, #4
 800551e:	4905      	ldr	r1, [pc, #20]	@ (8005534 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4313      	orrs	r3, r2
 8005524:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005526:	7bfb      	ldrb	r3, [r7, #15]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	40030400 	.word	0x40030400

08005538 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800553c:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <HAL_ICACHE_Enable+0x1c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a04      	ldr	r2, [pc, #16]	@ (8005554 <HAL_ICACHE_Enable+0x1c>)
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	40030400 	.word	0x40030400

08005558 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800555c:	4b05      	ldr	r3, [pc, #20]	@ (8005574 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	4a04      	ldr	r2, [pc, #16]	@ (8005574 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8005568:	bf00      	nop
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	44020800 	.word	0x44020800

08005578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d102      	bne.n	800558c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	f000 bc28 	b.w	8005ddc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800558c:	4b94      	ldr	r3, [pc, #592]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	f003 0318 	and.w	r3, r3, #24
 8005594:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005596:	4b92      	ldr	r3, [pc, #584]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d05b      	beq.n	8005664 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d005      	beq.n	80055be <HAL_RCC_OscConfig+0x46>
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	2b18      	cmp	r3, #24
 80055b6:	d114      	bne.n	80055e2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d111      	bne.n	80055e2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d102      	bne.n	80055cc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f000 bc08 	b.w	8005ddc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80055cc:	4b84      	ldr	r3, [pc, #528]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	041b      	lsls	r3, r3, #16
 80055da:	4981      	ldr	r1, [pc, #516]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80055e0:	e040      	b.n	8005664 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d023      	beq.n	8005632 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055ea:	4b7d      	ldr	r3, [pc, #500]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a7c      	ldr	r2, [pc, #496]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80055f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f6:	f7fd fa3f 	bl	8002a78 <HAL_GetTick>
 80055fa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80055fe:	f7fd fa3b 	bl	8002a78 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e3e5      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005610:	4b73      	ldr	r3, [pc, #460]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800561c:	4b70      	ldr	r3, [pc, #448]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	041b      	lsls	r3, r3, #16
 800562a:	496d      	ldr	r1, [pc, #436]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 800562c:	4313      	orrs	r3, r2
 800562e:	618b      	str	r3, [r1, #24]
 8005630:	e018      	b.n	8005664 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005632:	4b6b      	ldr	r3, [pc, #428]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a6a      	ldr	r2, [pc, #424]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800563c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563e:	f7fd fa1b 	bl	8002a78 <HAL_GetTick>
 8005642:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005644:	e008      	b.n	8005658 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005646:	f7fd fa17 	bl	8002a78 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e3c1      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005658:	4b61      	ldr	r3, [pc, #388]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1f0      	bne.n	8005646 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80a0 	beq.w	80057b2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	2b10      	cmp	r3, #16
 8005676:	d005      	beq.n	8005684 <HAL_RCC_OscConfig+0x10c>
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b18      	cmp	r3, #24
 800567c:	d109      	bne.n	8005692 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	2b03      	cmp	r3, #3
 8005682:	d106      	bne.n	8005692 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f040 8092 	bne.w	80057b2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e3a4      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800569a:	d106      	bne.n	80056aa <HAL_RCC_OscConfig+0x132>
 800569c:	4b50      	ldr	r3, [pc, #320]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a4f      	ldr	r2, [pc, #316]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80056a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	e058      	b.n	800575c <HAL_RCC_OscConfig+0x1e4>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d112      	bne.n	80056d8 <HAL_RCC_OscConfig+0x160>
 80056b2:	4b4b      	ldr	r3, [pc, #300]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a4a      	ldr	r2, [pc, #296]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80056b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	4b48      	ldr	r3, [pc, #288]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a47      	ldr	r2, [pc, #284]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80056c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	4b45      	ldr	r3, [pc, #276]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a44      	ldr	r2, [pc, #272]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80056d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	e041      	b.n	800575c <HAL_RCC_OscConfig+0x1e4>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056e0:	d112      	bne.n	8005708 <HAL_RCC_OscConfig+0x190>
 80056e2:	4b3f      	ldr	r3, [pc, #252]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a3e      	ldr	r2, [pc, #248]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80056e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	4b3c      	ldr	r3, [pc, #240]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a3b      	ldr	r2, [pc, #236]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80056f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	4b39      	ldr	r3, [pc, #228]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a38      	ldr	r2, [pc, #224]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e029      	b.n	800575c <HAL_RCC_OscConfig+0x1e4>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005710:	d112      	bne.n	8005738 <HAL_RCC_OscConfig+0x1c0>
 8005712:	4b33      	ldr	r3, [pc, #204]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a32      	ldr	r2, [pc, #200]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	4b30      	ldr	r3, [pc, #192]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a2f      	ldr	r2, [pc, #188]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	4b2d      	ldr	r3, [pc, #180]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a2c      	ldr	r2, [pc, #176]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e011      	b.n	800575c <HAL_RCC_OscConfig+0x1e4>
 8005738:	4b29      	ldr	r3, [pc, #164]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a28      	ldr	r2, [pc, #160]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 800573e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	4b26      	ldr	r3, [pc, #152]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a25      	ldr	r2, [pc, #148]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 800574a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	4b23      	ldr	r3, [pc, #140]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a22      	ldr	r2, [pc, #136]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005756:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800575a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d013      	beq.n	800578c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fd f988 	bl	8002a78 <HAL_GetTick>
 8005768:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800576c:	f7fd f984 	bl	8002a78 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b64      	cmp	r3, #100	@ 0x64
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e32e      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800577e:	4b18      	ldr	r3, [pc, #96]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f0      	beq.n	800576c <HAL_RCC_OscConfig+0x1f4>
 800578a:	e012      	b.n	80057b2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578c:	f7fd f974 	bl	8002a78 <HAL_GetTick>
 8005790:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005794:	f7fd f970 	bl	8002a78 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b64      	cmp	r3, #100	@ 0x64
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e31a      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057a6:	4b0e      	ldr	r3, [pc, #56]	@ (80057e0 <HAL_RCC_OscConfig+0x268>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1f0      	bne.n	8005794 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 809a 	beq.w	80058f4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_RCC_OscConfig+0x25a>
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	2b18      	cmp	r3, #24
 80057ca:	d149      	bne.n	8005860 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d146      	bne.n	8005860 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d104      	bne.n	80057e4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e2fe      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
 80057de:	bf00      	nop
 80057e0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d11c      	bne.n	8005824 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80057ea:	4b9a      	ldr	r3, [pc, #616]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0218 	and.w	r2, r3, #24
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d014      	beq.n	8005824 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80057fa:	4b96      	ldr	r3, [pc, #600]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 0218 	bic.w	r2, r3, #24
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	4993      	ldr	r1, [pc, #588]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005808:	4313      	orrs	r3, r2
 800580a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800580c:	f000 fdd0 	bl	80063b0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005810:	4b91      	ldr	r3, [pc, #580]	@ (8005a58 <HAL_RCC_OscConfig+0x4e0>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f7fd f8a5 	bl	8002964 <HAL_InitTick>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e2db      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fd f928 	bl	8002a78 <HAL_GetTick>
 8005828:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800582c:	f7fd f924 	bl	8002a78 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e2ce      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800583e:	4b85      	ldr	r3, [pc, #532]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800584a:	4b82      	ldr	r3, [pc, #520]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	041b      	lsls	r3, r3, #16
 8005858:	497e      	ldr	r1, [pc, #504]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 800585a:	4313      	orrs	r3, r2
 800585c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800585e:	e049      	b.n	80058f4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d02c      	beq.n	80058c2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005868:	4b7a      	ldr	r3, [pc, #488]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f023 0218 	bic.w	r2, r3, #24
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	4977      	ldr	r1, [pc, #476]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005876:	4313      	orrs	r3, r2
 8005878:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800587a:	4b76      	ldr	r3, [pc, #472]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a75      	ldr	r2, [pc, #468]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005886:	f7fd f8f7 	bl	8002a78 <HAL_GetTick>
 800588a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800588c:	e008      	b.n	80058a0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800588e:	f7fd f8f3 	bl	8002a78 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e29d      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058a0:	4b6c      	ldr	r3, [pc, #432]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0f0      	beq.n	800588e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80058ac:	4b69      	ldr	r3, [pc, #420]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	041b      	lsls	r3, r3, #16
 80058ba:	4966      	ldr	r1, [pc, #408]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	610b      	str	r3, [r1, #16]
 80058c0:	e018      	b.n	80058f4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058c2:	4b64      	ldr	r3, [pc, #400]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a63      	ldr	r2, [pc, #396]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 80058c8:	f023 0301 	bic.w	r3, r3, #1
 80058cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ce:	f7fd f8d3 	bl	8002a78 <HAL_GetTick>
 80058d2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80058d6:	f7fd f8cf 	bl	8002a78 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e279      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1f0      	bne.n	80058d6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d03c      	beq.n	800597a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01c      	beq.n	8005942 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005908:	4b52      	ldr	r3, [pc, #328]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 800590a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800590e:	4a51      	ldr	r2, [pc, #324]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005910:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005914:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005918:	f7fd f8ae 	bl	8002a78 <HAL_GetTick>
 800591c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005920:	f7fd f8aa 	bl	8002a78 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e254      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005932:	4b48      	ldr	r3, [pc, #288]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0ef      	beq.n	8005920 <HAL_RCC_OscConfig+0x3a8>
 8005940:	e01b      	b.n	800597a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005942:	4b44      	ldr	r3, [pc, #272]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005948:	4a42      	ldr	r2, [pc, #264]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 800594a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800594e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005952:	f7fd f891 	bl	8002a78 <HAL_GetTick>
 8005956:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800595a:	f7fd f88d 	bl	8002a78 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e237      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800596c:	4b39      	ldr	r3, [pc, #228]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 800596e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005972:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1ef      	bne.n	800595a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0304 	and.w	r3, r3, #4
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80d2 	beq.w	8005b2c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005988:	4b34      	ldr	r3, [pc, #208]	@ (8005a5c <HAL_RCC_OscConfig+0x4e4>)
 800598a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d118      	bne.n	80059c6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005994:	4b31      	ldr	r3, [pc, #196]	@ (8005a5c <HAL_RCC_OscConfig+0x4e4>)
 8005996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005998:	4a30      	ldr	r2, [pc, #192]	@ (8005a5c <HAL_RCC_OscConfig+0x4e4>)
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059a0:	f7fd f86a 	bl	8002a78 <HAL_GetTick>
 80059a4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a8:	f7fd f866 	bl	8002a78 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e210      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80059ba:	4b28      	ldr	r3, [pc, #160]	@ (8005a5c <HAL_RCC_OscConfig+0x4e4>)
 80059bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d108      	bne.n	80059e0 <HAL_RCC_OscConfig+0x468>
 80059ce:	4b21      	ldr	r3, [pc, #132]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 80059d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80059de:	e074      	b.n	8005aca <HAL_RCC_OscConfig+0x552>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d118      	bne.n	8005a1a <HAL_RCC_OscConfig+0x4a2>
 80059e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 80059ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059ee:	4a19      	ldr	r2, [pc, #100]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80059f8:	4b16      	ldr	r3, [pc, #88]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 80059fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059fe:	4a15      	ldr	r2, [pc, #84]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a04:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a08:	4b12      	ldr	r3, [pc, #72]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a0e:	4a11      	ldr	r2, [pc, #68]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005a10:	f023 0304 	bic.w	r3, r3, #4
 8005a14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a18:	e057      	b.n	8005aca <HAL_RCC_OscConfig+0x552>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	2b05      	cmp	r3, #5
 8005a20:	d11e      	bne.n	8005a60 <HAL_RCC_OscConfig+0x4e8>
 8005a22:	4b0c      	ldr	r3, [pc, #48]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a28:	4a0a      	ldr	r2, [pc, #40]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005a2a:	f043 0304 	orr.w	r3, r3, #4
 8005a2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a32:	4b08      	ldr	r3, [pc, #32]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a38:	4a06      	ldr	r2, [pc, #24]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a42:	4b04      	ldr	r3, [pc, #16]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a48:	4a02      	ldr	r2, [pc, #8]	@ (8005a54 <HAL_RCC_OscConfig+0x4dc>)
 8005a4a:	f043 0301 	orr.w	r3, r3, #1
 8005a4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a52:	e03a      	b.n	8005aca <HAL_RCC_OscConfig+0x552>
 8005a54:	44020c00 	.word	0x44020c00
 8005a58:	20000008 	.word	0x20000008
 8005a5c:	44020800 	.word	0x44020800
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	2b85      	cmp	r3, #133	@ 0x85
 8005a66:	d118      	bne.n	8005a9a <HAL_RCC_OscConfig+0x522>
 8005a68:	4ba2      	ldr	r3, [pc, #648]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a6e:	4aa1      	ldr	r2, [pc, #644]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005a70:	f043 0304 	orr.w	r3, r3, #4
 8005a74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a78:	4b9e      	ldr	r3, [pc, #632]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a7e:	4a9d      	ldr	r2, [pc, #628]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a88:	4b9a      	ldr	r3, [pc, #616]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a8e:	4a99      	ldr	r2, [pc, #612]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005a90:	f043 0301 	orr.w	r3, r3, #1
 8005a94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a98:	e017      	b.n	8005aca <HAL_RCC_OscConfig+0x552>
 8005a9a:	4b96      	ldr	r3, [pc, #600]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005aa0:	4a94      	ldr	r2, [pc, #592]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005aa2:	f023 0301 	bic.w	r3, r3, #1
 8005aa6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005aaa:	4b92      	ldr	r3, [pc, #584]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ab0:	4a90      	ldr	r2, [pc, #576]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005ab2:	f023 0304 	bic.w	r3, r3, #4
 8005ab6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005aba:	4b8e      	ldr	r3, [pc, #568]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ac0:	4a8c      	ldr	r2, [pc, #560]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005ac2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ac6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d016      	beq.n	8005b00 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad2:	f7fc ffd1 	bl	8002a78 <HAL_GetTick>
 8005ad6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ad8:	e00a      	b.n	8005af0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ada:	f7fc ffcd 	bl	8002a78 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e175      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005af0:	4b80      	ldr	r3, [pc, #512]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0ed      	beq.n	8005ada <HAL_RCC_OscConfig+0x562>
 8005afe:	e015      	b.n	8005b2c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b00:	f7fc ffba 	bl	8002a78 <HAL_GetTick>
 8005b04:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b06:	e00a      	b.n	8005b1e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b08:	f7fc ffb6 	bl	8002a78 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e15e      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b1e:	4b75      	ldr	r3, [pc, #468]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1ed      	bne.n	8005b08 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0320 	and.w	r3, r3, #32
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d036      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d019      	beq.n	8005b74 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b40:	4b6c      	ldr	r3, [pc, #432]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a6b      	ldr	r2, [pc, #428]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005b46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4c:	f7fc ff94 	bl	8002a78 <HAL_GetTick>
 8005b50:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005b54:	f7fc ff90 	bl	8002a78 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e13a      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005b66:	4b63      	ldr	r3, [pc, #396]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0f0      	beq.n	8005b54 <HAL_RCC_OscConfig+0x5dc>
 8005b72:	e018      	b.n	8005ba6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b74:	4b5f      	ldr	r3, [pc, #380]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a5e      	ldr	r2, [pc, #376]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005b7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b80:	f7fc ff7a 	bl	8002a78 <HAL_GetTick>
 8005b84:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005b88:	f7fc ff76 	bl	8002a78 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e120      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005b9a:	4b56      	ldr	r3, [pc, #344]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8115 	beq.w	8005dda <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	2b18      	cmp	r3, #24
 8005bb4:	f000 80af 	beq.w	8005d16 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	f040 8086 	bne.w	8005cce <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8005bc2:	4b4c      	ldr	r3, [pc, #304]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a4b      	ldr	r2, [pc, #300]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005bc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bce:	f7fc ff53 	bl	8002a78 <HAL_GetTick>
 8005bd2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005bd6:	f7fc ff4f 	bl	8002a78 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e0f9      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005be8:	4b42      	ldr	r3, [pc, #264]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f0      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8005bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005bfc:	f023 0303 	bic.w	r3, r3, #3
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c08:	0212      	lsls	r2, r2, #8
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	4939      	ldr	r1, [pc, #228]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c16:	3b01      	subs	r3, #1
 8005c18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c20:	3b01      	subs	r3, #1
 8005c22:	025b      	lsls	r3, r3, #9
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	041b      	lsls	r3, r3, #16
 8005c30:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	061b      	lsls	r3, r3, #24
 8005c3e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c42:	492c      	ldr	r1, [pc, #176]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005c48:	4b2a      	ldr	r3, [pc, #168]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4c:	4a29      	ldr	r2, [pc, #164]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c4e:	f023 0310 	bic.w	r3, r3, #16
 8005c52:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c58:	4a26      	ldr	r2, [pc, #152]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005c5e:	4b25      	ldr	r3, [pc, #148]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c62:	4a24      	ldr	r2, [pc, #144]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c64:	f043 0310 	orr.w	r3, r3, #16
 8005c68:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8005c6a:	4b22      	ldr	r3, [pc, #136]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6e:	f023 020c 	bic.w	r2, r3, #12
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c76:	491f      	ldr	r1, [pc, #124]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c80:	f023 0220 	bic.w	r2, r3, #32
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c88:	491a      	ldr	r1, [pc, #104]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c8e:	4b19      	ldr	r3, [pc, #100]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c92:	4a18      	ldr	r2, [pc, #96]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c98:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8005c9a:	4b16      	ldr	r3, [pc, #88]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a15      	ldr	r2, [pc, #84]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005ca0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca6:	f7fc fee7 	bl	8002a78 <HAL_GetTick>
 8005caa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005cae:	f7fc fee3 	bl	8002a78 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e08d      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0f0      	beq.n	8005cae <HAL_RCC_OscConfig+0x736>
 8005ccc:	e085      	b.n	8005dda <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8005cce:	4b09      	ldr	r3, [pc, #36]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a08      	ldr	r2, [pc, #32]	@ (8005cf4 <HAL_RCC_OscConfig+0x77c>)
 8005cd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cda:	f7fc fecd 	bl	8002a78 <HAL_GetTick>
 8005cde:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005ce0:	e00a      	b.n	8005cf8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005ce2:	f7fc fec9 	bl	8002a78 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d903      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e073      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
 8005cf4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8005de4 <HAL_RCC_OscConfig+0x86c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1ee      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005d04:	4b37      	ldr	r3, [pc, #220]	@ (8005de4 <HAL_RCC_OscConfig+0x86c>)
 8005d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d08:	4a36      	ldr	r2, [pc, #216]	@ (8005de4 <HAL_RCC_OscConfig+0x86c>)
 8005d0a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005d0e:	f023 0303 	bic.w	r3, r3, #3
 8005d12:	6293      	str	r3, [r2, #40]	@ 0x28
 8005d14:	e061      	b.n	8005dda <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005d16:	4b33      	ldr	r3, [pc, #204]	@ (8005de4 <HAL_RCC_OscConfig+0x86c>)
 8005d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d1c:	4b31      	ldr	r3, [pc, #196]	@ (8005de4 <HAL_RCC_OscConfig+0x86c>)
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d20:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d031      	beq.n	8005d8e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f003 0203 	and.w	r2, r3, #3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d12a      	bne.n	8005d8e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	0a1b      	lsrs	r3, r3, #8
 8005d3c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d122      	bne.n	8005d8e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d52:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d11a      	bne.n	8005d8e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	0a5b      	lsrs	r3, r3, #9
 8005d5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d64:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d111      	bne.n	8005d8e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	0c1b      	lsrs	r3, r3, #16
 8005d6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d76:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d108      	bne.n	8005d8e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	0e1b      	lsrs	r3, r3, #24
 8005d80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d88:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d001      	beq.n	8005d92 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e024      	b.n	8005ddc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005d92:	4b14      	ldr	r3, [pc, #80]	@ (8005de4 <HAL_RCC_OscConfig+0x86c>)
 8005d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d96:	08db      	lsrs	r3, r3, #3
 8005d98:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d01a      	beq.n	8005dda <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005da4:	4b0f      	ldr	r3, [pc, #60]	@ (8005de4 <HAL_RCC_OscConfig+0x86c>)
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	4a0e      	ldr	r2, [pc, #56]	@ (8005de4 <HAL_RCC_OscConfig+0x86c>)
 8005daa:	f023 0310 	bic.w	r3, r3, #16
 8005dae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db0:	f7fc fe62 	bl	8002a78 <HAL_GetTick>
 8005db4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8005db6:	bf00      	nop
 8005db8:	f7fc fe5e 	bl	8002a78 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d0f9      	beq.n	8005db8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc8:	4a06      	ldr	r2, [pc, #24]	@ (8005de4 <HAL_RCC_OscConfig+0x86c>)
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005dce:	4b05      	ldr	r3, [pc, #20]	@ (8005de4 <HAL_RCC_OscConfig+0x86c>)
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd2:	4a04      	ldr	r2, [pc, #16]	@ (8005de4 <HAL_RCC_OscConfig+0x86c>)
 8005dd4:	f043 0310 	orr.w	r3, r3, #16
 8005dd8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3720      	adds	r7, #32
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	44020c00 	.word	0x44020c00

08005de8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e19e      	b.n	800613a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b83      	ldr	r3, [pc, #524]	@ (800600c <HAL_RCC_ClockConfig+0x224>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d910      	bls.n	8005e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b80      	ldr	r3, [pc, #512]	@ (800600c <HAL_RCC_ClockConfig+0x224>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 020f 	bic.w	r2, r3, #15
 8005e12:	497e      	ldr	r1, [pc, #504]	@ (800600c <HAL_RCC_ClockConfig+0x224>)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1a:	4b7c      	ldr	r3, [pc, #496]	@ (800600c <HAL_RCC_ClockConfig+0x224>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e186      	b.n	800613a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d012      	beq.n	8005e5e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	695a      	ldr	r2, [r3, #20]
 8005e3c:	4b74      	ldr	r3, [pc, #464]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	0a1b      	lsrs	r3, r3, #8
 8005e42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d909      	bls.n	8005e5e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005e4a:	4b71      	ldr	r3, [pc, #452]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	496d      	ldr	r1, [pc, #436]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0308 	and.w	r3, r3, #8
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d012      	beq.n	8005e90 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	4b68      	ldr	r3, [pc, #416]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	091b      	lsrs	r3, r3, #4
 8005e74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d909      	bls.n	8005e90 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005e7c:	4b64      	ldr	r3, [pc, #400]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	4961      	ldr	r1, [pc, #388]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d010      	beq.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	4b5b      	ldr	r3, [pc, #364]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d908      	bls.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005eac:	4b58      	ldr	r3, [pc, #352]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	4955      	ldr	r1, [pc, #340]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d010      	beq.n	8005eec <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	4b50      	ldr	r3, [pc, #320]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d908      	bls.n	8005eec <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005eda:	4b4d      	ldr	r3, [pc, #308]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f023 020f 	bic.w	r2, r3, #15
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	494a      	ldr	r1, [pc, #296]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8093 	beq.w	8006020 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d107      	bne.n	8005f12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005f02:	4b43      	ldr	r3, [pc, #268]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d121      	bne.n	8005f52 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e113      	b.n	800613a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d107      	bne.n	8005f2a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d115      	bne.n	8005f52 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e107      	b.n	800613a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d107      	bne.n	8005f42 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005f32:	4b37      	ldr	r3, [pc, #220]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e0fb      	b.n	800613a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f42:	4b33      	ldr	r3, [pc, #204]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e0f3      	b.n	800613a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8005f52:	4b2f      	ldr	r3, [pc, #188]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	f023 0203 	bic.w	r2, r3, #3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	492c      	ldr	r1, [pc, #176]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f64:	f7fc fd88 	bl	8002a78 <HAL_GetTick>
 8005f68:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d112      	bne.n	8005f98 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f72:	e00a      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005f74:	f7fc fd80 	bl	8002a78 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e0d7      	b.n	800613a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f8a:	4b21      	ldr	r3, [pc, #132]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f003 0318 	and.w	r3, r3, #24
 8005f92:	2b18      	cmp	r3, #24
 8005f94:	d1ee      	bne.n	8005f74 <HAL_RCC_ClockConfig+0x18c>
 8005f96:	e043      	b.n	8006020 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d112      	bne.n	8005fc6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fa0:	e00a      	b.n	8005fb8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005fa2:	f7fc fd69 	bl	8002a78 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e0c0      	b.n	800613a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fb8:	4b15      	ldr	r3, [pc, #84]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f003 0318 	and.w	r3, r3, #24
 8005fc0:	2b10      	cmp	r3, #16
 8005fc2:	d1ee      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0x1ba>
 8005fc4:	e02c      	b.n	8006020 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d122      	bne.n	8006014 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005fce:	e00a      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd0:	f7fc fd52 	bl	8002a78 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e0a9      	b.n	800613a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8006010 <HAL_RCC_ClockConfig+0x228>)
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f003 0318 	and.w	r3, r3, #24
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d1ee      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0x1e8>
 8005ff2:	e015      	b.n	8006020 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff4:	f7fc fd40 	bl	8002a78 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006002:	4293      	cmp	r3, r2
 8006004:	d906      	bls.n	8006014 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e097      	b.n	800613a <HAL_RCC_ClockConfig+0x352>
 800600a:	bf00      	nop
 800600c:	40022000 	.word	0x40022000
 8006010:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006014:	4b4b      	ldr	r3, [pc, #300]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	f003 0318 	and.w	r3, r3, #24
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e9      	bne.n	8005ff4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d010      	beq.n	800604e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	4b44      	ldr	r3, [pc, #272]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	429a      	cmp	r2, r3
 800603a:	d208      	bcs.n	800604e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800603c:	4b41      	ldr	r3, [pc, #260]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	f023 020f 	bic.w	r2, r3, #15
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	493e      	ldr	r1, [pc, #248]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 800604a:	4313      	orrs	r3, r2
 800604c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800604e:	4b3e      	ldr	r3, [pc, #248]	@ (8006148 <HAL_RCC_ClockConfig+0x360>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d210      	bcs.n	800607e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800605c:	4b3a      	ldr	r3, [pc, #232]	@ (8006148 <HAL_RCC_ClockConfig+0x360>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f023 020f 	bic.w	r2, r3, #15
 8006064:	4938      	ldr	r1, [pc, #224]	@ (8006148 <HAL_RCC_ClockConfig+0x360>)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	4313      	orrs	r3, r2
 800606a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800606c:	4b36      	ldr	r3, [pc, #216]	@ (8006148 <HAL_RCC_ClockConfig+0x360>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 030f 	and.w	r3, r3, #15
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d001      	beq.n	800607e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e05d      	b.n	800613a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	2b00      	cmp	r3, #0
 8006088:	d010      	beq.n	80060ac <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	4b2d      	ldr	r3, [pc, #180]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006096:	429a      	cmp	r2, r3
 8006098:	d208      	bcs.n	80060ac <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800609a:	4b2a      	ldr	r3, [pc, #168]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	4927      	ldr	r1, [pc, #156]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d012      	beq.n	80060de <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	4b21      	ldr	r3, [pc, #132]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	091b      	lsrs	r3, r3, #4
 80060c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d209      	bcs.n	80060de <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80060ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	491a      	ldr	r1, [pc, #104]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0310 	and.w	r3, r3, #16
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d012      	beq.n	8006110 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695a      	ldr	r2, [r3, #20]
 80060ee:	4b15      	ldr	r3, [pc, #84]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	0a1b      	lsrs	r3, r3, #8
 80060f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d209      	bcs.n	8006110 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80060fc:	4b11      	ldr	r3, [pc, #68]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	021b      	lsls	r3, r3, #8
 800610a:	490e      	ldr	r1, [pc, #56]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 800610c:	4313      	orrs	r3, r2
 800610e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006110:	f000 f822 	bl	8006158 <HAL_RCC_GetSysClockFreq>
 8006114:	4602      	mov	r2, r0
 8006116:	4b0b      	ldr	r3, [pc, #44]	@ (8006144 <HAL_RCC_ClockConfig+0x35c>)
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	490b      	ldr	r1, [pc, #44]	@ (800614c <HAL_RCC_ClockConfig+0x364>)
 8006120:	5ccb      	ldrb	r3, [r1, r3]
 8006122:	fa22 f303 	lsr.w	r3, r2, r3
 8006126:	4a0a      	ldr	r2, [pc, #40]	@ (8006150 <HAL_RCC_ClockConfig+0x368>)
 8006128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800612a:	4b0a      	ldr	r3, [pc, #40]	@ (8006154 <HAL_RCC_ClockConfig+0x36c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f7fc fc18 	bl	8002964 <HAL_InitTick>
 8006134:	4603      	mov	r3, r0
 8006136:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006138:	7afb      	ldrb	r3, [r7, #11]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	44020c00 	.word	0x44020c00
 8006148:	40022000 	.word	0x40022000
 800614c:	0801d2f8 	.word	0x0801d2f8
 8006150:	20000000 	.word	0x20000000
 8006154:	20000008 	.word	0x20000008

08006158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006158:	b480      	push	{r7}
 800615a:	b089      	sub	sp, #36	@ 0x24
 800615c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800615e:	4b8c      	ldr	r3, [pc, #560]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f003 0318 	and.w	r3, r3, #24
 8006166:	2b08      	cmp	r3, #8
 8006168:	d102      	bne.n	8006170 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800616a:	4b8a      	ldr	r3, [pc, #552]	@ (8006394 <HAL_RCC_GetSysClockFreq+0x23c>)
 800616c:	61fb      	str	r3, [r7, #28]
 800616e:	e107      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006170:	4b87      	ldr	r3, [pc, #540]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	f003 0318 	and.w	r3, r3, #24
 8006178:	2b00      	cmp	r3, #0
 800617a:	d112      	bne.n	80061a2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800617c:	4b84      	ldr	r3, [pc, #528]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b00      	cmp	r3, #0
 8006186:	d009      	beq.n	800619c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006188:	4b81      	ldr	r3, [pc, #516]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	08db      	lsrs	r3, r3, #3
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	4a81      	ldr	r2, [pc, #516]	@ (8006398 <HAL_RCC_GetSysClockFreq+0x240>)
 8006194:	fa22 f303 	lsr.w	r3, r2, r3
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	e0f1      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800619c:	4b7e      	ldr	r3, [pc, #504]	@ (8006398 <HAL_RCC_GetSysClockFreq+0x240>)
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	e0ee      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061a2:	4b7b      	ldr	r3, [pc, #492]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	f003 0318 	and.w	r3, r3, #24
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	d102      	bne.n	80061b4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061ae:	4b7b      	ldr	r3, [pc, #492]	@ (800639c <HAL_RCC_GetSysClockFreq+0x244>)
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	e0e5      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061b4:	4b76      	ldr	r3, [pc, #472]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f003 0318 	and.w	r3, r3, #24
 80061bc:	2b18      	cmp	r3, #24
 80061be:	f040 80dd 	bne.w	800637c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80061c2:	4b73      	ldr	r3, [pc, #460]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 80061c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80061cc:	4b70      	ldr	r3, [pc, #448]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 80061ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d0:	0a1b      	lsrs	r3, r3, #8
 80061d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80061d8:	4b6d      	ldr	r3, [pc, #436]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 80061da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061dc:	091b      	lsrs	r3, r3, #4
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80061e4:	4b6a      	ldr	r3, [pc, #424]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 80061e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80061e8:	08db      	lsrs	r3, r3, #3
 80061ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	fb02 f303 	mul.w	r3, r2, r3
 80061f4:	ee07 3a90 	vmov	s15, r3
 80061f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80b7 	beq.w	8006376 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d003      	beq.n	8006216 <HAL_RCC_GetSysClockFreq+0xbe>
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b03      	cmp	r3, #3
 8006212:	d056      	beq.n	80062c2 <HAL_RCC_GetSysClockFreq+0x16a>
 8006214:	e077      	b.n	8006306 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006216:	4b5e      	ldr	r3, [pc, #376]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d02d      	beq.n	800627e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006222:	4b5b      	ldr	r3, [pc, #364]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	08db      	lsrs	r3, r3, #3
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	4a5a      	ldr	r2, [pc, #360]	@ (8006398 <HAL_RCC_GetSysClockFreq+0x240>)
 800622e:	fa22 f303 	lsr.w	r3, r2, r3
 8006232:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	ee07 3a90 	vmov	s15, r3
 8006244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800624c:	4b50      	ldr	r3, [pc, #320]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 800624e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800625c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006260:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80063a0 <HAL_RCC_GetSysClockFreq+0x248>
 8006264:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006268:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800626c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006270:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006278:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800627c:	e065      	b.n	800634a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006288:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80063a4 <HAL_RCC_GetSysClockFreq+0x24c>
 800628c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006290:	4b3f      	ldr	r3, [pc, #252]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 8006292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006298:	ee07 3a90 	vmov	s15, r3
 800629c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80062a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80062a4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80063a0 <HAL_RCC_GetSysClockFreq+0x248>
 80062a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80062b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062bc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80062c0:	e043      	b.n	800634a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062cc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80063a8 <HAL_RCC_GetSysClockFreq+0x250>
 80062d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 80062d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80062e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80062e8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80063a0 <HAL_RCC_GetSysClockFreq+0x248>
 80062ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80062f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006300:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006304:	e021      	b.n	800634a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	ee07 3a90 	vmov	s15, r3
 800630c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006310:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80063ac <HAL_RCC_GetSysClockFreq+0x254>
 8006314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006318:	4b1d      	ldr	r3, [pc, #116]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 800631a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800631c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006320:	ee07 3a90 	vmov	s15, r3
 8006324:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006328:	ed97 6a02 	vldr	s12, [r7, #8]
 800632c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80063a0 <HAL_RCC_GetSysClockFreq+0x248>
 8006330:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006334:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006338:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800633c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006344:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006348:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800634a:	4b11      	ldr	r3, [pc, #68]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x238>)
 800634c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800634e:	0a5b      	lsrs	r3, r3, #9
 8006350:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006354:	3301      	adds	r3, #1
 8006356:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006362:	edd7 6a06 	vldr	s13, [r7, #24]
 8006366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800636a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800636e:	ee17 3a90 	vmov	r3, s15
 8006372:	61fb      	str	r3, [r7, #28]
 8006374:	e004      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	e001      	b.n	8006380 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800637c:	4b06      	ldr	r3, [pc, #24]	@ (8006398 <HAL_RCC_GetSysClockFreq+0x240>)
 800637e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006380:	69fb      	ldr	r3, [r7, #28]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3724      	adds	r7, #36	@ 0x24
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	44020c00 	.word	0x44020c00
 8006394:	003d0900 	.word	0x003d0900
 8006398:	03d09000 	.word	0x03d09000
 800639c:	007a1200 	.word	0x007a1200
 80063a0:	46000000 	.word	0x46000000
 80063a4:	4c742400 	.word	0x4c742400
 80063a8:	4af42400 	.word	0x4af42400
 80063ac:	4a742400 	.word	0x4a742400

080063b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80063b4:	f7ff fed0 	bl	8006158 <HAL_RCC_GetSysClockFreq>
 80063b8:	4602      	mov	r2, r0
 80063ba:	4b08      	ldr	r3, [pc, #32]	@ (80063dc <HAL_RCC_GetHCLKFreq+0x2c>)
 80063bc:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80063be:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80063c2:	4907      	ldr	r1, [pc, #28]	@ (80063e0 <HAL_RCC_GetHCLKFreq+0x30>)
 80063c4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80063c6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80063ca:	fa22 f303 	lsr.w	r3, r2, r3
 80063ce:	4a05      	ldr	r2, [pc, #20]	@ (80063e4 <HAL_RCC_GetHCLKFreq+0x34>)
 80063d0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80063d2:	4b04      	ldr	r3, [pc, #16]	@ (80063e4 <HAL_RCC_GetHCLKFreq+0x34>)
 80063d4:	681b      	ldr	r3, [r3, #0]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	44020c00 	.word	0x44020c00
 80063e0:	0801d2f8 	.word	0x0801d2f8
 80063e4:	20000000 	.word	0x20000000

080063e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80063ec:	f7ff ffe0 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 80063f0:	4602      	mov	r2, r0
 80063f2:	4b06      	ldr	r3, [pc, #24]	@ (800640c <HAL_RCC_GetPCLK1Freq+0x24>)
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	091b      	lsrs	r3, r3, #4
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	4904      	ldr	r1, [pc, #16]	@ (8006410 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063fe:	5ccb      	ldrb	r3, [r1, r3]
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	bd80      	pop	{r7, pc}
 800640c:	44020c00 	.word	0x44020c00
 8006410:	0801d308 	.word	0x0801d308

08006414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006418:	f7ff ffca 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 800641c:	4602      	mov	r2, r0
 800641e:	4b06      	ldr	r3, [pc, #24]	@ (8006438 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	0a1b      	lsrs	r3, r3, #8
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	4904      	ldr	r1, [pc, #16]	@ (800643c <HAL_RCC_GetPCLK2Freq+0x28>)
 800642a:	5ccb      	ldrb	r3, [r1, r3]
 800642c:	f003 031f 	and.w	r3, r3, #31
 8006430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006434:	4618      	mov	r0, r3
 8006436:	bd80      	pop	{r7, pc}
 8006438:	44020c00 	.word	0x44020c00
 800643c:	0801d308 	.word	0x0801d308

08006440 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006444:	f7ff ffb4 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 8006448:	4602      	mov	r2, r0
 800644a:	4b06      	ldr	r3, [pc, #24]	@ (8006464 <HAL_RCC_GetPCLK3Freq+0x24>)
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	0b1b      	lsrs	r3, r3, #12
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	4904      	ldr	r1, [pc, #16]	@ (8006468 <HAL_RCC_GetPCLK3Freq+0x28>)
 8006456:	5ccb      	ldrb	r3, [r1, r3]
 8006458:	f003 031f 	and.w	r3, r3, #31
 800645c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006460:	4618      	mov	r0, r3
 8006462:	bd80      	pop	{r7, pc}
 8006464:	44020c00 	.word	0x44020c00
 8006468:	0801d308 	.word	0x0801d308

0800646c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800646c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006470:	b0d8      	sub	sp, #352	@ 0x160
 8006472:	af00      	add	r7, sp, #0
 8006474:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006478:	2300      	movs	r3, #0
 800647a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800647e:	2300      	movs	r3, #0
 8006480:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006490:	2500      	movs	r5, #0
 8006492:	ea54 0305 	orrs.w	r3, r4, r5
 8006496:	d00b      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006498:	4bcd      	ldr	r3, [pc, #820]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800649a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800649e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80064a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a8:	4ac9      	ldr	r2, [pc, #804]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80064aa:	430b      	orrs	r3, r1
 80064ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f002 0801 	and.w	r8, r2, #1
 80064bc:	f04f 0900 	mov.w	r9, #0
 80064c0:	ea58 0309 	orrs.w	r3, r8, r9
 80064c4:	d042      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80064c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064cc:	2b05      	cmp	r3, #5
 80064ce:	d823      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80064d0:	a201      	add	r2, pc, #4	@ (adr r2, 80064d8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	08006521 	.word	0x08006521
 80064dc:	080064f1 	.word	0x080064f1
 80064e0:	08006505 	.word	0x08006505
 80064e4:	08006521 	.word	0x08006521
 80064e8:	08006521 	.word	0x08006521
 80064ec:	08006521 	.word	0x08006521
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064f4:	3308      	adds	r3, #8
 80064f6:	4618      	mov	r0, r3
 80064f8:	f004 fee0 	bl	800b2bc <RCCEx_PLL2_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006502:	e00e      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006508:	3330      	adds	r3, #48	@ 0x30
 800650a:	4618      	mov	r0, r3
 800650c:	f004 ff6e 	bl	800b3ec <RCCEx_PLL3_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006516:	e004      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800651e:	e000      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006522:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10c      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800652a:	4ba9      	ldr	r3, [pc, #676]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800652c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006530:	f023 0107 	bic.w	r1, r3, #7
 8006534:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800653a:	4aa5      	ldr	r2, [pc, #660]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800653c:	430b      	orrs	r3, r1
 800653e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006542:	e003      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006548:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800654c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f002 0a02 	and.w	sl, r2, #2
 8006558:	f04f 0b00 	mov.w	fp, #0
 800655c:	ea5a 030b 	orrs.w	r3, sl, fp
 8006560:	f000 8088 	beq.w	8006674 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8006564:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800656a:	2b28      	cmp	r3, #40	@ 0x28
 800656c:	d868      	bhi.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800656e:	a201      	add	r2, pc, #4	@ (adr r2, 8006574 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	08006649 	.word	0x08006649
 8006578:	08006641 	.word	0x08006641
 800657c:	08006641 	.word	0x08006641
 8006580:	08006641 	.word	0x08006641
 8006584:	08006641 	.word	0x08006641
 8006588:	08006641 	.word	0x08006641
 800658c:	08006641 	.word	0x08006641
 8006590:	08006641 	.word	0x08006641
 8006594:	08006619 	.word	0x08006619
 8006598:	08006641 	.word	0x08006641
 800659c:	08006641 	.word	0x08006641
 80065a0:	08006641 	.word	0x08006641
 80065a4:	08006641 	.word	0x08006641
 80065a8:	08006641 	.word	0x08006641
 80065ac:	08006641 	.word	0x08006641
 80065b0:	08006641 	.word	0x08006641
 80065b4:	0800662d 	.word	0x0800662d
 80065b8:	08006641 	.word	0x08006641
 80065bc:	08006641 	.word	0x08006641
 80065c0:	08006641 	.word	0x08006641
 80065c4:	08006641 	.word	0x08006641
 80065c8:	08006641 	.word	0x08006641
 80065cc:	08006641 	.word	0x08006641
 80065d0:	08006641 	.word	0x08006641
 80065d4:	08006649 	.word	0x08006649
 80065d8:	08006641 	.word	0x08006641
 80065dc:	08006641 	.word	0x08006641
 80065e0:	08006641 	.word	0x08006641
 80065e4:	08006641 	.word	0x08006641
 80065e8:	08006641 	.word	0x08006641
 80065ec:	08006641 	.word	0x08006641
 80065f0:	08006641 	.word	0x08006641
 80065f4:	08006649 	.word	0x08006649
 80065f8:	08006641 	.word	0x08006641
 80065fc:	08006641 	.word	0x08006641
 8006600:	08006641 	.word	0x08006641
 8006604:	08006641 	.word	0x08006641
 8006608:	08006641 	.word	0x08006641
 800660c:	08006641 	.word	0x08006641
 8006610:	08006641 	.word	0x08006641
 8006614:	08006649 	.word	0x08006649
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006618:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800661c:	3308      	adds	r3, #8
 800661e:	4618      	mov	r0, r3
 8006620:	f004 fe4c 	bl	800b2bc <RCCEx_PLL2_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800662a:	e00e      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800662c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006630:	3330      	adds	r3, #48	@ 0x30
 8006632:	4618      	mov	r0, r3
 8006634:	f004 feda 	bl	800b3ec <RCCEx_PLL3_Config>
 8006638:	4603      	mov	r3, r0
 800663a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800663e:	e004      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006646:	e000      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10c      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006652:	4b5f      	ldr	r3, [pc, #380]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006654:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006658:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800665c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006662:	4a5b      	ldr	r2, [pc, #364]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006664:	430b      	orrs	r3, r1
 8006666:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800666a:	e003      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006670:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006674:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f002 0304 	and.w	r3, r2, #4
 8006680:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8006684:	2300      	movs	r3, #0
 8006686:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800668a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800668e:	460b      	mov	r3, r1
 8006690:	4313      	orrs	r3, r2
 8006692:	d04e      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006694:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800669a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800669e:	d02c      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80066a0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80066a4:	d825      	bhi.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80066a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066aa:	d028      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80066ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066b0:	d81f      	bhi.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80066b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80066b4:	d025      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80066b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80066b8:	d81b      	bhi.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80066ba:	2b80      	cmp	r3, #128	@ 0x80
 80066bc:	d00f      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x272>
 80066be:	2b80      	cmp	r3, #128	@ 0x80
 80066c0:	d817      	bhi.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01f      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80066c6:	2b40      	cmp	r3, #64	@ 0x40
 80066c8:	d113      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066ce:	3308      	adds	r3, #8
 80066d0:	4618      	mov	r0, r3
 80066d2:	f004 fdf3 	bl	800b2bc <RCCEx_PLL2_Config>
 80066d6:	4603      	mov	r3, r0
 80066d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80066dc:	e014      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066e2:	3330      	adds	r3, #48	@ 0x30
 80066e4:	4618      	mov	r0, r3
 80066e6:	f004 fe81 	bl	800b3ec <RCCEx_PLL3_Config>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80066f0:	e00a      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80066f8:	e006      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80066fa:	bf00      	nop
 80066fc:	e004      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80066fe:	bf00      	nop
 8006700:	e002      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006702:	bf00      	nop
 8006704:	e000      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006708:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10c      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006710:	4b2f      	ldr	r3, [pc, #188]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006712:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006716:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800671a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800671e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006720:	4a2b      	ldr	r2, [pc, #172]	@ (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006722:	430b      	orrs	r3, r1
 8006724:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006728:	e003      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800672e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006732:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f002 0308 	and.w	r3, r2, #8
 800673e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8006742:	2300      	movs	r3, #0
 8006744:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8006748:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800674c:	460b      	mov	r3, r1
 800674e:	4313      	orrs	r3, r2
 8006750:	d056      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8006752:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006758:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800675c:	d031      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800675e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006762:	d82a      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006768:	d02d      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800676a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800676e:	d824      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006770:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006774:	d029      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006776:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800677a:	d81e      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800677c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006780:	d011      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006786:	d818      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d023      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800678c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006790:	d113      	bne.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006792:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006796:	3308      	adds	r3, #8
 8006798:	4618      	mov	r0, r3
 800679a:	f004 fd8f 	bl	800b2bc <RCCEx_PLL2_Config>
 800679e:	4603      	mov	r3, r0
 80067a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80067a4:	e017      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067aa:	3330      	adds	r3, #48	@ 0x30
 80067ac:	4618      	mov	r0, r3
 80067ae:	f004 fe1d 	bl	800b3ec <RCCEx_PLL3_Config>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80067b8:	e00d      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80067c0:	e009      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80067c2:	bf00      	nop
 80067c4:	e007      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80067c6:	bf00      	nop
 80067c8:	e005      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80067ca:	bf00      	nop
 80067cc:	e003      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80067ce:	bf00      	nop
 80067d0:	44020c00 	.word	0x44020c00
        break;
 80067d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10c      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80067de:	4bbb      	ldr	r3, [pc, #748]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80067e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80067e4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80067e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067ee:	4ab7      	ldr	r2, [pc, #732]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80067f0:	430b      	orrs	r3, r1
 80067f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80067f6:	e003      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006800:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	f002 0310 	and.w	r3, r2, #16
 800680c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006810:	2300      	movs	r3, #0
 8006812:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006816:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800681a:	460b      	mov	r3, r1
 800681c:	4313      	orrs	r3, r2
 800681e:	d053      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006820:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006826:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800682a:	d031      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800682c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006830:	d82a      	bhi.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006832:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006836:	d02d      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800683c:	d824      	bhi.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800683e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006842:	d029      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006844:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006848:	d81e      	bhi.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800684a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800684e:	d011      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006854:	d818      	bhi.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d020      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800685e:	d113      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006864:	3308      	adds	r3, #8
 8006866:	4618      	mov	r0, r3
 8006868:	f004 fd28 	bl	800b2bc <RCCEx_PLL2_Config>
 800686c:	4603      	mov	r3, r0
 800686e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8006872:	e014      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006874:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006878:	3330      	adds	r3, #48	@ 0x30
 800687a:	4618      	mov	r0, r3
 800687c:	f004 fdb6 	bl	800b3ec <RCCEx_PLL3_Config>
 8006880:	4603      	mov	r3, r0
 8006882:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8006886:	e00a      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800688e:	e006      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006890:	bf00      	nop
 8006892:	e004      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006894:	bf00      	nop
 8006896:	e002      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006898:	bf00      	nop
 800689a:	e000      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800689c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800689e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10c      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80068a6:	4b89      	ldr	r3, [pc, #548]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80068a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80068ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80068b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068b6:	4a85      	ldr	r2, [pc, #532]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80068b8:	430b      	orrs	r3, r1
 80068ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80068be:	e003      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80068c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f002 0320 	and.w	r3, r2, #32
 80068d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80068d8:	2300      	movs	r3, #0
 80068da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80068de:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80068e2:	460b      	mov	r3, r1
 80068e4:	4313      	orrs	r3, r2
 80068e6:	d053      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80068e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ee:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80068f2:	d031      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80068f4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80068f8:	d82a      	bhi.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80068fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068fe:	d02d      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006900:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006904:	d824      	bhi.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006906:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800690a:	d029      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800690c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006910:	d81e      	bhi.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006916:	d011      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800691c:	d818      	bhi.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d020      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8006922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006926:	d113      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006928:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800692c:	3308      	adds	r3, #8
 800692e:	4618      	mov	r0, r3
 8006930:	f004 fcc4 	bl	800b2bc <RCCEx_PLL2_Config>
 8006934:	4603      	mov	r3, r0
 8006936:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800693a:	e014      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800693c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006940:	3330      	adds	r3, #48	@ 0x30
 8006942:	4618      	mov	r0, r3
 8006944:	f004 fd52 	bl	800b3ec <RCCEx_PLL3_Config>
 8006948:	4603      	mov	r3, r0
 800694a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800694e:	e00a      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006956:	e006      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006958:	bf00      	nop
 800695a:	e004      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800695c:	bf00      	nop
 800695e:	e002      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006960:	bf00      	nop
 8006962:	e000      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006966:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10c      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800696e:	4b57      	ldr	r3, [pc, #348]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006970:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006974:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8006978:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800697c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697e:	4a53      	ldr	r2, [pc, #332]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006980:	430b      	orrs	r3, r1
 8006982:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006986:	e003      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006988:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800698c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006990:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006998:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800699c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80069a0:	2300      	movs	r3, #0
 80069a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80069a6:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80069aa:	460b      	mov	r3, r1
 80069ac:	4313      	orrs	r3, r2
 80069ae:	d053      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80069b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069b6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80069ba:	d031      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80069bc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80069c0:	d82a      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80069c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069c6:	d02d      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80069c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069cc:	d824      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80069ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80069d2:	d029      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80069d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80069d8:	d81e      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80069da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80069de:	d011      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80069e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80069e4:	d818      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d020      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80069ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069ee:	d113      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069f4:	3308      	adds	r3, #8
 80069f6:	4618      	mov	r0, r3
 80069f8:	f004 fc60 	bl	800b2bc <RCCEx_PLL2_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8006a02:	e014      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a08:	3330      	adds	r3, #48	@ 0x30
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f004 fcee 	bl	800b3ec <RCCEx_PLL3_Config>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8006a16:	e00a      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a1e:	e006      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006a20:	bf00      	nop
 8006a22:	e004      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006a24:	bf00      	nop
 8006a26:	e002      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006a28:	bf00      	nop
 8006a2a:	e000      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8006a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10c      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8006a36:	4b25      	ldr	r3, [pc, #148]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006a38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006a3c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8006a40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a46:	4a21      	ldr	r2, [pc, #132]	@ (8006acc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006a4e:	e003      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a54:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a64:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006a6e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8006a72:	460b      	mov	r3, r1
 8006a74:	4313      	orrs	r3, r2
 8006a76:	d055      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8006a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a7e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006a82:	d033      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x680>
 8006a84:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006a88:	d82c      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006a8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a8e:	d02f      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8006a90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a94:	d826      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006a96:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006a9a:	d02b      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8006a9c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006aa0:	d820      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006aa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006aa6:	d013      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006aa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006aac:	d81a      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d022      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8006ab2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ab6:	d115      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ab8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006abc:	3308      	adds	r3, #8
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f004 fbfc 	bl	800b2bc <RCCEx_PLL2_Config>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8006aca:	e016      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8006acc:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ad0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ad4:	3330      	adds	r3, #48	@ 0x30
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f004 fc88 	bl	800b3ec <RCCEx_PLL3_Config>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8006ae2:	e00a      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006aea:	e006      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006aec:	bf00      	nop
 8006aee:	e004      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006af0:	bf00      	nop
 8006af2:	e002      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006af4:	bf00      	nop
 8006af6:	e000      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10c      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8006b02:	4bbb      	ldr	r3, [pc, #748]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006b08:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006b0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b12:	4ab7      	ldr	r2, [pc, #732]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006b14:	430b      	orrs	r3, r1
 8006b16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006b1a:	e003      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b20:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8006b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006b30:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8006b34:	2300      	movs	r3, #0
 8006b36:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8006b3a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4313      	orrs	r3, r2
 8006b42:	d053      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8006b44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b4a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006b4e:	d031      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8006b50:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006b54:	d82a      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006b56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b5a:	d02d      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8006b5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b60:	d824      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006b62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b66:	d029      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x750>
 8006b68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b6c:	d81e      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006b6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b72:	d011      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8006b74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b78:	d818      	bhi.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d020      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8006b7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b82:	d113      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b88:	3308      	adds	r3, #8
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f004 fb96 	bl	800b2bc <RCCEx_PLL2_Config>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8006b96:	e014      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b9c:	3330      	adds	r3, #48	@ 0x30
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f004 fc24 	bl	800b3ec <RCCEx_PLL3_Config>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8006baa:	e00a      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006bb2:	e006      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006bb4:	bf00      	nop
 8006bb6:	e004      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006bb8:	bf00      	nop
 8006bba:	e002      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006bbc:	bf00      	nop
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10c      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8006bca:	4b89      	ldr	r3, [pc, #548]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006bd0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006bd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bda:	4a85      	ldr	r2, [pc, #532]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006be2:	e003      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006be8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8006bec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006bf8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006c02:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006c06:	460b      	mov	r3, r1
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	d055      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8006c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c14:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8006c18:	d031      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x812>
 8006c1a:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8006c1e:	d82a      	bhi.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c24:	d02d      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8006c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c2a:	d824      	bhi.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006c2c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006c30:	d029      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8006c32:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006c36:	d81e      	bhi.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006c38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c3c:	d011      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8006c3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c42:	d818      	bhi.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d020      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8006c48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c4c:	d113      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c52:	3308      	adds	r3, #8
 8006c54:	4618      	mov	r0, r3
 8006c56:	f004 fb31 	bl	800b2bc <RCCEx_PLL2_Config>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8006c60:	e014      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c66:	3330      	adds	r3, #48	@ 0x30
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f004 fbbf 	bl	800b3ec <RCCEx_PLL3_Config>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8006c74:	e00a      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c7c:	e006      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006c7e:	bf00      	nop
 8006c80:	e004      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006c82:	bf00      	nop
 8006c84:	e002      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006c86:	bf00      	nop
 8006c88:	e000      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c8c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10d      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8006c94:	4b56      	ldr	r3, [pc, #344]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006c96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006c9a:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8006c9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ca6:	4a52      	ldr	r2, [pc, #328]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006cae:	e003      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cb4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8006cb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006cc4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006cce:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	d044      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8006cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ce0:	2b05      	cmp	r3, #5
 8006ce2:	d823      	bhi.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d35 	.word	0x08006d35
 8006cf0:	08006d05 	.word	0x08006d05
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d35 	.word	0x08006d35
 8006cfc:	08006d35 	.word	0x08006d35
 8006d00:	08006d35 	.word	0x08006d35
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d08:	3308      	adds	r3, #8
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f004 fad6 	bl	800b2bc <RCCEx_PLL2_Config>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006d16:	e00e      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d1c:	3330      	adds	r3, #48	@ 0x30
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f004 fb64 	bl	800b3ec <RCCEx_PLL3_Config>
 8006d24:	4603      	mov	r3, r0
 8006d26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006d2a:	e004      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d32:	e000      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8006d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10d      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8006d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006d40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006d44:	f023 0107 	bic.w	r1, r3, #7
 8006d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d50:	4a27      	ldr	r2, [pc, #156]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006d52:	430b      	orrs	r3, r1
 8006d54:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006d58:	e003      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d5e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8006d62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006d6e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d72:	2300      	movs	r3, #0
 8006d74:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006d78:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	d04f      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8006d82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d8a:	2b50      	cmp	r3, #80	@ 0x50
 8006d8c:	d029      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006d8e:	2b50      	cmp	r3, #80	@ 0x50
 8006d90:	d823      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006d92:	2b40      	cmp	r3, #64	@ 0x40
 8006d94:	d027      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8006d96:	2b40      	cmp	r3, #64	@ 0x40
 8006d98:	d81f      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006d9a:	2b30      	cmp	r3, #48	@ 0x30
 8006d9c:	d025      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8006d9e:	2b30      	cmp	r3, #48	@ 0x30
 8006da0:	d81b      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d00f      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d817      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d022      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006dae:	2b10      	cmp	r3, #16
 8006db0:	d113      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006db6:	3308      	adds	r3, #8
 8006db8:	4618      	mov	r0, r3
 8006dba:	f004 fa7f 	bl	800b2bc <RCCEx_PLL2_Config>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006dc4:	e017      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006dc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dca:	3330      	adds	r3, #48	@ 0x30
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f004 fb0d 	bl	800b3ec <RCCEx_PLL3_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006dd8:	e00d      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006de0:	e009      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006de2:	bf00      	nop
 8006de4:	e007      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006de6:	bf00      	nop
 8006de8:	e005      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006dea:	bf00      	nop
 8006dec:	e003      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8006dee:	bf00      	nop
 8006df0:	44020c00 	.word	0x44020c00
        break;
 8006df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10d      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8006dfe:	4baf      	ldr	r3, [pc, #700]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006e00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006e04:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006e08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e10:	4aaa      	ldr	r2, [pc, #680]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006e12:	430b      	orrs	r3, r1
 8006e14:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006e18:	e003      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e1e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e32:	2300      	movs	r3, #0
 8006e34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	d055      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8006e42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e4a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006e4e:	d031      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8006e50:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006e54:	d82a      	bhi.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006e56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e5a:	d02d      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006e5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e60:	d824      	bhi.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006e62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e66:	d029      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8006e68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e6c:	d81e      	bhi.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006e6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e72:	d011      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8006e74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e78:	d818      	bhi.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d020      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8006e7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e82:	d113      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e88:	3308      	adds	r3, #8
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f004 fa16 	bl	800b2bc <RCCEx_PLL2_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006e96:	e014      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e9c:	3330      	adds	r3, #48	@ 0x30
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f004 faa4 	bl	800b3ec <RCCEx_PLL3_Config>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006eaa:	e00a      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006eb2:	e006      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006eb4:	bf00      	nop
 8006eb6:	e004      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006eb8:	bf00      	nop
 8006eba:	e002      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006ebc:	bf00      	nop
 8006ebe:	e000      	b.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10d      	bne.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006eca:	4b7c      	ldr	r3, [pc, #496]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ed0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006edc:	4a77      	ldr	r2, [pc, #476]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006ee4:	e003      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006eea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006efa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006efe:	2300      	movs	r3, #0
 8006f00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	d03d      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8006f0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f1a:	d01b      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8006f1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f20:	d814      	bhi.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8006f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f26:	d017      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8006f28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f2c:	d80e      	bhi.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d014      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8006f32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f36:	d109      	bne.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f3c:	3330      	adds	r3, #48	@ 0x30
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f004 fa54 	bl	800b3ec <RCCEx_PLL3_Config>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8006f4a:	e008      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f52:	e004      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006f54:	bf00      	nop
 8006f56:	e002      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006f58:	bf00      	nop
 8006f5a:	e000      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10d      	bne.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006f66:	4b55      	ldr	r3, [pc, #340]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006f68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f6c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f78:	4a50      	ldr	r2, [pc, #320]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006f80:	e003      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006f96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fa0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	d03d      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8006faa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fb2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006fb6:	d01b      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8006fb8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006fbc:	d814      	bhi.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006fbe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006fc2:	d017      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8006fc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006fc8:	d80e      	bhi.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d014      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8006fce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fd2:	d109      	bne.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006fd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fd8:	3330      	adds	r3, #48	@ 0x30
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f004 fa06 	bl	800b3ec <RCCEx_PLL3_Config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006fe6:	e008      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fee:	e004      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006ff0:	bf00      	nop
 8006ff2:	e002      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006ff4:	bf00      	nop
 8006ff6:	e000      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ffa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10d      	bne.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007002:	4b2e      	ldr	r3, [pc, #184]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007004:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007008:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800700c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007010:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007014:	4a29      	ldr	r2, [pc, #164]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007016:	430b      	orrs	r3, r1
 8007018:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800701c:	e003      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800701e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007022:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007026:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007032:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007036:	2300      	movs	r3, #0
 8007038:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800703c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007040:	460b      	mov	r3, r1
 8007042:	4313      	orrs	r3, r2
 8007044:	d040      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8007046:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800704a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800704e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007052:	d01b      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8007054:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007058:	d814      	bhi.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800705a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800705e:	d017      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007060:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007064:	d80e      	bhi.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d014      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800706a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800706e:	d109      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007070:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007074:	3330      	adds	r3, #48	@ 0x30
 8007076:	4618      	mov	r0, r3
 8007078:	f004 f9b8 	bl	800b3ec <RCCEx_PLL3_Config>
 800707c:	4603      	mov	r3, r0
 800707e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8007082:	e008      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800708a:	e004      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800708c:	bf00      	nop
 800708e:	e002      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007090:	bf00      	nop
 8007092:	e000      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8007094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007096:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800709a:	2b00      	cmp	r3, #0
 800709c:	d110      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800709e:	4b07      	ldr	r3, [pc, #28]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80070a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070a4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80070a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80070b0:	4a02      	ldr	r2, [pc, #8]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80070b2:	430b      	orrs	r3, r1
 80070b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80070b8:	e006      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80070ba:	bf00      	nop
 80070bc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	2100      	movs	r1, #0
 80070d2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80070d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80070de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80070e2:	460b      	mov	r3, r1
 80070e4:	4313      	orrs	r3, r2
 80070e6:	d03d      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80070e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80070f4:	d01b      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80070f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80070fa:	d814      	bhi.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80070fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007100:	d017      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8007102:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007106:	d80e      	bhi.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d014      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800710c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007110:	d109      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007112:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007116:	3330      	adds	r3, #48	@ 0x30
 8007118:	4618      	mov	r0, r3
 800711a:	f004 f967 	bl	800b3ec <RCCEx_PLL3_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8007124:	e008      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800712c:	e004      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800712e:	bf00      	nop
 8007130:	e002      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007132:	bf00      	nop
 8007134:	e000      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007136:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007138:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10d      	bne.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007140:	4bbe      	ldr	r3, [pc, #760]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007142:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007146:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800714a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800714e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007152:	4aba      	ldr	r2, [pc, #744]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007154:	430b      	orrs	r3, r1
 8007156:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800715a:	e003      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800715c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007160:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007164:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007170:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007174:	2300      	movs	r3, #0
 8007176:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800717a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800717e:	460b      	mov	r3, r1
 8007180:	4313      	orrs	r3, r2
 8007182:	d035      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8007184:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007188:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800718c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007190:	d015      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8007192:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007196:	d80e      	bhi.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007198:	2b00      	cmp	r3, #0
 800719a:	d012      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800719c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071a0:	d109      	bne.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071a6:	3330      	adds	r3, #48	@ 0x30
 80071a8:	4618      	mov	r0, r3
 80071aa:	f004 f91f 	bl	800b3ec <RCCEx_PLL3_Config>
 80071ae:	4603      	mov	r3, r0
 80071b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80071b4:	e006      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80071bc:	e002      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80071be:	bf00      	nop
 80071c0:	e000      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80071c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10d      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80071cc:	4b9b      	ldr	r3, [pc, #620]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80071ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071d2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80071d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071de:	4a97      	ldr	r2, [pc, #604]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80071e0:	430b      	orrs	r3, r1
 80071e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80071e6:	e003      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071ec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	2100      	movs	r1, #0
 80071fa:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80071fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007202:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007206:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800720a:	460b      	mov	r3, r1
 800720c:	4313      	orrs	r3, r2
 800720e:	d00e      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8007210:	4b8a      	ldr	r3, [pc, #552]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	4a89      	ldr	r2, [pc, #548]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007216:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800721a:	61d3      	str	r3, [r2, #28]
 800721c:	4b87      	ldr	r3, [pc, #540]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800721e:	69d9      	ldr	r1, [r3, #28]
 8007220:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007224:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8007228:	4a84      	ldr	r2, [pc, #528]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800722a:	430b      	orrs	r3, r1
 800722c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800722e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800723a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800723e:	2300      	movs	r3, #0
 8007240:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007244:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007248:	460b      	mov	r3, r1
 800724a:	4313      	orrs	r3, r2
 800724c:	d055      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800724e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007256:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800725a:	d031      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800725c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007260:	d82a      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007262:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007266:	d02d      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8007268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800726c:	d824      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800726e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007272:	d029      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8007274:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007278:	d81e      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800727a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800727e:	d011      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8007280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007284:	d818      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d020      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800728a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800728e:	d113      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007290:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007294:	3308      	adds	r3, #8
 8007296:	4618      	mov	r0, r3
 8007298:	f004 f810 	bl	800b2bc <RCCEx_PLL2_Config>
 800729c:	4603      	mov	r3, r0
 800729e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80072a2:	e014      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072a8:	3330      	adds	r3, #48	@ 0x30
 80072aa:	4618      	mov	r0, r3
 80072ac:	f004 f89e 	bl	800b3ec <RCCEx_PLL3_Config>
 80072b0:	4603      	mov	r3, r0
 80072b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80072b6:	e00a      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80072be:	e006      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80072c0:	bf00      	nop
 80072c2:	e004      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80072c4:	bf00      	nop
 80072c6:	e002      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80072c8:	bf00      	nop
 80072ca:	e000      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80072cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10d      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80072d6:	4b59      	ldr	r3, [pc, #356]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80072d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80072dc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80072e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80072e8:	4a54      	ldr	r2, [pc, #336]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80072ea:	430b      	orrs	r3, r1
 80072ec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80072f0:	e003      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80072fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800730a:	2300      	movs	r3, #0
 800730c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007310:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007314:	460b      	mov	r3, r1
 8007316:	4313      	orrs	r3, r2
 8007318:	d055      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800731a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800731e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007322:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007326:	d031      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8007328:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800732c:	d82a      	bhi.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800732e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007332:	d02d      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8007334:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007338:	d824      	bhi.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800733a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800733e:	d029      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8007340:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007344:	d81e      	bhi.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007346:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800734a:	d011      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800734c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007350:	d818      	bhi.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d020      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800735a:	d113      	bne.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800735c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007360:	3308      	adds	r3, #8
 8007362:	4618      	mov	r0, r3
 8007364:	f003 ffaa 	bl	800b2bc <RCCEx_PLL2_Config>
 8007368:	4603      	mov	r3, r0
 800736a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800736e:	e014      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007370:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007374:	3330      	adds	r3, #48	@ 0x30
 8007376:	4618      	mov	r0, r3
 8007378:	f004 f838 	bl	800b3ec <RCCEx_PLL3_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007382:	e00a      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800738a:	e006      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800738c:	bf00      	nop
 800738e:	e004      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007390:	bf00      	nop
 8007392:	e002      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007394:	bf00      	nop
 8007396:	e000      	b.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8007398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800739a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10d      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80073a2:	4b26      	ldr	r3, [pc, #152]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80073a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80073a8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80073ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80073b4:	4a21      	ldr	r2, [pc, #132]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80073b6:	430b      	orrs	r3, r1
 80073b8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80073bc:	e003      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80073c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	2100      	movs	r1, #0
 80073d0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80073d4:	f003 0320 	and.w	r3, r3, #32
 80073d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073e0:	460b      	mov	r3, r1
 80073e2:	4313      	orrs	r3, r2
 80073e4:	d057      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80073e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80073ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073f2:	d033      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80073f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073f8:	d82c      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80073fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073fe:	d02f      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8007400:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007404:	d826      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007406:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800740a:	d02b      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800740c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007410:	d820      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007412:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007416:	d013      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800741c:	d81a      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800741e:	2b00      	cmp	r3, #0
 8007420:	d022      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8007422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007426:	d115      	bne.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007428:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800742c:	3308      	adds	r3, #8
 800742e:	4618      	mov	r0, r3
 8007430:	f003 ff44 	bl	800b2bc <RCCEx_PLL2_Config>
 8007434:	4603      	mov	r3, r0
 8007436:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800743a:	e016      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800743c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007440:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007444:	3330      	adds	r3, #48	@ 0x30
 8007446:	4618      	mov	r0, r3
 8007448:	f003 ffd0 	bl	800b3ec <RCCEx_PLL3_Config>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007452:	e00a      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800745a:	e006      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800745c:	bf00      	nop
 800745e:	e004      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007460:	bf00      	nop
 8007462:	e002      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007464:	bf00      	nop
 8007466:	e000      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800746a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10d      	bne.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8007472:	4bbb      	ldr	r3, [pc, #748]	@ (8007760 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007474:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007478:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800747c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007480:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007484:	4ab6      	ldr	r2, [pc, #728]	@ (8007760 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007486:	430b      	orrs	r3, r1
 8007488:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800748c:	e003      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007492:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8007496:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	2100      	movs	r1, #0
 80074a0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80074a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80074ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80074b0:	460b      	mov	r3, r1
 80074b2:	4313      	orrs	r3, r2
 80074b4:	d055      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80074b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074be:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80074c2:	d031      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80074c4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80074c8:	d82a      	bhi.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80074ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074ce:	d02d      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80074d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074d4:	d824      	bhi.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80074d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074da:	d029      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80074dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074e0:	d81e      	bhi.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80074e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074e6:	d011      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80074e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074ec:	d818      	bhi.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d020      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80074f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074f6:	d113      	bne.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074fc:	3308      	adds	r3, #8
 80074fe:	4618      	mov	r0, r3
 8007500:	f003 fedc 	bl	800b2bc <RCCEx_PLL2_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800750a:	e014      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800750c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007510:	3330      	adds	r3, #48	@ 0x30
 8007512:	4618      	mov	r0, r3
 8007514:	f003 ff6a 	bl	800b3ec <RCCEx_PLL3_Config>
 8007518:	4603      	mov	r3, r0
 800751a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800751e:	e00a      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007526:	e006      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007528:	bf00      	nop
 800752a:	e004      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800752c:	bf00      	nop
 800752e:	e002      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007530:	bf00      	nop
 8007532:	e000      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007536:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10d      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800753e:	4b88      	ldr	r3, [pc, #544]	@ (8007760 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007540:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007544:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8007548:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800754c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007550:	4a83      	ldr	r2, [pc, #524]	@ (8007760 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007552:	430b      	orrs	r3, r1
 8007554:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007558:	e003      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800755e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8007562:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	2100      	movs	r1, #0
 800756c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8007570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007578:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800757c:	460b      	mov	r3, r1
 800757e:	4313      	orrs	r3, r2
 8007580:	d055      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8007582:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007586:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800758a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800758e:	d031      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8007590:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007594:	d82a      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007596:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800759a:	d02d      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800759c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075a0:	d824      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80075a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075a6:	d029      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80075a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075ac:	d81e      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80075ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075b2:	d011      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80075b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075b8:	d818      	bhi.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d020      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80075be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075c2:	d113      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075c8:	3308      	adds	r3, #8
 80075ca:	4618      	mov	r0, r3
 80075cc:	f003 fe76 	bl	800b2bc <RCCEx_PLL2_Config>
 80075d0:	4603      	mov	r3, r0
 80075d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80075d6:	e014      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80075d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075dc:	3330      	adds	r3, #48	@ 0x30
 80075de:	4618      	mov	r0, r3
 80075e0:	f003 ff04 	bl	800b3ec <RCCEx_PLL3_Config>
 80075e4:	4603      	mov	r3, r0
 80075e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80075ea:	e00a      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80075f2:	e006      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80075f4:	bf00      	nop
 80075f6:	e004      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80075f8:	bf00      	nop
 80075fa:	e002      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80075fc:	bf00      	nop
 80075fe:	e000      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007602:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10d      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800760a:	4b55      	ldr	r3, [pc, #340]	@ (8007760 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800760c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007610:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007618:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800761c:	4a50      	ldr	r2, [pc, #320]	@ (8007760 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800761e:	430b      	orrs	r3, r1
 8007620:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007624:	e003      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007626:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800762a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800762e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	2100      	movs	r1, #0
 8007638:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800763c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007640:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007644:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007648:	460b      	mov	r3, r1
 800764a:	4313      	orrs	r3, r2
 800764c:	d055      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800764e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007652:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007656:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800765a:	d031      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800765c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007660:	d82a      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007666:	d02d      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8007668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800766c:	d824      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800766e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007672:	d029      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007674:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007678:	d81e      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800767a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800767e:	d011      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8007680:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007684:	d818      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d020      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800768a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800768e:	d113      	bne.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007690:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007694:	3308      	adds	r3, #8
 8007696:	4618      	mov	r0, r3
 8007698:	f003 fe10 	bl	800b2bc <RCCEx_PLL2_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80076a2:	e014      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80076a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076a8:	3330      	adds	r3, #48	@ 0x30
 80076aa:	4618      	mov	r0, r3
 80076ac:	f003 fe9e 	bl	800b3ec <RCCEx_PLL3_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80076b6:	e00a      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80076be:	e006      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80076c0:	bf00      	nop
 80076c2:	e004      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80076c4:	bf00      	nop
 80076c6:	e002      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80076c8:	bf00      	nop
 80076ca:	e000      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80076cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10d      	bne.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80076d6:	4b22      	ldr	r3, [pc, #136]	@ (8007760 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80076d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80076dc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80076e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80076e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007760 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80076ea:	430b      	orrs	r3, r1
 80076ec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80076f0:	e003      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80076fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007706:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800770a:	2300      	movs	r3, #0
 800770c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007710:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007714:	460b      	mov	r3, r1
 8007716:	4313      	orrs	r3, r2
 8007718:	d055      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800771a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800771e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007722:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007726:	d035      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8007728:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800772c:	d82e      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800772e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007732:	d031      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8007734:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007738:	d828      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800773a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800773e:	d01b      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8007740:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007744:	d822      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800774a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800774e:	d009      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8007750:	e01c      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007752:	4b03      	ldr	r3, [pc, #12]	@ (8007760 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007756:	4a02      	ldr	r2, [pc, #8]	@ (8007760 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800775c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800775e:	e01c      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8007760:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007764:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007768:	3308      	adds	r3, #8
 800776a:	4618      	mov	r0, r3
 800776c:	f003 fda6 	bl	800b2bc <RCCEx_PLL2_Config>
 8007770:	4603      	mov	r3, r0
 8007772:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007776:	e010      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007778:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800777c:	3330      	adds	r3, #48	@ 0x30
 800777e:	4618      	mov	r0, r3
 8007780:	f003 fe34 	bl	800b3ec <RCCEx_PLL3_Config>
 8007784:	4603      	mov	r3, r0
 8007786:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800778a:	e006      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007792:	e002      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007794:	bf00      	nop
 8007796:	e000      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800779a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10d      	bne.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80077a2:	4bc3      	ldr	r3, [pc, #780]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80077a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80077ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80077b4:	4abe      	ldr	r2, [pc, #760]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80077b6:	430b      	orrs	r3, r1
 80077b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80077bc:	e003      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80077c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80077d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077d6:	2300      	movs	r3, #0
 80077d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077dc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80077e0:	460b      	mov	r3, r1
 80077e2:	4313      	orrs	r3, r2
 80077e4:	d051      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80077e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80077ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077f2:	d033      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80077f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077f8:	d82c      	bhi.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80077fa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80077fe:	d02d      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007800:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007804:	d826      	bhi.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800780a:	d019      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800780c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007810:	d820      	bhi.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8007816:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800781a:	d007      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800781c:	e01a      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800781e:	4ba4      	ldr	r3, [pc, #656]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007822:	4aa3      	ldr	r2, [pc, #652]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007828:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800782a:	e018      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800782c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007830:	3308      	adds	r3, #8
 8007832:	4618      	mov	r0, r3
 8007834:	f003 fd42 	bl	800b2bc <RCCEx_PLL2_Config>
 8007838:	4603      	mov	r3, r0
 800783a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800783e:	e00e      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007840:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007844:	3330      	adds	r3, #48	@ 0x30
 8007846:	4618      	mov	r0, r3
 8007848:	f003 fdd0 	bl	800b3ec <RCCEx_PLL3_Config>
 800784c:	4603      	mov	r3, r0
 800784e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007852:	e004      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800785a:	e000      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800785c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800785e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10d      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007866:	4b92      	ldr	r3, [pc, #584]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800786c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8007870:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007874:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007878:	4a8d      	ldr	r2, [pc, #564]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800787a:	430b      	orrs	r3, r1
 800787c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007880:	e003      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007882:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007886:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800788a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007896:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007898:	2300      	movs	r3, #0
 800789a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800789c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80078a0:	460b      	mov	r3, r1
 80078a2:	4313      	orrs	r3, r2
 80078a4:	d032      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80078a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80078ae:	2b05      	cmp	r3, #5
 80078b0:	d80f      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d211      	bcs.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d911      	bls.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d109      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078c2:	3308      	adds	r3, #8
 80078c4:	4618      	mov	r0, r3
 80078c6:	f003 fcf9 	bl	800b2bc <RCCEx_PLL2_Config>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80078d0:	e006      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80078d8:	e002      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80078da:	bf00      	nop
 80078dc:	e000      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80078de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10d      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80078e8:	4b71      	ldr	r3, [pc, #452]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80078ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078ee:	f023 0107 	bic.w	r1, r3, #7
 80078f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80078fa:	4a6d      	ldr	r2, [pc, #436]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80078fc:	430b      	orrs	r3, r1
 80078fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007902:	e003      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007904:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007908:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800790c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	2100      	movs	r1, #0
 8007916:	6739      	str	r1, [r7, #112]	@ 0x70
 8007918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800791c:	677b      	str	r3, [r7, #116]	@ 0x74
 800791e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007922:	460b      	mov	r3, r1
 8007924:	4313      	orrs	r3, r2
 8007926:	d024      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8007928:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800792c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007930:	2b00      	cmp	r3, #0
 8007932:	d005      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8007934:	2b08      	cmp	r3, #8
 8007936:	d005      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800793e:	e002      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8007940:	bf00      	nop
 8007942:	e000      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8007944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007946:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10d      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800794e:	4b58      	ldr	r3, [pc, #352]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007954:	f023 0108 	bic.w	r1, r3, #8
 8007958:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800795c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007960:	4a53      	ldr	r2, [pc, #332]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007962:	430b      	orrs	r3, r1
 8007964:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007968:	e003      	b.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800796e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007972:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800797e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007980:	2300      	movs	r3, #0
 8007982:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007984:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007988:	460b      	mov	r3, r1
 800798a:	4313      	orrs	r3, r2
 800798c:	f000 80b9 	beq.w	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007990:	4b48      	ldr	r3, [pc, #288]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8007992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007994:	4a47      	ldr	r2, [pc, #284]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8007996:	f043 0301 	orr.w	r3, r3, #1
 800799a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800799c:	f7fb f86c 	bl	8002a78 <HAL_GetTick>
 80079a0:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80079a4:	e00b      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079a6:	f7fb f867 	bl	8002a78 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d903      	bls.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80079bc:	e005      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80079be:	4b3d      	ldr	r3, [pc, #244]	@ (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80079c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0ed      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80079ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f040 8093 	bne.w	8007afa <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079d4:	4b36      	ldr	r3, [pc, #216]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80079d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079de:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80079e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d023      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80079ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079ee:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80079f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d01b      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80079fa:	4b2d      	ldr	r3, [pc, #180]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80079fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a04:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a08:	4b29      	ldr	r3, [pc, #164]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a0e:	4a28      	ldr	r2, [pc, #160]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a18:	4b25      	ldr	r3, [pc, #148]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a1e:	4a24      	ldr	r2, [pc, #144]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a28:	4a21      	ldr	r2, [pc, #132]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a2a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007a2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a32:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d019      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3e:	f7fb f81b 	bl	8002a78 <HAL_GetTick>
 8007a42:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a46:	e00d      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a48:	f7fb f816 	bl	8002a78 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007a52:	1ad2      	subs	r2, r2, r3
 8007a54:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d903      	bls.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8007a62:	e006      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a64:	4b12      	ldr	r3, [pc, #72]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0ea      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8007a72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d13a      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a7e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8007a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a8a:	d115      	bne.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8007a8c:	4b08      	ldr	r3, [pc, #32]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007a94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a98:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8007a9c:	091b      	lsrs	r3, r3, #4
 8007a9e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007aa2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007aa6:	4a02      	ldr	r2, [pc, #8]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	61d3      	str	r3, [r2, #28]
 8007aac:	e00a      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8007aae:	bf00      	nop
 8007ab0:	44020c00 	.word	0x44020c00
 8007ab4:	44020800 	.word	0x44020800
 8007ab8:	4b9f      	ldr	r3, [pc, #636]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	4a9e      	ldr	r2, [pc, #632]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007abe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ac2:	61d3      	str	r3, [r2, #28]
 8007ac4:	4b9c      	ldr	r3, [pc, #624]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007aca:	4a9b      	ldr	r2, [pc, #620]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ad0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007ad4:	4b98      	ldr	r3, [pc, #608]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007ad6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8007ada:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ade:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8007ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ae6:	4a94      	ldr	r2, [pc, #592]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007ae8:	430b      	orrs	r3, r1
 8007aea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007aee:	e008      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007af0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007af4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8007af8:	e003      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007afe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007b0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b10:	2300      	movs	r3, #0
 8007b12:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	d035      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007b1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007b26:	2b30      	cmp	r3, #48	@ 0x30
 8007b28:	d014      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8007b2a:	2b30      	cmp	r3, #48	@ 0x30
 8007b2c:	d80e      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8007b2e:	2b20      	cmp	r3, #32
 8007b30:	d012      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d80a      	bhi.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d010      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8007b3a:	2b10      	cmp	r3, #16
 8007b3c:	d106      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b3e:	4b7e      	ldr	r3, [pc, #504]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b42:	4a7d      	ldr	r2, [pc, #500]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b48:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8007b4a:	e008      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007b52:	e004      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8007b54:	bf00      	nop
 8007b56:	e002      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8007b58:	bf00      	nop
 8007b5a:	e000      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8007b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10d      	bne.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007b66:	4b74      	ldr	r3, [pc, #464]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b6c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b74:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007b78:	4a6f      	ldr	r2, [pc, #444]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007b7a:	430b      	orrs	r3, r1
 8007b7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007b80:	e003      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007b8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b92:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007b96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b98:	2300      	movs	r3, #0
 8007b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b9c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	d033      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8007ba6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007baa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8007bb2:	2b40      	cmp	r3, #64	@ 0x40
 8007bb4:	d007      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8007bb6:	e010      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bb8:	4b5f      	ldr	r3, [pc, #380]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbc:	4a5e      	ldr	r2, [pc, #376]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bc2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007bc4:	e00d      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007bc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bca:	3308      	adds	r3, #8
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f003 fb75 	bl	800b2bc <RCCEx_PLL2_Config>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007bd8:	e003      	b.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007be0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007be2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10d      	bne.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8007bea:	4b53      	ldr	r3, [pc, #332]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007bec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bf0:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007bf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bf8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007bfc:	4a4e      	ldr	r2, [pc, #312]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007bfe:	430b      	orrs	r3, r1
 8007c00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007c04:	e003      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007c0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007c1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c20:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007c24:	460b      	mov	r3, r1
 8007c26:	4313      	orrs	r3, r2
 8007c28:	d033      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8007c2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c2e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8007c36:	2b80      	cmp	r3, #128	@ 0x80
 8007c38:	d007      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8007c3a:	e010      	b.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c3c:	4b3e      	ldr	r3, [pc, #248]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c40:	4a3d      	ldr	r2, [pc, #244]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c46:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007c48:	e00d      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c4e:	3308      	adds	r3, #8
 8007c50:	4618      	mov	r0, r3
 8007c52:	f003 fb33 	bl	800b2bc <RCCEx_PLL2_Config>
 8007c56:	4603      	mov	r3, r0
 8007c58:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007c5c:	e003      	b.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10d      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8007c6e:	4b32      	ldr	r3, [pc, #200]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007c70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c74:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8007c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c7c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007c80:	4a2d      	ldr	r2, [pc, #180]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007c82:	430b      	orrs	r3, r1
 8007c84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007c88:	e003      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c8e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007c92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ca4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4313      	orrs	r3, r2
 8007cac:	d04a      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8007cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d827      	bhi.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8007cba:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8007cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc0:	08007cd5 	.word	0x08007cd5
 8007cc4:	08007ce3 	.word	0x08007ce3
 8007cc8:	08007cf7 	.word	0x08007cf7
 8007ccc:	08007d13 	.word	0x08007d13
 8007cd0:	08007d13 	.word	0x08007d13
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cd4:	4b18      	ldr	r3, [pc, #96]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd8:	4a17      	ldr	r2, [pc, #92]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cde:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007ce0:	e018      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ce2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f003 fae7 	bl	800b2bc <RCCEx_PLL2_Config>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007cf4:	e00e      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cfa:	3330      	adds	r3, #48	@ 0x30
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f003 fb75 	bl	800b3ec <RCCEx_PLL3_Config>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007d08:	e004      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d10:	e000      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8007d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d14:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10f      	bne.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007d1c:	4b06      	ldr	r3, [pc, #24]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d22:	f023 0107 	bic.w	r1, r3, #7
 8007d26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d2e:	4a02      	ldr	r2, [pc, #8]	@ (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007d30:	430b      	orrs	r3, r1
 8007d32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007d36:	e005      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8007d38:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d40:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007d44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d52:	2300      	movs	r3, #0
 8007d54:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d56:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f000 8081 	beq.w	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8007d62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007d6a:	2b20      	cmp	r3, #32
 8007d6c:	d85f      	bhi.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8007d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007df9 	.word	0x08007df9
 8007d78:	08007e2f 	.word	0x08007e2f
 8007d7c:	08007e2f 	.word	0x08007e2f
 8007d80:	08007e2f 	.word	0x08007e2f
 8007d84:	08007e2f 	.word	0x08007e2f
 8007d88:	08007e2f 	.word	0x08007e2f
 8007d8c:	08007e2f 	.word	0x08007e2f
 8007d90:	08007e2f 	.word	0x08007e2f
 8007d94:	08007e07 	.word	0x08007e07
 8007d98:	08007e2f 	.word	0x08007e2f
 8007d9c:	08007e2f 	.word	0x08007e2f
 8007da0:	08007e2f 	.word	0x08007e2f
 8007da4:	08007e2f 	.word	0x08007e2f
 8007da8:	08007e2f 	.word	0x08007e2f
 8007dac:	08007e2f 	.word	0x08007e2f
 8007db0:	08007e2f 	.word	0x08007e2f
 8007db4:	08007e1b 	.word	0x08007e1b
 8007db8:	08007e2f 	.word	0x08007e2f
 8007dbc:	08007e2f 	.word	0x08007e2f
 8007dc0:	08007e2f 	.word	0x08007e2f
 8007dc4:	08007e2f 	.word	0x08007e2f
 8007dc8:	08007e2f 	.word	0x08007e2f
 8007dcc:	08007e2f 	.word	0x08007e2f
 8007dd0:	08007e2f 	.word	0x08007e2f
 8007dd4:	08007e37 	.word	0x08007e37
 8007dd8:	08007e2f 	.word	0x08007e2f
 8007ddc:	08007e2f 	.word	0x08007e2f
 8007de0:	08007e2f 	.word	0x08007e2f
 8007de4:	08007e2f 	.word	0x08007e2f
 8007de8:	08007e2f 	.word	0x08007e2f
 8007dec:	08007e2f 	.word	0x08007e2f
 8007df0:	08007e2f 	.word	0x08007e2f
 8007df4:	08007e37 	.word	0x08007e37
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df8:	4bab      	ldr	r3, [pc, #684]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dfc:	4aaa      	ldr	r2, [pc, #680]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e02:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007e04:	e018      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f003 fa55 	bl	800b2bc <RCCEx_PLL2_Config>
 8007e12:	4603      	mov	r3, r0
 8007e14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007e18:	e00e      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e1e:	3330      	adds	r3, #48	@ 0x30
 8007e20:	4618      	mov	r0, r3
 8007e22:	f003 fae3 	bl	800b3ec <RCCEx_PLL3_Config>
 8007e26:	4603      	mov	r3, r0
 8007e28:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007e2c:	e004      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007e34:	e000      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8007e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e38:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10d      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007e40:	4b99      	ldr	r3, [pc, #612]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e46:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e52:	4a95      	ldr	r2, [pc, #596]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007e54:	430b      	orrs	r3, r1
 8007e56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007e5a:	e003      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e60:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007e64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007e70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e72:	2300      	movs	r3, #0
 8007e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	d04e      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8007e80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e8c:	d02e      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8007e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e92:	d827      	bhi.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007e94:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e96:	d02b      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8007e98:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e9a:	d823      	bhi.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007e9c:	2b80      	cmp	r3, #128	@ 0x80
 8007e9e:	d017      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8007ea0:	2b80      	cmp	r3, #128	@ 0x80
 8007ea2:	d81f      	bhi.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8007ea8:	2b40      	cmp	r3, #64	@ 0x40
 8007eaa:	d007      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8007eac:	e01a      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eae:	4b7e      	ldr	r3, [pc, #504]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb2:	4a7d      	ldr	r2, [pc, #500]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eb8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007eba:	e01a      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f003 f9fa 	bl	800b2bc <RCCEx_PLL2_Config>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007ece:	e010      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ed0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ed4:	3330      	adds	r3, #48	@ 0x30
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f003 fa88 	bl	800b3ec <RCCEx_PLL3_Config>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007ee2:	e006      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007eea:	e002      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007eec:	bf00      	nop
 8007eee:	e000      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ef2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10d      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007efa:	4b6b      	ldr	r3, [pc, #428]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f00:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007f04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f0c:	4a66      	ldr	r2, [pc, #408]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007f14:	e003      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f1a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007f2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f30:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f34:	460b      	mov	r3, r1
 8007f36:	4313      	orrs	r3, r2
 8007f38:	d055      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007f3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007f42:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007f46:	d031      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8007f48:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007f4c:	d82a      	bhi.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007f4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f52:	d02d      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8007f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f58:	d824      	bhi.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007f5a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f5e:	d029      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8007f60:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f64:	d81e      	bhi.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f6a:	d011      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8007f6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f70:	d818      	bhi.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d020      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8007f76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f7a:	d113      	bne.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f80:	3308      	adds	r3, #8
 8007f82:	4618      	mov	r0, r3
 8007f84:	f003 f99a 	bl	800b2bc <RCCEx_PLL2_Config>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007f8e:	e014      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f94:	3330      	adds	r3, #48	@ 0x30
 8007f96:	4618      	mov	r0, r3
 8007f98:	f003 fa28 	bl	800b3ec <RCCEx_PLL3_Config>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007fa2:	e00a      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007faa:	e006      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007fac:	bf00      	nop
 8007fae:	e004      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007fb0:	bf00      	nop
 8007fb2:	e002      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007fb4:	bf00      	nop
 8007fb6:	e000      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10d      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007fc2:	4b39      	ldr	r3, [pc, #228]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fc8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007fcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fd0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007fd4:	4a34      	ldr	r2, [pc, #208]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007fd6:	430b      	orrs	r3, r1
 8007fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007fdc:	e003      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fde:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007fe2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8007fe6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ff8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4313      	orrs	r3, r2
 8008000:	d058      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8008002:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008006:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800800a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800800e:	d031      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8008010:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008014:	d82a      	bhi.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008016:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800801a:	d02d      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800801c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008020:	d824      	bhi.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008022:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008026:	d029      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8008028:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800802c:	d81e      	bhi.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800802e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008032:	d011      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8008034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008038:	d818      	bhi.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d020      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800803e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008042:	d113      	bne.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008044:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008048:	3308      	adds	r3, #8
 800804a:	4618      	mov	r0, r3
 800804c:	f003 f936 	bl	800b2bc <RCCEx_PLL2_Config>
 8008050:	4603      	mov	r3, r0
 8008052:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8008056:	e014      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008058:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800805c:	3330      	adds	r3, #48	@ 0x30
 800805e:	4618      	mov	r0, r3
 8008060:	f003 f9c4 	bl	800b3ec <RCCEx_PLL3_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800806a:	e00a      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008072:	e006      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008074:	bf00      	nop
 8008076:	e004      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008078:	bf00      	nop
 800807a:	e002      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800807c:	bf00      	nop
 800807e:	e000      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8008080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008082:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008086:	2b00      	cmp	r3, #0
 8008088:	d110      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800808a:	4b07      	ldr	r3, [pc, #28]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800808c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008090:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8008094:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800809c:	4902      	ldr	r1, [pc, #8]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80080a4:	e006      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80080a6:	bf00      	nop
 80080a8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80080b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	2100      	movs	r1, #0
 80080be:	6239      	str	r1, [r7, #32]
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80080ca:	460b      	mov	r3, r1
 80080cc:	4313      	orrs	r3, r2
 80080ce:	d055      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80080d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080d8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80080dc:	d031      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80080de:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80080e2:	d82a      	bhi.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80080e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080e8:	d02d      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80080ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080ee:	d824      	bhi.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80080f0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80080f4:	d029      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80080f6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80080fa:	d81e      	bhi.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80080fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008100:	d011      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8008102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008106:	d818      	bhi.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d020      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800810c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008110:	d113      	bne.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008112:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008116:	3308      	adds	r3, #8
 8008118:	4618      	mov	r0, r3
 800811a:	f003 f8cf 	bl	800b2bc <RCCEx_PLL2_Config>
 800811e:	4603      	mov	r3, r0
 8008120:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008124:	e014      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008126:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800812a:	3330      	adds	r3, #48	@ 0x30
 800812c:	4618      	mov	r0, r3
 800812e:	f003 f95d 	bl	800b3ec <RCCEx_PLL3_Config>
 8008132:	4603      	mov	r3, r0
 8008134:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008138:	e00a      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008140:	e006      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008142:	bf00      	nop
 8008144:	e004      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008146:	bf00      	nop
 8008148:	e002      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800814a:	bf00      	nop
 800814c:	e000      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800814e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008150:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10d      	bne.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8008158:	4b88      	ldr	r3, [pc, #544]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800815a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800815e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8008162:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800816a:	4984      	ldr	r1, [pc, #528]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800816c:	4313      	orrs	r3, r2
 800816e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8008172:	e003      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008174:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008178:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800817c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	2100      	movs	r1, #0
 8008186:	61b9      	str	r1, [r7, #24]
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	61fb      	str	r3, [r7, #28]
 800818e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008192:	460b      	mov	r3, r1
 8008194:	4313      	orrs	r3, r2
 8008196:	d03d      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8008198:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800819c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d81c      	bhi.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80081a4:	a201      	add	r2, pc, #4	@ (adr r2, 80081ac <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80081a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081aa:	bf00      	nop
 80081ac:	080081e7 	.word	0x080081e7
 80081b0:	080081bd 	.word	0x080081bd
 80081b4:	080081cb 	.word	0x080081cb
 80081b8:	080081e7 	.word	0x080081e7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081bc:	4b6f      	ldr	r3, [pc, #444]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80081be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c0:	4a6e      	ldr	r2, [pc, #440]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80081c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081c6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80081c8:	e00e      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80081ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081ce:	3308      	adds	r3, #8
 80081d0:	4618      	mov	r0, r3
 80081d2:	f003 f873 	bl	800b2bc <RCCEx_PLL2_Config>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80081dc:	e004      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80081e4:	e000      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80081e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10d      	bne.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80081f0:	4b62      	ldr	r3, [pc, #392]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80081f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081f6:	f023 0203 	bic.w	r2, r3, #3
 80081fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008202:	495e      	ldr	r1, [pc, #376]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008204:	4313      	orrs	r3, r2
 8008206:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800820a:	e003      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800820c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008210:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008214:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	2100      	movs	r1, #0
 800821e:	6139      	str	r1, [r7, #16]
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	617b      	str	r3, [r7, #20]
 8008226:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800822a:	460b      	mov	r3, r1
 800822c:	4313      	orrs	r3, r2
 800822e:	d03a      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8008230:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008234:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800823c:	d00e      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800823e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008242:	d815      	bhi.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8008244:	2b00      	cmp	r3, #0
 8008246:	d017      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8008248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800824c:	d110      	bne.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800824e:	4b4b      	ldr	r3, [pc, #300]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008252:	4a4a      	ldr	r2, [pc, #296]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008258:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800825a:	e00e      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800825c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008260:	3308      	adds	r3, #8
 8008262:	4618      	mov	r0, r3
 8008264:	f003 f82a 	bl	800b2bc <RCCEx_PLL2_Config>
 8008268:	4603      	mov	r3, r0
 800826a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800826e:	e004      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008276:	e000      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8008278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800827a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10d      	bne.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8008282:	4b3e      	ldr	r3, [pc, #248]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008288:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800828c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008290:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008294:	4939      	ldr	r1, [pc, #228]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008296:	4313      	orrs	r3, r2
 8008298:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800829c:	e003      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082a2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80082a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	2100      	movs	r1, #0
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	f003 0310 	and.w	r3, r3, #16
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80082bc:	460b      	mov	r3, r1
 80082be:	4313      	orrs	r3, r2
 80082c0:	d038      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80082c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80082ca:	2b30      	cmp	r3, #48	@ 0x30
 80082cc:	d01b      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80082ce:	2b30      	cmp	r3, #48	@ 0x30
 80082d0:	d815      	bhi.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80082d2:	2b10      	cmp	r3, #16
 80082d4:	d002      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	d007      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80082da:	e010      	b.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082dc:	4b27      	ldr	r3, [pc, #156]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80082de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e0:	4a26      	ldr	r2, [pc, #152]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80082e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082e6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80082e8:	e00e      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80082ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082ee:	3330      	adds	r3, #48	@ 0x30
 80082f0:	4618      	mov	r0, r3
 80082f2:	f003 f87b 	bl	800b3ec <RCCEx_PLL3_Config>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80082fc:	e004      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008304:	e000      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8008306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008308:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10d      	bne.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8008310:	4b1a      	ldr	r3, [pc, #104]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008312:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008316:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800831a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800831e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008322:	4916      	ldr	r1, [pc, #88]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008324:	4313      	orrs	r3, r2
 8008326:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800832a:	e003      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008330:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008334:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	2100      	movs	r1, #0
 800833e:	6039      	str	r1, [r7, #0]
 8008340:	f003 0308 	and.w	r3, r3, #8
 8008344:	607b      	str	r3, [r7, #4]
 8008346:	e9d7 1200 	ldrd	r1, r2, [r7]
 800834a:	460b      	mov	r3, r1
 800834c:	4313      	orrs	r3, r2
 800834e:	d00c      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8008350:	4b0a      	ldr	r3, [pc, #40]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008352:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008356:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800835a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800835e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8008362:	4906      	ldr	r1, [pc, #24]	@ (800837c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008364:	4313      	orrs	r3, r2
 8008366:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800836a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800836e:	4618      	mov	r0, r3
 8008370:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8008374:	46bd      	mov	sp, r7
 8008376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800837a:	bf00      	nop
 800837c:	44020c00 	.word	0x44020c00

08008380 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8008380:	b480      	push	{r7}
 8008382:	b08b      	sub	sp, #44	@ 0x2c
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008388:	4bae      	ldr	r3, [pc, #696]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800838a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800838c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008390:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008392:	4bac      	ldr	r3, [pc, #688]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800839c:	4ba9      	ldr	r3, [pc, #676]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800839e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a0:	0a1b      	lsrs	r3, r3, #8
 80083a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083a6:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80083a8:	4ba6      	ldr	r3, [pc, #664]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80083aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ac:	091b      	lsrs	r3, r3, #4
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80083b4:	4ba3      	ldr	r3, [pc, #652]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80083b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b8:	08db      	lsrs	r3, r3, #3
 80083ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	fb02 f303 	mul.w	r3, r2, r3
 80083c4:	ee07 3a90 	vmov	s15, r3
 80083c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083cc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 8126 	beq.w	8008624 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d053      	beq.n	8008486 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d86f      	bhi.n	80084c4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d003      	beq.n	80083f2 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d02b      	beq.n	8008448 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80083f0:	e068      	b.n	80084c4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083f2:	4b94      	ldr	r3, [pc, #592]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	08db      	lsrs	r3, r3, #3
 80083f8:	f003 0303 	and.w	r3, r3, #3
 80083fc:	4a92      	ldr	r2, [pc, #584]	@ (8008648 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80083fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008402:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800840e:	69bb      	ldr	r3, [r7, #24]
 8008410:	ee07 3a90 	vmov	s15, r3
 8008414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008426:	ed97 6a04 	vldr	s12, [r7, #16]
 800842a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800864c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800842e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800843a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800843e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008442:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008446:	e068      	b.n	800851a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008452:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008650 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8008456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	ee07 3a90 	vmov	s15, r3
 8008460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008464:	ed97 6a04 	vldr	s12, [r7, #16]
 8008468:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800864c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800846c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008474:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008480:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008484:	e049      	b.n	800851a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	ee07 3a90 	vmov	s15, r3
 800848c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008490:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008654 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8008494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	ee07 3a90 	vmov	s15, r3
 800849e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a2:	ed97 6a04 	vldr	s12, [r7, #16]
 80084a6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800864c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80084aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084be:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80084c2:	e02a      	b.n	800851a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084c4:	4b5f      	ldr	r3, [pc, #380]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	08db      	lsrs	r3, r3, #3
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	4a5e      	ldr	r2, [pc, #376]	@ (8008648 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80084d0:	fa22 f303 	lsr.w	r3, r2, r3
 80084d4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	ee07 3a90 	vmov	s15, r3
 80084dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	ee07 3a90 	vmov	s15, r3
 80084f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f8:	ed97 6a04 	vldr	s12, [r7, #16]
 80084fc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800864c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008500:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008508:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800850c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008514:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008518:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800851a:	4b4a      	ldr	r3, [pc, #296]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008522:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008526:	d121      	bne.n	800856c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008528:	4b46      	ldr	r3, [pc, #280]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800852a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d017      	beq.n	8008564 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008534:	4b43      	ldr	r3, [pc, #268]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008538:	0a5b      	lsrs	r3, r3, #9
 800853a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800853e:	ee07 3a90 	vmov	s15, r3
 8008542:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8008546:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800854a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800854e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800855a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	e006      	b.n	8008572 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	e002      	b.n	8008572 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008572:	4b34      	ldr	r3, [pc, #208]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800857a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800857e:	d121      	bne.n	80085c4 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008580:	4b30      	ldr	r3, [pc, #192]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d017      	beq.n	80085bc <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800858c:	4b2d      	ldr	r3, [pc, #180]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800858e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008590:	0c1b      	lsrs	r3, r3, #16
 8008592:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008596:	ee07 3a90 	vmov	s15, r3
 800859a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800859e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085a2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80085a6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80085aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085b2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	605a      	str	r2, [r3, #4]
 80085ba:	e006      	b.n	80085ca <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	605a      	str	r2, [r3, #4]
 80085c2:	e002      	b.n	80085ca <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085ca:	4b1e      	ldr	r3, [pc, #120]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085d6:	d121      	bne.n	800861c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80085d8:	4b1a      	ldr	r3, [pc, #104]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80085da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d017      	beq.n	8008614 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80085e4:	4b17      	ldr	r3, [pc, #92]	@ (8008644 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80085e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085e8:	0e1b      	lsrs	r3, r3, #24
 80085ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ee:	ee07 3a90 	vmov	s15, r3
 80085f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80085f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085fa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80085fe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800860a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008612:	e010      	b.n	8008636 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	609a      	str	r2, [r3, #8]
}
 800861a:	e00c      	b.n	8008636 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	609a      	str	r2, [r3, #8]
}
 8008622:	e008      	b.n	8008636 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	609a      	str	r2, [r3, #8]
}
 8008636:	bf00      	nop
 8008638:	372c      	adds	r7, #44	@ 0x2c
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	44020c00 	.word	0x44020c00
 8008648:	03d09000 	.word	0x03d09000
 800864c:	46000000 	.word	0x46000000
 8008650:	4a742400 	.word	0x4a742400
 8008654:	4af42400 	.word	0x4af42400

08008658 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8008658:	b480      	push	{r7}
 800865a:	b08b      	sub	sp, #44	@ 0x2c
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008660:	4bae      	ldr	r3, [pc, #696]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008668:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800866a:	4bac      	ldr	r3, [pc, #688]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800866c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866e:	f003 0303 	and.w	r3, r3, #3
 8008672:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8008674:	4ba9      	ldr	r3, [pc, #676]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008678:	0a1b      	lsrs	r3, r3, #8
 800867a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800867e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008680:	4ba6      	ldr	r3, [pc, #664]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008684:	091b      	lsrs	r3, r3, #4
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800868c:	4ba3      	ldr	r3, [pc, #652]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800868e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008690:	08db      	lsrs	r3, r3, #3
 8008692:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	fb02 f303 	mul.w	r3, r2, r3
 800869c:	ee07 3a90 	vmov	s15, r3
 80086a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 8126 	beq.w	80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d053      	beq.n	800875e <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d86f      	bhi.n	800879c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d003      	beq.n	80086ca <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d02b      	beq.n	8008720 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80086c8:	e068      	b.n	800879c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086ca:	4b94      	ldr	r3, [pc, #592]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	08db      	lsrs	r3, r3, #3
 80086d0:	f003 0303 	and.w	r3, r3, #3
 80086d4:	4a92      	ldr	r2, [pc, #584]	@ (8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80086d6:	fa22 f303 	lsr.w	r3, r2, r3
 80086da:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	ee07 3a90 	vmov	s15, r3
 80086ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	ee07 3a90 	vmov	s15, r3
 80086fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8008702:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800870a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800870e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800871a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800871e:	e068      	b.n	80087f2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008928 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800872e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008732:	6a3b      	ldr	r3, [r7, #32]
 8008734:	ee07 3a90 	vmov	s15, r3
 8008738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008740:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008758:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800875c:	e049      	b.n	80087f2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	ee07 3a90 	vmov	s15, r3
 8008764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008768:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800892c <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 800876c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800877a:	ed97 6a04 	vldr	s12, [r7, #16]
 800877e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800878a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800878e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008796:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800879a:	e02a      	b.n	80087f2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800879c:	4b5f      	ldr	r3, [pc, #380]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	08db      	lsrs	r3, r3, #3
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	4a5e      	ldr	r2, [pc, #376]	@ (8008920 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80087a8:	fa22 f303 	lsr.w	r3, r2, r3
 80087ac:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	ee07 3a90 	vmov	s15, r3
 80087b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	ee07 3a90 	vmov	s15, r3
 80087be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	ee07 3a90 	vmov	s15, r3
 80087cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80087d4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008924 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80087d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80087f0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087f2:	4b4a      	ldr	r3, [pc, #296]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087fe:	d121      	bne.n	8008844 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008800:	4b46      	ldr	r3, [pc, #280]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d017      	beq.n	800883c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800880c:	4b43      	ldr	r3, [pc, #268]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800880e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008810:	0a5b      	lsrs	r3, r3, #9
 8008812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800881e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008822:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008826:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800882a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800882e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008832:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	e006      	b.n	800884a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	e002      	b.n	800884a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800884a:	4b34      	ldr	r3, [pc, #208]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008852:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008856:	d121      	bne.n	800889c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008858:	4b30      	ldr	r3, [pc, #192]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800885a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d017      	beq.n	8008894 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008864:	4b2d      	ldr	r3, [pc, #180]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008868:	0c1b      	lsrs	r3, r3, #16
 800886a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008876:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800887a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800887e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800888a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	605a      	str	r2, [r3, #4]
 8008892:	e006      	b.n	80088a2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	605a      	str	r2, [r3, #4]
 800889a:	e002      	b.n	80088a2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088a2:	4b1e      	ldr	r3, [pc, #120]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088ae:	d121      	bne.n	80088f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80088b0:	4b1a      	ldr	r3, [pc, #104]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80088b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d017      	beq.n	80088ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80088bc:	4b17      	ldr	r3, [pc, #92]	@ (800891c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80088be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c0:	0e1b      	lsrs	r3, r3, #24
 80088c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088c6:	ee07 3a90 	vmov	s15, r3
 80088ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80088ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088d2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80088d6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80088da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088e2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80088ea:	e010      	b.n	800890e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	609a      	str	r2, [r3, #8]
}
 80088f2:	e00c      	b.n	800890e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	609a      	str	r2, [r3, #8]
}
 80088fa:	e008      	b.n	800890e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	609a      	str	r2, [r3, #8]
}
 800890e:	bf00      	nop
 8008910:	372c      	adds	r7, #44	@ 0x2c
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	44020c00 	.word	0x44020c00
 8008920:	03d09000 	.word	0x03d09000
 8008924:	46000000 	.word	0x46000000
 8008928:	4a742400 	.word	0x4a742400
 800892c:	4af42400 	.word	0x4af42400

08008930 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8008930:	b480      	push	{r7}
 8008932:	b08b      	sub	sp, #44	@ 0x2c
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008938:	4bae      	ldr	r3, [pc, #696]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800893a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008940:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008942:	4bac      	ldr	r3, [pc, #688]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008946:	f003 0303 	and.w	r3, r3, #3
 800894a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800894c:	4ba9      	ldr	r3, [pc, #676]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800894e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008950:	0a1b      	lsrs	r3, r3, #8
 8008952:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008956:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008958:	4ba6      	ldr	r3, [pc, #664]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800895a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800895c:	091b      	lsrs	r3, r3, #4
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008964:	4ba3      	ldr	r3, [pc, #652]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008968:	08db      	lsrs	r3, r3, #3
 800896a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	fb02 f303 	mul.w	r3, r2, r3
 8008974:	ee07 3a90 	vmov	s15, r3
 8008978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 8126 	beq.w	8008bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	2b03      	cmp	r3, #3
 800898c:	d053      	beq.n	8008a36 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	2b03      	cmp	r3, #3
 8008992:	d86f      	bhi.n	8008a74 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d003      	beq.n	80089a2 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	2b02      	cmp	r3, #2
 800899e:	d02b      	beq.n	80089f8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80089a0:	e068      	b.n	8008a74 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089a2:	4b94      	ldr	r3, [pc, #592]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	08db      	lsrs	r3, r3, #3
 80089a8:	f003 0303 	and.w	r3, r3, #3
 80089ac:	4a92      	ldr	r2, [pc, #584]	@ (8008bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80089ae:	fa22 f303 	lsr.w	r3, r2, r3
 80089b2:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	ee07 3a90 	vmov	s15, r3
 80089ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	ee07 3a90 	vmov	s15, r3
 80089c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	ee07 3a90 	vmov	s15, r3
 80089d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d6:	ed97 6a04 	vldr	s12, [r7, #16]
 80089da:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80089de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80089f6:	e068      	b.n	8008aca <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	ee07 3a90 	vmov	s15, r3
 80089fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a02:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8008a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	ee07 3a90 	vmov	s15, r3
 8008a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a14:	ed97 6a04 	vldr	s12, [r7, #16]
 8008a18:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a30:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008a34:	e049      	b.n	8008aca <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	ee07 3a90 	vmov	s15, r3
 8008a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a40:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8008a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a04 	vldr	s12, [r7, #16]
 8008a56:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008a72:	e02a      	b.n	8008aca <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a74:	4b5f      	ldr	r3, [pc, #380]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	08db      	lsrs	r3, r3, #3
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	4a5e      	ldr	r2, [pc, #376]	@ (8008bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008a80:	fa22 f303 	lsr.w	r3, r2, r3
 8008a84:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	ee07 3a90 	vmov	s15, r3
 8008a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a9e:	6a3b      	ldr	r3, [r7, #32]
 8008aa0:	ee07 3a90 	vmov	s15, r3
 8008aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa8:	ed97 6a04 	vldr	s12, [r7, #16]
 8008aac:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8008ab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008ac8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aca:	4b4a      	ldr	r3, [pc, #296]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ad6:	d121      	bne.n	8008b1c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008ad8:	4b46      	ldr	r3, [pc, #280]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d017      	beq.n	8008b14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008ae4:	4b43      	ldr	r3, [pc, #268]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ae8:	0a5b      	lsrs	r3, r3, #9
 8008aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8008af6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008afa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008afe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b0a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	e006      	b.n	8008b22 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	e002      	b.n	8008b22 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b22:	4b34      	ldr	r3, [pc, #208]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b2e:	d121      	bne.n	8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008b30:	4b30      	ldr	r3, [pc, #192]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d017      	beq.n	8008b6c <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b40:	0c1b      	lsrs	r3, r3, #16
 8008b42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b46:	ee07 3a90 	vmov	s15, r3
 8008b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008b4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b52:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008b56:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b62:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	605a      	str	r2, [r3, #4]
 8008b6a:	e006      	b.n	8008b7a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	605a      	str	r2, [r3, #4]
 8008b72:	e002      	b.n	8008b7a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b86:	d121      	bne.n	8008bcc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008b88:	4b1a      	ldr	r3, [pc, #104]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d017      	beq.n	8008bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008b94:	4b17      	ldr	r3, [pc, #92]	@ (8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b98:	0e1b      	lsrs	r3, r3, #24
 8008b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8008ba6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008baa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008bae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bba:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008bc2:	e010      	b.n	8008be6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	609a      	str	r2, [r3, #8]
}
 8008bca:	e00c      	b.n	8008be6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	609a      	str	r2, [r3, #8]
}
 8008bd2:	e008      	b.n	8008be6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	609a      	str	r2, [r3, #8]
}
 8008be6:	bf00      	nop
 8008be8:	372c      	adds	r7, #44	@ 0x2c
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	44020c00 	.word	0x44020c00
 8008bf8:	03d09000 	.word	0x03d09000
 8008bfc:	46000000 	.word	0x46000000
 8008c00:	4a742400 	.word	0x4a742400
 8008c04:	4af42400 	.word	0x4af42400

08008c08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008c08:	b590      	push	{r4, r7, lr}
 8008c0a:	b08f      	sub	sp, #60	@ 0x3c
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008c12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c16:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8008c1a:	4321      	orrs	r1, r4
 8008c1c:	d150      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008c1e:	4b26      	ldr	r3, [pc, #152]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c28:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008c2a:	4b23      	ldr	r3, [pc, #140]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c30:	f003 0302 	and.w	r3, r3, #2
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d108      	bne.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c3e:	d104      	bne.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008c40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c46:	f002 bb2a 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c58:	d108      	bne.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c60:	d104      	bne.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8008c62:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c68:	f002 bb19 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8008c6c:	4b12      	ldr	r3, [pc, #72]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c78:	d119      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c80:	d115      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008c82:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8008c8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c8e:	d30a      	bcc.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8008c90:	4b09      	ldr	r3, [pc, #36]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	0a1b      	lsrs	r3, r3, #8
 8008c96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c9a:	4a08      	ldr	r2, [pc, #32]	@ (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008ca2:	f002 bafc 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008caa:	f002 baf8 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cb2:	f002 baf4 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cb6:	bf00      	nop
 8008cb8:	44020c00 	.word	0x44020c00
 8008cbc:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cc4:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8008cc8:	ea50 0104 	orrs.w	r1, r0, r4
 8008ccc:	f001 8275 	beq.w	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8008cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cd4:	2801      	cmp	r0, #1
 8008cd6:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8008cda:	f082 82dd 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008cde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ce2:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8008ce6:	ea50 0104 	orrs.w	r1, r0, r4
 8008cea:	f001 816c 	beq.w	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8008cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cf2:	2801      	cmp	r0, #1
 8008cf4:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8008cf8:	f082 82ce 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008cfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d00:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8008d04:	ea50 0104 	orrs.w	r1, r0, r4
 8008d08:	f001 8602 	beq.w	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8008d0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d10:	2801      	cmp	r0, #1
 8008d12:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8008d16:	f082 82bf 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d1e:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8008d22:	ea50 0104 	orrs.w	r1, r0, r4
 8008d26:	f001 854c 	beq.w	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8008d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d2e:	2801      	cmp	r0, #1
 8008d30:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8008d34:	f082 82b0 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d3c:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8008d40:	ea50 0104 	orrs.w	r1, r0, r4
 8008d44:	f001 849e 	beq.w	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8008d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d4c:	2801      	cmp	r0, #1
 8008d4e:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8008d52:	f082 82a1 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d5a:	f1a1 0420 	sub.w	r4, r1, #32
 8008d5e:	ea50 0104 	orrs.w	r1, r0, r4
 8008d62:	f001 83e8 	beq.w	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8008d66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d6a:	2801      	cmp	r0, #1
 8008d6c:	f171 0120 	sbcs.w	r1, r1, #32
 8008d70:	f082 8292 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d78:	f1a1 0410 	sub.w	r4, r1, #16
 8008d7c:	ea50 0104 	orrs.w	r1, r0, r4
 8008d80:	f002 8256 	beq.w	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8008d84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d88:	2801      	cmp	r0, #1
 8008d8a:	f171 0110 	sbcs.w	r1, r1, #16
 8008d8e:	f082 8283 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008d92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d96:	f1a1 0408 	sub.w	r4, r1, #8
 8008d9a:	ea50 0104 	orrs.w	r1, r0, r4
 8008d9e:	f002 81cc 	beq.w	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8008da2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008da6:	2801      	cmp	r0, #1
 8008da8:	f171 0108 	sbcs.w	r1, r1, #8
 8008dac:	f082 8274 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008db0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008db4:	1f0c      	subs	r4, r1, #4
 8008db6:	ea50 0104 	orrs.w	r1, r0, r4
 8008dba:	f001 8648 	beq.w	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8008dbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dc2:	2801      	cmp	r0, #1
 8008dc4:	f171 0104 	sbcs.w	r1, r1, #4
 8008dc8:	f082 8266 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008dcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dd0:	1e8c      	subs	r4, r1, #2
 8008dd2:	ea50 0104 	orrs.w	r1, r0, r4
 8008dd6:	f002 8143 	beq.w	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8008dda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dde:	2801      	cmp	r0, #1
 8008de0:	f171 0102 	sbcs.w	r1, r1, #2
 8008de4:	f082 8258 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dec:	1e4c      	subs	r4, r1, #1
 8008dee:	ea50 0104 	orrs.w	r1, r0, r4
 8008df2:	f002 80ce 	beq.w	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8008df6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dfa:	2801      	cmp	r0, #1
 8008dfc:	f171 0101 	sbcs.w	r1, r1, #1
 8008e00:	f082 824a 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e08:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8008e0c:	4321      	orrs	r1, r4
 8008e0e:	f002 8059 	beq.w	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8008e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e16:	4cd9      	ldr	r4, [pc, #868]	@ (800917c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008e18:	42a0      	cmp	r0, r4
 8008e1a:	f171 0100 	sbcs.w	r1, r1, #0
 8008e1e:	f082 823b 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e26:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8008e2a:	4321      	orrs	r1, r4
 8008e2c:	f001 87d9 	beq.w	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8008e30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e34:	4cd2      	ldr	r4, [pc, #840]	@ (8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8008e36:	42a0      	cmp	r0, r4
 8008e38:	f171 0100 	sbcs.w	r1, r1, #0
 8008e3c:	f082 822c 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e44:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8008e48:	4321      	orrs	r1, r4
 8008e4a:	f001 8751 	beq.w	800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8008e4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e52:	4ccc      	ldr	r4, [pc, #816]	@ (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008e54:	42a0      	cmp	r0, r4
 8008e56:	f171 0100 	sbcs.w	r1, r1, #0
 8008e5a:	f082 821d 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e62:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8008e66:	4321      	orrs	r1, r4
 8008e68:	f001 869a 	beq.w	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8008e6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e70:	4cc5      	ldr	r4, [pc, #788]	@ (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008e72:	42a0      	cmp	r0, r4
 8008e74:	f171 0100 	sbcs.w	r1, r1, #0
 8008e78:	f082 820e 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e80:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008e84:	4321      	orrs	r1, r4
 8008e86:	f001 8612 	beq.w	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8008e8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e8e:	4cbf      	ldr	r4, [pc, #764]	@ (800918c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8008e90:	42a0      	cmp	r0, r4
 8008e92:	f171 0100 	sbcs.w	r1, r1, #0
 8008e96:	f082 81ff 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008e9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e9e:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8008ea2:	4321      	orrs	r1, r4
 8008ea4:	f002 817e 	beq.w	800b1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8008ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eac:	4cb8      	ldr	r4, [pc, #736]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008eae:	42a0      	cmp	r0, r4
 8008eb0:	f171 0100 	sbcs.w	r1, r1, #0
 8008eb4:	f082 81f0 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ebc:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8008ec0:	4321      	orrs	r1, r4
 8008ec2:	f000 829e 	beq.w	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8008ec6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eca:	4cb2      	ldr	r4, [pc, #712]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ecc:	42a0      	cmp	r0, r4
 8008ece:	f171 0100 	sbcs.w	r1, r1, #0
 8008ed2:	f082 81e1 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008ed6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eda:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8008ede:	4321      	orrs	r1, r4
 8008ee0:	f000 826d 	beq.w	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008ee4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ee8:	4cab      	ldr	r4, [pc, #684]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008eea:	42a0      	cmp	r0, r4
 8008eec:	f171 0100 	sbcs.w	r1, r1, #0
 8008ef0:	f082 81d2 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008ef4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ef8:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8008efc:	4321      	orrs	r1, r4
 8008efe:	f001 800d 	beq.w	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8008f02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f06:	4ca5      	ldr	r4, [pc, #660]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008f08:	42a0      	cmp	r0, r4
 8008f0a:	f171 0100 	sbcs.w	r1, r1, #0
 8008f0e:	f082 81c3 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008f12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f16:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8008f1a:	4321      	orrs	r1, r4
 8008f1c:	f000 81d0 	beq.w	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8008f20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f24:	4c9e      	ldr	r4, [pc, #632]	@ (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008f26:	42a0      	cmp	r0, r4
 8008f28:	f171 0100 	sbcs.w	r1, r1, #0
 8008f2c:	f082 81b4 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008f30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f34:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8008f38:	4321      	orrs	r1, r4
 8008f3a:	f000 8142 	beq.w	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8008f3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f42:	4c98      	ldr	r4, [pc, #608]	@ (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008f44:	42a0      	cmp	r0, r4
 8008f46:	f171 0100 	sbcs.w	r1, r1, #0
 8008f4a:	f082 81a5 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008f4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f52:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8008f56:	4321      	orrs	r1, r4
 8008f58:	f001 824e 	beq.w	800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8008f5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f60:	4c91      	ldr	r4, [pc, #580]	@ (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008f62:	42a0      	cmp	r0, r4
 8008f64:	f171 0100 	sbcs.w	r1, r1, #0
 8008f68:	f082 8196 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008f6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f70:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8008f74:	4321      	orrs	r1, r4
 8008f76:	f001 8197 	beq.w	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8008f7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f7e:	4c8b      	ldr	r4, [pc, #556]	@ (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008f80:	42a0      	cmp	r0, r4
 8008f82:	f171 0100 	sbcs.w	r1, r1, #0
 8008f86:	f082 8187 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008f8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f8e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008f92:	4321      	orrs	r1, r4
 8008f94:	f001 8154 	beq.w	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8008f98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f9c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008fa0:	f171 0100 	sbcs.w	r1, r1, #0
 8008fa4:	f082 8178 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008fa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fac:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008fb0:	4321      	orrs	r1, r4
 8008fb2:	f001 80b7 	beq.w	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8008fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fba:	f248 0401 	movw	r4, #32769	@ 0x8001
 8008fbe:	42a0      	cmp	r0, r4
 8008fc0:	f171 0100 	sbcs.w	r1, r1, #0
 8008fc4:	f082 8168 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008fc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fcc:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008fd0:	4321      	orrs	r1, r4
 8008fd2:	f001 8064 	beq.w	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8008fd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fda:	f244 0401 	movw	r4, #16385	@ 0x4001
 8008fde:	42a0      	cmp	r0, r4
 8008fe0:	f171 0100 	sbcs.w	r1, r1, #0
 8008fe4:	f082 8158 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008fe8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fec:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008ff0:	4321      	orrs	r1, r4
 8008ff2:	f001 8011 	beq.w	800a018 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8008ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ffa:	f242 0401 	movw	r4, #8193	@ 0x2001
 8008ffe:	42a0      	cmp	r0, r4
 8009000:	f171 0100 	sbcs.w	r1, r1, #0
 8009004:	f082 8148 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800900c:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8009010:	4321      	orrs	r1, r4
 8009012:	f000 871e 	beq.w	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8009016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800901a:	f241 0401 	movw	r4, #4097	@ 0x1001
 800901e:	42a0      	cmp	r0, r4
 8009020:	f171 0100 	sbcs.w	r1, r1, #0
 8009024:	f082 8138 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800902c:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8009030:	4321      	orrs	r1, r4
 8009032:	f000 86a8 	beq.w	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8009036:	e9d7 0100 	ldrd	r0, r1, [r7]
 800903a:	f640 0401 	movw	r4, #2049	@ 0x801
 800903e:	42a0      	cmp	r0, r4
 8009040:	f171 0100 	sbcs.w	r1, r1, #0
 8009044:	f082 8128 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800904c:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8009050:	4321      	orrs	r1, r4
 8009052:	f000 8632 	beq.w	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8009056:	e9d7 0100 	ldrd	r0, r1, [r7]
 800905a:	f240 4401 	movw	r4, #1025	@ 0x401
 800905e:	42a0      	cmp	r0, r4
 8009060:	f171 0100 	sbcs.w	r1, r1, #0
 8009064:	f082 8118 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009068:	e9d7 0100 	ldrd	r0, r1, [r7]
 800906c:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8009070:	4321      	orrs	r1, r4
 8009072:	f000 85b0 	beq.w	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8009076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800907a:	f240 2401 	movw	r4, #513	@ 0x201
 800907e:	42a0      	cmp	r0, r4
 8009080:	f171 0100 	sbcs.w	r1, r1, #0
 8009084:	f082 8108 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800908c:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8009090:	4321      	orrs	r1, r4
 8009092:	f000 8535 	beq.w	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8009096:	e9d7 0100 	ldrd	r0, r1, [r7]
 800909a:	f240 1401 	movw	r4, #257	@ 0x101
 800909e:	42a0      	cmp	r0, r4
 80090a0:	f171 0100 	sbcs.w	r1, r1, #0
 80090a4:	f082 80f8 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80090a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090ac:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 80090b0:	4321      	orrs	r1, r4
 80090b2:	f000 84ba 	beq.w	8009a2a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80090b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090ba:	2881      	cmp	r0, #129	@ 0x81
 80090bc:	f171 0100 	sbcs.w	r1, r1, #0
 80090c0:	f082 80ea 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80090c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090c8:	2821      	cmp	r0, #33	@ 0x21
 80090ca:	f171 0100 	sbcs.w	r1, r1, #0
 80090ce:	d26f      	bcs.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80090d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090d4:	4301      	orrs	r1, r0
 80090d6:	f002 80df 	beq.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80090da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090de:	1e42      	subs	r2, r0, #1
 80090e0:	f141 33ff 	adc.w	r3, r1, #4294967295
 80090e4:	2a20      	cmp	r2, #32
 80090e6:	f173 0100 	sbcs.w	r1, r3, #0
 80090ea:	f082 80d5 	bcs.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80090ee:	2a1f      	cmp	r2, #31
 80090f0:	f202 80d2 	bhi.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80090f4:	a101      	add	r1, pc, #4	@ (adr r1, 80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80090f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80090fa:	bf00      	nop
 80090fc:	0800945d 	.word	0x0800945d
 8009100:	08009529 	.word	0x08009529
 8009104:	0800b299 	.word	0x0800b299
 8009108:	080095e9 	.word	0x080095e9
 800910c:	0800b299 	.word	0x0800b299
 8009110:	0800b299 	.word	0x0800b299
 8009114:	0800b299 	.word	0x0800b299
 8009118:	080096b9 	.word	0x080096b9
 800911c:	0800b299 	.word	0x0800b299
 8009120:	0800b299 	.word	0x0800b299
 8009124:	0800b299 	.word	0x0800b299
 8009128:	0800b299 	.word	0x0800b299
 800912c:	0800b299 	.word	0x0800b299
 8009130:	0800b299 	.word	0x0800b299
 8009134:	0800b299 	.word	0x0800b299
 8009138:	0800979b 	.word	0x0800979b
 800913c:	0800b299 	.word	0x0800b299
 8009140:	0800b299 	.word	0x0800b299
 8009144:	0800b299 	.word	0x0800b299
 8009148:	0800b299 	.word	0x0800b299
 800914c:	0800b299 	.word	0x0800b299
 8009150:	0800b299 	.word	0x0800b299
 8009154:	0800b299 	.word	0x0800b299
 8009158:	0800b299 	.word	0x0800b299
 800915c:	0800b299 	.word	0x0800b299
 8009160:	0800b299 	.word	0x0800b299
 8009164:	0800b299 	.word	0x0800b299
 8009168:	0800b299 	.word	0x0800b299
 800916c:	0800b299 	.word	0x0800b299
 8009170:	0800b299 	.word	0x0800b299
 8009174:	0800b299 	.word	0x0800b299
 8009178:	08009871 	.word	0x08009871
 800917c:	80000001 	.word	0x80000001
 8009180:	40000001 	.word	0x40000001
 8009184:	20000001 	.word	0x20000001
 8009188:	10000001 	.word	0x10000001
 800918c:	08000001 	.word	0x08000001
 8009190:	04000001 	.word	0x04000001
 8009194:	00800001 	.word	0x00800001
 8009198:	00400001 	.word	0x00400001
 800919c:	00200001 	.word	0x00200001
 80091a0:	00100001 	.word	0x00100001
 80091a4:	00080001 	.word	0x00080001
 80091a8:	00040001 	.word	0x00040001
 80091ac:	00020001 	.word	0x00020001
 80091b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091b4:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80091b8:	430b      	orrs	r3, r1
 80091ba:	f000 83c4 	beq.w	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80091be:	f002 b86b 	b.w	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80091c2:	4ba1      	ldr	r3, [pc, #644]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80091c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091c8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80091cc:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80091ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80091d4:	d036      	beq.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80091d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80091dc:	d86b      	bhi.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80091de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80091e4:	d02b      	beq.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80091e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80091ec:	d863      	bhi.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80091ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091f4:	d01b      	beq.n	800922e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80091f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091fc:	d85b      	bhi.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80091fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009200:	2b00      	cmp	r3, #0
 8009202:	d004      	beq.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8009204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800920a:	d008      	beq.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800920c:	e053      	b.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800920e:	f107 0320 	add.w	r3, r7, #32
 8009212:	4618      	mov	r0, r3
 8009214:	f7ff f8b4 	bl	8008380 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800921c:	e04e      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800921e:	f107 0314 	add.w	r3, r7, #20
 8009222:	4618      	mov	r0, r3
 8009224:	f7ff fa18 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800922c:	e046      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800922e:	f107 0308 	add.w	r3, r7, #8
 8009232:	4618      	mov	r0, r3
 8009234:	f7ff fb7c 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800923c:	e03e      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800923e:	4b83      	ldr	r3, [pc, #524]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009240:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009242:	e03b      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009244:	4b80      	ldr	r3, [pc, #512]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800924a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800924e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009250:	4b7d      	ldr	r3, [pc, #500]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0302 	and.w	r3, r3, #2
 8009258:	2b02      	cmp	r3, #2
 800925a:	d10c      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800925c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925e:	2b00      	cmp	r3, #0
 8009260:	d109      	bne.n	8009276 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009262:	4b79      	ldr	r3, [pc, #484]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	08db      	lsrs	r3, r3, #3
 8009268:	f003 0303 	and.w	r3, r3, #3
 800926c:	4a78      	ldr	r2, [pc, #480]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800926e:	fa22 f303 	lsr.w	r3, r2, r3
 8009272:	637b      	str	r3, [r7, #52]	@ 0x34
 8009274:	e01e      	b.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009276:	4b74      	ldr	r3, [pc, #464]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800927e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009282:	d106      	bne.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800928a:	d102      	bne.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800928c:	4b71      	ldr	r3, [pc, #452]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800928e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009290:	e010      	b.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009292:	4b6d      	ldr	r3, [pc, #436]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800929a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800929e:	d106      	bne.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80092a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092a6:	d102      	bne.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80092a8:	4b6b      	ldr	r3, [pc, #428]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80092aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ac:	e002      	b.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80092ae:	2300      	movs	r3, #0
 80092b0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80092b2:	e003      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80092b4:	e002      	b.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092ba:	bf00      	nop
          }
        }
        break;
 80092bc:	f001 bfef 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80092c0:	4b61      	ldr	r3, [pc, #388]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80092c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092c6:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80092ca:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092d2:	d036      	beq.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80092d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092da:	d86b      	bhi.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80092dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092de:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80092e2:	d02b      	beq.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80092e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80092ea:	d863      	bhi.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80092ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092f2:	d01b      	beq.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092fa:	d85b      	bhi.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80092fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d004      	beq.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009304:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009308:	d008      	beq.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800930a:	e053      	b.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800930c:	f107 0320 	add.w	r3, r7, #32
 8009310:	4618      	mov	r0, r3
 8009312:	f7ff f835 	bl	8008380 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009318:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800931a:	e04e      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800931c:	f107 0314 	add.w	r3, r7, #20
 8009320:	4618      	mov	r0, r3
 8009322:	f7ff f999 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800932a:	e046      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800932c:	f107 0308 	add.w	r3, r7, #8
 8009330:	4618      	mov	r0, r3
 8009332:	f7ff fafd 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800933a:	e03e      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800933c:	4b43      	ldr	r3, [pc, #268]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800933e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009340:	e03b      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009342:	4b41      	ldr	r3, [pc, #260]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009348:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800934c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800934e:	4b3e      	ldr	r3, [pc, #248]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b02      	cmp	r3, #2
 8009358:	d10c      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800935a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935c:	2b00      	cmp	r3, #0
 800935e:	d109      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009360:	4b39      	ldr	r3, [pc, #228]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	08db      	lsrs	r3, r3, #3
 8009366:	f003 0303 	and.w	r3, r3, #3
 800936a:	4a39      	ldr	r2, [pc, #228]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800936c:	fa22 f303 	lsr.w	r3, r2, r3
 8009370:	637b      	str	r3, [r7, #52]	@ 0x34
 8009372:	e01e      	b.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009374:	4b34      	ldr	r3, [pc, #208]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800937c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009380:	d106      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009388:	d102      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800938a:	4b32      	ldr	r3, [pc, #200]	@ (8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800938c:	637b      	str	r3, [r7, #52]	@ 0x34
 800938e:	e010      	b.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009390:	4b2d      	ldr	r3, [pc, #180]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800939c:	d106      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800939e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093a4:	d102      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093a6:	4b2c      	ldr	r3, [pc, #176]	@ (8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80093a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093aa:	e002      	b.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80093b0:	e003      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80093b2:	e002      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093b8:	bf00      	nop
          }
        }
        break;
 80093ba:	f001 bf70 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80093be:	4b22      	ldr	r3, [pc, #136]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80093c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80093c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c8:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d108      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093d0:	f107 0320 	add.w	r3, r7, #32
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fe ffd3 	bl	8008380 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093dc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80093de:	f001 bf5e 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	2b40      	cmp	r3, #64	@ 0x40
 80093e6:	d108      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093e8:	f107 0314 	add.w	r3, r7, #20
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff f933 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093f6:	f001 bf52 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093fe:	f001 bf4e 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8009402:	4b11      	ldr	r3, [pc, #68]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009404:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800940c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800940e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009410:	2b00      	cmp	r3, #0
 8009412:	d108      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009414:	f107 0320 	add.w	r3, r7, #32
 8009418:	4618      	mov	r0, r3
 800941a:	f7fe ffb1 	bl	8008380 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800941e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009420:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009422:	f001 bf3c 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	2b80      	cmp	r3, #128	@ 0x80
 800942a:	d108      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800942c:	f107 0314 	add.w	r3, r7, #20
 8009430:	4618      	mov	r0, r3
 8009432:	f7ff f911 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800943a:	f001 bf30 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009442:	f001 bf2c 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009446:	bf00      	nop
 8009448:	44020c00 	.word	0x44020c00
 800944c:	00bb8000 	.word	0x00bb8000
 8009450:	03d09000 	.word	0x03d09000
 8009454:	003d0900 	.word	0x003d0900
 8009458:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800945c:	4b9d      	ldr	r3, [pc, #628]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800945e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946a:	2b00      	cmp	r3, #0
 800946c:	d104      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800946e:	f7fc ffd1 	bl	8006414 <HAL_RCC_GetPCLK2Freq>
 8009472:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009474:	f001 bf13 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8009478:	4b96      	ldr	r3, [pc, #600]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009480:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009484:	d10a      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8009486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009488:	2b01      	cmp	r3, #1
 800948a:	d107      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800948c:	f107 0314 	add.w	r3, r7, #20
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff f8e1 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	637b      	str	r3, [r7, #52]	@ 0x34
 800949a:	e043      	b.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800949c:	4b8d      	ldr	r3, [pc, #564]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094a8:	d10a      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80094aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d107      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094b0:	f107 0308 	add.w	r3, r7, #8
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7ff fa3b 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094be:	e031      	b.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80094c0:	4b84      	ldr	r3, [pc, #528]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d10c      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80094cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d109      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094d2:	4b80      	ldr	r3, [pc, #512]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	08db      	lsrs	r3, r3, #3
 80094d8:	f003 0303 	and.w	r3, r3, #3
 80094dc:	4a7e      	ldr	r2, [pc, #504]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80094de:	fa22 f303 	lsr.w	r3, r2, r3
 80094e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e4:	e01e      	b.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80094e6:	4b7b      	ldr	r3, [pc, #492]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094f2:	d105      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80094f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	d102      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80094fa:	4b78      	ldr	r3, [pc, #480]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80094fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094fe:	e011      	b.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009500:	4b74      	ldr	r3, [pc, #464]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009502:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009506:	f003 0302 	and.w	r3, r3, #2
 800950a:	2b02      	cmp	r3, #2
 800950c:	d106      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800950e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009510:	2b05      	cmp	r3, #5
 8009512:	d103      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8009514:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009518:	637b      	str	r3, [r7, #52]	@ 0x34
 800951a:	e003      	b.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800951c:	2300      	movs	r3, #0
 800951e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009520:	f001 bebd 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009524:	f001 bebb 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009528:	4b6a      	ldr	r3, [pc, #424]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800952a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800952e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009532:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009536:	2b00      	cmp	r3, #0
 8009538:	d104      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800953a:	f7fc ff55 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 800953e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009540:	f001 bead 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8009544:	4b63      	ldr	r3, [pc, #396]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800954c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009550:	d10a      	bne.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	2b08      	cmp	r3, #8
 8009556:	d107      	bne.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009558:	f107 0314 	add.w	r3, r7, #20
 800955c:	4618      	mov	r0, r3
 800955e:	f7ff f87b 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	637b      	str	r3, [r7, #52]	@ 0x34
 8009566:	e03d      	b.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8009568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956a:	2b10      	cmp	r3, #16
 800956c:	d108      	bne.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800956e:	f107 0308 	add.w	r3, r7, #8
 8009572:	4618      	mov	r0, r3
 8009574:	f7ff f9dc 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800957c:	f001 be8f 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009580:	4b54      	ldr	r3, [pc, #336]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 0302 	and.w	r3, r3, #2
 8009588:	2b02      	cmp	r3, #2
 800958a:	d10c      	bne.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800958c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958e:	2b18      	cmp	r3, #24
 8009590:	d109      	bne.n	80095a6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009592:	4b50      	ldr	r3, [pc, #320]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	08db      	lsrs	r3, r3, #3
 8009598:	f003 0303 	and.w	r3, r3, #3
 800959c:	4a4e      	ldr	r2, [pc, #312]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800959e:	fa22 f303 	lsr.w	r3, r2, r3
 80095a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a4:	e01e      	b.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80095a6:	4b4b      	ldr	r3, [pc, #300]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095b2:	d105      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80095b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	d102      	bne.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80095ba:	4b48      	ldr	r3, [pc, #288]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80095bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80095be:	e011      	b.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80095c0:	4b44      	ldr	r3, [pc, #272]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80095c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d106      	bne.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80095ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d0:	2b28      	cmp	r3, #40	@ 0x28
 80095d2:	d103      	bne.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80095d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80095da:	e003      	b.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80095dc:	2300      	movs	r3, #0
 80095de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095e0:	f001 be5d 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80095e4:	f001 be5b 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80095e8:	4b3a      	ldr	r3, [pc, #232]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80095ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80095ee:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80095f2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80095f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d104      	bne.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80095fa:	f7fc fef5 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 80095fe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009600:	f001 be4d 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8009604:	4b33      	ldr	r3, [pc, #204]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800960c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009610:	d10a      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8009612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009614:	2b40      	cmp	r3, #64	@ 0x40
 8009616:	d107      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009618:	f107 0314 	add.w	r3, r7, #20
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff f81b 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	637b      	str	r3, [r7, #52]	@ 0x34
 8009626:	e045      	b.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8009628:	4b2a      	ldr	r3, [pc, #168]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009634:	d10a      	bne.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8009636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009638:	2b80      	cmp	r3, #128	@ 0x80
 800963a:	d107      	bne.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800963c:	f107 0308 	add.w	r3, r7, #8
 8009640:	4618      	mov	r0, r3
 8009642:	f7ff f975 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	637b      	str	r3, [r7, #52]	@ 0x34
 800964a:	e033      	b.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800964c:	4b21      	ldr	r3, [pc, #132]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 0302 	and.w	r3, r3, #2
 8009654:	2b02      	cmp	r3, #2
 8009656:	d10c      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8009658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965a:	2bc0      	cmp	r3, #192	@ 0xc0
 800965c:	d109      	bne.n	8009672 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800965e:	4b1d      	ldr	r3, [pc, #116]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	08db      	lsrs	r3, r3, #3
 8009664:	f003 0303 	and.w	r3, r3, #3
 8009668:	4a1b      	ldr	r2, [pc, #108]	@ (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800966a:	fa22 f303 	lsr.w	r3, r2, r3
 800966e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009670:	e020      	b.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8009672:	4b18      	ldr	r3, [pc, #96]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800967a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800967e:	d106      	bne.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8009680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009686:	d102      	bne.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8009688:	4b14      	ldr	r3, [pc, #80]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800968a:	637b      	str	r3, [r7, #52]	@ 0x34
 800968c:	e012      	b.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800968e:	4b11      	ldr	r3, [pc, #68]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	2b02      	cmp	r3, #2
 800969a:	d107      	bne.n	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800969c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80096a2:	d103      	bne.n	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80096a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80096aa:	e003      	b.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096b0:	f001 bdf5 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80096b4:	f001 bdf3 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80096b8:	4b06      	ldr	r3, [pc, #24]	@ (80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80096ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80096be:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80096c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80096c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10a      	bne.n	80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80096ca:	f7fc fe8d 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 80096ce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80096d0:	f001 bde5 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80096d4:	44020c00 	.word	0x44020c00
 80096d8:	03d09000 	.word	0x03d09000
 80096dc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80096e0:	4ba0      	ldr	r3, [pc, #640]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096ec:	d10b      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80096ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096f4:	d107      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096f6:	f107 0314 	add.w	r3, r7, #20
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe ffac 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	637b      	str	r3, [r7, #52]	@ 0x34
 8009704:	e047      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8009706:	4b97      	ldr	r3, [pc, #604]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800970e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009712:	d10b      	bne.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8009714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800971a:	d107      	bne.n	800972c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800971c:	f107 0308 	add.w	r3, r7, #8
 8009720:	4618      	mov	r0, r3
 8009722:	f7ff f905 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	637b      	str	r3, [r7, #52]	@ 0x34
 800972a:	e034      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800972c:	4b8d      	ldr	r3, [pc, #564]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b02      	cmp	r3, #2
 8009736:	d10d      	bne.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8009738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800973e:	d109      	bne.n	8009754 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009740:	4b88      	ldr	r3, [pc, #544]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	08db      	lsrs	r3, r3, #3
 8009746:	f003 0303 	and.w	r3, r3, #3
 800974a:	4a87      	ldr	r2, [pc, #540]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800974c:	fa22 f303 	lsr.w	r3, r2, r3
 8009750:	637b      	str	r3, [r7, #52]	@ 0x34
 8009752:	e020      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8009754:	4b83      	ldr	r3, [pc, #524]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800975c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009760:	d106      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8009762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009768:	d102      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800976a:	4b80      	ldr	r3, [pc, #512]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800976c:	637b      	str	r3, [r7, #52]	@ 0x34
 800976e:	e012      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009770:	4b7c      	ldr	r3, [pc, #496]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b02      	cmp	r3, #2
 800977c:	d107      	bne.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800977e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009780:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009784:	d103      	bne.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8009786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800978a:	637b      	str	r3, [r7, #52]	@ 0x34
 800978c:	e003      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009792:	f001 bd84 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009796:	f001 bd82 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800979a:	4b72      	ldr	r3, [pc, #456]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800979c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80097a0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80097a4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80097a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d104      	bne.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80097ac:	f7fc fe1c 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 80097b0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80097b2:	f001 bd74 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80097b6:	4b6b      	ldr	r3, [pc, #428]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097c2:	d10b      	bne.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80097c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ca:	d107      	bne.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097cc:	f107 0314 	add.w	r3, r7, #20
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe ff41 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097da:	e047      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80097dc:	4b61      	ldr	r3, [pc, #388]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097e8:	d10b      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80097ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097f0:	d107      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097f2:	f107 0308 	add.w	r3, r7, #8
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7ff f89a 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009800:	e034      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009802:	4b58      	ldr	r3, [pc, #352]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	2b02      	cmp	r3, #2
 800980c:	d10d      	bne.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800980e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009810:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009814:	d109      	bne.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009816:	4b53      	ldr	r3, [pc, #332]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	08db      	lsrs	r3, r3, #3
 800981c:	f003 0303 	and.w	r3, r3, #3
 8009820:	4a51      	ldr	r2, [pc, #324]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009822:	fa22 f303 	lsr.w	r3, r2, r3
 8009826:	637b      	str	r3, [r7, #52]	@ 0x34
 8009828:	e020      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800982a:	4b4e      	ldr	r3, [pc, #312]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009836:	d106      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8009838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800983e:	d102      	bne.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8009840:	4b4a      	ldr	r3, [pc, #296]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009842:	637b      	str	r3, [r7, #52]	@ 0x34
 8009844:	e012      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009846:	4b47      	ldr	r3, [pc, #284]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	2b02      	cmp	r3, #2
 8009852:	d107      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8009854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009856:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800985a:	d103      	bne.n	8009864 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800985c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009860:	637b      	str	r3, [r7, #52]	@ 0x34
 8009862:	e003      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8009864:	2300      	movs	r3, #0
 8009866:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009868:	f001 bd19 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800986c:	f001 bd17 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8009870:	4b3c      	ldr	r3, [pc, #240]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009872:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009876:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800987a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800987c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987e:	2b00      	cmp	r3, #0
 8009880:	d104      	bne.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009882:	f7fc fdb1 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 8009886:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8009888:	f001 bd09 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800988c:	4b35      	ldr	r3, [pc, #212]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009898:	d10b      	bne.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800989a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098a0:	d107      	bne.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098a2:	f107 0314 	add.w	r3, r7, #20
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fed6 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b0:	e047      	b.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80098b2:	4b2c      	ldr	r3, [pc, #176]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098be:	d10b      	bne.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80098c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098c6:	d107      	bne.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098c8:	f107 0308 	add.w	r3, r7, #8
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7ff f82f 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d6:	e034      	b.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80098d8:	4b22      	ldr	r3, [pc, #136]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 0302 	and.w	r3, r3, #2
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d10d      	bne.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80098e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80098ea:	d109      	bne.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80098ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	08db      	lsrs	r3, r3, #3
 80098f2:	f003 0303 	and.w	r3, r3, #3
 80098f6:	4a1c      	ldr	r2, [pc, #112]	@ (8009968 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80098f8:	fa22 f303 	lsr.w	r3, r2, r3
 80098fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80098fe:	e020      	b.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8009900:	4b18      	ldr	r3, [pc, #96]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800990c:	d106      	bne.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800990e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009910:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009914:	d102      	bne.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8009916:	4b15      	ldr	r3, [pc, #84]	@ (800996c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009918:	637b      	str	r3, [r7, #52]	@ 0x34
 800991a:	e012      	b.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800991c:	4b11      	ldr	r3, [pc, #68]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800991e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009922:	f003 0302 	and.w	r3, r3, #2
 8009926:	2b02      	cmp	r3, #2
 8009928:	d107      	bne.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800992a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009930:	d103      	bne.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8009932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009936:	637b      	str	r3, [r7, #52]	@ 0x34
 8009938:	e003      	b.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800993a:	2300      	movs	r3, #0
 800993c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800993e:	f001 bcae 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009942:	f001 bcac 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8009946:	4b07      	ldr	r3, [pc, #28]	@ (8009964 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009948:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800994c:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8009950:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8009952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10b      	bne.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009958:	f7fc fd46 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 800995c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800995e:	f001 bc9e 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009962:	bf00      	nop
 8009964:	44020c00 	.word	0x44020c00
 8009968:	03d09000 	.word	0x03d09000
 800996c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8009970:	4ba0      	ldr	r3, [pc, #640]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009978:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800997c:	d10b      	bne.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009984:	d107      	bne.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009986:	f107 0314 	add.w	r3, r7, #20
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe fe64 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	637b      	str	r3, [r7, #52]	@ 0x34
 8009994:	e047      	b.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8009996:	4b97      	ldr	r3, [pc, #604]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800999e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099a2:	d10b      	bne.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80099a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80099aa:	d107      	bne.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099ac:	f107 0308 	add.w	r3, r7, #8
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fe ffbd 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ba:	e034      	b.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80099bc:	4b8d      	ldr	r3, [pc, #564]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d10d      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80099c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80099ce:	d109      	bne.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80099d0:	4b88      	ldr	r3, [pc, #544]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	08db      	lsrs	r3, r3, #3
 80099d6:	f003 0303 	and.w	r3, r3, #3
 80099da:	4a87      	ldr	r2, [pc, #540]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80099dc:	fa22 f303 	lsr.w	r3, r2, r3
 80099e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099e2:	e020      	b.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80099e4:	4b83      	ldr	r3, [pc, #524]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099f0:	d106      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80099f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099f8:	d102      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80099fa:	4b80      	ldr	r3, [pc, #512]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80099fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80099fe:	e012      	b.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8009a00:	4b7c      	ldr	r3, [pc, #496]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a06:	f003 0302 	and.w	r3, r3, #2
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d107      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a10:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8009a14:	d103      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8009a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a1c:	e003      	b.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a22:	f001 bc3c 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a26:	f001 bc3a 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8009a2a:	4b72      	ldr	r3, [pc, #456]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009a2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009a30:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009a34:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8009a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d104      	bne.n	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009a3c:	f7fc fcd4 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 8009a40:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8009a42:	f001 bc2c 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8009a46:	4b6b      	ldr	r3, [pc, #428]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a52:	d10b      	bne.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a5a:	d107      	bne.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a5c:	f107 0314 	add.w	r3, r7, #20
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fe fdf9 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a6a:	e047      	b.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8009a6c:	4b61      	ldr	r3, [pc, #388]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a78:	d10b      	bne.n	8009a92 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a80:	d107      	bne.n	8009a92 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a82:	f107 0308 	add.w	r3, r7, #8
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe ff52 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a90:	e034      	b.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8009a92:	4b58      	ldr	r3, [pc, #352]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d10d      	bne.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009aa4:	d109      	bne.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009aa6:	4b53      	ldr	r3, [pc, #332]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	08db      	lsrs	r3, r3, #3
 8009aac:	f003 0303 	and.w	r3, r3, #3
 8009ab0:	4a51      	ldr	r2, [pc, #324]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8009ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ab8:	e020      	b.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8009aba:	4b4e      	ldr	r3, [pc, #312]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ac6:	d106      	bne.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009ace:	d102      	bne.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8009ad0:	4b4a      	ldr	r3, [pc, #296]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8009ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ad4:	e012      	b.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8009ad6:	4b47      	ldr	r3, [pc, #284]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d107      	bne.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009aea:	d103      	bne.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8009aec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009af2:	e003      	b.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009af8:	f001 bbd1 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009afc:	f001 bbcf 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8009b00:	4b3c      	ldr	r3, [pc, #240]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009b02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009b06:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009b0a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8009b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d104      	bne.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009b12:	f7fc fc69 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 8009b16:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8009b18:	f001 bbc1 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8009b1c:	4b35      	ldr	r3, [pc, #212]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b28:	d10b      	bne.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b30:	d107      	bne.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b32:	f107 0314 	add.w	r3, r7, #20
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fe fd8e 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b40:	e047      	b.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8009b42:	4b2c      	ldr	r3, [pc, #176]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b4e:	d10b      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8009b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b56:	d107      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b58:	f107 0308 	add.w	r3, r7, #8
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fe fee7 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b66:	e034      	b.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8009b68:	4b22      	ldr	r3, [pc, #136]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 0302 	and.w	r3, r3, #2
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d10d      	bne.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8009b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009b7a:	d109      	bne.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	08db      	lsrs	r3, r3, #3
 8009b82:	f003 0303 	and.w	r3, r3, #3
 8009b86:	4a1c      	ldr	r2, [pc, #112]	@ (8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8009b88:	fa22 f303 	lsr.w	r3, r2, r3
 8009b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b8e:	e020      	b.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8009b90:	4b18      	ldr	r3, [pc, #96]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b9c:	d106      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ba4:	d102      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8009ba6:	4b15      	ldr	r3, [pc, #84]	@ (8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8009ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009baa:	e012      	b.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8009bac:	4b11      	ldr	r3, [pc, #68]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bb2:	f003 0302 	and.w	r3, r3, #2
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d107      	bne.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8009bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bbc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009bc0:	d103      	bne.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8009bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc8:	e003      	b.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bce:	f001 bb66 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009bd2:	f001 bb64 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8009bd6:	4b07      	ldr	r3, [pc, #28]	@ (8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009bd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009bdc:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8009be0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8009be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10b      	bne.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009be8:	f7fc fbfe 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 8009bec:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8009bee:	f001 bb56 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009bf2:	bf00      	nop
 8009bf4:	44020c00 	.word	0x44020c00
 8009bf8:	03d09000 	.word	0x03d09000
 8009bfc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8009c00:	4ba1      	ldr	r3, [pc, #644]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c0c:	d10b      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c14:	d107      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c16:	f107 0314 	add.w	r3, r7, #20
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fe fd1c 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c24:	e047      	b.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8009c26:	4b98      	ldr	r3, [pc, #608]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c32:	d10b      	bne.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c3a:	d107      	bne.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c3c:	f107 0308 	add.w	r3, r7, #8
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fe fe75 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c4a:	e034      	b.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8009c4c:	4b8e      	ldr	r3, [pc, #568]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0302 	and.w	r3, r3, #2
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d10d      	bne.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8009c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8009c5e:	d109      	bne.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c60:	4b89      	ldr	r3, [pc, #548]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	08db      	lsrs	r3, r3, #3
 8009c66:	f003 0303 	and.w	r3, r3, #3
 8009c6a:	4a88      	ldr	r2, [pc, #544]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c72:	e020      	b.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8009c74:	4b84      	ldr	r3, [pc, #528]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c80:	d106      	bne.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8009c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c88:	d102      	bne.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8009c8a:	4b81      	ldr	r3, [pc, #516]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c8e:	e012      	b.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8009c90:	4b7d      	ldr	r3, [pc, #500]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c96:	f003 0302 	and.w	r3, r3, #2
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d107      	bne.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca0:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8009ca4:	d103      	bne.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8009ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cac:	e003      	b.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cb2:	f001 baf4 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009cb6:	f001 baf2 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8009cba:	4b73      	ldr	r3, [pc, #460]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009cbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009cc0:	f003 0307 	and.w	r3, r3, #7
 8009cc4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d104      	bne.n	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009ccc:	f7fc fb8c 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 8009cd0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8009cd2:	f001 bae4 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8009cd6:	4b6c      	ldr	r3, [pc, #432]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ce2:	d10a      	bne.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d107      	bne.n	8009cfa <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cea:	f107 0314 	add.w	r3, r7, #20
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe fcb2 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cf8:	e043      	b.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8009cfa:	4b63      	ldr	r3, [pc, #396]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d06:	d10a      	bne.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8009d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d107      	bne.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d0e:	f107 0308 	add.w	r3, r7, #8
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fe fe0c 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d1c:	e031      	b.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8009d1e:	4b5a      	ldr	r3, [pc, #360]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 0302 	and.w	r3, r3, #2
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d10c      	bne.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d109      	bne.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d30:	4b55      	ldr	r3, [pc, #340]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	08db      	lsrs	r3, r3, #3
 8009d36:	f003 0303 	and.w	r3, r3, #3
 8009d3a:	4a54      	ldr	r2, [pc, #336]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d42:	e01e      	b.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8009d44:	4b50      	ldr	r3, [pc, #320]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d50:	d105      	bne.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8009d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d54:	2b04      	cmp	r3, #4
 8009d56:	d102      	bne.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8009d58:	4b4d      	ldr	r3, [pc, #308]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d5c:	e011      	b.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8009d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d64:	f003 0302 	and.w	r3, r3, #2
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d106      	bne.n	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6e:	2b05      	cmp	r3, #5
 8009d70:	d103      	bne.n	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8009d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d78:	e003      	b.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d7e:	f001 ba8e 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d82:	f001 ba8c 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8009d86:	4b40      	ldr	r3, [pc, #256]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009d88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009d8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d90:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8009d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009d98:	f7fc fb26 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 8009d9c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8009d9e:	f001 ba7e 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8009da2:	4b39      	ldr	r3, [pc, #228]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009daa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dae:	d10a      	bne.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8009db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db2:	2b10      	cmp	r3, #16
 8009db4:	d107      	bne.n	8009dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009db6:	f107 0314 	add.w	r3, r7, #20
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe fc4c 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dc4:	e043      	b.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8009dc6:	4b30      	ldr	r3, [pc, #192]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dd2:	d10a      	bne.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	d107      	bne.n	8009dea <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dda:	f107 0308 	add.w	r3, r7, #8
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe fda6 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009de8:	e031      	b.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8009dea:	4b27      	ldr	r3, [pc, #156]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 0302 	and.w	r3, r3, #2
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d10c      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8009df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df8:	2b30      	cmp	r3, #48	@ 0x30
 8009dfa:	d109      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009dfc:	4b22      	ldr	r3, [pc, #136]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	08db      	lsrs	r3, r3, #3
 8009e02:	f003 0303 	and.w	r3, r3, #3
 8009e06:	4a21      	ldr	r2, [pc, #132]	@ (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009e08:	fa22 f303 	lsr.w	r3, r2, r3
 8009e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e0e:	e01e      	b.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8009e10:	4b1d      	ldr	r3, [pc, #116]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e1c:	d105      	bne.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e20:	2b40      	cmp	r3, #64	@ 0x40
 8009e22:	d102      	bne.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8009e24:	4b1a      	ldr	r3, [pc, #104]	@ (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e28:	e011      	b.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8009e2a:	4b17      	ldr	r3, [pc, #92]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e30:	f003 0302 	and.w	r3, r3, #2
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d106      	bne.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8009e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3a:	2b50      	cmp	r3, #80	@ 0x50
 8009e3c:	d103      	bne.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8009e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e44:	e003      	b.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e4a:	f001 ba28 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e4e:	f001 ba26 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009e52:	4b0d      	ldr	r3, [pc, #52]	@ (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e58:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009e5c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d104      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009e64:	f7fc faec 	bl	8006440 <HAL_RCC_GetPCLK3Freq>
 8009e68:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009e6a:	f001 ba18 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e74:	d10e      	bne.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e76:	f107 0314 	add.w	r3, r7, #20
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe fbec 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e84:	f001 ba0b 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e88:	44020c00 	.word	0x44020c00
 8009e8c:	03d09000 	.word	0x03d09000
 8009e90:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8009e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e9a:	d108      	bne.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e9c:	f107 0308 	add.w	r3, r7, #8
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fe fd45 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009eaa:	f001 b9f8 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009eae:	4ba4      	ldr	r3, [pc, #656]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 0302 	and.w	r3, r3, #2
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d10d      	bne.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009ec0:	d109      	bne.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009ec2:	4b9f      	ldr	r3, [pc, #636]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	08db      	lsrs	r3, r3, #3
 8009ec8:	f003 0303 	and.w	r3, r3, #3
 8009ecc:	4a9d      	ldr	r2, [pc, #628]	@ (800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009ece:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ed4:	e020      	b.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8009ed6:	4b9a      	ldr	r3, [pc, #616]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009ede:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ee2:	d106      	bne.n	8009ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009eea:	d102      	bne.n	8009ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8009eec:	4b96      	ldr	r3, [pc, #600]	@ (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009eee:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ef0:	e012      	b.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009ef2:	4b93      	ldr	r3, [pc, #588]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ef8:	f003 0302 	and.w	r3, r3, #2
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d107      	bne.n	8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8009f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f02:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009f06:	d103      	bne.n	8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8009f08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f0e:	e003      	b.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8009f10:	2300      	movs	r3, #0
 8009f12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f14:	f001 b9c3 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f18:	f001 b9c1 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009f1c:	4b88      	ldr	r3, [pc, #544]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009f1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f22:	f003 0307 	and.w	r3, r3, #7
 8009f26:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d104      	bne.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8009f2e:	f7fc fa3f 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 8009f32:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8009f34:	f001 b9b3 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d104      	bne.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8009f3e:	f7fc f90b 	bl	8006158 <HAL_RCC_GetSysClockFreq>
 8009f42:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009f44:	f001 b9ab 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8009f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d108      	bne.n	8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f4e:	f107 0314 	add.w	r3, r7, #20
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fe fb80 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f5c:	f001 b99f 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009f60:	4b77      	ldr	r3, [pc, #476]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f6c:	d105      	bne.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	d102      	bne.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8009f74:	4b75      	ldr	r3, [pc, #468]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8009f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f78:	e023      	b.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009f7a:	4b71      	ldr	r3, [pc, #452]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f003 0302 	and.w	r3, r3, #2
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d10c      	bne.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8009f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f88:	2b04      	cmp	r3, #4
 8009f8a:	d109      	bne.n	8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f8c:	4b6c      	ldr	r3, [pc, #432]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	08db      	lsrs	r3, r3, #3
 8009f92:	f003 0303 	and.w	r3, r3, #3
 8009f96:	4a6b      	ldr	r2, [pc, #428]	@ (800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009f98:	fa22 f303 	lsr.w	r3, r2, r3
 8009f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f9e:	e010      	b.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009fa0:	4b67      	ldr	r3, [pc, #412]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fac:	d105      	bne.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb0:	2b05      	cmp	r3, #5
 8009fb2:	d102      	bne.n	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8009fb4:	4b64      	ldr	r3, [pc, #400]	@ (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fb8:	e003      	b.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fbe:	f001 b96e 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009fc2:	f001 b96c 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8009fc6:	4b5e      	ldr	r3, [pc, #376]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009fcc:	f003 0308 	and.w	r3, r3, #8
 8009fd0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8009fd2:	4b5b      	ldr	r3, [pc, #364]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fd8:	f003 0302 	and.w	r3, r3, #2
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d106      	bne.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d103      	bne.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8009fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fec:	e012      	b.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8009fee:	4b54      	ldr	r3, [pc, #336]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ff8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ffc:	d106      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a000:	2b08      	cmp	r3, #8
 800a002:	d103      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800a004:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a008:	637b      	str	r3, [r7, #52]	@ 0x34
 800a00a:	e003      	b.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800a00c:	2300      	movs	r3, #0
 800a00e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a010:	f001 b945 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a014:	f001 b943 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a018:	4b49      	ldr	r3, [pc, #292]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a01a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a01e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a022:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a026:	2b00      	cmp	r3, #0
 800a028:	d104      	bne.n	800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a02a:	f7fc f9dd 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 800a02e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a030:	f001 b935 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800a034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a036:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a03a:	d108      	bne.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a03c:	f107 0308 	add.w	r3, r7, #8
 800a040:	4618      	mov	r0, r3
 800a042:	f7fe fc75 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a04a:	f001 b928 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a04e:	4b3c      	ldr	r3, [pc, #240]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0302 	and.w	r3, r3, #2
 800a056:	2b02      	cmp	r3, #2
 800a058:	d10d      	bne.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800a05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a060:	d109      	bne.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a062:	4b37      	ldr	r3, [pc, #220]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	08db      	lsrs	r3, r3, #3
 800a068:	f003 0303 	and.w	r3, r3, #3
 800a06c:	4a35      	ldr	r2, [pc, #212]	@ (800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a06e:	fa22 f303 	lsr.w	r3, r2, r3
 800a072:	637b      	str	r3, [r7, #52]	@ 0x34
 800a074:	e011      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800a076:	4b32      	ldr	r3, [pc, #200]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a07e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a082:	d106      	bne.n	800a092 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800a084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a086:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a08a:	d102      	bne.n	800a092 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800a08c:	4b2e      	ldr	r3, [pc, #184]	@ (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a08e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a090:	e003      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800a092:	2300      	movs	r3, #0
 800a094:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a096:	f001 b902 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a09a:	f001 b900 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a09e:	4b28      	ldr	r3, [pc, #160]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a0a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a0a4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800a0a8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d104      	bne.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a0b0:	f7fc f99a 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 800a0b4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800a0b6:	f001 b8f2 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0c0:	d108      	bne.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0c2:	f107 0308 	add.w	r3, r7, #8
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe fc32 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a0d0:	f001 b8e5 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a0d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 0302 	and.w	r3, r3, #2
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d10d      	bne.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a0e6:	d109      	bne.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0e8:	4b15      	ldr	r3, [pc, #84]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	08db      	lsrs	r3, r3, #3
 800a0ee:	f003 0303 	and.w	r3, r3, #3
 800a0f2:	4a14      	ldr	r2, [pc, #80]	@ (800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a0f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0fa:	e011      	b.n	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800a0fc:	4b10      	ldr	r3, [pc, #64]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a108:	d106      	bne.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800a10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a110:	d102      	bne.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800a112:	4b0d      	ldr	r3, [pc, #52]	@ (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a114:	637b      	str	r3, [r7, #52]	@ 0x34
 800a116:	e003      	b.n	800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800a118:	2300      	movs	r3, #0
 800a11a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a11c:	f001 b8bf 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a120:	f001 b8bd 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a124:	4b06      	ldr	r3, [pc, #24]	@ (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a126:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a12a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a12e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800a130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10c      	bne.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a136:	f7fc f983 	bl	8006440 <HAL_RCC_GetPCLK3Freq>
 800a13a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800a13c:	f001 b8af 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a140:	44020c00 	.word	0x44020c00
 800a144:	03d09000 	.word	0x03d09000
 800a148:	003d0900 	.word	0x003d0900
 800a14c:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800a150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a156:	d108      	bne.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a158:	f107 0308 	add.w	r3, r7, #8
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7fe fbe7 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a166:	f001 b89a 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800a16a:	4b9f      	ldr	r3, [pc, #636]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 0302 	and.w	r3, r3, #2
 800a172:	2b02      	cmp	r3, #2
 800a174:	d10d      	bne.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800a176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a178:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a17c:	d109      	bne.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a17e:	4b9a      	ldr	r3, [pc, #616]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	08db      	lsrs	r3, r3, #3
 800a184:	f003 0303 	and.w	r3, r3, #3
 800a188:	4a98      	ldr	r2, [pc, #608]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a18a:	fa22 f303 	lsr.w	r3, r2, r3
 800a18e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a190:	e011      	b.n	800a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800a192:	4b95      	ldr	r3, [pc, #596]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a19a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a19e:	d106      	bne.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1a6:	d102      	bne.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800a1a8:	4b91      	ldr	r3, [pc, #580]	@ (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a1aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ac:	e003      	b.n	800a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1b2:	f001 b874 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a1b6:	f001 b872 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a1ba:	4b8b      	ldr	r3, [pc, #556]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a1bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a1c0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800a1c4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d104      	bne.n	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a1cc:	f7fc f938 	bl	8006440 <HAL_RCC_GetPCLK3Freq>
 800a1d0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800a1d2:	f001 b864 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1dc:	d108      	bne.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1de:	f107 0308 	add.w	r3, r7, #8
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe fba4 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1ec:	f001 b857 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a1f0:	4b7d      	ldr	r3, [pc, #500]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0302 	and.w	r3, r3, #2
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d10d      	bne.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a202:	d109      	bne.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a204:	4b78      	ldr	r3, [pc, #480]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	08db      	lsrs	r3, r3, #3
 800a20a:	f003 0303 	and.w	r3, r3, #3
 800a20e:	4a77      	ldr	r2, [pc, #476]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a210:	fa22 f303 	lsr.w	r3, r2, r3
 800a214:	637b      	str	r3, [r7, #52]	@ 0x34
 800a216:	e011      	b.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800a218:	4b73      	ldr	r3, [pc, #460]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a224:	d106      	bne.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800a226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a228:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a22c:	d102      	bne.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800a22e:	4b70      	ldr	r3, [pc, #448]	@ (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a230:	637b      	str	r3, [r7, #52]	@ 0x34
 800a232:	e003      	b.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800a234:	2300      	movs	r3, #0
 800a236:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a238:	f001 b831 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a23c:	f001 b82f 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800a240:	4b69      	ldr	r3, [pc, #420]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a242:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a246:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a24a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800a24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d104      	bne.n	800a25c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a252:	f7fc f8c9 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 800a256:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a258:	f001 b821 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800a25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a262:	d108      	bne.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a264:	f107 0308 	add.w	r3, r7, #8
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fe fb61 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a272:	f001 b814 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800a276:	4b5c      	ldr	r3, [pc, #368]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 0302 	and.w	r3, r3, #2
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d10e      	bne.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800a282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a284:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a288:	d10a      	bne.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a28a:	4b57      	ldr	r3, [pc, #348]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	08db      	lsrs	r3, r3, #3
 800a290:	f003 0303 	and.w	r3, r3, #3
 800a294:	4a55      	ldr	r2, [pc, #340]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a296:	fa22 f303 	lsr.w	r3, r2, r3
 800a29a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a29c:	f000 bfff 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2a4:	f000 bffb 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a2a8:	4b4f      	ldr	r3, [pc, #316]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a2aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a2ae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a2b2:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a2ba:	d056      	beq.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2be:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a2c2:	f200 808b 	bhi.w	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2cc:	d03e      	beq.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2d4:	f200 8082 	bhi.w	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2de:	d027      	beq.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2e6:	d879      	bhi.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2ee:	d017      	beq.n	800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2f6:	d871      	bhi.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a304:	d004      	beq.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800a306:	e069      	b.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a308:	f7fc f89a 	bl	8006440 <HAL_RCC_GetPCLK3Freq>
 800a30c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a30e:	e068      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a310:	f107 0314 	add.w	r3, r7, #20
 800a314:	4618      	mov	r0, r3
 800a316:	f7fe f99f 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a31e:	e060      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a320:	f107 0308 	add.w	r3, r7, #8
 800a324:	4618      	mov	r0, r3
 800a326:	f7fe fb03 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a32e:	e058      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a330:	4b2d      	ldr	r3, [pc, #180]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d103      	bne.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800a33e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a342:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a344:	e04d      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800a346:	2300      	movs	r3, #0
 800a348:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a34a:	e04a      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a34c:	4b26      	ldr	r3, [pc, #152]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a34e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a352:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a35a:	d103      	bne.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800a35c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a360:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a362:	e03e      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800a364:	2300      	movs	r3, #0
 800a366:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a368:	e03b      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a36a:	4b1f      	ldr	r3, [pc, #124]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a36c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a370:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a374:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a376:	4b1c      	ldr	r3, [pc, #112]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 0302 	and.w	r3, r3, #2
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d10c      	bne.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800a382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a384:	2b00      	cmp	r3, #0
 800a386:	d109      	bne.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a388:	4b17      	ldr	r3, [pc, #92]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	08db      	lsrs	r3, r3, #3
 800a38e:	f003 0303 	and.w	r3, r3, #3
 800a392:	4a16      	ldr	r2, [pc, #88]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a394:	fa22 f303 	lsr.w	r3, r2, r3
 800a398:	637b      	str	r3, [r7, #52]	@ 0x34
 800a39a:	e01e      	b.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a39c:	4b12      	ldr	r3, [pc, #72]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3a8:	d106      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800a3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3b0:	d102      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a3b2:	4b0f      	ldr	r3, [pc, #60]	@ (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a3b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3b6:	e010      	b.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3c4:	d106      	bne.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800a3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3cc:	d102      	bne.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a3ce:	4b09      	ldr	r3, [pc, #36]	@ (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800a3d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3d2:	e002      	b.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a3d8:	e003      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800a3da:	e002      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a3e0:	bf00      	nop
          }
        }
        break;
 800a3e2:	f000 bf5c 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a3e6:	bf00      	nop
 800a3e8:	44020c00 	.word	0x44020c00
 800a3ec:	03d09000 	.word	0x03d09000
 800a3f0:	003d0900 	.word	0x003d0900
 800a3f4:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a3f8:	4b9e      	ldr	r3, [pc, #632]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a3fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a3fe:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a402:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800a404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a406:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a40a:	d056      	beq.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800a40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a412:	f200 808b 	bhi.w	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a418:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a41c:	d03e      	beq.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800a41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a420:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a424:	f200 8082 	bhi.w	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a42e:	d027      	beq.n	800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800a430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a432:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a436:	d879      	bhi.n	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a43e:	d017      	beq.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a446:	d871      	bhi.n	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800a448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d004      	beq.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800a44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a454:	d004      	beq.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800a456:	e069      	b.n	800a52c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800a458:	f7fb ffc6 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 800a45c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a45e:	e068      	b.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a460:	f107 0314 	add.w	r3, r7, #20
 800a464:	4618      	mov	r0, r3
 800a466:	f7fe f8f7 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a46e:	e060      	b.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a470:	f107 0308 	add.w	r3, r7, #8
 800a474:	4618      	mov	r0, r3
 800a476:	f7fe fa5b 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a47e:	e058      	b.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a480:	4b7c      	ldr	r3, [pc, #496]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a486:	f003 0302 	and.w	r3, r3, #2
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d103      	bne.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800a48e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a492:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a494:	e04d      	b.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a49a:	e04a      	b.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a49c:	4b75      	ldr	r3, [pc, #468]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a49e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4aa:	d103      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800a4ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a4b0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a4b2:	e03e      	b.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a4b8:	e03b      	b.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4ba:	4b6e      	ldr	r3, [pc, #440]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a4bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a4c0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a4c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4c6:	4b6b      	ldr	r3, [pc, #428]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 0302 	and.w	r3, r3, #2
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d10c      	bne.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800a4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d109      	bne.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a4d8:	4b66      	ldr	r3, [pc, #408]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	08db      	lsrs	r3, r3, #3
 800a4de:	f003 0303 	and.w	r3, r3, #3
 800a4e2:	4a65      	ldr	r2, [pc, #404]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800a4e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ea:	e01e      	b.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4ec:	4b61      	ldr	r3, [pc, #388]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4f8:	d106      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800a4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a500:	d102      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a502:	4b5e      	ldr	r3, [pc, #376]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800a504:	637b      	str	r3, [r7, #52]	@ 0x34
 800a506:	e010      	b.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a508:	4b5a      	ldr	r3, [pc, #360]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a514:	d106      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800a516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a518:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a51c:	d102      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a51e:	4b58      	ldr	r3, [pc, #352]	@ (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800a520:	637b      	str	r3, [r7, #52]	@ 0x34
 800a522:	e002      	b.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a524:	2300      	movs	r3, #0
 800a526:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a528:	e003      	b.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800a52a:	e002      	b.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800a52c:	2300      	movs	r3, #0
 800a52e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a530:	bf00      	nop
          }
        }
        break;
 800a532:	f000 beb4 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800a536:	4b4f      	ldr	r3, [pc, #316]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a538:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a53c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a540:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800a542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a548:	d056      	beq.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800a54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a550:	f200 808b 	bhi.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a556:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a55a:	d03e      	beq.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800a55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a562:	f200 8082 	bhi.w	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a568:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a56c:	d027      	beq.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800a56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a570:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a574:	d879      	bhi.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a57c:	d017      	beq.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800a57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a584:	d871      	bhi.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d004      	beq.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800a58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a592:	d004      	beq.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800a594:	e069      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a596:	f7fb ff53 	bl	8006440 <HAL_RCC_GetPCLK3Freq>
 800a59a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a59c:	e068      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a59e:	f107 0314 	add.w	r3, r7, #20
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fe f858 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a5ac:	e060      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ae:	f107 0308 	add.w	r3, r7, #8
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fe f9bc 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a5bc:	e058      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a5be:	4b2d      	ldr	r3, [pc, #180]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a5c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5c4:	f003 0302 	and.w	r3, r3, #2
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d103      	bne.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800a5cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5d0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a5d2:	e04d      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a5d8:	e04a      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a5da:	4b26      	ldr	r3, [pc, #152]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a5dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5e8:	d103      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800a5ea:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a5ee:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a5f0:	e03e      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a5f6:	e03b      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5f8:	4b1e      	ldr	r3, [pc, #120]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a5fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a5fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a602:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a604:	4b1b      	ldr	r3, [pc, #108]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0302 	and.w	r3, r3, #2
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d10c      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800a610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a612:	2b00      	cmp	r3, #0
 800a614:	d109      	bne.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a616:	4b17      	ldr	r3, [pc, #92]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	08db      	lsrs	r3, r3, #3
 800a61c:	f003 0303 	and.w	r3, r3, #3
 800a620:	4a15      	ldr	r2, [pc, #84]	@ (800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800a622:	fa22 f303 	lsr.w	r3, r2, r3
 800a626:	637b      	str	r3, [r7, #52]	@ 0x34
 800a628:	e01e      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a62a:	4b12      	ldr	r3, [pc, #72]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a636:	d106      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800a638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a63a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a63e:	d102      	bne.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a640:	4b0e      	ldr	r3, [pc, #56]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800a642:	637b      	str	r3, [r7, #52]	@ 0x34
 800a644:	e010      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a646:	4b0b      	ldr	r3, [pc, #44]	@ (800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a64e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a652:	d106      	bne.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800a654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a656:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a65a:	d102      	bne.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a65c:	4b08      	ldr	r3, [pc, #32]	@ (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800a65e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a660:	e002      	b.n	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a662:	2300      	movs	r3, #0
 800a664:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a666:	e003      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800a668:	e002      	b.n	800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800a66a:	2300      	movs	r3, #0
 800a66c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a66e:	bf00      	nop
          }
        }
        break;
 800a670:	f000 be15 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a674:	44020c00 	.word	0x44020c00
 800a678:	03d09000 	.word	0x03d09000
 800a67c:	003d0900 	.word	0x003d0900
 800a680:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800a684:	4b9e      	ldr	r3, [pc, #632]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a686:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a68a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800a68e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800a690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a692:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800a696:	d056      	beq.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800a698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800a69e:	f200 808b 	bhi.w	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6a8:	d03e      	beq.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a6b0:	f200 8082 	bhi.w	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a6ba:	d027      	beq.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a6c2:	d879      	bhi.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6ca:	d017      	beq.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6d2:	d871      	bhi.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d004      	beq.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800a6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6e0:	d004      	beq.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800a6e2:	e069      	b.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a6e4:	f7fb feac 	bl	8006440 <HAL_RCC_GetPCLK3Freq>
 800a6e8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a6ea:	e068      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ec:	f107 0314 	add.w	r3, r7, #20
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fd ffb1 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a6fa:	e060      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6fc:	f107 0308 	add.w	r3, r7, #8
 800a700:	4618      	mov	r0, r3
 800a702:	f7fe f915 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a70a:	e058      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a70c:	4b7c      	ldr	r3, [pc, #496]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a70e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a712:	f003 0302 	and.w	r3, r3, #2
 800a716:	2b02      	cmp	r3, #2
 800a718:	d103      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800a71a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a71e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a720:	e04d      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a726:	e04a      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a728:	4b75      	ldr	r3, [pc, #468]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a72a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a72e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a736:	d103      	bne.n	800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800a738:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a73c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a73e:	e03e      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a744:	e03b      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a746:	4b6e      	ldr	r3, [pc, #440]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a74c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a750:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a752:	4b6b      	ldr	r3, [pc, #428]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0302 	and.w	r3, r3, #2
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d10c      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800a75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a760:	2b00      	cmp	r3, #0
 800a762:	d109      	bne.n	800a778 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a764:	4b66      	ldr	r3, [pc, #408]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	08db      	lsrs	r3, r3, #3
 800a76a:	f003 0303 	and.w	r3, r3, #3
 800a76e:	4a65      	ldr	r2, [pc, #404]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800a770:	fa22 f303 	lsr.w	r3, r2, r3
 800a774:	637b      	str	r3, [r7, #52]	@ 0x34
 800a776:	e01e      	b.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a778:	4b61      	ldr	r3, [pc, #388]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a784:	d106      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800a786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a78c:	d102      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a78e:	4b5e      	ldr	r3, [pc, #376]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800a790:	637b      	str	r3, [r7, #52]	@ 0x34
 800a792:	e010      	b.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a794:	4b5a      	ldr	r3, [pc, #360]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a79c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7a0:	d106      	bne.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800a7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7a8:	d102      	bne.n	800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a7aa:	4b58      	ldr	r3, [pc, #352]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800a7ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7ae:	e002      	b.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a7b4:	e003      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800a7b6:	e002      	b.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a7bc:	bf00      	nop
          }
        }
        break;
 800a7be:	f000 bd6e 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800a7c2:	4b4f      	ldr	r3, [pc, #316]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a7c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a7c8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a7cc:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a7d4:	d056      	beq.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a7dc:	f200 808b 	bhi.w	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7e6:	d03e      	beq.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7ee:	f200 8082 	bhi.w	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a7f8:	d027      	beq.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a800:	d879      	bhi.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a808:	d017      	beq.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800a80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a810:	d871      	bhi.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a814:	2b00      	cmp	r3, #0
 800a816:	d004      	beq.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800a818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a81e:	d004      	beq.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800a820:	e069      	b.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a822:	f7fb fe0d 	bl	8006440 <HAL_RCC_GetPCLK3Freq>
 800a826:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a828:	e068      	b.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a82a:	f107 0314 	add.w	r3, r7, #20
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fd ff12 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a838:	e060      	b.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a83a:	f107 0308 	add.w	r3, r7, #8
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fe f876 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a848:	e058      	b.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a84a:	4b2d      	ldr	r3, [pc, #180]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a84c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a850:	f003 0302 	and.w	r3, r3, #2
 800a854:	2b02      	cmp	r3, #2
 800a856:	d103      	bne.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800a858:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a85c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a85e:	e04d      	b.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a864:	e04a      	b.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a866:	4b26      	ldr	r3, [pc, #152]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a86c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a874:	d103      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800a876:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a87a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a87c:	e03e      	b.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a882:	e03b      	b.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a884:	4b1e      	ldr	r3, [pc, #120]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a88a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a88e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a890:	4b1b      	ldr	r3, [pc, #108]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0302 	and.w	r3, r3, #2
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d10c      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800a89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d109      	bne.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a8a2:	4b17      	ldr	r3, [pc, #92]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	08db      	lsrs	r3, r3, #3
 800a8a8:	f003 0303 	and.w	r3, r3, #3
 800a8ac:	4a15      	ldr	r2, [pc, #84]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800a8ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8b4:	e01e      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8b6:	4b12      	ldr	r3, [pc, #72]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8c2:	d106      	bne.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800a8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ca:	d102      	bne.n	800a8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a8cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800a8ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8d0:	e010      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8de:	d106      	bne.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800a8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8e6:	d102      	bne.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a8e8:	4b08      	ldr	r3, [pc, #32]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800a8ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8ec:	e002      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a8f2:	e003      	b.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800a8f4:	e002      	b.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8fa:	bf00      	nop
          }
        }
        break;
 800a8fc:	f000 bccf 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a900:	44020c00 	.word	0x44020c00
 800a904:	03d09000 	.word	0x03d09000
 800a908:	003d0900 	.word	0x003d0900
 800a90c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800a910:	4b9e      	ldr	r3, [pc, #632]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a912:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a916:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a91a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800a91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a922:	d056      	beq.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800a924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a926:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a92a:	f200 808b 	bhi.w	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a934:	d03e      	beq.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800a936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a93c:	f200 8082 	bhi.w	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a942:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a946:	d027      	beq.n	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800a948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a94e:	d879      	bhi.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a952:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a956:	d017      	beq.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800a958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a95e:	d871      	bhi.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a962:	2b00      	cmp	r3, #0
 800a964:	d004      	beq.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800a966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a968:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a96c:	d004      	beq.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800a96e:	e069      	b.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a970:	f7fb fd66 	bl	8006440 <HAL_RCC_GetPCLK3Freq>
 800a974:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a976:	e068      	b.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a978:	f107 0314 	add.w	r3, r7, #20
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fd fe6b 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a986:	e060      	b.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a988:	f107 0308 	add.w	r3, r7, #8
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fd ffcf 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a996:	e058      	b.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a998:	4b7c      	ldr	r3, [pc, #496]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a99a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a99e:	f003 0302 	and.w	r3, r3, #2
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d103      	bne.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800a9a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a9ac:	e04d      	b.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a9b2:	e04a      	b.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a9b4:	4b75      	ldr	r3, [pc, #468]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a9b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9c2:	d103      	bne.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800a9c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a9c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a9ca:	e03e      	b.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a9d0:	e03b      	b.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9d2:	4b6e      	ldr	r3, [pc, #440]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a9d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a9d8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a9dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9de:	4b6b      	ldr	r3, [pc, #428]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 0302 	and.w	r3, r3, #2
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d10c      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800a9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d109      	bne.n	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9f0:	4b66      	ldr	r3, [pc, #408]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	08db      	lsrs	r3, r3, #3
 800a9f6:	f003 0303 	and.w	r3, r3, #3
 800a9fa:	4a65      	ldr	r2, [pc, #404]	@ (800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800a9fc:	fa22 f303 	lsr.w	r3, r2, r3
 800aa00:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa02:	e01e      	b.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa04:	4b61      	ldr	r3, [pc, #388]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa10:	d106      	bne.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800aa12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa18:	d102      	bne.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800aa1a:	4b5e      	ldr	r3, [pc, #376]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800aa1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa1e:	e010      	b.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa20:	4b5a      	ldr	r3, [pc, #360]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa2c:	d106      	bne.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800aa2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa34:	d102      	bne.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800aa36:	4b58      	ldr	r3, [pc, #352]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800aa38:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa3a:	e002      	b.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800aa40:	e003      	b.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800aa42:	e002      	b.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800aa44:	2300      	movs	r3, #0
 800aa46:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa48:	bf00      	nop
          }
        }
        break;
 800aa4a:	f000 bc28 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aa4e:	4b4f      	ldr	r3, [pc, #316]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aa50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa58:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800aa5a:	4b4c      	ldr	r3, [pc, #304]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa66:	d106      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800aa68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d103      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800aa6e:	4b4a      	ldr	r3, [pc, #296]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800aa70:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800aa72:	f000 bc14 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800aa76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa7c:	d108      	bne.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa7e:	f107 0320 	add.w	r3, r7, #32
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fd fc7c 	bl	8008380 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa8c:	f000 bc07 	b.w	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800aa90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa96:	d107      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa98:	f107 0314 	add.w	r3, r7, #20
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fd fddb 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aaa6:	e3fa      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aaac:	e3f7      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800aaae:	4b37      	ldr	r3, [pc, #220]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800aab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aab4:	f003 0307 	and.w	r3, r3, #7
 800aab8:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800aaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aabc:	2b04      	cmp	r3, #4
 800aabe:	d861      	bhi.n	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800aac0:	a201      	add	r2, pc, #4	@ (adr r2, 800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800aac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac6:	bf00      	nop
 800aac8:	0800aadd 	.word	0x0800aadd
 800aacc:	0800aaed 	.word	0x0800aaed
 800aad0:	0800aafd 	.word	0x0800aafd
 800aad4:	0800ab0d 	.word	0x0800ab0d
 800aad8:	0800ab13 	.word	0x0800ab13
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aadc:	f107 0320 	add.w	r3, r7, #32
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fd fc4d 	bl	8008380 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800aae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aaea:	e04e      	b.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaec:	f107 0314 	add.w	r3, r7, #20
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fd fdb1 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aafa:	e046      	b.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aafc:	f107 0308 	add.w	r3, r7, #8
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fd ff15 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab0a:	e03e      	b.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800ab0c:	4b23      	ldr	r3, [pc, #140]	@ (800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800ab0e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab10:	e03b      	b.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab12:	4b1e      	ldr	r3, [pc, #120]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ab14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ab18:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ab1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab1e:	4b1b      	ldr	r3, [pc, #108]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f003 0302 	and.w	r3, r3, #2
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d10c      	bne.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800ab2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d109      	bne.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab30:	4b16      	ldr	r3, [pc, #88]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	08db      	lsrs	r3, r3, #3
 800ab36:	f003 0303 	and.w	r3, r3, #3
 800ab3a:	4a15      	ldr	r2, [pc, #84]	@ (800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800ab3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab40:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab42:	e01e      	b.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab44:	4b11      	ldr	r3, [pc, #68]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab50:	d106      	bne.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800ab52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab58:	d102      	bne.n	800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ab5a:	4b0e      	ldr	r3, [pc, #56]	@ (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800ab5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab5e:	e010      	b.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab60:	4b0a      	ldr	r3, [pc, #40]	@ (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab6c:	d106      	bne.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800ab6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab74:	d102      	bne.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ab76:	4b08      	ldr	r3, [pc, #32]	@ (800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800ab78:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab7a:	e002      	b.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ab80:	e003      	b.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800ab82:	e002      	b.n	800ab8a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab88:	bf00      	nop
          }
        }
        break;
 800ab8a:	e388      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ab8c:	44020c00 	.word	0x44020c00
 800ab90:	03d09000 	.word	0x03d09000
 800ab94:	003d0900 	.word	0x003d0900
 800ab98:	007a1200 	.word	0x007a1200
 800ab9c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800aba0:	4ba9      	ldr	r3, [pc, #676]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800aba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aba6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abaa:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800abac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abae:	2b20      	cmp	r3, #32
 800abb0:	f200 809a 	bhi.w	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800abb4:	a201      	add	r2, pc, #4	@ (adr r2, 800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800abb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abba:	bf00      	nop
 800abbc:	0800ac41 	.word	0x0800ac41
 800abc0:	0800ace9 	.word	0x0800ace9
 800abc4:	0800ace9 	.word	0x0800ace9
 800abc8:	0800ace9 	.word	0x0800ace9
 800abcc:	0800ace9 	.word	0x0800ace9
 800abd0:	0800ace9 	.word	0x0800ace9
 800abd4:	0800ace9 	.word	0x0800ace9
 800abd8:	0800ace9 	.word	0x0800ace9
 800abdc:	0800ac51 	.word	0x0800ac51
 800abe0:	0800ace9 	.word	0x0800ace9
 800abe4:	0800ace9 	.word	0x0800ace9
 800abe8:	0800ace9 	.word	0x0800ace9
 800abec:	0800ace9 	.word	0x0800ace9
 800abf0:	0800ace9 	.word	0x0800ace9
 800abf4:	0800ace9 	.word	0x0800ace9
 800abf8:	0800ace9 	.word	0x0800ace9
 800abfc:	0800ac61 	.word	0x0800ac61
 800ac00:	0800ace9 	.word	0x0800ace9
 800ac04:	0800ace9 	.word	0x0800ace9
 800ac08:	0800ace9 	.word	0x0800ace9
 800ac0c:	0800ace9 	.word	0x0800ace9
 800ac10:	0800ace9 	.word	0x0800ace9
 800ac14:	0800ace9 	.word	0x0800ace9
 800ac18:	0800ace9 	.word	0x0800ace9
 800ac1c:	0800ac71 	.word	0x0800ac71
 800ac20:	0800ace9 	.word	0x0800ace9
 800ac24:	0800ace9 	.word	0x0800ace9
 800ac28:	0800ace9 	.word	0x0800ace9
 800ac2c:	0800ace9 	.word	0x0800ace9
 800ac30:	0800ace9 	.word	0x0800ace9
 800ac34:	0800ace9 	.word	0x0800ace9
 800ac38:	0800ace9 	.word	0x0800ace9
 800ac3c:	0800ac77 	.word	0x0800ac77
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac40:	f107 0320 	add.w	r3, r7, #32
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fd fb9b 	bl	8008380 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac4e:	e04e      	b.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac50:	f107 0314 	add.w	r3, r7, #20
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fd fcff 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac5e:	e046      	b.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac60:	f107 0308 	add.w	r3, r7, #8
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fd fe63 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac6e:	e03e      	b.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800ac70:	4b76      	ldr	r3, [pc, #472]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800ac72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac74:	e03b      	b.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac76:	4b74      	ldr	r3, [pc, #464]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ac78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac7c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ac80:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac82:	4b71      	ldr	r3, [pc, #452]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 0302 	and.w	r3, r3, #2
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d10c      	bne.n	800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800ac8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d109      	bne.n	800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac94:	4b6c      	ldr	r3, [pc, #432]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	08db      	lsrs	r3, r3, #3
 800ac9a:	f003 0303 	and.w	r3, r3, #3
 800ac9e:	4a6c      	ldr	r2, [pc, #432]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800aca0:	fa22 f303 	lsr.w	r3, r2, r3
 800aca4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aca6:	e01e      	b.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aca8:	4b67      	ldr	r3, [pc, #412]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800acb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acb4:	d106      	bne.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800acb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acbc:	d102      	bne.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800acbe:	4b65      	ldr	r3, [pc, #404]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800acc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800acc2:	e010      	b.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acc4:	4b60      	ldr	r3, [pc, #384]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800accc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acd0:	d106      	bne.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800acd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acd8:	d102      	bne.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800acda:	4b5f      	ldr	r3, [pc, #380]	@ (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800acdc:	637b      	str	r3, [r7, #52]	@ 0x34
 800acde:	e002      	b.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ace4:	e003      	b.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800ace6:	e002      	b.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800ace8:	2300      	movs	r3, #0
 800acea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800acec:	bf00      	nop
          }
        }
        break;
 800acee:	e2d6      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800acf0:	4b55      	ldr	r3, [pc, #340]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800acf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800acf6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800acfa:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800acfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad02:	d031      	beq.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800ad04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad0a:	d866      	bhi.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad10:	d027      	beq.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800ad12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad14:	2bc0      	cmp	r3, #192	@ 0xc0
 800ad16:	d860      	bhi.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800ad18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1a:	2b80      	cmp	r3, #128	@ 0x80
 800ad1c:	d019      	beq.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad20:	2b80      	cmp	r3, #128	@ 0x80
 800ad22:	d85a      	bhi.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800ad24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800ad2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad2c:	2b40      	cmp	r3, #64	@ 0x40
 800ad2e:	d008      	beq.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800ad30:	e053      	b.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad32:	f107 0320 	add.w	r3, r7, #32
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fd fb22 	bl	8008380 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad40:	e04e      	b.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad42:	f107 0314 	add.w	r3, r7, #20
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7fd fc86 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad50:	e046      	b.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad52:	f107 0308 	add.w	r3, r7, #8
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fd fdea 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad60:	e03e      	b.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800ad62:	4b3a      	ldr	r3, [pc, #232]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800ad64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad66:	e03b      	b.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad68:	4b37      	ldr	r3, [pc, #220]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ad6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ad6e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ad72:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad74:	4b34      	ldr	r3, [pc, #208]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 0302 	and.w	r3, r3, #2
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	d10c      	bne.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800ad80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d109      	bne.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ad86:	4b30      	ldr	r3, [pc, #192]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	08db      	lsrs	r3, r3, #3
 800ad8c:	f003 0303 	and.w	r3, r3, #3
 800ad90:	4a2f      	ldr	r2, [pc, #188]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800ad92:	fa22 f303 	lsr.w	r3, r2, r3
 800ad96:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad98:	e01e      	b.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad9a:	4b2b      	ldr	r3, [pc, #172]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ada2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ada6:	d106      	bne.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800ada8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adae:	d102      	bne.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800adb0:	4b28      	ldr	r3, [pc, #160]	@ (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800adb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800adb4:	e010      	b.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800adb6:	4b24      	ldr	r3, [pc, #144]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adc2:	d106      	bne.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800adc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adca:	d102      	bne.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800adcc:	4b22      	ldr	r3, [pc, #136]	@ (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800adce:	637b      	str	r3, [r7, #52]	@ 0x34
 800add0:	e002      	b.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800add2:	2300      	movs	r3, #0
 800add4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800add6:	e003      	b.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800add8:	e002      	b.n	800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800adda:	2300      	movs	r3, #0
 800addc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800adde:	bf00      	nop
          }
        }
        break;
 800ade0:	e25d      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800ade2:	4b19      	ldr	r3, [pc, #100]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ade4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ade8:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800adec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800adee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d103      	bne.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800adf4:	f7fb fb0e 	bl	8006414 <HAL_RCC_GetPCLK2Freq>
 800adf8:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800adfa:	e250      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800adfc:	4b12      	ldr	r3, [pc, #72]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae08:	d10b      	bne.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae10:	d107      	bne.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae12:	f107 0314 	add.w	r3, r7, #20
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fd fc1e 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae20:	e04f      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800ae22:	4b09      	ldr	r3, [pc, #36]	@ (800ae48 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae2e:	d115      	bne.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800ae30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae36:	d111      	bne.n	800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae38:	f107 0308 	add.w	r3, r7, #8
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7fd fd77 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae46:	e03c      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800ae48:	44020c00 	.word	0x44020c00
 800ae4c:	00bb8000 	.word	0x00bb8000
 800ae50:	03d09000 	.word	0x03d09000
 800ae54:	003d0900 	.word	0x003d0900
 800ae58:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800ae5c:	4b94      	ldr	r3, [pc, #592]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 0302 	and.w	r3, r3, #2
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d10d      	bne.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800ae68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ae6e:	d109      	bne.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ae70:	4b8f      	ldr	r3, [pc, #572]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	08db      	lsrs	r3, r3, #3
 800ae76:	f003 0303 	and.w	r3, r3, #3
 800ae7a:	4a8e      	ldr	r2, [pc, #568]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800ae7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae82:	e01e      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800ae84:	4b8a      	ldr	r3, [pc, #552]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae90:	d106      	bne.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800ae92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae98:	d102      	bne.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800ae9a:	4b87      	ldr	r3, [pc, #540]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800ae9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae9e:	e010      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800aea0:	4b83      	ldr	r3, [pc, #524]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aea8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeac:	d106      	bne.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800aeae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800aeb4:	d102      	bne.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800aeb6:	4b81      	ldr	r3, [pc, #516]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800aeb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeba:	e002      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800aebc:	2300      	movs	r3, #0
 800aebe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aec0:	e1ed      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aec2:	e1ec      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800aec4:	4b7a      	ldr	r3, [pc, #488]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aeca:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800aece:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800aed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d103      	bne.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800aed6:	f7fb fab3 	bl	8006440 <HAL_RCC_GetPCLK3Freq>
 800aeda:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800aedc:	e1df      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800aede:	4b74      	ldr	r3, [pc, #464]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aee6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aeea:	d10b      	bne.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800aeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aef2:	d107      	bne.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aef4:	f107 0314 	add.w	r3, r7, #20
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7fd fbad 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	637b      	str	r3, [r7, #52]	@ 0x34
 800af02:	e045      	b.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800af04:	4b6a      	ldr	r3, [pc, #424]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af10:	d10b      	bne.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800af12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af18:	d107      	bne.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af1a:	f107 0308 	add.w	r3, r7, #8
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fd fd06 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	637b      	str	r3, [r7, #52]	@ 0x34
 800af28:	e032      	b.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800af2a:	4b61      	ldr	r3, [pc, #388]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0302 	and.w	r3, r3, #2
 800af32:	2b02      	cmp	r3, #2
 800af34:	d10d      	bne.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800af36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af3c:	d109      	bne.n	800af52 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800af3e:	4b5c      	ldr	r3, [pc, #368]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	08db      	lsrs	r3, r3, #3
 800af44:	f003 0303 	and.w	r3, r3, #3
 800af48:	4a5a      	ldr	r2, [pc, #360]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800af4a:	fa22 f303 	lsr.w	r3, r2, r3
 800af4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800af50:	e01e      	b.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800af52:	4b57      	ldr	r3, [pc, #348]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af5e:	d106      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800af60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af66:	d102      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800af68:	4b53      	ldr	r3, [pc, #332]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800af6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af6c:	e010      	b.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800af6e:	4b50      	ldr	r3, [pc, #320]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af7a:	d106      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800af7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800af82:	d102      	bne.n	800af8a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800af84:	4b4d      	ldr	r3, [pc, #308]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800af86:	637b      	str	r3, [r7, #52]	@ 0x34
 800af88:	e002      	b.n	800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800af8a:	2300      	movs	r3, #0
 800af8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af8e:	e186      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800af90:	e185      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800af92:	4b47      	ldr	r3, [pc, #284]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800af94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af98:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800af9c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800af9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d103      	bne.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800afa4:	f7fb fa36 	bl	8006414 <HAL_RCC_GetPCLK2Freq>
 800afa8:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800afaa:	e178      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800afac:	4b40      	ldr	r3, [pc, #256]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afb8:	d10b      	bne.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800afba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afc0:	d107      	bne.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afc2:	f107 0314 	add.w	r3, r7, #20
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fd fb46 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	637b      	str	r3, [r7, #52]	@ 0x34
 800afd0:	e045      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800afd2:	4b37      	ldr	r3, [pc, #220]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800afda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afde:	d10b      	bne.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800afe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afe6:	d107      	bne.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afe8:	f107 0308 	add.w	r3, r7, #8
 800afec:	4618      	mov	r0, r3
 800afee:	f7fd fc9f 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aff6:	e032      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800aff8:	4b2d      	ldr	r3, [pc, #180]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 0302 	and.w	r3, r3, #2
 800b000:	2b02      	cmp	r3, #2
 800b002:	d10d      	bne.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800b004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b006:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800b00a:	d109      	bne.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b00c:	4b28      	ldr	r3, [pc, #160]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	08db      	lsrs	r3, r3, #3
 800b012:	f003 0303 	and.w	r3, r3, #3
 800b016:	4a27      	ldr	r2, [pc, #156]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b018:	fa22 f303 	lsr.w	r3, r2, r3
 800b01c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b01e:	e01e      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800b020:	4b23      	ldr	r3, [pc, #140]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b02c:	d106      	bne.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800b02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b034:	d102      	bne.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800b036:	4b20      	ldr	r3, [pc, #128]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b038:	637b      	str	r3, [r7, #52]	@ 0x34
 800b03a:	e010      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800b03c:	4b1c      	ldr	r3, [pc, #112]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b048:	d106      	bne.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800b04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800b050:	d102      	bne.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800b052:	4b1a      	ldr	r3, [pc, #104]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b054:	637b      	str	r3, [r7, #52]	@ 0x34
 800b056:	e002      	b.n	800b05e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800b058:	2300      	movs	r3, #0
 800b05a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b05c:	e11f      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b05e:	e11e      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b060:	4b13      	ldr	r3, [pc, #76]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b062:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b066:	f003 0303 	and.w	r3, r3, #3
 800b06a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800b06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06e:	2b03      	cmp	r3, #3
 800b070:	d85f      	bhi.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800b072:	a201      	add	r2, pc, #4	@ (adr r2, 800b078 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800b074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b078:	0800b089 	.word	0x0800b089
 800b07c:	0800b091 	.word	0x0800b091
 800b080:	0800b0a1 	.word	0x0800b0a1
 800b084:	0800b0c1 	.word	0x0800b0c1
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800b088:	f7fb f992 	bl	80063b0 <HAL_RCC_GetHCLKFreq>
 800b08c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b08e:	e053      	b.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b090:	f107 0320 	add.w	r3, r7, #32
 800b094:	4618      	mov	r0, r3
 800b096:	f7fd f973 	bl	8008380 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b09c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b09e:	e04b      	b.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0a0:	f107 0314 	add.w	r3, r7, #20
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fd fad7 	bl	8008658 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b0ae:	e043      	b.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800b0b0:	44020c00 	.word	0x44020c00
 800b0b4:	03d09000 	.word	0x03d09000
 800b0b8:	003d0900 	.word	0x003d0900
 800b0bc:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0c0:	4b79      	ldr	r3, [pc, #484]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b0c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b0c6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b0ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0cc:	4b76      	ldr	r3, [pc, #472]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f003 0302 	and.w	r3, r3, #2
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d10c      	bne.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800b0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d109      	bne.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b0de:	4b72      	ldr	r3, [pc, #456]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	08db      	lsrs	r3, r3, #3
 800b0e4:	f003 0303 	and.w	r3, r3, #3
 800b0e8:	4a70      	ldr	r2, [pc, #448]	@ (800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800b0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0f0:	e01e      	b.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0f2:	4b6d      	ldr	r3, [pc, #436]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b0fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0fe:	d106      	bne.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800b100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b106:	d102      	bne.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b108:	4b69      	ldr	r3, [pc, #420]	@ (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800b10a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b10c:	e010      	b.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b10e:	4b66      	ldr	r3, [pc, #408]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b11a:	d106      	bne.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800b11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b11e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b122:	d102      	bne.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b124:	4b63      	ldr	r3, [pc, #396]	@ (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800b126:	637b      	str	r3, [r7, #52]	@ 0x34
 800b128:	e002      	b.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b12a:	2300      	movs	r3, #0
 800b12c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b12e:	e003      	b.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800b130:	e002      	b.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800b132:	2300      	movs	r3, #0
 800b134:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b136:	bf00      	nop
          }
        }
        break;
 800b138:	e0b1      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800b13a:	4b5b      	ldr	r3, [pc, #364]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b13c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b140:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b144:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800b146:	4b58      	ldr	r3, [pc, #352]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b14c:	f003 0302 	and.w	r3, r3, #2
 800b150:	2b02      	cmp	r3, #2
 800b152:	d106      	bne.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800b154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b156:	2b00      	cmp	r3, #0
 800b158:	d103      	bne.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800b15a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b15e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b160:	e01f      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800b162:	4b51      	ldr	r3, [pc, #324]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b16c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b170:	d106      	bne.n	800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800b172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b174:	2b40      	cmp	r3, #64	@ 0x40
 800b176:	d103      	bne.n	800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800b178:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b17c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b17e:	e010      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800b180:	4b49      	ldr	r3, [pc, #292]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b18c:	d106      	bne.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800b18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b190:	2b80      	cmp	r3, #128	@ 0x80
 800b192:	d103      	bne.n	800b19c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800b194:	f248 0312 	movw	r3, #32786	@ 0x8012
 800b198:	637b      	str	r3, [r7, #52]	@ 0x34
 800b19a:	e002      	b.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800b19c:	2300      	movs	r3, #0
 800b19e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b1a0:	e07d      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b1a2:	e07c      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b1a4:	4b40      	ldr	r3, [pc, #256]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b1a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1aa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b1ae:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b1b0:	4b3d      	ldr	r3, [pc, #244]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b1b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1bc:	d105      	bne.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800b1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d102      	bne.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800b1c4:	4b3c      	ldr	r3, [pc, #240]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800b1c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1c8:	e031      	b.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800b1ca:	4b37      	ldr	r3, [pc, #220]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1d6:	d10a      	bne.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1da:	2b10      	cmp	r3, #16
 800b1dc:	d107      	bne.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1de:	f107 0320 	add.w	r3, r7, #32
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fd f8cc 	bl	8008380 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1ec:	e01f      	b.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800b1ee:	4b2e      	ldr	r3, [pc, #184]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b1f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b1f4:	f003 0302 	and.w	r3, r3, #2
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d106      	bne.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fe:	2b20      	cmp	r3, #32
 800b200:	d103      	bne.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800b202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b206:	637b      	str	r3, [r7, #52]	@ 0x34
 800b208:	e011      	b.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800b20a:	4b27      	ldr	r3, [pc, #156]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b20c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b210:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b214:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b218:	d106      	bne.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800b21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21c:	2b30      	cmp	r3, #48	@ 0x30
 800b21e:	d103      	bne.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800b220:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b224:	637b      	str	r3, [r7, #52]	@ 0x34
 800b226:	e002      	b.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800b228:	2300      	movs	r3, #0
 800b22a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b22c:	e037      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b22e:	e036      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800b230:	4b1d      	ldr	r3, [pc, #116]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b232:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b236:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b23a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800b23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23e:	2b10      	cmp	r3, #16
 800b240:	d107      	bne.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b242:	f107 0320 	add.w	r3, r7, #32
 800b246:	4618      	mov	r0, r3
 800b248:	f7fd f89a 	bl	8008380 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b24e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b250:	e025      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800b252:	4b15      	ldr	r3, [pc, #84]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b25a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b25e:	d10a      	bne.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800b260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b262:	2b20      	cmp	r3, #32
 800b264:	d107      	bne.n	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b266:	f107 0308 	add.w	r3, r7, #8
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7fd fb60 	bl	8008930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	637b      	str	r3, [r7, #52]	@ 0x34
 800b274:	e00f      	b.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800b276:	4b0c      	ldr	r3, [pc, #48]	@ (800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b27e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b282:	d105      	bne.n	800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800b284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b286:	2b30      	cmp	r3, #48	@ 0x30
 800b288:	d102      	bne.n	800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800b28a:	4b0b      	ldr	r3, [pc, #44]	@ (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800b28c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b28e:	e002      	b.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800b294:	e003      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b296:	e002      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800b298:	2300      	movs	r3, #0
 800b29a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b29c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800b29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	373c      	adds	r7, #60	@ 0x3c
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd90      	pop	{r4, r7, pc}
 800b2a8:	44020c00 	.word	0x44020c00
 800b2ac:	03d09000 	.word	0x03d09000
 800b2b0:	003d0900 	.word	0x003d0900
 800b2b4:	007a1200 	.word	0x007a1200
 800b2b8:	02dc6c00 	.word	0x02dc6c00

0800b2bc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800b2c4:	4b48      	ldr	r3, [pc, #288]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a47      	ldr	r2, [pc, #284]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b2ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b2ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b2d0:	f7f7 fbd2 	bl	8002a78 <HAL_GetTick>
 800b2d4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b2d6:	e008      	b.n	800b2ea <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b2d8:	f7f7 fbce 	bl	8002a78 <HAL_GetTick>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d901      	bls.n	800b2ea <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	e07a      	b.n	800b3e0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b2ea:	4b3f      	ldr	r3, [pc, #252]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1f0      	bne.n	800b2d8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b2f6:	4b3c      	ldr	r3, [pc, #240]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b2fe:	f023 0303 	bic.w	r3, r3, #3
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	6811      	ldr	r1, [r2, #0]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	6852      	ldr	r2, [r2, #4]
 800b30a:	0212      	lsls	r2, r2, #8
 800b30c:	430a      	orrs	r2, r1
 800b30e:	4936      	ldr	r1, [pc, #216]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b310:	4313      	orrs	r3, r2
 800b312:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	3b01      	subs	r3, #1
 800b31a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	3b01      	subs	r3, #1
 800b324:	025b      	lsls	r3, r3, #9
 800b326:	b29b      	uxth	r3, r3
 800b328:	431a      	orrs	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	3b01      	subs	r3, #1
 800b330:	041b      	lsls	r3, r3, #16
 800b332:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b336:	431a      	orrs	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	3b01      	subs	r3, #1
 800b33e:	061b      	lsls	r3, r3, #24
 800b340:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b344:	4928      	ldr	r1, [pc, #160]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b346:	4313      	orrs	r3, r2
 800b348:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b34a:	4b27      	ldr	r3, [pc, #156]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b34e:	f023 020c 	bic.w	r2, r3, #12
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	4924      	ldr	r1, [pc, #144]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b358:	4313      	orrs	r3, r2
 800b35a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800b35c:	4b22      	ldr	r3, [pc, #136]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b360:	f023 0220 	bic.w	r2, r3, #32
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	69db      	ldr	r3, [r3, #28]
 800b368:	491f      	ldr	r1, [pc, #124]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b36a:	4313      	orrs	r3, r2
 800b36c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b36e:	4b1e      	ldr	r3, [pc, #120]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b376:	491c      	ldr	r1, [pc, #112]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b378:	4313      	orrs	r3, r2
 800b37a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800b37c:	4b1a      	ldr	r3, [pc, #104]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b380:	4a19      	ldr	r2, [pc, #100]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b382:	f023 0310 	bic.w	r3, r3, #16
 800b386:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800b388:	4b17      	ldr	r3, [pc, #92]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b38a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b38c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b390:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	6a12      	ldr	r2, [r2, #32]
 800b398:	00d2      	lsls	r2, r2, #3
 800b39a:	4913      	ldr	r1, [pc, #76]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b39c:	4313      	orrs	r3, r2
 800b39e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800b3a0:	4b11      	ldr	r3, [pc, #68]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a4:	4a10      	ldr	r2, [pc, #64]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b3a6:	f043 0310 	orr.w	r3, r3, #16
 800b3aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800b3ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a0d      	ldr	r2, [pc, #52]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b3b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b3b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b3b8:	f7f7 fb5e 	bl	8002a78 <HAL_GetTick>
 800b3bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b3be:	e008      	b.n	800b3d2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b3c0:	f7f7 fb5a 	bl	8002a78 <HAL_GetTick>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d901      	bls.n	800b3d2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	e006      	b.n	800b3e0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b3d2:	4b05      	ldr	r3, [pc, #20]	@ (800b3e8 <RCCEx_PLL2_Config+0x12c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d0f0      	beq.n	800b3c0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800b3de:	2300      	movs	r3, #0

}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	44020c00 	.word	0x44020c00

0800b3ec <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800b3f4:	4b48      	ldr	r3, [pc, #288]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a47      	ldr	r2, [pc, #284]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b3fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b400:	f7f7 fb3a 	bl	8002a78 <HAL_GetTick>
 800b404:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b406:	e008      	b.n	800b41a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b408:	f7f7 fb36 	bl	8002a78 <HAL_GetTick>
 800b40c:	4602      	mov	r2, r0
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	2b02      	cmp	r3, #2
 800b414:	d901      	bls.n	800b41a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b416:	2303      	movs	r3, #3
 800b418:	e07a      	b.n	800b510 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b41a:	4b3f      	ldr	r3, [pc, #252]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1f0      	bne.n	800b408 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b426:	4b3c      	ldr	r3, [pc, #240]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b42a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b42e:	f023 0303 	bic.w	r3, r3, #3
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	6811      	ldr	r1, [r2, #0]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	6852      	ldr	r2, [r2, #4]
 800b43a:	0212      	lsls	r2, r2, #8
 800b43c:	430a      	orrs	r2, r1
 800b43e:	4936      	ldr	r1, [pc, #216]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b440:	4313      	orrs	r3, r2
 800b442:	630b      	str	r3, [r1, #48]	@ 0x30
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	3b01      	subs	r3, #1
 800b44a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	3b01      	subs	r3, #1
 800b454:	025b      	lsls	r3, r3, #9
 800b456:	b29b      	uxth	r3, r3
 800b458:	431a      	orrs	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	3b01      	subs	r3, #1
 800b460:	041b      	lsls	r3, r3, #16
 800b462:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b466:	431a      	orrs	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	3b01      	subs	r3, #1
 800b46e:	061b      	lsls	r3, r3, #24
 800b470:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b474:	4928      	ldr	r1, [pc, #160]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b476:	4313      	orrs	r3, r2
 800b478:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b47a:	4b27      	ldr	r3, [pc, #156]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b47c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b47e:	f023 020c 	bic.w	r2, r3, #12
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	4924      	ldr	r1, [pc, #144]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b488:	4313      	orrs	r3, r2
 800b48a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800b48c:	4b22      	ldr	r3, [pc, #136]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b48e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b490:	f023 0220 	bic.w	r2, r3, #32
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	69db      	ldr	r3, [r3, #28]
 800b498:	491f      	ldr	r1, [pc, #124]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b49a:	4313      	orrs	r3, r2
 800b49c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b49e:	4b1e      	ldr	r3, [pc, #120]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b4a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a6:	491c      	ldr	r1, [pc, #112]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800b4ac:	4b1a      	ldr	r3, [pc, #104]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b4ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4b0:	4a19      	ldr	r2, [pc, #100]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b4b2:	f023 0310 	bic.w	r3, r3, #16
 800b4b6:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800b4b8:	4b17      	ldr	r3, [pc, #92]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b4ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b4bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b4c0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	6a12      	ldr	r2, [r2, #32]
 800b4c8:	00d2      	lsls	r2, r2, #3
 800b4ca:	4913      	ldr	r1, [pc, #76]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800b4d0:	4b11      	ldr	r3, [pc, #68]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b4d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4d4:	4a10      	ldr	r2, [pc, #64]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b4d6:	f043 0310 	orr.w	r3, r3, #16
 800b4da:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800b4dc:	4b0e      	ldr	r3, [pc, #56]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a0d      	ldr	r2, [pc, #52]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b4e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b4e8:	f7f7 fac6 	bl	8002a78 <HAL_GetTick>
 800b4ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b4ee:	e008      	b.n	800b502 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b4f0:	f7f7 fac2 	bl	8002a78 <HAL_GetTick>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d901      	bls.n	800b502 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e006      	b.n	800b510 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b502:	4b05      	ldr	r3, [pc, #20]	@ (800b518 <RCCEx_PLL3_Config+0x12c>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0f0      	beq.n	800b4f0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	44020c00 	.word	0x44020c00

0800b51c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d101      	bne.n	800b52e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e042      	b.n	800b5b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b534:	2b00      	cmp	r3, #0
 800b536:	d106      	bne.n	800b546 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f83b 	bl	800b5bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2224      	movs	r2, #36	@ 0x24
 800b54a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f022 0201 	bic.w	r2, r2, #1
 800b55c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b562:	2b00      	cmp	r3, #0
 800b564:	d002      	beq.n	800b56c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 fabe 	bl	800bae8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 f8cd 	bl	800b70c <UART_SetConfig>
 800b572:	4603      	mov	r3, r0
 800b574:	2b01      	cmp	r3, #1
 800b576:	d101      	bne.n	800b57c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	e01b      	b.n	800b5b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	685a      	ldr	r2, [r3, #4]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b58a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	689a      	ldr	r2, [r3, #8]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b59a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f042 0201 	orr.w	r2, r2, #1
 800b5aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 fb3d 	bl	800bc2c <UART_CheckIdleState>
 800b5b2:	4603      	mov	r3, r0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08a      	sub	sp, #40	@ 0x28
 800b5d4:	af02      	add	r7, sp, #8
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	603b      	str	r3, [r7, #0]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5e6:	2b20      	cmp	r3, #32
 800b5e8:	f040 808b 	bne.w	800b702 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d002      	beq.n	800b5f8 <HAL_UART_Transmit+0x28>
 800b5f2:	88fb      	ldrh	r3, [r7, #6]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d101      	bne.n	800b5fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e083      	b.n	800b704 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b606:	2b80      	cmp	r3, #128	@ 0x80
 800b608:	d107      	bne.n	800b61a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	689a      	ldr	r2, [r3, #8]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b618:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2221      	movs	r2, #33	@ 0x21
 800b626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b62a:	f7f7 fa25 	bl	8002a78 <HAL_GetTick>
 800b62e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	88fa      	ldrh	r2, [r7, #6]
 800b634:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	88fa      	ldrh	r2, [r7, #6]
 800b63c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b648:	d108      	bne.n	800b65c <HAL_UART_Transmit+0x8c>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d104      	bne.n	800b65c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b652:	2300      	movs	r3, #0
 800b654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	61bb      	str	r3, [r7, #24]
 800b65a:	e003      	b.n	800b664 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b660:	2300      	movs	r3, #0
 800b662:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b664:	e030      	b.n	800b6c8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	2200      	movs	r2, #0
 800b66e:	2180      	movs	r1, #128	@ 0x80
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 fb85 	bl	800bd80 <UART_WaitOnFlagUntilTimeout>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d005      	beq.n	800b688 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2220      	movs	r2, #32
 800b680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b684:	2303      	movs	r3, #3
 800b686:	e03d      	b.n	800b704 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10b      	bne.n	800b6a6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	881b      	ldrh	r3, [r3, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b69c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	3302      	adds	r3, #2
 800b6a2:	61bb      	str	r3, [r7, #24]
 800b6a4:	e007      	b.n	800b6b6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	781a      	ldrb	r2, [r3, #0]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1c8      	bne.n	800b666 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2140      	movs	r1, #64	@ 0x40
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f000 fb4e 	bl	800bd80 <UART_WaitOnFlagUntilTimeout>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d005      	beq.n	800b6f6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2220      	movs	r2, #32
 800b6ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e006      	b.n	800b704 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2220      	movs	r2, #32
 800b6fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	e000      	b.n	800b704 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b702:	2302      	movs	r3, #2
  }
}
 800b704:	4618      	mov	r0, r3
 800b706:	3720      	adds	r7, #32
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b70c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b710:	b094      	sub	sp, #80	@ 0x50
 800b712:	af00      	add	r7, sp, #0
 800b714:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b716:	2300      	movs	r3, #0
 800b718:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	4b78      	ldr	r3, [pc, #480]	@ (800b904 <UART_SetConfig+0x1f8>)
 800b722:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b726:	689a      	ldr	r2, [r3, #8]
 800b728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	431a      	orrs	r2, r3
 800b72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b730:	695b      	ldr	r3, [r3, #20]
 800b732:	431a      	orrs	r2, r3
 800b734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b736:	69db      	ldr	r3, [r3, #28]
 800b738:	4313      	orrs	r3, r2
 800b73a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4971      	ldr	r1, [pc, #452]	@ (800b908 <UART_SetConfig+0x1fc>)
 800b744:	4019      	ands	r1, r3
 800b746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b74c:	430b      	orrs	r3, r1
 800b74e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75c:	68d9      	ldr	r1, [r3, #12]
 800b75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	ea40 0301 	orr.w	r3, r0, r1
 800b766:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	4b64      	ldr	r3, [pc, #400]	@ (800b904 <UART_SetConfig+0x1f8>)
 800b774:	429a      	cmp	r2, r3
 800b776:	d009      	beq.n	800b78c <UART_SetConfig+0x80>
 800b778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	4b63      	ldr	r3, [pc, #396]	@ (800b90c <UART_SetConfig+0x200>)
 800b77e:	429a      	cmp	r2, r3
 800b780:	d004      	beq.n	800b78c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b784:	6a1a      	ldr	r2, [r3, #32]
 800b786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b788:	4313      	orrs	r3, r2
 800b78a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b796:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7a0:	430b      	orrs	r3, r1
 800b7a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7aa:	f023 000f 	bic.w	r0, r3, #15
 800b7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	ea40 0301 	orr.w	r3, r0, r1
 800b7ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	4b53      	ldr	r3, [pc, #332]	@ (800b910 <UART_SetConfig+0x204>)
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d102      	bne.n	800b7cc <UART_SetConfig+0xc0>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7ca:	e066      	b.n	800b89a <UART_SetConfig+0x18e>
 800b7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	4b50      	ldr	r3, [pc, #320]	@ (800b914 <UART_SetConfig+0x208>)
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d102      	bne.n	800b7dc <UART_SetConfig+0xd0>
 800b7d6:	2302      	movs	r3, #2
 800b7d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7da:	e05e      	b.n	800b89a <UART_SetConfig+0x18e>
 800b7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	4b4d      	ldr	r3, [pc, #308]	@ (800b918 <UART_SetConfig+0x20c>)
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d102      	bne.n	800b7ec <UART_SetConfig+0xe0>
 800b7e6:	2304      	movs	r3, #4
 800b7e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7ea:	e056      	b.n	800b89a <UART_SetConfig+0x18e>
 800b7ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	4b4a      	ldr	r3, [pc, #296]	@ (800b91c <UART_SetConfig+0x210>)
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d102      	bne.n	800b7fc <UART_SetConfig+0xf0>
 800b7f6:	2308      	movs	r3, #8
 800b7f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7fa:	e04e      	b.n	800b89a <UART_SetConfig+0x18e>
 800b7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	4b47      	ldr	r3, [pc, #284]	@ (800b920 <UART_SetConfig+0x214>)
 800b802:	429a      	cmp	r2, r3
 800b804:	d102      	bne.n	800b80c <UART_SetConfig+0x100>
 800b806:	2310      	movs	r3, #16
 800b808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b80a:	e046      	b.n	800b89a <UART_SetConfig+0x18e>
 800b80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	4b44      	ldr	r3, [pc, #272]	@ (800b924 <UART_SetConfig+0x218>)
 800b812:	429a      	cmp	r2, r3
 800b814:	d102      	bne.n	800b81c <UART_SetConfig+0x110>
 800b816:	2320      	movs	r3, #32
 800b818:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b81a:	e03e      	b.n	800b89a <UART_SetConfig+0x18e>
 800b81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	4b41      	ldr	r3, [pc, #260]	@ (800b928 <UART_SetConfig+0x21c>)
 800b822:	429a      	cmp	r2, r3
 800b824:	d102      	bne.n	800b82c <UART_SetConfig+0x120>
 800b826:	2340      	movs	r3, #64	@ 0x40
 800b828:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b82a:	e036      	b.n	800b89a <UART_SetConfig+0x18e>
 800b82c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	4b3e      	ldr	r3, [pc, #248]	@ (800b92c <UART_SetConfig+0x220>)
 800b832:	429a      	cmp	r2, r3
 800b834:	d102      	bne.n	800b83c <UART_SetConfig+0x130>
 800b836:	2380      	movs	r3, #128	@ 0x80
 800b838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b83a:	e02e      	b.n	800b89a <UART_SetConfig+0x18e>
 800b83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b83e:	681a      	ldr	r2, [r3, #0]
 800b840:	4b3b      	ldr	r3, [pc, #236]	@ (800b930 <UART_SetConfig+0x224>)
 800b842:	429a      	cmp	r2, r3
 800b844:	d103      	bne.n	800b84e <UART_SetConfig+0x142>
 800b846:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b84a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b84c:	e025      	b.n	800b89a <UART_SetConfig+0x18e>
 800b84e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	4b38      	ldr	r3, [pc, #224]	@ (800b934 <UART_SetConfig+0x228>)
 800b854:	429a      	cmp	r2, r3
 800b856:	d103      	bne.n	800b860 <UART_SetConfig+0x154>
 800b858:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b85c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b85e:	e01c      	b.n	800b89a <UART_SetConfig+0x18e>
 800b860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	4b34      	ldr	r3, [pc, #208]	@ (800b938 <UART_SetConfig+0x22c>)
 800b866:	429a      	cmp	r2, r3
 800b868:	d103      	bne.n	800b872 <UART_SetConfig+0x166>
 800b86a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b86e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b870:	e013      	b.n	800b89a <UART_SetConfig+0x18e>
 800b872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	4b31      	ldr	r3, [pc, #196]	@ (800b93c <UART_SetConfig+0x230>)
 800b878:	429a      	cmp	r2, r3
 800b87a:	d103      	bne.n	800b884 <UART_SetConfig+0x178>
 800b87c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b880:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b882:	e00a      	b.n	800b89a <UART_SetConfig+0x18e>
 800b884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	4b1e      	ldr	r3, [pc, #120]	@ (800b904 <UART_SetConfig+0x1f8>)
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d103      	bne.n	800b896 <UART_SetConfig+0x18a>
 800b88e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b892:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b894:	e001      	b.n	800b89a <UART_SetConfig+0x18e>
 800b896:	2300      	movs	r3, #0
 800b898:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	4b19      	ldr	r3, [pc, #100]	@ (800b904 <UART_SetConfig+0x1f8>)
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d005      	beq.n	800b8b0 <UART_SetConfig+0x1a4>
 800b8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	4b18      	ldr	r3, [pc, #96]	@ (800b90c <UART_SetConfig+0x200>)
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	f040 8094 	bne.w	800b9d8 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b8b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	623b      	str	r3, [r7, #32]
 800b8b6:	627a      	str	r2, [r7, #36]	@ 0x24
 800b8b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b8bc:	f7fd f9a4 	bl	8008c08 <HAL_RCCEx_GetPeriphCLKFreq>
 800b8c0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b8c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f000 80f7 	beq.w	800bab8 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ce:	4a1c      	ldr	r2, [pc, #112]	@ (800b940 <UART_SetConfig+0x234>)
 800b8d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8dc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	4413      	add	r3, r2
 800b8e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d305      	bcc.n	800b8fa <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b8f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d924      	bls.n	800b944 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b900:	e069      	b.n	800b9d6 <UART_SetConfig+0x2ca>
 800b902:	bf00      	nop
 800b904:	44002400 	.word	0x44002400
 800b908:	cfff69f3 	.word	0xcfff69f3
 800b90c:	54002400 	.word	0x54002400
 800b910:	40013800 	.word	0x40013800
 800b914:	40004400 	.word	0x40004400
 800b918:	40004800 	.word	0x40004800
 800b91c:	40004c00 	.word	0x40004c00
 800b920:	40005000 	.word	0x40005000
 800b924:	40006400 	.word	0x40006400
 800b928:	40007800 	.word	0x40007800
 800b92c:	40007c00 	.word	0x40007c00
 800b930:	40008000 	.word	0x40008000
 800b934:	40006800 	.word	0x40006800
 800b938:	40006c00 	.word	0x40006c00
 800b93c:	40008400 	.word	0x40008400
 800b940:	0801d310 	.word	0x0801d310
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b946:	2200      	movs	r2, #0
 800b948:	61bb      	str	r3, [r7, #24]
 800b94a:	61fa      	str	r2, [r7, #28]
 800b94c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b950:	4a64      	ldr	r2, [pc, #400]	@ (800bae4 <UART_SetConfig+0x3d8>)
 800b952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b956:	b29b      	uxth	r3, r3
 800b958:	2200      	movs	r2, #0
 800b95a:	613b      	str	r3, [r7, #16]
 800b95c:	617a      	str	r2, [r7, #20]
 800b95e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b962:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b966:	f7f5 f997 	bl	8000c98 <__aeabi_uldivmod>
 800b96a:	4602      	mov	r2, r0
 800b96c:	460b      	mov	r3, r1
 800b96e:	4610      	mov	r0, r2
 800b970:	4619      	mov	r1, r3
 800b972:	f04f 0200 	mov.w	r2, #0
 800b976:	f04f 0300 	mov.w	r3, #0
 800b97a:	020b      	lsls	r3, r1, #8
 800b97c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b980:	0202      	lsls	r2, r0, #8
 800b982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b984:	6849      	ldr	r1, [r1, #4]
 800b986:	0849      	lsrs	r1, r1, #1
 800b988:	2000      	movs	r0, #0
 800b98a:	460c      	mov	r4, r1
 800b98c:	4605      	mov	r5, r0
 800b98e:	eb12 0804 	adds.w	r8, r2, r4
 800b992:	eb43 0905 	adc.w	r9, r3, r5
 800b996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	60bb      	str	r3, [r7, #8]
 800b99e:	60fa      	str	r2, [r7, #12]
 800b9a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	f7f5 f976 	bl	8000c98 <__aeabi_uldivmod>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b9b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b9ba:	d308      	bcc.n	800b9ce <UART_SetConfig+0x2c2>
 800b9bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9c2:	d204      	bcs.n	800b9ce <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800b9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b9ca:	60da      	str	r2, [r3, #12]
 800b9cc:	e003      	b.n	800b9d6 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b9d4:	e070      	b.n	800bab8 <UART_SetConfig+0x3ac>
 800b9d6:	e06f      	b.n	800bab8 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9da:	69db      	ldr	r3, [r3, #28]
 800b9dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9e0:	d13c      	bne.n	800ba5c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b9e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	603b      	str	r3, [r7, #0]
 800b9e8:	607a      	str	r2, [r7, #4]
 800b9ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9ee:	f7fd f90b 	bl	8008c08 <HAL_RCCEx_GetPeriphCLKFreq>
 800b9f2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b9f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d05e      	beq.n	800bab8 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9fe:	4a39      	ldr	r2, [pc, #228]	@ (800bae4 <UART_SetConfig+0x3d8>)
 800ba00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba04:	461a      	mov	r2, r3
 800ba06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba0c:	005a      	lsls	r2, r3, #1
 800ba0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	085b      	lsrs	r3, r3, #1
 800ba14:	441a      	add	r2, r3
 800ba16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba22:	2b0f      	cmp	r3, #15
 800ba24:	d916      	bls.n	800ba54 <UART_SetConfig+0x348>
 800ba26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba2c:	d212      	bcs.n	800ba54 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ba2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	f023 030f 	bic.w	r3, r3, #15
 800ba36:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ba38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba3a:	085b      	lsrs	r3, r3, #1
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	f003 0307 	and.w	r3, r3, #7
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ba46:	4313      	orrs	r3, r2
 800ba48:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800ba4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ba50:	60da      	str	r2, [r3, #12]
 800ba52:	e031      	b.n	800bab8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ba5a:	e02d      	b.n	800bab8 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ba5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba5e:	2200      	movs	r2, #0
 800ba60:	469a      	mov	sl, r3
 800ba62:	4693      	mov	fp, r2
 800ba64:	4650      	mov	r0, sl
 800ba66:	4659      	mov	r1, fp
 800ba68:	f7fd f8ce 	bl	8008c08 <HAL_RCCEx_GetPeriphCLKFreq>
 800ba6c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800ba6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d021      	beq.n	800bab8 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba78:	4a1a      	ldr	r2, [pc, #104]	@ (800bae4 <UART_SetConfig+0x3d8>)
 800ba7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba82:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	085b      	lsrs	r3, r3, #1
 800ba8c:	441a      	add	r2, r3
 800ba8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba9a:	2b0f      	cmp	r3, #15
 800ba9c:	d909      	bls.n	800bab2 <UART_SetConfig+0x3a6>
 800ba9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800baa4:	d205      	bcs.n	800bab2 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800baa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	60da      	str	r2, [r3, #12]
 800bab0:	e002      	b.n	800bab8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800bab2:	2301      	movs	r3, #1
 800bab4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baba:	2201      	movs	r2, #1
 800babc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac2:	2201      	movs	r2, #1
 800bac4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baca:	2200      	movs	r2, #0
 800bacc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad0:	2200      	movs	r2, #0
 800bad2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bad4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3750      	adds	r7, #80	@ 0x50
 800badc:	46bd      	mov	sp, r7
 800bade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bae2:	bf00      	nop
 800bae4:	0801d310 	.word	0x0801d310

0800bae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baf4:	f003 0308 	and.w	r3, r3, #8
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00a      	beq.n	800bb12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	430a      	orrs	r2, r1
 800bb10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb16:	f003 0301 	and.w	r3, r3, #1
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00a      	beq.n	800bb34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	430a      	orrs	r2, r1
 800bb32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb38:	f003 0302 	and.w	r3, r3, #2
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00a      	beq.n	800bb56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	430a      	orrs	r2, r1
 800bb54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb5a:	f003 0304 	and.w	r3, r3, #4
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00a      	beq.n	800bb78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	430a      	orrs	r2, r1
 800bb76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb7c:	f003 0310 	and.w	r3, r3, #16
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00a      	beq.n	800bb9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	430a      	orrs	r2, r1
 800bb98:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb9e:	f003 0320 	and.w	r3, r3, #32
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00a      	beq.n	800bbbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	430a      	orrs	r2, r1
 800bbba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d01a      	beq.n	800bbfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	430a      	orrs	r2, r1
 800bbdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbe6:	d10a      	bne.n	800bbfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00a      	beq.n	800bc20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	430a      	orrs	r2, r1
 800bc1e:	605a      	str	r2, [r3, #4]
  }
}
 800bc20:	bf00      	nop
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b098      	sub	sp, #96	@ 0x60
 800bc30:	af02      	add	r7, sp, #8
 800bc32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bc3c:	f7f6 ff1c 	bl	8002a78 <HAL_GetTick>
 800bc40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f003 0308 	and.w	r3, r3, #8
 800bc4c:	2b08      	cmp	r3, #8
 800bc4e:	d12f      	bne.n	800bcb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 f88e 	bl	800bd80 <UART_WaitOnFlagUntilTimeout>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d022      	beq.n	800bcb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc72:	e853 3f00 	ldrex	r3, [r3]
 800bc76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bc78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	461a      	mov	r2, r3
 800bc86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc88:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bc8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc90:	e841 2300 	strex	r3, r2, [r1]
 800bc94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bc96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1e6      	bne.n	800bc6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2220      	movs	r2, #32
 800bca0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcac:	2303      	movs	r3, #3
 800bcae:	e063      	b.n	800bd78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f003 0304 	and.w	r3, r3, #4
 800bcba:	2b04      	cmp	r3, #4
 800bcbc:	d149      	bne.n	800bd52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 f857 	bl	800bd80 <UART_WaitOnFlagUntilTimeout>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d03c      	beq.n	800bd52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce0:	e853 3f00 	ldrex	r3, [r3]
 800bce4:	623b      	str	r3, [r7, #32]
   return(result);
 800bce6:	6a3b      	ldr	r3, [r7, #32]
 800bce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bcec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bcf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcfe:	e841 2300 	strex	r3, r2, [r1]
 800bd02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1e6      	bne.n	800bcd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	3308      	adds	r3, #8
 800bd10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	e853 3f00 	ldrex	r3, [r3]
 800bd18:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f023 0301 	bic.w	r3, r3, #1
 800bd20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	3308      	adds	r3, #8
 800bd28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd2a:	61fa      	str	r2, [r7, #28]
 800bd2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2e:	69b9      	ldr	r1, [r7, #24]
 800bd30:	69fa      	ldr	r2, [r7, #28]
 800bd32:	e841 2300 	strex	r3, r2, [r1]
 800bd36:	617b      	str	r3, [r7, #20]
   return(result);
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d1e5      	bne.n	800bd0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2220      	movs	r2, #32
 800bd42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e012      	b.n	800bd78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2220      	movs	r2, #32
 800bd56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2220      	movs	r2, #32
 800bd5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3758      	adds	r7, #88	@ 0x58
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	603b      	str	r3, [r7, #0]
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd90:	e04f      	b.n	800be32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd98:	d04b      	beq.n	800be32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd9a:	f7f6 fe6d 	bl	8002a78 <HAL_GetTick>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	69ba      	ldr	r2, [r7, #24]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d302      	bcc.n	800bdb0 <UART_WaitOnFlagUntilTimeout+0x30>
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e04e      	b.n	800be52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 0304 	and.w	r3, r3, #4
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d037      	beq.n	800be32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	2b80      	cmp	r3, #128	@ 0x80
 800bdc6:	d034      	beq.n	800be32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	2b40      	cmp	r3, #64	@ 0x40
 800bdcc:	d031      	beq.n	800be32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	69db      	ldr	r3, [r3, #28]
 800bdd4:	f003 0308 	and.w	r3, r3, #8
 800bdd8:	2b08      	cmp	r3, #8
 800bdda:	d110      	bne.n	800bdfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2208      	movs	r2, #8
 800bde2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f000 f838 	bl	800be5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2208      	movs	r2, #8
 800bdee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e029      	b.n	800be52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	69db      	ldr	r3, [r3, #28]
 800be04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800be08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800be0c:	d111      	bne.n	800be32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800be16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f000 f81e 	bl	800be5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2220      	movs	r2, #32
 800be22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800be2e:	2303      	movs	r3, #3
 800be30:	e00f      	b.n	800be52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	69da      	ldr	r2, [r3, #28]
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	4013      	ands	r3, r2
 800be3c:	68ba      	ldr	r2, [r7, #8]
 800be3e:	429a      	cmp	r2, r3
 800be40:	bf0c      	ite	eq
 800be42:	2301      	moveq	r3, #1
 800be44:	2300      	movne	r3, #0
 800be46:	b2db      	uxtb	r3, r3
 800be48:	461a      	mov	r2, r3
 800be4a:	79fb      	ldrb	r3, [r7, #7]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d0a0      	beq.n	800bd92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be5a:	b480      	push	{r7}
 800be5c:	b095      	sub	sp, #84	@ 0x54
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be6a:	e853 3f00 	ldrex	r3, [r3]
 800be6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	461a      	mov	r2, r3
 800be7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be80:	643b      	str	r3, [r7, #64]	@ 0x40
 800be82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be88:	e841 2300 	strex	r3, r2, [r1]
 800be8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1e6      	bne.n	800be62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	3308      	adds	r3, #8
 800be9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be9c:	6a3b      	ldr	r3, [r7, #32]
 800be9e:	e853 3f00 	ldrex	r3, [r3]
 800bea2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800beaa:	f023 0301 	bic.w	r3, r3, #1
 800beae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	3308      	adds	r3, #8
 800beb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800beb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800beba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bebc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bec0:	e841 2300 	strex	r3, r2, [r1]
 800bec4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1e3      	bne.n	800be94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d118      	bne.n	800bf06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	e853 3f00 	ldrex	r3, [r3]
 800bee0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	f023 0310 	bic.w	r3, r3, #16
 800bee8:	647b      	str	r3, [r7, #68]	@ 0x44
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bef2:	61bb      	str	r3, [r7, #24]
 800bef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef6:	6979      	ldr	r1, [r7, #20]
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	e841 2300 	strex	r3, r2, [r1]
 800befe:	613b      	str	r3, [r7, #16]
   return(result);
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1e6      	bne.n	800bed4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2220      	movs	r2, #32
 800bf0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bf1a:	bf00      	nop
 800bf1c:	3754      	adds	r7, #84	@ 0x54
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
	...

0800bf28 <ethernet_link_status_updated>:
uint32_t DHCPfineTimer = 0;
uint8_t DHCP_state = DHCP_OFF;
#endif

void ethernet_link_status_updated(struct netif *netif)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  if (netif_is_link_up(netif))
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bf36:	089b      	lsrs	r3, r3, #2
 800bf38:	f003 0301 	and.w	r3, r3, #1
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <ethernet_link_status_updated+0x22>
 {
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 800bf42:	4b06      	ldr	r3, [pc, #24]	@ (800bf5c <ethernet_link_status_updated+0x34>)
 800bf44:	2201      	movs	r2, #1
 800bf46:	701a      	strb	r2, [r3, #0]
  else
  {
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
  }
}
 800bf48:	e002      	b.n	800bf50 <ethernet_link_status_updated+0x28>
    DHCP_state = DHCP_LINK_DOWN;
 800bf4a:	4b04      	ldr	r3, [pc, #16]	@ (800bf5c <ethernet_link_status_updated+0x34>)
 800bf4c:	2205      	movs	r2, #5
 800bf4e:	701a      	strb	r2, [r3, #0]
}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr
 800bf5c:	200003fc 	.word	0x200003fc

0800bf60 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800bf68:	f7f6 fd86 	bl	8002a78 <HAL_GetTick>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	4b08      	ldr	r3, [pc, #32]	@ (800bf90 <Ethernet_Link_Periodic_Handle+0x30>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	1ad3      	subs	r3, r2, r3
 800bf74:	2b63      	cmp	r3, #99	@ 0x63
 800bf76:	d907      	bls.n	800bf88 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800bf78:	f7f6 fd7e 	bl	8002a78 <HAL_GetTick>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	4a04      	ldr	r2, [pc, #16]	@ (800bf90 <Ethernet_Link_Periodic_Handle+0x30>)
 800bf80:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fa88 	bl	800c498 <ethernet_link_check_state>
  }
}
 800bf88:	bf00      	nop
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	200003f4 	.word	0x200003f4

0800bf94 <DHCP_Process>:
  * @brief  DHCP_Process_Handle
  * @param  None
  * @retval None
  */
void DHCP_Process(struct netif *netif)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b08e      	sub	sp, #56	@ 0x38
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  ip_addr_t netmask;
  ip_addr_t gw;

  struct dhcp *dhcp;

  switch (DHCP_state)
 800bf9c:	4b4d      	ldr	r3, [pc, #308]	@ (800c0d4 <DHCP_Process+0x140>)
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	2b05      	cmp	r3, #5
 800bfa2:	f000 8081 	beq.w	800c0a8 <DHCP_Process+0x114>
 800bfa6:	2b05      	cmp	r3, #5
 800bfa8:	f300 808c 	bgt.w	800c0c4 <DHCP_Process+0x130>
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d002      	beq.n	800bfb6 <DHCP_Process+0x22>
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d01d      	beq.n	800bff0 <DHCP_Process+0x5c>

		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
    }
    break;
  default: break;
 800bfb4:	e086      	b.n	800c0c4 <DHCP_Process+0x130>
		printf("State: Looking for DHCP server ...\n");
 800bfb6:	4848      	ldr	r0, [pc, #288]	@ (800c0d8 <DHCP_Process+0x144>)
 800bfb8:	f00c ff1c 	bl	8018df4 <puts>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	2101      	movs	r1, #1
 800bfc0:	4846      	ldr	r0, [pc, #280]	@ (800c0dc <DHCP_Process+0x148>)
 800bfc2:	f7f8 fc5d 	bl	8004880 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	2110      	movs	r1, #16
 800bfca:	4845      	ldr	r0, [pc, #276]	@ (800c0e0 <DHCP_Process+0x14c>)
 800bfcc:	f7f8 fc58 	bl	8004880 <HAL_GPIO_WritePin>
      ip_addr_set_zero_ip4(&netif->ip_addr);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	605a      	str	r2, [r3, #4]
      ip_addr_set_zero_ip4(&netif->netmask);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	609a      	str	r2, [r3, #8]
      ip_addr_set_zero_ip4(&netif->gw);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	60da      	str	r2, [r3, #12]
      dhcp_start(netif);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f008 ff7e 	bl	8014ee4 <dhcp_start>
      DHCP_state = DHCP_WAIT_ADDRESS;
 800bfe8:	4b3a      	ldr	r3, [pc, #232]	@ (800c0d4 <DHCP_Process+0x140>)
 800bfea:	2202      	movs	r2, #2
 800bfec:	701a      	strb	r2, [r3, #0]
    break;
 800bfee:	e06c      	b.n	800c0ca <DHCP_Process+0x136>
      if (dhcp_supplied_address(netif))
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f00a f979 	bl	80162e8 <dhcp_supplied_address>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d01f      	beq.n	800c03c <DHCP_Process+0xa8>
        DHCP_state = DHCP_ADDRESS_ASSIGNED;
 800bffc:	4b35      	ldr	r3, [pc, #212]	@ (800c0d4 <DHCP_Process+0x140>)
 800bffe:	2203      	movs	r2, #3
 800c000:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800c002:	2201      	movs	r2, #1
 800c004:	2101      	movs	r1, #1
 800c006:	4835      	ldr	r0, [pc, #212]	@ (800c0dc <DHCP_Process+0x148>)
 800c008:	f7f8 fc3a 	bl	8004880 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800c00c:	2200      	movs	r2, #0
 800c00e:	2110      	movs	r1, #16
 800c010:	4833      	ldr	r0, [pc, #204]	@ (800c0e0 <DHCP_Process+0x14c>)
 800c012:	f7f8 fc35 	bl	8004880 <HAL_GPIO_WritePin>
        ip4_addr_set_u32(&ipaddr, netif_ip4_addr(netif)->addr);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	3304      	adds	r3, #4
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	633b      	str	r3, [r7, #48]	@ 0x30
        ip4addr_ntoa_r(&ipaddr, ip_str, sizeof(ip_str));
 800c01e:	f107 0118 	add.w	r1, r7, #24
 800c022:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c026:	2210      	movs	r2, #16
 800c028:	4618      	mov	r0, r3
 800c02a:	f00b fdf1 	bl	8017c10 <ip4addr_ntoa_r>
        printf("IPv4 address: %s\n", ip_str);
 800c02e:	f107 0318 	add.w	r3, r7, #24
 800c032:	4619      	mov	r1, r3
 800c034:	482b      	ldr	r0, [pc, #172]	@ (800c0e4 <DHCP_Process+0x150>)
 800c036:	f00c fe75 	bl	8018d24 <iprintf>
    break;
 800c03a:	e045      	b.n	800c0c8 <DHCP_Process+0x134>
        dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c040:	637b      	str	r3, [r7, #52]	@ 0x34
        if (dhcp->tries > MAX_DHCP_TRIES)
 800c042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c044:	799b      	ldrb	r3, [r3, #6]
 800c046:	2b04      	cmp	r3, #4
 800c048:	d93e      	bls.n	800c0c8 <DHCP_Process+0x134>
          DHCP_state = DHCP_TIMEOUT;
 800c04a:	4b22      	ldr	r3, [pc, #136]	@ (800c0d4 <DHCP_Process+0x140>)
 800c04c:	2204      	movs	r2, #4
 800c04e:	701a      	strb	r2, [r3, #0]
          IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 800c050:	4b25      	ldr	r3, [pc, #148]	@ (800c0e8 <DHCP_Process+0x154>)
 800c052:	633b      	str	r3, [r7, #48]	@ 0x30
          IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 800c054:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800c058:	62fb      	str	r3, [r7, #44]	@ 0x2c
          IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800c05a:	4b24      	ldr	r3, [pc, #144]	@ (800c0ec <DHCP_Process+0x158>)
 800c05c:	62bb      	str	r3, [r7, #40]	@ 0x28
          netif_set_addr(netif, &ipaddr, &netmask, &gw);
 800c05e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c062:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c066:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f001 f9e2 	bl	800d434 <netif_set_addr>
          ip4addr_ntoa_r(&ipaddr, ip_str, sizeof(ip_str));
 800c070:	f107 0108 	add.w	r1, r7, #8
 800c074:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c078:	2210      	movs	r2, #16
 800c07a:	4618      	mov	r0, r3
 800c07c:	f00b fdc8 	bl	8017c10 <ip4addr_ntoa_r>
			printf("DHCP Timeout !! \n");
 800c080:	481b      	ldr	r0, [pc, #108]	@ (800c0f0 <DHCP_Process+0x15c>)
 800c082:	f00c feb7 	bl	8018df4 <puts>
			printf("Static IP address: %s\n", ip_str);
 800c086:	f107 0308 	add.w	r3, r7, #8
 800c08a:	4619      	mov	r1, r3
 800c08c:	4819      	ldr	r0, [pc, #100]	@ (800c0f4 <DHCP_Process+0x160>)
 800c08e:	f00c fe49 	bl	8018d24 <iprintf>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,
 800c092:	2201      	movs	r2, #1
 800c094:	2101      	movs	r1, #1
 800c096:	4811      	ldr	r0, [pc, #68]	@ (800c0dc <DHCP_Process+0x148>)
 800c098:	f7f8 fbf2 	bl	8004880 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin,
 800c09c:	2200      	movs	r2, #0
 800c09e:	2110      	movs	r1, #16
 800c0a0:	480f      	ldr	r0, [pc, #60]	@ (800c0e0 <DHCP_Process+0x14c>)
 800c0a2:	f7f8 fbed 	bl	8004880 <HAL_GPIO_WritePin>
    break;
 800c0a6:	e00f      	b.n	800c0c8 <DHCP_Process+0x134>
      DHCP_state = DHCP_OFF;
 800c0a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c0d4 <DHCP_Process+0x140>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	2101      	movs	r1, #1
 800c0b2:	480a      	ldr	r0, [pc, #40]	@ (800c0dc <DHCP_Process+0x148>)
 800c0b4:	f7f8 fbe4 	bl	8004880 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	2110      	movs	r1, #16
 800c0bc:	4808      	ldr	r0, [pc, #32]	@ (800c0e0 <DHCP_Process+0x14c>)
 800c0be:	f7f8 fbdf 	bl	8004880 <HAL_GPIO_WritePin>
    break;
 800c0c2:	e002      	b.n	800c0ca <DHCP_Process+0x136>
  default: break;
 800c0c4:	bf00      	nop
 800c0c6:	e000      	b.n	800c0ca <DHCP_Process+0x136>
    break;
 800c0c8:	bf00      	nop
  }
}
 800c0ca:	bf00      	nop
 800c0cc:	3738      	adds	r7, #56	@ 0x38
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	200003fc 	.word	0x200003fc
 800c0d8:	0801aee0 	.word	0x0801aee0
 800c0dc:	42020400 	.word	0x42020400
 800c0e0:	42021400 	.word	0x42021400
 800c0e4:	0801af04 	.word	0x0801af04
 800c0e8:	0a00a2c6 	.word	0x0a00a2c6
 800c0ec:	0100a2c6 	.word	0x0100a2c6
 800c0f0:	0801af18 	.word	0x0801af18
 800c0f4:	0801af2c 	.word	0x0801af2c

0800c0f8 <DHCP_Periodic_Handle>:
  * @param  netif
  * @retval None
  */

void DHCP_Periodic_Handle(struct netif *netif)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  /* Fine DHCP periodic process every 500ms */
  if (HAL_GetTick() - DHCPfineTimer >= DHCP_FINE_TIMER_MSECS)
 800c100:	f7f6 fcba 	bl	8002a78 <HAL_GetTick>
 800c104:	4602      	mov	r2, r0
 800c106:	4b09      	ldr	r3, [pc, #36]	@ (800c12c <DHCP_Periodic_Handle+0x34>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800c110:	d307      	bcc.n	800c122 <DHCP_Periodic_Handle+0x2a>
  {
    DHCPfineTimer =  HAL_GetTick();
 800c112:	f7f6 fcb1 	bl	8002a78 <HAL_GetTick>
 800c116:	4603      	mov	r3, r0
 800c118:	4a04      	ldr	r2, [pc, #16]	@ (800c12c <DHCP_Periodic_Handle+0x34>)
 800c11a:	6013      	str	r3, [r2, #0]
    /* process DHCP state machine */
    DHCP_Process(netif);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f7ff ff39 	bl	800bf94 <DHCP_Process>
  }
}
 800c122:	bf00      	nop
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	200003f8 	.word	0x200003f8

0800c130 <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
	MX_ETH_Init();
 800c138:	f7f5 fc70 	bl	8001a1c <MX_ETH_Init>


	heth.Instance = ETH;
 800c13c:	4b24      	ldr	r3, [pc, #144]	@ (800c1d0 <low_level_init+0xa0>)
 800c13e:	4a25      	ldr	r2, [pc, #148]	@ (800c1d4 <low_level_init+0xa4>)
 800c140:	601a      	str	r2, [r3, #0]

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2206      	movs	r2, #6
 800c146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c14a:	4b21      	ldr	r3, [pc, #132]	@ (800c1d0 <low_level_init+0xa0>)
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	781a      	ldrb	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c156:	4b1e      	ldr	r3, [pc, #120]	@ (800c1d0 <low_level_init+0xa0>)
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	785a      	ldrb	r2, [r3, #1]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c162:	4b1b      	ldr	r3, [pc, #108]	@ (800c1d0 <low_level_init+0xa0>)
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	789a      	ldrb	r2, [r3, #2]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c16e:	4b18      	ldr	r3, [pc, #96]	@ (800c1d0 <low_level_init+0xa0>)
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	78da      	ldrb	r2, [r3, #3]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c17a:	4b15      	ldr	r3, [pc, #84]	@ (800c1d0 <low_level_init+0xa0>)
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	791a      	ldrb	r2, [r3, #4]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c186:	4b12      	ldr	r3, [pc, #72]	@ (800c1d0 <low_level_init+0xa0>)
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	795a      	ldrb	r2, [r3, #5]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c198:	859a      	strh	r2, [r3, #44]	@ 0x2c

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c1a0:	f043 030a 	orr.w	r3, r3, #10
 800c1a4:	b2da      	uxtb	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c1ac:	480a      	ldr	r0, [pc, #40]	@ (800c1d8 <low_level_init+0xa8>)
 800c1ae:	f000 febd 	bl	800cf2c <memp_init_pool>



  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c1b2:	490a      	ldr	r1, [pc, #40]	@ (800c1dc <low_level_init+0xac>)
 800c1b4:	480a      	ldr	r0, [pc, #40]	@ (800c1e0 <low_level_init+0xb0>)
 800c1b6:	f7f6 faa7 	bl	8002708 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800c1ba:	4809      	ldr	r0, [pc, #36]	@ (800c1e0 <low_level_init+0xb0>)
 800c1bc:	f7f6 fad6 	bl	800276c <LAN8742_Init>

  ethernet_link_check_state(netif);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f969 	bl	800c498 <ethernet_link_check_state>
}
 800c1c6:	bf00      	nop
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	200001fc 	.word	0x200001fc
 800c1d4:	40028000 	.word	0x40028000
 800c1d8:	0801d328 	.word	0x0801d328
 800c1dc:	20000010 	.word	0x20000010
 800c1e0:	2000358c 	.word	0x2000358c

0800c1e4 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b092      	sub	sp, #72	@ 0x48
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c1fc:	f107 030c 	add.w	r3, r7, #12
 800c200:	2230      	movs	r2, #48	@ 0x30
 800c202:	2100      	movs	r1, #0
 800c204:	4618      	mov	r0, r3
 800c206:	f00c ff35 	bl	8019074 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c20a:	f107 030c 	add.w	r3, r7, #12
 800c20e:	2230      	movs	r2, #48	@ 0x30
 800c210:	2100      	movs	r1, #0
 800c212:	4618      	mov	r0, r3
 800c214:	f00c ff2e 	bl	8019074 <memset>

  for(q = p; q != NULL; q = q->next)
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c21c:	e045      	b.n	800c2aa <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c21e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c220:	2b03      	cmp	r3, #3
 800c222:	d902      	bls.n	800c22a <low_level_output+0x46>
      return ERR_IF;
 800c224:	f06f 030b 	mvn.w	r3, #11
 800c228:	e055      	b.n	800c2d6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800c22a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c22c:	6859      	ldr	r1, [r3, #4]
 800c22e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c230:	4613      	mov	r3, r2
 800c232:	005b      	lsls	r3, r3, #1
 800c234:	4413      	add	r3, r2
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	3348      	adds	r3, #72	@ 0x48
 800c23a:	443b      	add	r3, r7
 800c23c:	3b3c      	subs	r3, #60	@ 0x3c
 800c23e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c242:	895b      	ldrh	r3, [r3, #10]
 800c244:	4619      	mov	r1, r3
 800c246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c248:	4613      	mov	r3, r2
 800c24a:	005b      	lsls	r3, r3, #1
 800c24c:	4413      	add	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	3348      	adds	r3, #72	@ 0x48
 800c252:	443b      	add	r3, r7
 800c254:	3b38      	subs	r3, #56	@ 0x38
 800c256:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d011      	beq.n	800c282 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c25e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c260:	1e5a      	subs	r2, r3, #1
 800c262:	f107 000c 	add.w	r0, r7, #12
 800c266:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c268:	460b      	mov	r3, r1
 800c26a:	005b      	lsls	r3, r3, #1
 800c26c:	440b      	add	r3, r1
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	18c1      	adds	r1, r0, r3
 800c272:	4613      	mov	r3, r2
 800c274:	005b      	lsls	r3, r3, #1
 800c276:	4413      	add	r3, r2
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	3348      	adds	r3, #72	@ 0x48
 800c27c:	443b      	add	r3, r7
 800c27e:	3b34      	subs	r3, #52	@ 0x34
 800c280:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d109      	bne.n	800c29e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c28a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c28c:	4613      	mov	r3, r2
 800c28e:	005b      	lsls	r3, r3, #1
 800c290:	4413      	add	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	3348      	adds	r3, #72	@ 0x48
 800c296:	443b      	add	r3, r7
 800c298:	3b34      	subs	r3, #52	@ 0x34
 800c29a:	2200      	movs	r2, #0
 800c29c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c29e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800c2a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c2aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1b6      	bne.n	800c21e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	891b      	ldrh	r3, [r3, #8]
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c2e0 <low_level_output+0xfc>)
 800c2b8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c2ba:	4a09      	ldr	r2, [pc, #36]	@ (800c2e0 <low_level_output+0xfc>)
 800c2bc:	f107 030c 	add.w	r3, r7, #12
 800c2c0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c2c2:	4a07      	ldr	r2, [pc, #28]	@ (800c2e0 <low_level_output+0xfc>)
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800c2c8:	2214      	movs	r2, #20
 800c2ca:	4905      	ldr	r1, [pc, #20]	@ (800c2e0 <low_level_output+0xfc>)
 800c2cc:	4805      	ldr	r0, [pc, #20]	@ (800c2e4 <low_level_output+0x100>)
 800c2ce:	f7f6 ff2d 	bl	800312c <HAL_ETH_Transmit>

  return errval;
 800c2d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3748      	adds	r7, #72	@ 0x48
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	200000f4 	.word	0x200000f4
 800c2e4:	200001fc 	.word	0x200001fc

0800c2e8 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c2f4:	4b07      	ldr	r3, [pc, #28]	@ (800c314 <low_level_input+0x2c>)
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d105      	bne.n	800c308 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c2fc:	f107 030c 	add.w	r3, r7, #12
 800c300:	4619      	mov	r1, r3
 800c302:	4805      	ldr	r0, [pc, #20]	@ (800c318 <low_level_input+0x30>)
 800c304:	f7f6 ffa9 	bl	800325a <HAL_ETH_ReadData>
  }
  return p;
 800c308:	68fb      	ldr	r3, [r7, #12]

}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	20003588 	.word	0x20003588
 800c318:	200001fc 	.word	0x200001fc

0800c31c <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input(struct netif *netif)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c324:	2300      	movs	r3, #0
 800c326:	60fb      	str	r3, [r7, #12]

    do
    {
      p = low_level_input( netif );
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f7ff ffdd 	bl	800c2e8 <low_level_input>
 800c32e:	60f8      	str	r0, [r7, #12]
      if (p != NULL)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00a      	beq.n	800c34c <ethernetif_input+0x30>
      {
        if (netif->input( p, netif) != ERR_OK )
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	691b      	ldr	r3, [r3, #16]
 800c33a:	6879      	ldr	r1, [r7, #4]
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	4798      	blx	r3
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d002      	beq.n	800c34c <ethernetif_input+0x30>
        {
          pbuf_free(p);
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f001 fd0e 	bl	800dd68 <pbuf_free>
        }
      }

    } while(p!=NULL);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1ea      	bne.n	800c328 <ethernetif_input+0xc>

}
 800c352:	bf00      	nop
 800c354:	bf00      	nop
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d106      	bne.n	800c378 <ethernetif_init+0x1c>
 800c36a:	4b0e      	ldr	r3, [pc, #56]	@ (800c3a4 <ethernetif_init+0x48>)
 800c36c:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c370:	490d      	ldr	r1, [pc, #52]	@ (800c3a8 <ethernetif_init+0x4c>)
 800c372:	480e      	ldr	r0, [pc, #56]	@ (800c3ac <ethernetif_init+0x50>)
 800c374:	f00c fcd6 	bl	8018d24 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2273      	movs	r2, #115	@ 0x73
 800c37c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  netif->name[1] = IFNAME1;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2274      	movs	r2, #116	@ 0x74
 800c384:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a09      	ldr	r2, [pc, #36]	@ (800c3b0 <ethernetif_init+0x54>)
 800c38c:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a08      	ldr	r2, [pc, #32]	@ (800c3b4 <ethernetif_init+0x58>)
 800c392:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f7ff fecb 	bl	800c130 <low_level_init>

  return ERR_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	0801af44 	.word	0x0801af44
 800c3a8:	0801af60 	.word	0x0801af60
 800c3ac:	0801af70 	.word	0x0801af70
 800c3b0:	08016bd9 	.word	0x08016bd9
 800c3b4:	0800c1e5 	.word	0x0800c1e5

0800c3b8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c3c4:	68f9      	ldr	r1, [r7, #12]
 800c3c6:	4807      	ldr	r0, [pc, #28]	@ (800c3e4 <pbuf_free_custom+0x2c>)
 800c3c8:	f000 fe86 	bl	800d0d8 <memp_free_pool>
   /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */
  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c3cc:	4b06      	ldr	r3, [pc, #24]	@ (800c3e8 <pbuf_free_custom+0x30>)
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d102      	bne.n	800c3da <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c3d4:	4b04      	ldr	r3, [pc, #16]	@ (800c3e8 <pbuf_free_custom+0x30>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	701a      	strb	r2, [r3, #0]
  }
}
 800c3da:	bf00      	nop
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	0801d328 	.word	0x0801d328
 800c3e8:	20003588 	.word	0x20003588

0800c3ec <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Current Time value
  */
u32_t sys_now(void)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c3f0:	f7f6 fb42 	bl	8002a78 <HAL_GetTick>
 800c3f4:	4603      	mov	r3, r0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	bd80      	pop	{r7, pc}
	...

0800c3fc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c400:	4802      	ldr	r0, [pc, #8]	@ (800c40c <ETH_PHY_IO_Init+0x10>)
 800c402:	f7f7 fb0f 	bl	8003a24 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	200001fc 	.word	0x200001fc

0800c410 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c410:	b480      	push	{r7}
 800c412:	af00      	add	r7, sp, #0
  return 0;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	68f9      	ldr	r1, [r7, #12]
 800c432:	4807      	ldr	r0, [pc, #28]	@ (800c450 <ETH_PHY_IO_ReadReg+0x30>)
 800c434:	f7f7 f85f 	bl	80034f6 <HAL_ETH_ReadPHYRegister>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d002      	beq.n	800c444 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c43e:	f04f 33ff 	mov.w	r3, #4294967295
 800c442:	e000      	b.n	800c446 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3710      	adds	r7, #16
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	200001fc 	.word	0x200001fc

0800c454 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	68ba      	ldr	r2, [r7, #8]
 800c464:	68f9      	ldr	r1, [r7, #12]
 800c466:	4807      	ldr	r0, [pc, #28]	@ (800c484 <ETH_PHY_IO_WriteReg+0x30>)
 800c468:	f7f7 f89a 	bl	80035a0 <HAL_ETH_WritePHYRegister>
 800c46c:	4603      	mov	r3, r0
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d002      	beq.n	800c478 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c472:	f04f 33ff 	mov.w	r3, #4294967295
 800c476:	e000      	b.n	800c47a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	200001fc 	.word	0x200001fc

0800c488 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c48c:	f7f6 faf4 	bl	8002a78 <HAL_GetTick>
 800c490:	4603      	mov	r3, r0
}
 800c492:	4618      	mov	r0, r3
 800c494:	bd80      	pop	{r7, pc}
	...

0800c498 <ethernet_link_check_state>:
/**
  * @brief
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b0a0      	sub	sp, #128	@ 0x80
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c4a0:	f107 030c 	add.w	r3, r7, #12
 800c4a4:	2264      	movs	r2, #100	@ 0x64
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f00c fde3 	bl	8019074 <memset>
  int32_t PHYLinkState = 0U;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex =0U;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c4be:	483a      	ldr	r0, [pc, #232]	@ (800c5a8 <ethernet_link_check_state+0x110>)
 800c4c0:	f7f6 f9a1 	bl	8002806 <LAN8742_GetLinkState>
 800c4c4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c4cc:	089b      	lsrs	r3, r3, #2
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00c      	beq.n	800c4f2 <ethernet_link_check_state+0x5a>
 800c4d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	dc09      	bgt.n	800c4f2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800c4de:	4833      	ldr	r0, [pc, #204]	@ (800c5ac <ethernet_link_check_state+0x114>)
 800c4e0:	f7f6 fdd4 	bl	800308c <HAL_ETH_Stop>
    netif_set_down(netif);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f001 f84b 	bl	800d580 <netif_set_down>
    netif_set_link_down(netif);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f001 f895 	bl	800d61a <netif_set_link_down>
      HAL_ETH_Start(&heth);
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }
}
 800c4f0:	e055      	b.n	800c59e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c4f8:	f003 0304 	and.w	r3, r3, #4
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d14e      	bne.n	800c59e <ethernet_link_check_state+0x106>
 800c500:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c502:	2b01      	cmp	r3, #1
 800c504:	dd4b      	ble.n	800c59e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800c506:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c508:	3b02      	subs	r3, #2
 800c50a:	2b03      	cmp	r3, #3
 800c50c:	d82a      	bhi.n	800c564 <ethernet_link_check_state+0xcc>
 800c50e:	a201      	add	r2, pc, #4	@ (adr r2, 800c514 <ethernet_link_check_state+0x7c>)
 800c510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c514:	0800c525 	.word	0x0800c525
 800c518:	0800c537 	.word	0x0800c537
 800c51c:	0800c547 	.word	0x0800c547
 800c520:	0800c557 	.word	0x0800c557
      duplex = ETH_FULLDUPLEX_MODE;
 800c524:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c528:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c52a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c52e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c530:	2301      	movs	r3, #1
 800c532:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c534:	e017      	b.n	800c566 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c536:	2300      	movs	r3, #0
 800c538:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c53a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c53e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c540:	2301      	movs	r3, #1
 800c542:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c544:	e00f      	b.n	800c566 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800c546:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c54a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c54c:	2300      	movs	r3, #0
 800c54e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c550:	2301      	movs	r3, #1
 800c552:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c554:	e007      	b.n	800c566 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c556:	2300      	movs	r3, #0
 800c558:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c55a:	2300      	movs	r3, #0
 800c55c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c55e:	2301      	movs	r3, #1
 800c560:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c562:	e000      	b.n	800c566 <ethernet_link_check_state+0xce>
      break;
 800c564:	bf00      	nop
    if(linkchanged)
 800c566:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d018      	beq.n	800c59e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c56c:	f107 030c 	add.w	r3, r7, #12
 800c570:	4619      	mov	r1, r3
 800c572:	480e      	ldr	r0, [pc, #56]	@ (800c5ac <ethernet_link_check_state+0x114>)
 800c574:	f7f7 f868 	bl	8003648 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c578:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c57a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800c57c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c57e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c580:	f107 030c 	add.w	r3, r7, #12
 800c584:	4619      	mov	r1, r3
 800c586:	4809      	ldr	r0, [pc, #36]	@ (800c5ac <ethernet_link_check_state+0x114>)
 800c588:	f7f7 fa32 	bl	80039f0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800c58c:	4807      	ldr	r0, [pc, #28]	@ (800c5ac <ethernet_link_check_state+0x114>)
 800c58e:	f7f6 fd1b 	bl	8002fc8 <HAL_ETH_Start>
      netif_set_up(netif);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 ffa8 	bl	800d4e8 <netif_set_up>
      netif_set_link_up(netif);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f001 f815 	bl	800d5c8 <netif_set_link_up>
}
 800c59e:	bf00      	nop
 800c5a0:	3780      	adds	r7, #128	@ 0x80
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	2000358c 	.word	0x2000358c
 800c5ac:	200001fc 	.word	0x200001fc

0800c5b0 <HAL_ETH_RxAllocateCallback>:
void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af02      	add	r7, sp, #8
 800c5b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c5b8:	4812      	ldr	r0, [pc, #72]	@ (800c604 <HAL_ETH_RxAllocateCallback+0x54>)
 800c5ba:	f000 fd2b 	bl	800d014 <memp_malloc_pool>
 800c5be:	60f8      	str	r0, [r7, #12]
  if (p)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d014      	beq.n	800c5f0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f103 0220 	add.w	r2, r3, #32
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	4a0d      	ldr	r2, [pc, #52]	@ (800c608 <HAL_ETH_RxAllocateCallback+0x58>)
 800c5d4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c5de:	9201      	str	r2, [sp, #4]
 800c5e0:	9300      	str	r3, [sp, #0]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2241      	movs	r2, #65	@ 0x41
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	f001 fa01 	bl	800d9f0 <pbuf_alloced_custom>
  else
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
}
 800c5ee:	e005      	b.n	800c5fc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c5f0:	4b06      	ldr	r3, [pc, #24]	@ (800c60c <HAL_ETH_RxAllocateCallback+0x5c>)
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	601a      	str	r2, [r3, #0]
}
 800c5fc:	bf00      	nop
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	0801d328 	.word	0x0801d328
 800c608:	0800c3b9 	.word	0x0800c3b9
 800c60c:	20003588 	.word	0x20003588

0800c610 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c610:	b480      	push	{r7}
 800c612:	b089      	sub	sp, #36	@ 0x24
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
 800c61c:	807b      	strh	r3, [r7, #2]
  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c626:	2300      	movs	r3, #0
 800c628:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	3b20      	subs	r3, #32
 800c62e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	2200      	movs	r2, #0
 800c634:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	2200      	movs	r2, #0
 800c63a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	887a      	ldrh	r2, [r7, #2]
 800c640:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d103      	bne.n	800c652 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c64a:	69bb      	ldr	r3, [r7, #24]
 800c64c:	69fa      	ldr	r2, [r7, #28]
 800c64e:	601a      	str	r2, [r3, #0]
 800c650:	e003      	b.n	800c65a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	69fa      	ldr	r2, [r7, #28]
 800c658:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	69fa      	ldr	r2, [r7, #28]
 800c65e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	61fb      	str	r3, [r7, #28]
 800c666:	e009      	b.n	800c67c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	891a      	ldrh	r2, [r3, #8]
 800c66c:	887b      	ldrh	r3, [r7, #2]
 800c66e:	4413      	add	r3, r2
 800c670:	b29a      	uxth	r2, r3
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	61fb      	str	r3, [r7, #28]
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1f2      	bne.n	800c668 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
}
 800c682:	bf00      	nop
 800c684:	bf00      	nop
 800c686:	3724      	adds	r7, #36	@ 0x24
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	4603      	mov	r3, r0
 800c698:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c69a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c69e:	021b      	lsls	r3, r3, #8
 800c6a0:	b21a      	sxth	r2, r3
 800c6a2:	88fb      	ldrh	r3, [r7, #6]
 800c6a4:	0a1b      	lsrs	r3, r3, #8
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	b21b      	sxth	r3, r3
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	b21b      	sxth	r3, r3
 800c6ae:	b29b      	uxth	r3, r3
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	061a      	lsls	r2, r3, #24
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	021b      	lsls	r3, r3, #8
 800c6cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c6d0:	431a      	orrs	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	0a1b      	lsrs	r3, r3, #8
 800c6d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c6da:	431a      	orrs	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	0e1b      	lsrs	r3, r3, #24
 800c6e0:	4313      	orrs	r3, r2
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	370c      	adds	r7, #12
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr

0800c6ee <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800c6ee:	b480      	push	{r7}
 800c6f0:	b089      	sub	sp, #36	@ 0x24
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
 800c6f6:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00d      	beq.n	800c72e <lwip_standard_chksum+0x40>
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	dd0a      	ble.n	800c72e <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800c718:	69fa      	ldr	r2, [r7, #28]
 800c71a:	1c53      	adds	r3, r2, #1
 800c71c:	61fb      	str	r3, [r7, #28]
 800c71e:	f107 030e 	add.w	r3, r7, #14
 800c722:	3301      	adds	r3, #1
 800c724:	7812      	ldrb	r2, [r2, #0]
 800c726:	701a      	strb	r2, [r3, #0]
    len--;
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	3b01      	subs	r3, #1
 800c72c:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800c732:	e00a      	b.n	800c74a <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	1c9a      	adds	r2, r3, #2
 800c738:	61ba      	str	r2, [r7, #24]
 800c73a:	881b      	ldrh	r3, [r3, #0]
 800c73c:	461a      	mov	r2, r3
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	4413      	add	r3, r2
 800c742:	617b      	str	r3, [r7, #20]
    len -= 2;
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	3b02      	subs	r3, #2
 800c748:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	dcf1      	bgt.n	800c734 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	dd04      	ble.n	800c760 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800c756:	f107 030e 	add.w	r3, r7, #14
 800c75a:	69ba      	ldr	r2, [r7, #24]
 800c75c:	7812      	ldrb	r2, [r2, #0]
 800c75e:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800c760:	89fb      	ldrh	r3, [r7, #14]
 800c762:	461a      	mov	r2, r3
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	4413      	add	r3, r2
 800c768:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	0c1a      	lsrs	r2, r3, #16
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	b29b      	uxth	r3, r3
 800c772:	4413      	add	r3, r2
 800c774:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	0c1a      	lsrs	r2, r3, #16
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	4413      	add	r3, r2
 800c780:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d007      	beq.n	800c798 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	021b      	lsls	r3, r3, #8
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	0a1b      	lsrs	r3, r3, #8
 800c792:	b2db      	uxtb	r3, r3
 800c794:	4313      	orrs	r3, r2
 800c796:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	b29b      	uxth	r3, r3
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3724      	adds	r7, #36	@ 0x24
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b082      	sub	sp, #8
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800c7b4:	887b      	ldrh	r3, [r7, #2]
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff ff98 	bl	800c6ee <lwip_standard_chksum>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	43db      	mvns	r3, r3
 800c7c2:	b29b      	uxth	r3, r3
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3708      	adds	r7, #8
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c7d6:	f000 f8d5 	bl	800c984 <mem_init>
  memp_init();
 800c7da:	f000 fbd7 	bl	800cf8c <memp_init>
  pbuf_init();
  netif_init();
 800c7de:	f000 fcbb 	bl	800d158 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c7e2:	f007 f8b7 	bl	8013954 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c7e6:	f001 fdcf 	bl	800e388 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c7ea:	f007 f829 	bl	8013840 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c7ee:	bf00      	nop
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
	...

0800c7f8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	4603      	mov	r3, r0
 800c800:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c802:	4b05      	ldr	r3, [pc, #20]	@ (800c818 <ptr_to_mem+0x20>)
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	88fb      	ldrh	r3, [r7, #6]
 800c808:	4413      	add	r3, r2
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	370c      	adds	r7, #12
 800c80e:	46bd      	mov	sp, r7
 800c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop
 800c818:	200035c4 	.word	0x200035c4

0800c81c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c824:	4b05      	ldr	r3, [pc, #20]	@ (800c83c <mem_to_ptr+0x20>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	1ad3      	subs	r3, r2, r3
 800c82c:	b29b      	uxth	r3, r3
}
 800c82e:	4618      	mov	r0, r3
 800c830:	370c      	adds	r7, #12
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop
 800c83c:	200035c4 	.word	0x200035c4

0800c840 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c840:	b590      	push	{r4, r7, lr}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c848:	4b45      	ldr	r3, [pc, #276]	@ (800c960 <plug_holes+0x120>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d206      	bcs.n	800c860 <plug_holes+0x20>
 800c852:	4b44      	ldr	r3, [pc, #272]	@ (800c964 <plug_holes+0x124>)
 800c854:	f240 12df 	movw	r2, #479	@ 0x1df
 800c858:	4943      	ldr	r1, [pc, #268]	@ (800c968 <plug_holes+0x128>)
 800c85a:	4844      	ldr	r0, [pc, #272]	@ (800c96c <plug_holes+0x12c>)
 800c85c:	f00c fa62 	bl	8018d24 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c860:	4b43      	ldr	r3, [pc, #268]	@ (800c970 <plug_holes+0x130>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	429a      	cmp	r2, r3
 800c868:	d306      	bcc.n	800c878 <plug_holes+0x38>
 800c86a:	4b3e      	ldr	r3, [pc, #248]	@ (800c964 <plug_holes+0x124>)
 800c86c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c870:	4940      	ldr	r1, [pc, #256]	@ (800c974 <plug_holes+0x134>)
 800c872:	483e      	ldr	r0, [pc, #248]	@ (800c96c <plug_holes+0x12c>)
 800c874:	f00c fa56 	bl	8018d24 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	791b      	ldrb	r3, [r3, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d006      	beq.n	800c88e <plug_holes+0x4e>
 800c880:	4b38      	ldr	r3, [pc, #224]	@ (800c964 <plug_holes+0x124>)
 800c882:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800c886:	493c      	ldr	r1, [pc, #240]	@ (800c978 <plug_holes+0x138>)
 800c888:	4838      	ldr	r0, [pc, #224]	@ (800c96c <plug_holes+0x12c>)
 800c88a:	f00c fa4b 	bl	8018d24 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	881b      	ldrh	r3, [r3, #0]
 800c892:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800c896:	d906      	bls.n	800c8a6 <plug_holes+0x66>
 800c898:	4b32      	ldr	r3, [pc, #200]	@ (800c964 <plug_holes+0x124>)
 800c89a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c89e:	4937      	ldr	r1, [pc, #220]	@ (800c97c <plug_holes+0x13c>)
 800c8a0:	4832      	ldr	r0, [pc, #200]	@ (800c96c <plug_holes+0x12c>)
 800c8a2:	f00c fa3f 	bl	8018d24 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	881b      	ldrh	r3, [r3, #0]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7ff ffa4 	bl	800c7f8 <ptr_to_mem>
 800c8b0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d024      	beq.n	800c904 <plug_holes+0xc4>
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	791b      	ldrb	r3, [r3, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d120      	bne.n	800c904 <plug_holes+0xc4>
 800c8c2:	4b2b      	ldr	r3, [pc, #172]	@ (800c970 <plug_holes+0x130>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d01b      	beq.n	800c904 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c8cc:	4b2c      	ldr	r3, [pc, #176]	@ (800c980 <plug_holes+0x140>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d102      	bne.n	800c8dc <plug_holes+0x9c>
      lfree = mem;
 800c8d6:	4a2a      	ldr	r2, [pc, #168]	@ (800c980 <plug_holes+0x140>)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	881a      	ldrh	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	881b      	ldrh	r3, [r3, #0]
 800c8e8:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800c8ec:	d00a      	beq.n	800c904 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	881b      	ldrh	r3, [r3, #0]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7ff ff80 	bl	800c7f8 <ptr_to_mem>
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f7ff ff8e 	bl	800c81c <mem_to_ptr>
 800c900:	4603      	mov	r3, r0
 800c902:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	885b      	ldrh	r3, [r3, #2]
 800c908:	4618      	mov	r0, r3
 800c90a:	f7ff ff75 	bl	800c7f8 <ptr_to_mem>
 800c90e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	429a      	cmp	r2, r3
 800c916:	d01f      	beq.n	800c958 <plug_holes+0x118>
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	791b      	ldrb	r3, [r3, #4]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d11b      	bne.n	800c958 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c920:	4b17      	ldr	r3, [pc, #92]	@ (800c980 <plug_holes+0x140>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	429a      	cmp	r2, r3
 800c928:	d102      	bne.n	800c930 <plug_holes+0xf0>
      lfree = pmem;
 800c92a:	4a15      	ldr	r2, [pc, #84]	@ (800c980 <plug_holes+0x140>)
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	881a      	ldrh	r2, [r3, #0]
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	881b      	ldrh	r3, [r3, #0]
 800c93c:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800c940:	d00a      	beq.n	800c958 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	881b      	ldrh	r3, [r3, #0]
 800c946:	4618      	mov	r0, r3
 800c948:	f7ff ff56 	bl	800c7f8 <ptr_to_mem>
 800c94c:	4604      	mov	r4, r0
 800c94e:	68b8      	ldr	r0, [r7, #8]
 800c950:	f7ff ff64 	bl	800c81c <mem_to_ptr>
 800c954:	4603      	mov	r3, r0
 800c956:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c958:	bf00      	nop
 800c95a:	3714      	adds	r7, #20
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd90      	pop	{r4, r7, pc}
 800c960:	200035c4 	.word	0x200035c4
 800c964:	0801af98 	.word	0x0801af98
 800c968:	0801afac 	.word	0x0801afac
 800c96c:	0801afc4 	.word	0x0801afc4
 800c970:	200035c8 	.word	0x200035c8
 800c974:	0801afec 	.word	0x0801afec
 800c978:	0801b008 	.word	0x0801b008
 800c97c:	0801b024 	.word	0x0801b024
 800c980:	200035cc 	.word	0x200035cc

0800c984 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c98a:	4b16      	ldr	r3, [pc, #88]	@ (800c9e4 <mem_init+0x60>)
 800c98c:	4a16      	ldr	r2, [pc, #88]	@ (800c9e8 <mem_init+0x64>)
 800c98e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c990:	4b14      	ldr	r3, [pc, #80]	@ (800c9e4 <mem_init+0x60>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800c99c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c9aa:	f44f 5060 	mov.w	r0, #14336	@ 0x3800
 800c9ae:	f7ff ff23 	bl	800c7f8 <ptr_to_mem>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	4a0d      	ldr	r2, [pc, #52]	@ (800c9ec <mem_init+0x68>)
 800c9b6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c9b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c9ec <mem_init+0x68>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c9c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ec <mem_init+0x68>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800c9c8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c9ca:	4b08      	ldr	r3, [pc, #32]	@ (800c9ec <mem_init+0x68>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800c9d2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c9d4:	4b03      	ldr	r3, [pc, #12]	@ (800c9e4 <mem_init+0x60>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a05      	ldr	r2, [pc, #20]	@ (800c9f0 <mem_init+0x6c>)
 800c9da:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c9dc:	bf00      	nop
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	200035c4 	.word	0x200035c4
 800c9e8:	20084000 	.word	0x20084000
 800c9ec:	200035c8 	.word	0x200035c8
 800c9f0:	200035cc 	.word	0x200035cc

0800c9f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b086      	sub	sp, #24
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f7ff ff0d 	bl	800c81c <mem_to_ptr>
 800ca02:	4603      	mov	r3, r0
 800ca04:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	881b      	ldrh	r3, [r3, #0]
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7ff fef4 	bl	800c7f8 <ptr_to_mem>
 800ca10:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	885b      	ldrh	r3, [r3, #2]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7ff feee 	bl	800c7f8 <ptr_to_mem>
 800ca1c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	881b      	ldrh	r3, [r3, #0]
 800ca22:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800ca26:	d818      	bhi.n	800ca5a <mem_link_valid+0x66>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	885b      	ldrh	r3, [r3, #2]
 800ca2c:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800ca30:	d813      	bhi.n	800ca5a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ca36:	8afa      	ldrh	r2, [r7, #22]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d004      	beq.n	800ca46 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	881b      	ldrh	r3, [r3, #0]
 800ca40:	8afa      	ldrh	r2, [r7, #22]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d109      	bne.n	800ca5a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ca46:	4b08      	ldr	r3, [pc, #32]	@ (800ca68 <mem_link_valid+0x74>)
 800ca48:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ca4a:	693a      	ldr	r2, [r7, #16]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d006      	beq.n	800ca5e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	885b      	ldrh	r3, [r3, #2]
 800ca54:	8afa      	ldrh	r2, [r7, #22]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d001      	beq.n	800ca5e <mem_link_valid+0x6a>
    return 0;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	e000      	b.n	800ca60 <mem_link_valid+0x6c>
  }
  return 1;
 800ca5e:	2301      	movs	r3, #1
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3718      	adds	r7, #24
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	200035c8 	.word	0x200035c8

0800ca6c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d04c      	beq.n	800cb14 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f003 0303 	and.w	r3, r3, #3
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d007      	beq.n	800ca94 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ca84:	4b25      	ldr	r3, [pc, #148]	@ (800cb1c <mem_free+0xb0>)
 800ca86:	f240 2273 	movw	r2, #627	@ 0x273
 800ca8a:	4925      	ldr	r1, [pc, #148]	@ (800cb20 <mem_free+0xb4>)
 800ca8c:	4825      	ldr	r0, [pc, #148]	@ (800cb24 <mem_free+0xb8>)
 800ca8e:	f00c f949 	bl	8018d24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ca92:	e040      	b.n	800cb16 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	3b08      	subs	r3, #8
 800ca98:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ca9a:	4b23      	ldr	r3, [pc, #140]	@ (800cb28 <mem_free+0xbc>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d306      	bcc.n	800cab2 <mem_free+0x46>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f103 020c 	add.w	r2, r3, #12
 800caaa:	4b20      	ldr	r3, [pc, #128]	@ (800cb2c <mem_free+0xc0>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d907      	bls.n	800cac2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cab2:	4b1a      	ldr	r3, [pc, #104]	@ (800cb1c <mem_free+0xb0>)
 800cab4:	f240 227f 	movw	r2, #639	@ 0x27f
 800cab8:	491d      	ldr	r1, [pc, #116]	@ (800cb30 <mem_free+0xc4>)
 800caba:	481a      	ldr	r0, [pc, #104]	@ (800cb24 <mem_free+0xb8>)
 800cabc:	f00c f932 	bl	8018d24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cac0:	e029      	b.n	800cb16 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	791b      	ldrb	r3, [r3, #4]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d107      	bne.n	800cada <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800caca:	4b14      	ldr	r3, [pc, #80]	@ (800cb1c <mem_free+0xb0>)
 800cacc:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800cad0:	4918      	ldr	r1, [pc, #96]	@ (800cb34 <mem_free+0xc8>)
 800cad2:	4814      	ldr	r0, [pc, #80]	@ (800cb24 <mem_free+0xb8>)
 800cad4:	f00c f926 	bl	8018d24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cad8:	e01d      	b.n	800cb16 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	f7ff ff8a 	bl	800c9f4 <mem_link_valid>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d107      	bne.n	800caf6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cae6:	4b0d      	ldr	r3, [pc, #52]	@ (800cb1c <mem_free+0xb0>)
 800cae8:	f240 2295 	movw	r2, #661	@ 0x295
 800caec:	4912      	ldr	r1, [pc, #72]	@ (800cb38 <mem_free+0xcc>)
 800caee:	480d      	ldr	r0, [pc, #52]	@ (800cb24 <mem_free+0xb8>)
 800caf0:	f00c f918 	bl	8018d24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800caf4:	e00f      	b.n	800cb16 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2200      	movs	r2, #0
 800cafa:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cafc:	4b0f      	ldr	r3, [pc, #60]	@ (800cb3c <mem_free+0xd0>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d202      	bcs.n	800cb0c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cb06:	4a0d      	ldr	r2, [pc, #52]	@ (800cb3c <mem_free+0xd0>)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f7ff fe97 	bl	800c840 <plug_holes>
 800cb12:	e000      	b.n	800cb16 <mem_free+0xaa>
    return;
 800cb14:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	0801af98 	.word	0x0801af98
 800cb20:	0801b050 	.word	0x0801b050
 800cb24:	0801afc4 	.word	0x0801afc4
 800cb28:	200035c4 	.word	0x200035c4
 800cb2c:	200035c8 	.word	0x200035c8
 800cb30:	0801b074 	.word	0x0801b074
 800cb34:	0801b090 	.word	0x0801b090
 800cb38:	0801b0b8 	.word	0x0801b0b8
 800cb3c:	200035cc 	.word	0x200035cc

0800cb40 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b088      	sub	sp, #32
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	460b      	mov	r3, r1
 800cb4a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cb4c:	887b      	ldrh	r3, [r7, #2]
 800cb4e:	3303      	adds	r3, #3
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	f023 0303 	bic.w	r3, r3, #3
 800cb56:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cb58:	8bfb      	ldrh	r3, [r7, #30]
 800cb5a:	2b0b      	cmp	r3, #11
 800cb5c:	d801      	bhi.n	800cb62 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cb5e:	230c      	movs	r3, #12
 800cb60:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cb62:	8bfb      	ldrh	r3, [r7, #30]
 800cb64:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800cb68:	d803      	bhi.n	800cb72 <mem_trim+0x32>
 800cb6a:	8bfa      	ldrh	r2, [r7, #30]
 800cb6c:	887b      	ldrh	r3, [r7, #2]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d201      	bcs.n	800cb76 <mem_trim+0x36>
    return NULL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	e0cc      	b.n	800cd10 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cb76:	4b68      	ldr	r3, [pc, #416]	@ (800cd18 <mem_trim+0x1d8>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d304      	bcc.n	800cb8a <mem_trim+0x4a>
 800cb80:	4b66      	ldr	r3, [pc, #408]	@ (800cd1c <mem_trim+0x1dc>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d306      	bcc.n	800cb98 <mem_trim+0x58>
 800cb8a:	4b65      	ldr	r3, [pc, #404]	@ (800cd20 <mem_trim+0x1e0>)
 800cb8c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800cb90:	4964      	ldr	r1, [pc, #400]	@ (800cd24 <mem_trim+0x1e4>)
 800cb92:	4865      	ldr	r0, [pc, #404]	@ (800cd28 <mem_trim+0x1e8>)
 800cb94:	f00c f8c6 	bl	8018d24 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cb98:	4b5f      	ldr	r3, [pc, #380]	@ (800cd18 <mem_trim+0x1d8>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d304      	bcc.n	800cbac <mem_trim+0x6c>
 800cba2:	4b5e      	ldr	r3, [pc, #376]	@ (800cd1c <mem_trim+0x1dc>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d301      	bcc.n	800cbb0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	e0af      	b.n	800cd10 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	3b08      	subs	r3, #8
 800cbb4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cbb6:	69b8      	ldr	r0, [r7, #24]
 800cbb8:	f7ff fe30 	bl	800c81c <mem_to_ptr>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	881a      	ldrh	r2, [r3, #0]
 800cbc4:	8afb      	ldrh	r3, [r7, #22]
 800cbc6:	1ad3      	subs	r3, r2, r3
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	3b08      	subs	r3, #8
 800cbcc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cbce:	8bfa      	ldrh	r2, [r7, #30]
 800cbd0:	8abb      	ldrh	r3, [r7, #20]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d906      	bls.n	800cbe4 <mem_trim+0xa4>
 800cbd6:	4b52      	ldr	r3, [pc, #328]	@ (800cd20 <mem_trim+0x1e0>)
 800cbd8:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800cbdc:	4953      	ldr	r1, [pc, #332]	@ (800cd2c <mem_trim+0x1ec>)
 800cbde:	4852      	ldr	r0, [pc, #328]	@ (800cd28 <mem_trim+0x1e8>)
 800cbe0:	f00c f8a0 	bl	8018d24 <iprintf>
  if (newsize > size) {
 800cbe4:	8bfa      	ldrh	r2, [r7, #30]
 800cbe6:	8abb      	ldrh	r3, [r7, #20]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d901      	bls.n	800cbf0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800cbec:	2300      	movs	r3, #0
 800cbee:	e08f      	b.n	800cd10 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800cbf0:	8bfa      	ldrh	r2, [r7, #30]
 800cbf2:	8abb      	ldrh	r3, [r7, #20]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d101      	bne.n	800cbfc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	e089      	b.n	800cd10 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7ff fdf9 	bl	800c7f8 <ptr_to_mem>
 800cc06:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	791b      	ldrb	r3, [r3, #4]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d13f      	bne.n	800cc90 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	881b      	ldrh	r3, [r3, #0]
 800cc14:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800cc18:	d106      	bne.n	800cc28 <mem_trim+0xe8>
 800cc1a:	4b41      	ldr	r3, [pc, #260]	@ (800cd20 <mem_trim+0x1e0>)
 800cc1c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800cc20:	4943      	ldr	r1, [pc, #268]	@ (800cd30 <mem_trim+0x1f0>)
 800cc22:	4841      	ldr	r0, [pc, #260]	@ (800cd28 <mem_trim+0x1e8>)
 800cc24:	f00c f87e 	bl	8018d24 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	881b      	ldrh	r3, [r3, #0]
 800cc2c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrunk mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cc2e:	8afa      	ldrh	r2, [r7, #22]
 800cc30:	8bfb      	ldrh	r3, [r7, #30]
 800cc32:	4413      	add	r3, r2
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	3308      	adds	r3, #8
 800cc38:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cc3a:	4b3e      	ldr	r3, [pc, #248]	@ (800cd34 <mem_trim+0x1f4>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	693a      	ldr	r2, [r7, #16]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d106      	bne.n	800cc52 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800cc44:	89fb      	ldrh	r3, [r7, #14]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7ff fdd6 	bl	800c7f8 <ptr_to_mem>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	4a39      	ldr	r2, [pc, #228]	@ (800cd34 <mem_trim+0x1f4>)
 800cc50:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cc52:	89fb      	ldrh	r3, [r7, #14]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7ff fdcf 	bl	800c7f8 <ptr_to_mem>
 800cc5a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	89ba      	ldrh	r2, [r7, #12]
 800cc66:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	8afa      	ldrh	r2, [r7, #22]
 800cc6c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	89fa      	ldrh	r2, [r7, #14]
 800cc72:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	881b      	ldrh	r3, [r3, #0]
 800cc78:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800cc7c:	d047      	beq.n	800cd0e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7ff fdb8 	bl	800c7f8 <ptr_to_mem>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	89fb      	ldrh	r3, [r7, #14]
 800cc8c:	8053      	strh	r3, [r2, #2]
 800cc8e:	e03e      	b.n	800cd0e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cc90:	8bfb      	ldrh	r3, [r7, #30]
 800cc92:	f103 0214 	add.w	r2, r3, #20
 800cc96:	8abb      	ldrh	r3, [r7, #20]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d838      	bhi.n	800cd0e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cc9c:	8afa      	ldrh	r2, [r7, #22]
 800cc9e:	8bfb      	ldrh	r3, [r7, #30]
 800cca0:	4413      	add	r3, r2
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	3308      	adds	r3, #8
 800cca6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	881b      	ldrh	r3, [r3, #0]
 800ccac:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800ccb0:	d106      	bne.n	800ccc0 <mem_trim+0x180>
 800ccb2:	4b1b      	ldr	r3, [pc, #108]	@ (800cd20 <mem_trim+0x1e0>)
 800ccb4:	f240 3216 	movw	r2, #790	@ 0x316
 800ccb8:	491d      	ldr	r1, [pc, #116]	@ (800cd30 <mem_trim+0x1f0>)
 800ccba:	481b      	ldr	r0, [pc, #108]	@ (800cd28 <mem_trim+0x1e8>)
 800ccbc:	f00c f832 	bl	8018d24 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ccc0:	89fb      	ldrh	r3, [r7, #14]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7ff fd98 	bl	800c7f8 <ptr_to_mem>
 800ccc8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ccca:	4b1a      	ldr	r3, [pc, #104]	@ (800cd34 <mem_trim+0x1f4>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	693a      	ldr	r2, [r7, #16]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d202      	bcs.n	800ccda <mem_trim+0x19a>
      lfree = mem2;
 800ccd4:	4a17      	ldr	r2, [pc, #92]	@ (800cd34 <mem_trim+0x1f4>)
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	881a      	ldrh	r2, [r3, #0]
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	8afa      	ldrh	r2, [r7, #22]
 800ccec:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	89fa      	ldrh	r2, [r7, #14]
 800ccf2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	881b      	ldrh	r3, [r3, #0]
 800ccf8:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800ccfc:	d007      	beq.n	800cd0e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	881b      	ldrh	r3, [r3, #0]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7ff fd78 	bl	800c7f8 <ptr_to_mem>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	89fb      	ldrh	r3, [r7, #14]
 800cd0c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800cd0e:	687b      	ldr	r3, [r7, #4]
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3720      	adds	r7, #32
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	200035c4 	.word	0x200035c4
 800cd1c:	200035c8 	.word	0x200035c8
 800cd20:	0801af98 	.word	0x0801af98
 800cd24:	0801b0ec 	.word	0x0801b0ec
 800cd28:	0801afc4 	.word	0x0801afc4
 800cd2c:	0801b104 	.word	0x0801b104
 800cd30:	0801b124 	.word	0x0801b124
 800cd34:	200035cc 	.word	0x200035cc

0800cd38 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b088      	sub	sp, #32
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	4603      	mov	r3, r0
 800cd40:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cd42:	88fb      	ldrh	r3, [r7, #6]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d101      	bne.n	800cd4c <mem_malloc+0x14>
    return NULL;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	e0d9      	b.n	800cf00 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cd4c:	88fb      	ldrh	r3, [r7, #6]
 800cd4e:	3303      	adds	r3, #3
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	f023 0303 	bic.w	r3, r3, #3
 800cd56:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cd58:	8bbb      	ldrh	r3, [r7, #28]
 800cd5a:	2b0b      	cmp	r3, #11
 800cd5c:	d801      	bhi.n	800cd62 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cd5e:	230c      	movs	r3, #12
 800cd60:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cd62:	8bbb      	ldrh	r3, [r7, #28]
 800cd64:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800cd68:	d803      	bhi.n	800cd72 <mem_malloc+0x3a>
 800cd6a:	8bba      	ldrh	r2, [r7, #28]
 800cd6c:	88fb      	ldrh	r3, [r7, #6]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d201      	bcs.n	800cd76 <mem_malloc+0x3e>
    return NULL;
 800cd72:	2300      	movs	r3, #0
 800cd74:	e0c4      	b.n	800cf00 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cd76:	4b64      	ldr	r3, [pc, #400]	@ (800cf08 <mem_malloc+0x1d0>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7ff fd4e 	bl	800c81c <mem_to_ptr>
 800cd80:	4603      	mov	r3, r0
 800cd82:	83fb      	strh	r3, [r7, #30]
 800cd84:	e0b4      	b.n	800cef0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cd86:	8bfb      	ldrh	r3, [r7, #30]
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7ff fd35 	bl	800c7f8 <ptr_to_mem>
 800cd8e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	791b      	ldrb	r3, [r3, #4]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	f040 80a4 	bne.w	800cee2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	881b      	ldrh	r3, [r3, #0]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	8bfb      	ldrh	r3, [r7, #30]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	f1a3 0208 	sub.w	r2, r3, #8
 800cda8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	f0c0 8099 	bcc.w	800cee2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	8bfb      	ldrh	r3, [r7, #30]
 800cdb8:	1ad3      	subs	r3, r2, r3
 800cdba:	f1a3 0208 	sub.w	r2, r3, #8
 800cdbe:	8bbb      	ldrh	r3, [r7, #28]
 800cdc0:	3314      	adds	r3, #20
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d333      	bcc.n	800ce2e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cdc6:	8bfa      	ldrh	r2, [r7, #30]
 800cdc8:	8bbb      	ldrh	r3, [r7, #28]
 800cdca:	4413      	add	r3, r2
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	3308      	adds	r3, #8
 800cdd0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cdd2:	8a7b      	ldrh	r3, [r7, #18]
 800cdd4:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800cdd8:	d106      	bne.n	800cde8 <mem_malloc+0xb0>
 800cdda:	4b4c      	ldr	r3, [pc, #304]	@ (800cf0c <mem_malloc+0x1d4>)
 800cddc:	f240 3287 	movw	r2, #903	@ 0x387
 800cde0:	494b      	ldr	r1, [pc, #300]	@ (800cf10 <mem_malloc+0x1d8>)
 800cde2:	484c      	ldr	r0, [pc, #304]	@ (800cf14 <mem_malloc+0x1dc>)
 800cde4:	f00b ff9e 	bl	8018d24 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cde8:	8a7b      	ldrh	r3, [r7, #18]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7ff fd04 	bl	800c7f8 <ptr_to_mem>
 800cdf0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	881a      	ldrh	r2, [r3, #0]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	8bfa      	ldrh	r2, [r7, #30]
 800ce04:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	8a7a      	ldrh	r2, [r7, #18]
 800ce0a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	881b      	ldrh	r3, [r3, #0]
 800ce16:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 800ce1a:	d00b      	beq.n	800ce34 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	881b      	ldrh	r3, [r3, #0]
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff fce9 	bl	800c7f8 <ptr_to_mem>
 800ce26:	4602      	mov	r2, r0
 800ce28:	8a7b      	ldrh	r3, [r7, #18]
 800ce2a:	8053      	strh	r3, [r2, #2]
 800ce2c:	e002      	b.n	800ce34 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	2201      	movs	r2, #1
 800ce32:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ce34:	4b34      	ldr	r3, [pc, #208]	@ (800cf08 <mem_malloc+0x1d0>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	697a      	ldr	r2, [r7, #20]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d127      	bne.n	800ce8e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800ce3e:	4b32      	ldr	r3, [pc, #200]	@ (800cf08 <mem_malloc+0x1d0>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ce44:	e005      	b.n	800ce52 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	881b      	ldrh	r3, [r3, #0]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7ff fcd4 	bl	800c7f8 <ptr_to_mem>
 800ce50:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	791b      	ldrb	r3, [r3, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d004      	beq.n	800ce64 <mem_malloc+0x12c>
 800ce5a:	4b2f      	ldr	r3, [pc, #188]	@ (800cf18 <mem_malloc+0x1e0>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	69ba      	ldr	r2, [r7, #24]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d1f0      	bne.n	800ce46 <mem_malloc+0x10e>
          }
          lfree = cur;
 800ce64:	4a28      	ldr	r2, [pc, #160]	@ (800cf08 <mem_malloc+0x1d0>)
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ce6a:	4b27      	ldr	r3, [pc, #156]	@ (800cf08 <mem_malloc+0x1d0>)
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	4b2a      	ldr	r3, [pc, #168]	@ (800cf18 <mem_malloc+0x1e0>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d00b      	beq.n	800ce8e <mem_malloc+0x156>
 800ce76:	4b24      	ldr	r3, [pc, #144]	@ (800cf08 <mem_malloc+0x1d0>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	791b      	ldrb	r3, [r3, #4]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d006      	beq.n	800ce8e <mem_malloc+0x156>
 800ce80:	4b22      	ldr	r3, [pc, #136]	@ (800cf0c <mem_malloc+0x1d4>)
 800ce82:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800ce86:	4925      	ldr	r1, [pc, #148]	@ (800cf1c <mem_malloc+0x1e4>)
 800ce88:	4822      	ldr	r0, [pc, #136]	@ (800cf14 <mem_malloc+0x1dc>)
 800ce8a:	f00b ff4b 	bl	8018d24 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ce8e:	8bba      	ldrh	r2, [r7, #28]
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	4413      	add	r3, r2
 800ce94:	3308      	adds	r3, #8
 800ce96:	4a20      	ldr	r2, [pc, #128]	@ (800cf18 <mem_malloc+0x1e0>)
 800ce98:	6812      	ldr	r2, [r2, #0]
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d906      	bls.n	800ceac <mem_malloc+0x174>
 800ce9e:	4b1b      	ldr	r3, [pc, #108]	@ (800cf0c <mem_malloc+0x1d4>)
 800cea0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800cea4:	491e      	ldr	r1, [pc, #120]	@ (800cf20 <mem_malloc+0x1e8>)
 800cea6:	481b      	ldr	r0, [pc, #108]	@ (800cf14 <mem_malloc+0x1dc>)
 800cea8:	f00b ff3c 	bl	8018d24 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	f003 0303 	and.w	r3, r3, #3
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d006      	beq.n	800cec4 <mem_malloc+0x18c>
 800ceb6:	4b15      	ldr	r3, [pc, #84]	@ (800cf0c <mem_malloc+0x1d4>)
 800ceb8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800cebc:	4919      	ldr	r1, [pc, #100]	@ (800cf24 <mem_malloc+0x1ec>)
 800cebe:	4815      	ldr	r0, [pc, #84]	@ (800cf14 <mem_malloc+0x1dc>)
 800cec0:	f00b ff30 	bl	8018d24 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	f003 0303 	and.w	r3, r3, #3
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d006      	beq.n	800cedc <mem_malloc+0x1a4>
 800cece:	4b0f      	ldr	r3, [pc, #60]	@ (800cf0c <mem_malloc+0x1d4>)
 800ced0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800ced4:	4914      	ldr	r1, [pc, #80]	@ (800cf28 <mem_malloc+0x1f0>)
 800ced6:	480f      	ldr	r0, [pc, #60]	@ (800cf14 <mem_malloc+0x1dc>)
 800ced8:	f00b ff24 	bl	8018d24 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	3308      	adds	r3, #8
 800cee0:	e00e      	b.n	800cf00 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800cee2:	8bfb      	ldrh	r3, [r7, #30]
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7ff fc87 	bl	800c7f8 <ptr_to_mem>
 800ceea:	4603      	mov	r3, r0
 800ceec:	881b      	ldrh	r3, [r3, #0]
 800ceee:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cef0:	8bfa      	ldrh	r2, [r7, #30]
 800cef2:	8bbb      	ldrh	r3, [r7, #28]
 800cef4:	f5c3 5360 	rsb	r3, r3, #14336	@ 0x3800
 800cef8:	429a      	cmp	r2, r3
 800cefa:	f4ff af44 	bcc.w	800cd86 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cefe:	2300      	movs	r3, #0
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3720      	adds	r7, #32
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	200035cc 	.word	0x200035cc
 800cf0c:	0801af98 	.word	0x0801af98
 800cf10:	0801b124 	.word	0x0801b124
 800cf14:	0801afc4 	.word	0x0801afc4
 800cf18:	200035c8 	.word	0x200035c8
 800cf1c:	0801b138 	.word	0x0801b138
 800cf20:	0801b154 	.word	0x0801b154
 800cf24:	0801b184 	.word	0x0801b184
 800cf28:	0801b1b4 	.word	0x0801b1b4

0800cf2c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b085      	sub	sp, #20
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	3303      	adds	r3, #3
 800cf42:	f023 0303 	bic.w	r3, r3, #3
 800cf46:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cf48:	2300      	movs	r3, #0
 800cf4a:	60fb      	str	r3, [r7, #12]
 800cf4c:	e011      	b.n	800cf72 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	68ba      	ldr	r2, [r7, #8]
 800cf5e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	881b      	ldrh	r3, [r3, #0]
 800cf64:	461a      	mov	r2, r3
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	4413      	add	r3, r2
 800cf6a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	3301      	adds	r3, #1
 800cf70:	60fb      	str	r3, [r7, #12]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	885b      	ldrh	r3, [r3, #2]
 800cf76:	461a      	mov	r2, r3
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	dbe7      	blt.n	800cf4e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cf7e:	bf00      	nop
 800cf80:	bf00      	nop
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf92:	2300      	movs	r3, #0
 800cf94:	80fb      	strh	r3, [r7, #6]
 800cf96:	e009      	b.n	800cfac <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cf98:	88fb      	ldrh	r3, [r7, #6]
 800cf9a:	4a08      	ldr	r2, [pc, #32]	@ (800cfbc <memp_init+0x30>)
 800cf9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7ff ffc3 	bl	800cf2c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cfa6:	88fb      	ldrh	r3, [r7, #6]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	80fb      	strh	r3, [r7, #6]
 800cfac:	88fb      	ldrh	r3, [r7, #6]
 800cfae:	2b08      	cmp	r3, #8
 800cfb0:	d9f2      	bls.n	800cf98 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cfb2:	bf00      	nop
 800cfb4:	bf00      	nop
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	0801d3a0 	.word	0x0801d3a0

0800cfc0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d012      	beq.n	800cffc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	6812      	ldr	r2, [r2, #0]
 800cfde:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f003 0303 	and.w	r3, r3, #3
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d006      	beq.n	800cff8 <do_memp_malloc_pool+0x38>
 800cfea:	4b07      	ldr	r3, [pc, #28]	@ (800d008 <do_memp_malloc_pool+0x48>)
 800cfec:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800cff0:	4906      	ldr	r1, [pc, #24]	@ (800d00c <do_memp_malloc_pool+0x4c>)
 800cff2:	4807      	ldr	r0, [pc, #28]	@ (800d010 <do_memp_malloc_pool+0x50>)
 800cff4:	f00b fe96 	bl	8018d24 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	e000      	b.n	800cffe <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cffc:	2300      	movs	r3, #0
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	0801b1d8 	.word	0x0801b1d8
 800d00c:	0801b1ec 	.word	0x0801b1ec
 800d010:	0801b210 	.word	0x0801b210

0800d014 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d106      	bne.n	800d030 <memp_malloc_pool+0x1c>
 800d022:	4b0a      	ldr	r3, [pc, #40]	@ (800d04c <memp_malloc_pool+0x38>)
 800d024:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d028:	4909      	ldr	r1, [pc, #36]	@ (800d050 <memp_malloc_pool+0x3c>)
 800d02a:	480a      	ldr	r0, [pc, #40]	@ (800d054 <memp_malloc_pool+0x40>)
 800d02c:	f00b fe7a 	bl	8018d24 <iprintf>
  if (desc == NULL) {
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d101      	bne.n	800d03a <memp_malloc_pool+0x26>
    return NULL;
 800d036:	2300      	movs	r3, #0
 800d038:	e003      	b.n	800d042 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff ffc0 	bl	800cfc0 <do_memp_malloc_pool>
 800d040:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d042:	4618      	mov	r0, r3
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	0801b1d8 	.word	0x0801b1d8
 800d050:	0801b238 	.word	0x0801b238
 800d054:	0801b210 	.word	0x0801b210

0800d058 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	4603      	mov	r3, r0
 800d060:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d062:	79fb      	ldrb	r3, [r7, #7]
 800d064:	2b08      	cmp	r3, #8
 800d066:	d901      	bls.n	800d06c <memp_malloc+0x14>
 800d068:	2300      	movs	r3, #0
 800d06a:	e008      	b.n	800d07e <memp_malloc+0x26>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d06c:	79fb      	ldrb	r3, [r7, #7]
 800d06e:	4a06      	ldr	r2, [pc, #24]	@ (800d088 <memp_malloc+0x30>)
 800d070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d074:	4618      	mov	r0, r3
 800d076:	f7ff ffa3 	bl	800cfc0 <do_memp_malloc_pool>
 800d07a:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d07c:	68fb      	ldr	r3, [r7, #12]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	0801d3a0 	.word	0x0801d3a0

0800d08c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	f003 0303 	and.w	r3, r3, #3
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d006      	beq.n	800d0ae <do_memp_free_pool+0x22>
 800d0a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d0cc <do_memp_free_pool+0x40>)
 800d0a2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d0a6:	490a      	ldr	r1, [pc, #40]	@ (800d0d0 <do_memp_free_pool+0x44>)
 800d0a8:	480a      	ldr	r0, [pc, #40]	@ (800d0d4 <do_memp_free_pool+0x48>)
 800d0aa:	f00b fe3b 	bl	8018d24 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d0c4:	bf00      	nop
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	0801b1d8 	.word	0x0801b1d8
 800d0d0:	0801b24c 	.word	0x0801b24c
 800d0d4:	0801b210 	.word	0x0801b210

0800d0d8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d106      	bne.n	800d0f6 <memp_free_pool+0x1e>
 800d0e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d114 <memp_free_pool+0x3c>)
 800d0ea:	f240 1295 	movw	r2, #405	@ 0x195
 800d0ee:	490a      	ldr	r1, [pc, #40]	@ (800d118 <memp_free_pool+0x40>)
 800d0f0:	480a      	ldr	r0, [pc, #40]	@ (800d11c <memp_free_pool+0x44>)
 800d0f2:	f00b fe17 	bl	8018d24 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d007      	beq.n	800d10c <memp_free_pool+0x34>
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d004      	beq.n	800d10c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d102:	6839      	ldr	r1, [r7, #0]
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f7ff ffc1 	bl	800d08c <do_memp_free_pool>
 800d10a:	e000      	b.n	800d10e <memp_free_pool+0x36>
    return;
 800d10c:	bf00      	nop
}
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	0801b1d8 	.word	0x0801b1d8
 800d118:	0801b238 	.word	0x0801b238
 800d11c:	0801b210 	.word	0x0801b210

0800d120 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	4603      	mov	r3, r0
 800d128:	6039      	str	r1, [r7, #0]
 800d12a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d12c:	79fb      	ldrb	r3, [r7, #7]
 800d12e:	2b08      	cmp	r3, #8
 800d130:	d80c      	bhi.n	800d14c <memp_free+0x2c>

  if (mem == NULL) {
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d008      	beq.n	800d14a <memp_free+0x2a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d138:	79fb      	ldrb	r3, [r7, #7]
 800d13a:	4a06      	ldr	r2, [pc, #24]	@ (800d154 <memp_free+0x34>)
 800d13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d140:	6839      	ldr	r1, [r7, #0]
 800d142:	4618      	mov	r0, r3
 800d144:	f7ff ffa2 	bl	800d08c <do_memp_free_pool>
 800d148:	e000      	b.n	800d14c <memp_free+0x2c>
    return;
 800d14a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	0801d3a0 	.word	0x0801d3a0

0800d158 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d158:	b480      	push	{r7}
 800d15a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d15c:	bf00      	nop
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr
	...

0800d168 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	607a      	str	r2, [r7, #4]
 800d174:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d101      	bne.n	800d180 <netif_add+0x18>
 800d17c:	2300      	movs	r3, #0
 800d17e:	e0a5      	b.n	800d2cc <netif_add+0x164>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <netif_add+0x22>
 800d186:	2300      	movs	r3, #0
 800d188:	e0a0      	b.n	800d2cc <netif_add+0x164>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d101      	bne.n	800d194 <netif_add+0x2c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d190:	4b50      	ldr	r3, [pc, #320]	@ (800d2d4 <netif_add+0x16c>)
 800d192:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d101      	bne.n	800d19e <netif_add+0x36>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d19a:	4b4e      	ldr	r3, [pc, #312]	@ (800d2d4 <netif_add+0x16c>)
 800d19c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d101      	bne.n	800d1a8 <netif_add+0x40>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d1a4:	4b4b      	ldr	r3, [pc, #300]	@ (800d2d4 <netif_add+0x16c>)
 800d1a6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	4a46      	ldr	r2, [pc, #280]	@ (800d2d8 <netif_add+0x170>)
 800d1be:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  netif->flags = 0;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	3324      	adds	r3, #36	@ 0x24
 800d1d2:	2208      	movs	r2, #8
 800d1d4:	2100      	movs	r1, #0
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f00b ff4c 	bl	8019074 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	61da      	str	r2, [r3, #28]
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */

  /* remember netif specific state information data */
  netif->state = state;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	6a3a      	ldr	r2, [r7, #32]
 800d1e6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d1e8:	4b3c      	ldr	r3, [pc, #240]	@ (800d2dc <netif_add+0x174>)
 800d1ea:	781a      	ldrb	r2, [r3, #0]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  netif->input = input;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1f6:	611a      	str	r2, [r3, #16]

#if LWIP_ACD
  netif->acd_list = NULL;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  netif->reschedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
#endif /* ENABLE_LOOPBACK */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	68b9      	ldr	r1, [r7, #8]
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f000 f915 	bl	800d434 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	4798      	blx	r3
 800d210:	4603      	mov	r3, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	d001      	beq.n	800d21a <netif_add+0xb2>
    return NULL;
 800d216:	2300      	movs	r3, #0
 800d218:	e058      	b.n	800d2cc <netif_add+0x164>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d220:	2bff      	cmp	r3, #255	@ 0xff
 800d222:	d103      	bne.n	800d22c <netif_add+0xc4>
        netif->num = 0;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2200      	movs	r2, #0
 800d228:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      }
      num_netifs = 0;
 800d22c:	2300      	movs	r3, #0
 800d22e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d230:	4b2b      	ldr	r3, [pc, #172]	@ (800d2e0 <netif_add+0x178>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	617b      	str	r3, [r7, #20]
 800d236:	e02b      	b.n	800d290 <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d238:	697a      	ldr	r2, [r7, #20]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d106      	bne.n	800d24e <netif_add+0xe6>
 800d240:	4b28      	ldr	r3, [pc, #160]	@ (800d2e4 <netif_add+0x17c>)
 800d242:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d246:	4928      	ldr	r1, [pc, #160]	@ (800d2e8 <netif_add+0x180>)
 800d248:	4828      	ldr	r0, [pc, #160]	@ (800d2ec <netif_add+0x184>)
 800d24a:	f00b fd6b 	bl	8018d24 <iprintf>
        num_netifs++;
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	3301      	adds	r3, #1
 800d252:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	2bff      	cmp	r3, #255	@ 0xff
 800d258:	dd06      	ble.n	800d268 <netif_add+0x100>
 800d25a:	4b22      	ldr	r3, [pc, #136]	@ (800d2e4 <netif_add+0x17c>)
 800d25c:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800d260:	4923      	ldr	r1, [pc, #140]	@ (800d2f0 <netif_add+0x188>)
 800d262:	4822      	ldr	r0, [pc, #136]	@ (800d2ec <netif_add+0x184>)
 800d264:	f00b fd5e 	bl	8018d24 <iprintf>
        if (netif2->num == netif->num) {
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d274:	429a      	cmp	r2, r3
 800d276:	d108      	bne.n	800d28a <netif_add+0x122>
          netif->num++;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d27e:	3301      	adds	r3, #1
 800d280:	b2da      	uxtb	r2, r3
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          break;
 800d288:	e005      	b.n	800d296 <netif_add+0x12e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	617b      	str	r3, [r7, #20]
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1d0      	bne.n	800d238 <netif_add+0xd0>
        }
      }
    } while (netif2 != NULL);
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1be      	bne.n	800d21a <netif_add+0xb2>
  }
  if (netif->num == 254) {
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d2a2:	2bfe      	cmp	r3, #254	@ 0xfe
 800d2a4:	d103      	bne.n	800d2ae <netif_add+0x146>
    netif_num = 0;
 800d2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d2dc <netif_add+0x174>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	701a      	strb	r2, [r3, #0]
 800d2ac:	e006      	b.n	800d2bc <netif_add+0x154>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	4b08      	ldr	r3, [pc, #32]	@ (800d2dc <netif_add+0x174>)
 800d2ba:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d2bc:	4b08      	ldr	r3, [pc, #32]	@ (800d2e0 <netif_add+0x178>)
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d2c4:	4a06      	ldr	r2, [pc, #24]	@ (800d2e0 <netif_add+0x178>)
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3718      	adds	r7, #24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	0801d41c 	.word	0x0801d41c
 800d2d8:	0800d687 	.word	0x0800d687
 800d2dc:	2000a300 	.word	0x2000a300
 800d2e0:	2000a2f8 	.word	0x2000a2f8
 800d2e4:	0801b26c 	.word	0x0801b26c
 800d2e8:	0801b2e0 	.word	0x0801b2e0
 800d2ec:	0801b29c 	.word	0x0801b29c
 800d2f0:	0801b2f4 	.word	0x0801b2f4

0800d2f4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d2fe:	6839      	ldr	r1, [r7, #0]
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f002 fb43 	bl	800f98c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d306:	6839      	ldr	r1, [r7, #0]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f006 ff93 	bl	8014234 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d30e:	bf00      	nop
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
	...

0800d318 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b086      	sub	sp, #24
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d106      	bne.n	800d338 <netif_do_set_ipaddr+0x20>
 800d32a:	4b20      	ldr	r3, [pc, #128]	@ (800d3ac <netif_do_set_ipaddr+0x94>)
 800d32c:	f44f 72ee 	mov.w	r2, #476	@ 0x1dc
 800d330:	491f      	ldr	r1, [pc, #124]	@ (800d3b0 <netif_do_set_ipaddr+0x98>)
 800d332:	4820      	ldr	r0, [pc, #128]	@ (800d3b4 <netif_do_set_ipaddr+0x9c>)
 800d334:	f00b fcf6 	bl	8018d24 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d106      	bne.n	800d34c <netif_do_set_ipaddr+0x34>
 800d33e:	4b1b      	ldr	r3, [pc, #108]	@ (800d3ac <netif_do_set_ipaddr+0x94>)
 800d340:	f240 12dd 	movw	r2, #477	@ 0x1dd
 800d344:	491a      	ldr	r1, [pc, #104]	@ (800d3b0 <netif_do_set_ipaddr+0x98>)
 800d346:	481b      	ldr	r0, [pc, #108]	@ (800d3b4 <netif_do_set_ipaddr+0x9c>)
 800d348:	f00b fcec 	bl	8018d24 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_eq(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	3304      	adds	r3, #4
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	429a      	cmp	r2, r3
 800d358:	d023      	beq.n	800d3a2 <netif_do_set_ipaddr+0x8a>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	3304      	adds	r3, #4
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d36a:	f107 0314 	add.w	r3, r7, #20
 800d36e:	4619      	mov	r1, r3
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f7ff ffbf 	bl	800d2f4 <netif_do_ip_addr_changed>

#if LWIP_ACD
    acd_netif_ip_addr_changed(netif, old_addr, &new_addr);
 800d376:	f107 0314 	add.w	r3, r7, #20
 800d37a:	461a      	mov	r2, r3
 800d37c:	6879      	ldr	r1, [r7, #4]
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f007 f9df 	bl	8014742 <acd_netif_ip_addr_changed>
#endif /* LWIP_ACD */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d002      	beq.n	800d390 <netif_do_set_ipaddr+0x78>
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	e000      	b.n	800d392 <netif_do_set_ipaddr+0x7a>
 800d390:	2300      	movs	r3, #0
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d396:	2101      	movs	r1, #1
 800d398:	68f8      	ldr	r0, [r7, #12]
 800d39a:	f000 f8c3 	bl	800d524 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d39e:	2301      	movs	r3, #1
 800d3a0:	e000      	b.n	800d3a4 <netif_do_set_ipaddr+0x8c>
  }
  return 0; /* address unchanged */
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3718      	adds	r7, #24
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	0801b26c 	.word	0x0801b26c
 800d3b0:	0801b324 	.word	0x0801b324
 800d3b4:	0801b29c 	.word	0x0801b29c

0800d3b8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b085      	sub	sp, #20
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(netmask, netif_ip4_netmask(netif)) == 0) {
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	3308      	adds	r3, #8
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d00a      	beq.n	800d3e8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d002      	beq.n	800d3de <netif_do_set_netmask+0x26>
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	e000      	b.n	800d3e0 <netif_do_set_netmask+0x28>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e000      	b.n	800d3ea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d3e8:	2300      	movs	r3, #0
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3714      	adds	r7, #20
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr

0800d3f6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d3f6:	b480      	push	{r7}
 800d3f8:	b085      	sub	sp, #20
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	60f8      	str	r0, [r7, #12]
 800d3fe:	60b9      	str	r1, [r7, #8]
 800d400:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_eq(gw, netif_ip4_gw(netif)) == 0) {
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	330c      	adds	r3, #12
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d00a      	beq.n	800d426 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d002      	beq.n	800d41c <netif_do_set_gw+0x26>
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	e000      	b.n	800d41e <netif_do_set_gw+0x28>
 800d41c:	2300      	movs	r3, #0
 800d41e:	68fa      	ldr	r2, [r7, #12]
 800d420:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d422:	2301      	movs	r3, #1
 800d424:	e000      	b.n	800d428 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d426:	2300      	movs	r3, #0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3714      	adds	r7, #20
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b088      	sub	sp, #32
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	60b9      	str	r1, [r7, #8]
 800d43e:	607a      	str	r2, [r7, #4]
 800d440:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d442:	2300      	movs	r3, #0
 800d444:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d446:	2300      	movs	r3, #0
 800d448:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d101      	bne.n	800d454 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d450:	4b1c      	ldr	r3, [pc, #112]	@ (800d4c4 <netif_set_addr+0x90>)
 800d452:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d101      	bne.n	800d45e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d45a:	4b1a      	ldr	r3, [pc, #104]	@ (800d4c4 <netif_set_addr+0x90>)
 800d45c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d101      	bne.n	800d468 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d464:	4b17      	ldr	r3, [pc, #92]	@ (800d4c4 <netif_set_addr+0x90>)
 800d466:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d003      	beq.n	800d476 <netif_set_addr+0x42>
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <netif_set_addr+0x46>
 800d476:	2301      	movs	r3, #1
 800d478:	e000      	b.n	800d47c <netif_set_addr+0x48>
 800d47a:	2300      	movs	r3, #0
 800d47c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d006      	beq.n	800d492 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d484:	f107 0310 	add.w	r3, r7, #16
 800d488:	461a      	mov	r2, r3
 800d48a:	68b9      	ldr	r1, [r7, #8]
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f7ff ff43 	bl	800d318 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d492:	69fa      	ldr	r2, [r7, #28]
 800d494:	6879      	ldr	r1, [r7, #4]
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f7ff ff8e 	bl	800d3b8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d49c:	69ba      	ldr	r2, [r7, #24]
 800d49e:	6839      	ldr	r1, [r7, #0]
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f7ff ffa8 	bl	800d3f6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d106      	bne.n	800d4ba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d4ac:	f107 0310 	add.w	r3, r7, #16
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	68b9      	ldr	r1, [r7, #8]
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f7ff ff2f 	bl	800d318 <netif_do_set_ipaddr>
  }
  if (change_reason != LWIP_NSC_NONE) {
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d4ba:	bf00      	nop
 800d4bc:	3720      	adds	r7, #32
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	0801d41c 	.word	0x0801d41c

0800d4c8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d4d0:	4a04      	ldr	r2, [pc, #16]	@ (800d4e4 <netif_set_default+0x1c>)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d4d6:	bf00      	nop
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop
 800d4e4:	2000a2fc 	.word	0x2000a2fc

0800d4e8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d013      	beq.n	800d51e <netif_set_up+0x36>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10c      	bne.n	800d51e <netif_set_up+0x36>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d50a:	f043 0301 	orr.w	r3, r3, #1
 800d50e:	b2da      	uxtb	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d516:	2103      	movs	r1, #3
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 f803 	bl	800d524 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	460b      	mov	r3, r1
 800d52e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d106      	bne.n	800d544 <netif_issue_reports+0x20>
 800d536:	4b0f      	ldr	r3, [pc, #60]	@ (800d574 <netif_issue_reports+0x50>)
 800d538:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800d53c:	490e      	ldr	r1, [pc, #56]	@ (800d578 <netif_issue_reports+0x54>)
 800d53e:	480f      	ldr	r0, [pc, #60]	@ (800d57c <netif_issue_reports+0x58>)
 800d540:	f00b fbf0 	bl	8018d24 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d54a:	f003 0304 	and.w	r3, r3, #4
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00b      	beq.n	800d56a <netif_issue_reports+0x46>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d558:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d004      	beq.n	800d56a <netif_issue_reports+0x46>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d560:	78fb      	ldrb	r3, [r7, #3]
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	2b00      	cmp	r3, #0
 800d568:	e000      	b.n	800d56c <netif_issue_reports+0x48>
    return;
 800d56a:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d56c:	3708      	adds	r7, #8
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	0801b26c 	.word	0x0801b26c
 800d578:	0801b334 	.word	0x0801b334
 800d57c:	0801b29c 	.word	0x0801b29c

0800d580 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d019      	beq.n	800d5c2 <netif_set_down+0x42>

  if (netif->flags & NETIF_FLAG_UP) {
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d594:	f003 0301 	and.w	r3, r3, #1
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d012      	beq.n	800d5c2 <netif_set_down+0x42>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d5a2:	f023 0301 	bic.w	r3, r3, #1
 800d5a6:	b2da      	uxtb	r2, r3
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d5b4:	f003 0308 	and.w	r3, r3, #8
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d002      	beq.n	800d5c2 <netif_set_down+0x42>
      etharp_cleanup_netif(netif);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f009 f9b1 	bl	8016924 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d01e      	beq.n	800d614 <netif_set_link_up+0x4c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d5dc:	f003 0304 	and.w	r3, r3, #4
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d117      	bne.n	800d614 <netif_set_link_up+0x4c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d5ea:	f043 0304 	orr.w	r3, r3, #4
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#if LWIP_DHCP
    dhcp_network_changed_link_up(netif);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f007 fce6 	bl	8014fc8 <dhcp_network_changed_link_up>

#if LWIP_AUTOIP
    autoip_network_changed_link_up(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d5fc:	2103      	movs	r1, #3
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f7ff ff90 	bl	800d524 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	69db      	ldr	r3, [r3, #28]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d003      	beq.n	800d614 <netif_set_link_up+0x4c>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	69db      	ldr	r3, [r3, #28]
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}

0800d61a <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d61a:	b580      	push	{r7, lr}
 800d61c:	b082      	sub	sp, #8
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d01a      	beq.n	800d65e <netif_set_link_down+0x44>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d62e:	f003 0304 	and.w	r3, r3, #4
 800d632:	2b00      	cmp	r3, #0
 800d634:	d013      	beq.n	800d65e <netif_set_link_down+0x44>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d63c:	f023 0304 	bic.w	r3, r3, #4
 800d640:	b2da      	uxtb	r2, r3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
#if LWIP_AUTOIP
    autoip_network_changed_link_down(netif);
#endif /* LWIP_AUTOIP */

#if LWIP_ACD
    acd_network_changed_link_down(netif);
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f006 fec8 	bl	80143de <acd_network_changed_link_down>

#if LWIP_IPV6 && LWIP_ND6_ALLOW_RA_UPDATES
    netif->mtu6 = netif->mtu;
#endif

    NETIF_LINK_CALLBACK(netif);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	69db      	ldr	r3, [r3, #28]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d003      	beq.n	800d65e <netif_set_link_down+0x44>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	69db      	ldr	r3, [r3, #28]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d002      	beq.n	800d67a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	683a      	ldr	r2, [r7, #0]
 800d678:	61da      	str	r2, [r3, #28]
  }
}
 800d67a:	bf00      	nop
 800d67c:	370c      	adds	r7, #12
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d686:	b480      	push	{r7}
 800d688:	b085      	sub	sp, #20
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	60f8      	str	r0, [r7, #12]
 800d68e:	60b9      	str	r1, [r7, #8]
 800d690:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d692:	f06f 030b 	mvn.w	r3, #11
}
 800d696:	4618      	mov	r0, r3
 800d698:	3714      	adds	r7, #20
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr
	...

0800d6a4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b085      	sub	sp, #20
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d6ae:	79fb      	ldrb	r3, [r7, #7]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d013      	beq.n	800d6dc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d6b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d6ec <netif_get_by_index+0x48>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	60fb      	str	r3, [r7, #12]
 800d6ba:	e00c      	b.n	800d6d6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	79fa      	ldrb	r2, [r7, #7]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d101      	bne.n	800d6d0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	e006      	b.n	800d6de <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	60fb      	str	r3, [r7, #12]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d1ef      	bne.n	800d6bc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d6dc:	2300      	movs	r3, #0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3714      	adds	r7, #20
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	2000a2f8 	.word	0x2000a2f8

0800d6f0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d6f6:	4b0c      	ldr	r3, [pc, #48]	@ (800d728 <pbuf_free_ooseq+0x38>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d6fc:	4b0b      	ldr	r3, [pc, #44]	@ (800d72c <pbuf_free_ooseq+0x3c>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	607b      	str	r3, [r7, #4]
 800d702:	e00a      	b.n	800d71a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d003      	beq.n	800d714 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f002 f97b 	bl	800fa08 <tcp_free_ooseq>
      return;
 800d712:	e005      	b.n	800d720 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	607b      	str	r3, [r7, #4]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1f1      	bne.n	800d704 <pbuf_free_ooseq+0x14>
    }
  }
}
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	2000a301 	.word	0x2000a301
 800d72c:	2000a310 	.word	0x2000a310

0800d730 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d730:	b480      	push	{r7}
 800d732:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d734:	4b03      	ldr	r3, [pc, #12]	@ (800d744 <pbuf_pool_is_empty+0x14>)
 800d736:	2201      	movs	r2, #1
 800d738:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d73a:	bf00      	nop
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr
 800d744:	2000a301 	.word	0x2000a301

0800d748 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d748:	b480      	push	{r7}
 800d74a:	b085      	sub	sp, #20
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	4611      	mov	r1, r2
 800d754:	461a      	mov	r2, r3
 800d756:	460b      	mov	r3, r1
 800d758:	80fb      	strh	r3, [r7, #6]
 800d75a:	4613      	mov	r3, r2
 800d75c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2200      	movs	r2, #0
 800d762:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	88fa      	ldrh	r2, [r7, #6]
 800d76e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	88ba      	ldrh	r2, [r7, #4]
 800d774:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d776:	8b3b      	ldrh	r3, [r7, #24]
 800d778:	b2da      	uxtb	r2, r3
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	7f3a      	ldrb	r2, [r7, #28]
 800d782:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2201      	movs	r2, #1
 800d788:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2200      	movs	r2, #0
 800d78e:	73da      	strb	r2, [r3, #15]
}
 800d790:	bf00      	nop
 800d792:	3714      	adds	r7, #20
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b08c      	sub	sp, #48	@ 0x30
 800d7a0:	af02      	add	r7, sp, #8
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	71fb      	strb	r3, [r7, #7]
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	80bb      	strh	r3, [r7, #4]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d7ae:	79fb      	ldrb	r3, [r7, #7]
 800d7b0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d7b2:	887b      	ldrh	r3, [r7, #2]
 800d7b4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d7b8:	d07f      	beq.n	800d8ba <pbuf_alloc+0x11e>
 800d7ba:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d7be:	f300 80c8 	bgt.w	800d952 <pbuf_alloc+0x1b6>
 800d7c2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d7c6:	d010      	beq.n	800d7ea <pbuf_alloc+0x4e>
 800d7c8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d7cc:	f300 80c1 	bgt.w	800d952 <pbuf_alloc+0x1b6>
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d002      	beq.n	800d7da <pbuf_alloc+0x3e>
 800d7d4:	2b41      	cmp	r3, #65	@ 0x41
 800d7d6:	f040 80bc 	bne.w	800d952 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d7da:	887a      	ldrh	r2, [r7, #2]
 800d7dc:	88bb      	ldrh	r3, [r7, #4]
 800d7de:	4619      	mov	r1, r3
 800d7e0:	2000      	movs	r0, #0
 800d7e2:	f000 f8d1 	bl	800d988 <pbuf_alloc_reference>
 800d7e6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800d7e8:	e0bd      	b.n	800d966 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d7f2:	88bb      	ldrh	r3, [r7, #4]
 800d7f4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d7f6:	2008      	movs	r0, #8
 800d7f8:	f7ff fc2e 	bl	800d058 <memp_malloc>
 800d7fc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d109      	bne.n	800d818 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d804:	f7ff ff94 	bl	800d730 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d002      	beq.n	800d814 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d80e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d810:	f000 faaa 	bl	800dd68 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d814:	2300      	movs	r3, #0
 800d816:	e0a7      	b.n	800d968 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d818:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d81a:	3303      	adds	r3, #3
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	f023 0303 	bic.w	r3, r3, #3
 800d822:	b29b      	uxth	r3, r3
 800d824:	f5c3 63c0 	rsb	r3, r3, #1536	@ 0x600
 800d828:	b29b      	uxth	r3, r3
 800d82a:	8b7a      	ldrh	r2, [r7, #26]
 800d82c:	4293      	cmp	r3, r2
 800d82e:	bf28      	it	cs
 800d830:	4613      	movcs	r3, r2
 800d832:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d834:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d836:	3310      	adds	r3, #16
 800d838:	693a      	ldr	r2, [r7, #16]
 800d83a:	4413      	add	r3, r2
 800d83c:	3303      	adds	r3, #3
 800d83e:	f023 0303 	bic.w	r3, r3, #3
 800d842:	4618      	mov	r0, r3
 800d844:	89f9      	ldrh	r1, [r7, #14]
 800d846:	8b7a      	ldrh	r2, [r7, #26]
 800d848:	2300      	movs	r3, #0
 800d84a:	9301      	str	r3, [sp, #4]
 800d84c:	887b      	ldrh	r3, [r7, #2]
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	460b      	mov	r3, r1
 800d852:	4601      	mov	r1, r0
 800d854:	6938      	ldr	r0, [r7, #16]
 800d856:	f7ff ff77 	bl	800d748 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	f003 0303 	and.w	r3, r3, #3
 800d862:	2b00      	cmp	r3, #0
 800d864:	d006      	beq.n	800d874 <pbuf_alloc+0xd8>
 800d866:	4b42      	ldr	r3, [pc, #264]	@ (800d970 <pbuf_alloc+0x1d4>)
 800d868:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d86c:	4941      	ldr	r1, [pc, #260]	@ (800d974 <pbuf_alloc+0x1d8>)
 800d86e:	4842      	ldr	r0, [pc, #264]	@ (800d978 <pbuf_alloc+0x1dc>)
 800d870:	f00b fa58 	bl	8018d24 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d874:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d876:	3303      	adds	r3, #3
 800d878:	f023 0303 	bic.w	r3, r3, #3
 800d87c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d880:	d106      	bne.n	800d890 <pbuf_alloc+0xf4>
 800d882:	4b3b      	ldr	r3, [pc, #236]	@ (800d970 <pbuf_alloc+0x1d4>)
 800d884:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800d888:	493c      	ldr	r1, [pc, #240]	@ (800d97c <pbuf_alloc+0x1e0>)
 800d88a:	483b      	ldr	r0, [pc, #236]	@ (800d978 <pbuf_alloc+0x1dc>)
 800d88c:	f00b fa4a 	bl	8018d24 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d892:	2b00      	cmp	r3, #0
 800d894:	d102      	bne.n	800d89c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	627b      	str	r3, [r7, #36]	@ 0x24
 800d89a:	e002      	b.n	800d8a2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	693a      	ldr	r2, [r7, #16]
 800d8a0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d8a6:	8b7a      	ldrh	r2, [r7, #26]
 800d8a8:	89fb      	ldrh	r3, [r7, #14]
 800d8aa:	1ad3      	subs	r3, r2, r3
 800d8ac:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800d8b2:	8b7b      	ldrh	r3, [r7, #26]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d19e      	bne.n	800d7f6 <pbuf_alloc+0x5a>
      break;
 800d8b8:	e055      	b.n	800d966 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      mem_size_t payload_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d8ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d8bc:	3303      	adds	r3, #3
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	f023 0303 	bic.w	r3, r3, #3
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	88bb      	ldrh	r3, [r7, #4]
 800d8c8:	3303      	adds	r3, #3
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	f023 0303 	bic.w	r3, r3, #3
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	4413      	add	r3, r2
 800d8d4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d8d6:	8b3b      	ldrh	r3, [r7, #24]
 800d8d8:	3310      	adds	r3, #16
 800d8da:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d8dc:	8b3a      	ldrh	r2, [r7, #24]
 800d8de:	88bb      	ldrh	r3, [r7, #4]
 800d8e0:	3303      	adds	r3, #3
 800d8e2:	f023 0303 	bic.w	r3, r3, #3
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d306      	bcc.n	800d8f8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d8ea:	8afa      	ldrh	r2, [r7, #22]
 800d8ec:	88bb      	ldrh	r3, [r7, #4]
 800d8ee:	3303      	adds	r3, #3
 800d8f0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d201      	bcs.n	800d8fc <pbuf_alloc+0x160>
        return NULL;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	e035      	b.n	800d968 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d8fc:	8afb      	ldrh	r3, [r7, #22]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7ff fa1a 	bl	800cd38 <mem_malloc>
 800d904:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800d906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d101      	bne.n	800d910 <pbuf_alloc+0x174>
        return NULL;
 800d90c:	2300      	movs	r3, #0
 800d90e:	e02b      	b.n	800d968 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d910:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d912:	3310      	adds	r3, #16
 800d914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d916:	4413      	add	r3, r2
 800d918:	3303      	adds	r3, #3
 800d91a:	f023 0303 	bic.w	r3, r3, #3
 800d91e:	4618      	mov	r0, r3
 800d920:	88b9      	ldrh	r1, [r7, #4]
 800d922:	88ba      	ldrh	r2, [r7, #4]
 800d924:	2300      	movs	r3, #0
 800d926:	9301      	str	r3, [sp, #4]
 800d928:	887b      	ldrh	r3, [r7, #2]
 800d92a:	9300      	str	r3, [sp, #0]
 800d92c:	460b      	mov	r3, r1
 800d92e:	4601      	mov	r1, r0
 800d930:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d932:	f7ff ff09 	bl	800d748 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	f003 0303 	and.w	r3, r3, #3
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d010      	beq.n	800d964 <pbuf_alloc+0x1c8>
 800d942:	4b0b      	ldr	r3, [pc, #44]	@ (800d970 <pbuf_alloc+0x1d4>)
 800d944:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800d948:	490d      	ldr	r1, [pc, #52]	@ (800d980 <pbuf_alloc+0x1e4>)
 800d94a:	480b      	ldr	r0, [pc, #44]	@ (800d978 <pbuf_alloc+0x1dc>)
 800d94c:	f00b f9ea 	bl	8018d24 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d950:	e008      	b.n	800d964 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d952:	4b07      	ldr	r3, [pc, #28]	@ (800d970 <pbuf_alloc+0x1d4>)
 800d954:	f240 1227 	movw	r2, #295	@ 0x127
 800d958:	490a      	ldr	r1, [pc, #40]	@ (800d984 <pbuf_alloc+0x1e8>)
 800d95a:	4807      	ldr	r0, [pc, #28]	@ (800d978 <pbuf_alloc+0x1dc>)
 800d95c:	f00b f9e2 	bl	8018d24 <iprintf>
      return NULL;
 800d960:	2300      	movs	r3, #0
 800d962:	e001      	b.n	800d968 <pbuf_alloc+0x1cc>
      break;
 800d964:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3728      	adds	r7, #40	@ 0x28
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	0801b358 	.word	0x0801b358
 800d974:	0801b36c 	.word	0x0801b36c
 800d978:	0801b39c 	.word	0x0801b39c
 800d97c:	0801b3c4 	.word	0x0801b3c4
 800d980:	0801b3f8 	.word	0x0801b3f8
 800d984:	0801b424 	.word	0x0801b424

0800d988 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b086      	sub	sp, #24
 800d98c:	af02      	add	r7, sp, #8
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	460b      	mov	r3, r1
 800d992:	807b      	strh	r3, [r7, #2]
 800d994:	4613      	mov	r3, r2
 800d996:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d998:	883b      	ldrh	r3, [r7, #0]
 800d99a:	2b41      	cmp	r3, #65	@ 0x41
 800d99c:	d009      	beq.n	800d9b2 <pbuf_alloc_reference+0x2a>
 800d99e:	883b      	ldrh	r3, [r7, #0]
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d006      	beq.n	800d9b2 <pbuf_alloc_reference+0x2a>
 800d9a4:	4b0f      	ldr	r3, [pc, #60]	@ (800d9e4 <pbuf_alloc_reference+0x5c>)
 800d9a6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800d9aa:	490f      	ldr	r1, [pc, #60]	@ (800d9e8 <pbuf_alloc_reference+0x60>)
 800d9ac:	480f      	ldr	r0, [pc, #60]	@ (800d9ec <pbuf_alloc_reference+0x64>)
 800d9ae:	f00b f9b9 	bl	8018d24 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d9b2:	2007      	movs	r0, #7
 800d9b4:	f7ff fb50 	bl	800d058 <memp_malloc>
 800d9b8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d101      	bne.n	800d9c4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	e00b      	b.n	800d9dc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d9c4:	8879      	ldrh	r1, [r7, #2]
 800d9c6:	887a      	ldrh	r2, [r7, #2]
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	9301      	str	r3, [sp, #4]
 800d9cc:	883b      	ldrh	r3, [r7, #0]
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	6879      	ldr	r1, [r7, #4]
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f7ff feb7 	bl	800d748 <pbuf_init_alloced_pbuf>
  return p;
 800d9da:	68fb      	ldr	r3, [r7, #12]
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3710      	adds	r7, #16
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	0801b358 	.word	0x0801b358
 800d9e8:	0801b440 	.word	0x0801b440
 800d9ec:	0801b39c 	.word	0x0801b39c

0800d9f0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b088      	sub	sp, #32
 800d9f4:	af02      	add	r7, sp, #8
 800d9f6:	607b      	str	r3, [r7, #4]
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	73fb      	strb	r3, [r7, #15]
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	81bb      	strh	r3, [r7, #12]
 800da00:	4613      	mov	r3, r2
 800da02:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800da04:	7bfb      	ldrb	r3, [r7, #15]
 800da06:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800da08:	8a7b      	ldrh	r3, [r7, #18]
 800da0a:	3303      	adds	r3, #3
 800da0c:	f023 0203 	bic.w	r2, r3, #3
 800da10:	89bb      	ldrh	r3, [r7, #12]
 800da12:	441a      	add	r2, r3
 800da14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da16:	429a      	cmp	r2, r3
 800da18:	d901      	bls.n	800da1e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800da1a:	2300      	movs	r3, #0
 800da1c:	e018      	b.n	800da50 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800da1e:	6a3b      	ldr	r3, [r7, #32]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d007      	beq.n	800da34 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800da24:	8a7b      	ldrh	r3, [r7, #18]
 800da26:	3303      	adds	r3, #3
 800da28:	f023 0303 	bic.w	r3, r3, #3
 800da2c:	6a3a      	ldr	r2, [r7, #32]
 800da2e:	4413      	add	r3, r2
 800da30:	617b      	str	r3, [r7, #20]
 800da32:	e001      	b.n	800da38 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800da34:	2300      	movs	r3, #0
 800da36:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	89b9      	ldrh	r1, [r7, #12]
 800da3c:	89ba      	ldrh	r2, [r7, #12]
 800da3e:	2302      	movs	r3, #2
 800da40:	9301      	str	r3, [sp, #4]
 800da42:	897b      	ldrh	r3, [r7, #10]
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	460b      	mov	r3, r1
 800da48:	6979      	ldr	r1, [r7, #20]
 800da4a:	f7ff fe7d 	bl	800d748 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800da4e:	687b      	ldr	r3, [r7, #4]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3718      	adds	r7, #24
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	460b      	mov	r3, r1
 800da62:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d106      	bne.n	800da78 <pbuf_realloc+0x20>
 800da6a:	4b3f      	ldr	r3, [pc, #252]	@ (800db68 <pbuf_realloc+0x110>)
 800da6c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800da70:	493e      	ldr	r1, [pc, #248]	@ (800db6c <pbuf_realloc+0x114>)
 800da72:	483f      	ldr	r0, [pc, #252]	@ (800db70 <pbuf_realloc+0x118>)
 800da74:	f00b f956 	bl	8018d24 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	891b      	ldrh	r3, [r3, #8]
 800da7c:	887a      	ldrh	r2, [r7, #2]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d26e      	bcs.n	800db60 <pbuf_realloc+0x108>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	891a      	ldrh	r2, [r3, #8]
 800da86:	887b      	ldrh	r3, [r7, #2]
 800da88:	1ad3      	subs	r3, r2, r3
 800da8a:	823b      	strh	r3, [r7, #16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800da8c:	887b      	ldrh	r3, [r7, #2]
 800da8e:	827b      	strh	r3, [r7, #18]
  q = p;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800da94:	e018      	b.n	800dac8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	895b      	ldrh	r3, [r3, #10]
 800da9a:	8a7a      	ldrh	r2, [r7, #18]
 800da9c:	1ad3      	subs	r3, r2, r3
 800da9e:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	891a      	ldrh	r2, [r3, #8]
 800daa4:	8a3b      	ldrh	r3, [r7, #16]
 800daa6:	1ad3      	subs	r3, r2, r3
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d106      	bne.n	800dac8 <pbuf_realloc+0x70>
 800daba:	4b2b      	ldr	r3, [pc, #172]	@ (800db68 <pbuf_realloc+0x110>)
 800dabc:	f240 12af 	movw	r2, #431	@ 0x1af
 800dac0:	492c      	ldr	r1, [pc, #176]	@ (800db74 <pbuf_realloc+0x11c>)
 800dac2:	482b      	ldr	r0, [pc, #172]	@ (800db70 <pbuf_realloc+0x118>)
 800dac4:	f00b f92e 	bl	8018d24 <iprintf>
  while (rem_len > q->len) {
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	895b      	ldrh	r3, [r3, #10]
 800dacc:	8a7a      	ldrh	r2, [r7, #18]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d8e1      	bhi.n	800da96 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	7b1b      	ldrb	r3, [r3, #12]
 800dad6:	f003 030f 	and.w	r3, r3, #15
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d12c      	bne.n	800db38 <pbuf_realloc+0xe0>
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	895b      	ldrh	r3, [r3, #10]
 800dae2:	8a7a      	ldrh	r2, [r7, #18]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d027      	beq.n	800db38 <pbuf_realloc+0xe0>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	7b5b      	ldrb	r3, [r3, #13]
 800daec:	f003 0302 	and.w	r3, r3, #2
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d121      	bne.n	800db38 <pbuf_realloc+0xe0>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    struct pbuf *r = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	685a      	ldr	r2, [r3, #4]
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	1ad3      	subs	r3, r2, r3
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	8a7b      	ldrh	r3, [r7, #18]
 800db00:	4413      	add	r3, r2
 800db02:	b29b      	uxth	r3, r3
 800db04:	4619      	mov	r1, r3
 800db06:	6978      	ldr	r0, [r7, #20]
 800db08:	f7ff f81a 	bl	800cb40 <mem_trim>
 800db0c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned r == NULL", r != NULL);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d106      	bne.n	800db22 <pbuf_realloc+0xca>
 800db14:	4b14      	ldr	r3, [pc, #80]	@ (800db68 <pbuf_realloc+0x110>)
 800db16:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800db1a:	4917      	ldr	r1, [pc, #92]	@ (800db78 <pbuf_realloc+0x120>)
 800db1c:	4814      	ldr	r0, [pc, #80]	@ (800db70 <pbuf_realloc+0x118>)
 800db1e:	f00b f901 	bl	8018d24 <iprintf>
    /* help to detect faulty overridden implementation of mem_trim */
    LWIP_ASSERT("mem_trim returned r != q", r == q);
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	429a      	cmp	r2, r3
 800db28:	d006      	beq.n	800db38 <pbuf_realloc+0xe0>
 800db2a:	4b0f      	ldr	r3, [pc, #60]	@ (800db68 <pbuf_realloc+0x110>)
 800db2c:	f240 12bf 	movw	r2, #447	@ 0x1bf
 800db30:	4912      	ldr	r1, [pc, #72]	@ (800db7c <pbuf_realloc+0x124>)
 800db32:	480f      	ldr	r0, [pc, #60]	@ (800db70 <pbuf_realloc+0x118>)
 800db34:	f00b f8f6 	bl	8018d24 <iprintf>
    LWIP_UNUSED_ARG(r);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	8a7a      	ldrh	r2, [r7, #18]
 800db3c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	895a      	ldrh	r2, [r3, #10]
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d004      	beq.n	800db58 <pbuf_realloc+0x100>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4618      	mov	r0, r3
 800db54:	f000 f908 	bl	800dd68 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	2200      	movs	r2, #0
 800db5c:	601a      	str	r2, [r3, #0]
 800db5e:	e000      	b.n	800db62 <pbuf_realloc+0x10a>
    return;
 800db60:	bf00      	nop

}
 800db62:	3718      	adds	r7, #24
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}
 800db68:	0801b358 	.word	0x0801b358
 800db6c:	0801b454 	.word	0x0801b454
 800db70:	0801b39c 	.word	0x0801b39c
 800db74:	0801b46c 	.word	0x0801b46c
 800db78:	0801b484 	.word	0x0801b484
 800db7c:	0801b4a0 	.word	0x0801b4a0

0800db80 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	4613      	mov	r3, r2
 800db8c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d106      	bne.n	800dba2 <pbuf_add_header_impl+0x22>
 800db94:	4b2b      	ldr	r3, [pc, #172]	@ (800dc44 <pbuf_add_header_impl+0xc4>)
 800db96:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800db9a:	492b      	ldr	r1, [pc, #172]	@ (800dc48 <pbuf_add_header_impl+0xc8>)
 800db9c:	482b      	ldr	r0, [pc, #172]	@ (800dc4c <pbuf_add_header_impl+0xcc>)
 800db9e:	f00b f8c1 	bl	8018d24 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d003      	beq.n	800dbb0 <pbuf_add_header_impl+0x30>
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbae:	d301      	bcc.n	800dbb4 <pbuf_add_header_impl+0x34>
    return 1;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	e043      	b.n	800dc3c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d101      	bne.n	800dbbe <pbuf_add_header_impl+0x3e>
    return 0;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	e03e      	b.n	800dc3c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	891a      	ldrh	r2, [r3, #8]
 800dbc6:	8a7b      	ldrh	r3, [r7, #18]
 800dbc8:	4413      	add	r3, r2
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	8a7a      	ldrh	r2, [r7, #18]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d901      	bls.n	800dbd6 <pbuf_add_header_impl+0x56>
    return 1;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e032      	b.n	800dc3c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	7b1b      	ldrb	r3, [r3, #12]
 800dbda:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dbdc:	8a3b      	ldrh	r3, [r7, #16]
 800dbde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d00c      	beq.n	800dc00 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	685a      	ldr	r2, [r3, #4]
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	425b      	negs	r3, r3
 800dbee:	4413      	add	r3, r2
 800dbf0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	3310      	adds	r3, #16
 800dbf6:	697a      	ldr	r2, [r7, #20]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d20d      	bcs.n	800dc18 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	e01d      	b.n	800dc3c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dc00:	79fb      	ldrb	r3, [r7, #7]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d006      	beq.n	800dc14 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	685a      	ldr	r2, [r3, #4]
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	425b      	negs	r3, r3
 800dc0e:	4413      	add	r3, r2
 800dc10:	617b      	str	r3, [r7, #20]
 800dc12:	e001      	b.n	800dc18 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dc14:	2301      	movs	r3, #1
 800dc16:	e011      	b.n	800dc3c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	697a      	ldr	r2, [r7, #20]
 800dc1c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	895a      	ldrh	r2, [r3, #10]
 800dc22:	8a7b      	ldrh	r3, [r7, #18]
 800dc24:	4413      	add	r3, r2
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	891a      	ldrh	r2, [r3, #8]
 800dc30:	8a7b      	ldrh	r3, [r7, #18]
 800dc32:	4413      	add	r3, r2
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	811a      	strh	r2, [r3, #8]


  return 0;
 800dc3a:	2300      	movs	r3, #0
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3718      	adds	r7, #24
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	0801b358 	.word	0x0801b358
 800dc48:	0801b4bc 	.word	0x0801b4bc
 800dc4c:	0801b39c 	.word	0x0801b39c

0800dc50 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	6839      	ldr	r1, [r7, #0]
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f7ff ff8e 	bl	800db80 <pbuf_add_header_impl>
 800dc64:	4603      	mov	r3, r0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
	...

0800dc70 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d106      	bne.n	800dc8e <pbuf_remove_header+0x1e>
 800dc80:	4b1c      	ldr	r3, [pc, #112]	@ (800dcf4 <pbuf_remove_header+0x84>)
 800dc82:	f240 224e 	movw	r2, #590	@ 0x24e
 800dc86:	491c      	ldr	r1, [pc, #112]	@ (800dcf8 <pbuf_remove_header+0x88>)
 800dc88:	481c      	ldr	r0, [pc, #112]	@ (800dcfc <pbuf_remove_header+0x8c>)
 800dc8a:	f00b f84b 	bl	8018d24 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d003      	beq.n	800dc9c <pbuf_remove_header+0x2c>
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc9a:	d301      	bcc.n	800dca0 <pbuf_remove_header+0x30>
    return 1;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e025      	b.n	800dcec <pbuf_remove_header+0x7c>
  }
  if (header_size_decrement == 0) {
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d101      	bne.n	800dcaa <pbuf_remove_header+0x3a>
    return 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	e020      	b.n	800dcec <pbuf_remove_header+0x7c>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	895b      	ldrh	r3, [r3, #10]
 800dcb2:	89fa      	ldrh	r2, [r7, #14]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d901      	bls.n	800dcbc <pbuf_remove_header+0x4c>
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e017      	b.n	800dcec <pbuf_remove_header+0x7c>

  /* remember current payload pointer */
  payload = p->payload;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	685a      	ldr	r2, [r3, #4]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	441a      	add	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	895a      	ldrh	r2, [r3, #10]
 800dcd2:	89fb      	ldrh	r3, [r7, #14]
 800dcd4:	1ad3      	subs	r3, r2, r3
 800dcd6:	b29a      	uxth	r2, r3
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	891a      	ldrh	r2, [r3, #8]
 800dce0:	89fb      	ldrh	r3, [r7, #14]
 800dce2:	1ad3      	subs	r3, r2, r3
 800dce4:	b29a      	uxth	r2, r3
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dcea:	2300      	movs	r3, #0
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3710      	adds	r7, #16
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	0801b358 	.word	0x0801b358
 800dcf8:	0801b4bc 	.word	0x0801b4bc
 800dcfc:	0801b39c 	.word	0x0801b39c

0800dd00 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	460b      	mov	r3, r1
 800dd0a:	807b      	strh	r3, [r7, #2]
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dd10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	da08      	bge.n	800dd2a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dd18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd1c:	425b      	negs	r3, r3
 800dd1e:	4619      	mov	r1, r3
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7ff ffa5 	bl	800dc70 <pbuf_remove_header>
 800dd26:	4603      	mov	r3, r0
 800dd28:	e007      	b.n	800dd3a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dd2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd2e:	787a      	ldrb	r2, [r7, #1]
 800dd30:	4619      	mov	r1, r3
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7ff ff24 	bl	800db80 <pbuf_add_header_impl>
 800dd38:	4603      	mov	r3, r0
  }
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b082      	sub	sp, #8
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dd4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd52:	2201      	movs	r2, #1
 800dd54:	4619      	mov	r1, r3
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7ff ffd2 	bl	800dd00 <pbuf_header_impl>
 800dd5c:	4603      	mov	r3, r0
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
	...

0800dd68 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b086      	sub	sp, #24
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d10b      	bne.n	800dd8e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d106      	bne.n	800dd8a <pbuf_free+0x22>
 800dd7c:	4b38      	ldr	r3, [pc, #224]	@ (800de60 <pbuf_free+0xf8>)
 800dd7e:	f240 22de 	movw	r2, #734	@ 0x2de
 800dd82:	4938      	ldr	r1, [pc, #224]	@ (800de64 <pbuf_free+0xfc>)
 800dd84:	4838      	ldr	r0, [pc, #224]	@ (800de68 <pbuf_free+0x100>)
 800dd86:	f00a ffcd 	bl	8018d24 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	e063      	b.n	800de56 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dd92:	e05c      	b.n	800de4e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	7b9b      	ldrb	r3, [r3, #14]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d106      	bne.n	800ddaa <pbuf_free+0x42>
 800dd9c:	4b30      	ldr	r3, [pc, #192]	@ (800de60 <pbuf_free+0xf8>)
 800dd9e:	f240 22f3 	movw	r2, #755	@ 0x2f3
 800dda2:	4932      	ldr	r1, [pc, #200]	@ (800de6c <pbuf_free+0x104>)
 800dda4:	4830      	ldr	r0, [pc, #192]	@ (800de68 <pbuf_free+0x100>)
 800dda6:	f00a ffbd 	bl	8018d24 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	7b9b      	ldrb	r3, [r3, #14]
 800ddae:	3b01      	subs	r3, #1
 800ddb0:	b2da      	uxtb	r2, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	739a      	strb	r2, [r3, #14]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	7b9b      	ldrb	r3, [r3, #14]
 800ddba:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ddbc:	7dbb      	ldrb	r3, [r7, #22]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d143      	bne.n	800de4a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	7b1b      	ldrb	r3, [r3, #12]
 800ddcc:	f003 030f 	and.w	r3, r3, #15
 800ddd0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	7b5b      	ldrb	r3, [r3, #13]
 800ddd6:	f003 0302 	and.w	r3, r3, #2
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d011      	beq.n	800de02 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	691b      	ldr	r3, [r3, #16]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d106      	bne.n	800ddf8 <pbuf_free+0x90>
 800ddea:	4b1d      	ldr	r3, [pc, #116]	@ (800de60 <pbuf_free+0xf8>)
 800ddec:	f240 3201 	movw	r2, #769	@ 0x301
 800ddf0:	491f      	ldr	r1, [pc, #124]	@ (800de70 <pbuf_free+0x108>)
 800ddf2:	481d      	ldr	r0, [pc, #116]	@ (800de68 <pbuf_free+0x100>)
 800ddf4:	f00a ff96 	bl	8018d24 <iprintf>
        pc->custom_free_function(p);
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	691b      	ldr	r3, [r3, #16]
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	4798      	blx	r3
 800de00:	e01d      	b.n	800de3e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800de02:	7bfb      	ldrb	r3, [r7, #15]
 800de04:	2b02      	cmp	r3, #2
 800de06:	d104      	bne.n	800de12 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800de08:	6879      	ldr	r1, [r7, #4]
 800de0a:	2008      	movs	r0, #8
 800de0c:	f7ff f988 	bl	800d120 <memp_free>
 800de10:	e015      	b.n	800de3e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800de12:	7bfb      	ldrb	r3, [r7, #15]
 800de14:	2b01      	cmp	r3, #1
 800de16:	d104      	bne.n	800de22 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800de18:	6879      	ldr	r1, [r7, #4]
 800de1a:	2007      	movs	r0, #7
 800de1c:	f7ff f980 	bl	800d120 <memp_free>
 800de20:	e00d      	b.n	800de3e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800de22:	7bfb      	ldrb	r3, [r7, #15]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d103      	bne.n	800de30 <pbuf_free+0xc8>
          mem_free(p);
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f7fe fe1f 	bl	800ca6c <mem_free>
 800de2e:	e006      	b.n	800de3e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800de30:	4b0b      	ldr	r3, [pc, #44]	@ (800de60 <pbuf_free+0xf8>)
 800de32:	f240 3211 	movw	r2, #785	@ 0x311
 800de36:	490f      	ldr	r1, [pc, #60]	@ (800de74 <pbuf_free+0x10c>)
 800de38:	480b      	ldr	r0, [pc, #44]	@ (800de68 <pbuf_free+0x100>)
 800de3a:	f00a ff73 	bl	8018d24 <iprintf>
        }
      }
      count++;
 800de3e:	7dfb      	ldrb	r3, [r7, #23]
 800de40:	3301      	adds	r3, #1
 800de42:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	607b      	str	r3, [r7, #4]
 800de48:	e001      	b.n	800de4e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800de4a:	2300      	movs	r3, #0
 800de4c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d19f      	bne.n	800dd94 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800de54:	7dfb      	ldrb	r3, [r7, #23]
}
 800de56:	4618      	mov	r0, r3
 800de58:	3718      	adds	r7, #24
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	0801b358 	.word	0x0801b358
 800de64:	0801b4bc 	.word	0x0801b4bc
 800de68:	0801b39c 	.word	0x0801b39c
 800de6c:	0801b4c8 	.word	0x0801b4c8
 800de70:	0801b4e0 	.word	0x0801b4e0
 800de74:	0801b504 	.word	0x0801b504

0800de78 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800de80:	2300      	movs	r3, #0
 800de82:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800de84:	e005      	b.n	800de92 <pbuf_clen+0x1a>
    ++len;
 800de86:	89fb      	ldrh	r3, [r7, #14]
 800de88:	3301      	adds	r3, #1
 800de8a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d1f6      	bne.n	800de86 <pbuf_clen+0xe>
  }
  return len;
 800de98:	89fb      	ldrh	r3, [r7, #14]
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3714      	adds	r7, #20
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr
	...

0800dea8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d010      	beq.n	800ded8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	7b9b      	ldrb	r3, [r3, #14]
 800deba:	3301      	adds	r3, #1
 800debc:	b2da      	uxtb	r2, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	7b9b      	ldrb	r3, [r3, #14]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d106      	bne.n	800ded8 <pbuf_ref+0x30>
 800deca:	4b05      	ldr	r3, [pc, #20]	@ (800dee0 <pbuf_ref+0x38>)
 800decc:	f44f 7251 	mov.w	r2, #836	@ 0x344
 800ded0:	4904      	ldr	r1, [pc, #16]	@ (800dee4 <pbuf_ref+0x3c>)
 800ded2:	4805      	ldr	r0, [pc, #20]	@ (800dee8 <pbuf_ref+0x40>)
 800ded4:	f00a ff26 	bl	8018d24 <iprintf>
  }
}
 800ded8:	bf00      	nop
 800deda:	3708      	adds	r7, #8
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}
 800dee0:	0801b358 	.word	0x0801b358
 800dee4:	0801b518 	.word	0x0801b518
 800dee8:	0801b39c 	.word	0x0801b39c

0800deec <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d037      	beq.n	800df6c <pbuf_cat+0x80>
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d034      	beq.n	800df6c <pbuf_cat+0x80>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	60fb      	str	r3, [r7, #12]
 800df06:	e00a      	b.n	800df1e <pbuf_cat+0x32>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	891a      	ldrh	r2, [r3, #8]
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	891b      	ldrh	r3, [r3, #8]
 800df10:	4413      	add	r3, r2
 800df12:	b29a      	uxth	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	60fb      	str	r3, [r7, #12]
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d1f0      	bne.n	800df08 <pbuf_cat+0x1c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	891a      	ldrh	r2, [r3, #8]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	895b      	ldrh	r3, [r3, #10]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d006      	beq.n	800df40 <pbuf_cat+0x54>
 800df32:	4b10      	ldr	r3, [pc, #64]	@ (800df74 <pbuf_cat+0x88>)
 800df34:	f44f 7259 	mov.w	r2, #868	@ 0x364
 800df38:	490f      	ldr	r1, [pc, #60]	@ (800df78 <pbuf_cat+0x8c>)
 800df3a:	4810      	ldr	r0, [pc, #64]	@ (800df7c <pbuf_cat+0x90>)
 800df3c:	f00a fef2 	bl	8018d24 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d006      	beq.n	800df56 <pbuf_cat+0x6a>
 800df48:	4b0a      	ldr	r3, [pc, #40]	@ (800df74 <pbuf_cat+0x88>)
 800df4a:	f240 3265 	movw	r2, #869	@ 0x365
 800df4e:	490c      	ldr	r1, [pc, #48]	@ (800df80 <pbuf_cat+0x94>)
 800df50:	480a      	ldr	r0, [pc, #40]	@ (800df7c <pbuf_cat+0x90>)
 800df52:	f00a fee7 	bl	8018d24 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	891a      	ldrh	r2, [r3, #8]
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	891b      	ldrh	r3, [r3, #8]
 800df5e:	4413      	add	r3, r2
 800df60:	b29a      	uxth	r2, r3
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	683a      	ldr	r2, [r7, #0]
 800df6a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800df6c:	3710      	adds	r7, #16
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	0801b358 	.word	0x0801b358
 800df78:	0801b52c 	.word	0x0801b52c
 800df7c:	0801b39c 	.word	0x0801b39c
 800df80:	0801b55c 	.word	0x0801b55c

0800df84 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800df8e:	6839      	ldr	r1, [r7, #0]
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f7ff ffab 	bl	800deec <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800df96:	6838      	ldr	r0, [r7, #0]
 800df98:	f7ff ff86 	bl	800dea8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800df9c:	bf00      	nop
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <pbuf_copy>:
 *                 enough to hold p_from
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  LWIP_ERROR("pbuf_copy: invalid source", p_from != NULL, return ERR_ARG;);
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d102      	bne.n	800dfba <pbuf_copy+0x16>
 800dfb4:	f06f 030f 	mvn.w	r3, #15
 800dfb8:	e007      	b.n	800dfca <pbuf_copy+0x26>
  return pbuf_copy_partial_pbuf(p_to, p_from, p_from->tot_len, 0);
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	891a      	ldrh	r2, [r3, #8]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	6839      	ldr	r1, [r7, #0]
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 f806 	bl	800dfd4 <pbuf_copy_partial_pbuf>
 800dfc8:	4603      	mov	r3, r0
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3708      	adds	r7, #8
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
	...

0800dfd4 <pbuf_copy_partial_pbuf>:
 *                 or p_to is not big enough to hold copy_len at offset
 *         ERR_VAL if any of the pbufs are part of a queue
 */
err_t
pbuf_copy_partial_pbuf(struct pbuf *p_to, const struct pbuf *p_from, u16_t copy_len, u16_t offset)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b088      	sub	sp, #32
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	4611      	mov	r1, r2
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	460b      	mov	r3, r1
 800dfe4:	80fb      	strh	r3, [r7, #6]
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	80bb      	strh	r3, [r7, #4]
  size_t offset_to = offset, offset_from = 0, len;
 800dfea:	88bb      	ldrh	r3, [r7, #4]
 800dfec:	61fb      	str	r3, [r7, #28]
 800dfee:	2300      	movs	r3, #0
 800dff0:	61bb      	str	r3, [r7, #24]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf(%p, %p, %"U16_F", %"U16_F")\n",
              (const void *)p_to, (const void *)p_from, copy_len, offset));

  /* is the copy_len in range? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: copy_len bigger than source", ((p_from != NULL) &&
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d004      	beq.n	800e002 <pbuf_copy_partial_pbuf+0x2e>
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	891b      	ldrh	r3, [r3, #8]
 800dffc:	88fa      	ldrh	r2, [r7, #6]
 800dffe:	429a      	cmp	r2, r3
 800e000:	d902      	bls.n	800e008 <pbuf_copy_partial_pbuf+0x34>
 800e002:	f06f 030f 	mvn.w	r3, #15
 800e006:	e0ac      	b.n	800e162 <pbuf_copy_partial_pbuf+0x18e>
             (p_from->tot_len >= copy_len)), return ERR_ARG;);
  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy_partial_pbuf: target not big enough", ((p_to != NULL) &&
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d007      	beq.n	800e01e <pbuf_copy_partial_pbuf+0x4a>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	891b      	ldrh	r3, [r3, #8]
 800e012:	4619      	mov	r1, r3
 800e014:	88ba      	ldrh	r2, [r7, #4]
 800e016:	88fb      	ldrh	r3, [r7, #6]
 800e018:	4413      	add	r3, r2
 800e01a:	4299      	cmp	r1, r3
 800e01c:	da02      	bge.n	800e024 <pbuf_copy_partial_pbuf+0x50>
 800e01e:	f06f 030f 	mvn.w	r3, #15
 800e022:	e09e      	b.n	800e162 <pbuf_copy_partial_pbuf+0x18e>
             (p_to->tot_len >= (offset + copy_len))), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	895b      	ldrh	r3, [r3, #10]
 800e028:	461a      	mov	r2, r3
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	1ad2      	subs	r2, r2, r3
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	895b      	ldrh	r3, [r3, #10]
 800e032:	4619      	mov	r1, r3
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	1acb      	subs	r3, r1, r3
 800e038:	429a      	cmp	r2, r3
 800e03a:	d306      	bcc.n	800e04a <pbuf_copy_partial_pbuf+0x76>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	895b      	ldrh	r3, [r3, #10]
 800e040:	461a      	mov	r2, r3
 800e042:	69bb      	ldr	r3, [r7, #24]
 800e044:	1ad3      	subs	r3, r2, r3
 800e046:	617b      	str	r3, [r7, #20]
 800e048:	e005      	b.n	800e056 <pbuf_copy_partial_pbuf+0x82>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	895b      	ldrh	r3, [r3, #10]
 800e04e:	461a      	mov	r2, r3
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	1ad3      	subs	r3, r2, r3
 800e054:	617b      	str	r3, [r7, #20]
    }
    len = LWIP_MIN(copy_len, len);
 800e056:	88fb      	ldrh	r3, [r7, #6]
 800e058:	697a      	ldr	r2, [r7, #20]
 800e05a:	4293      	cmp	r3, r2
 800e05c:	bf28      	it	cs
 800e05e:	4613      	movcs	r3, r2
 800e060:	617b      	str	r3, [r7, #20]
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	685a      	ldr	r2, [r3, #4]
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	18d0      	adds	r0, r2, r3
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	685a      	ldr	r2, [r3, #4]
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	4413      	add	r3, r2
 800e072:	697a      	ldr	r2, [r7, #20]
 800e074:	4619      	mov	r1, r3
 800e076:	f00b f878 	bl	801916a <memcpy>
    offset_to += len;
 800e07a:	69fa      	ldr	r2, [r7, #28]
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	4413      	add	r3, r2
 800e080:	61fb      	str	r3, [r7, #28]
    offset_from += len;
 800e082:	69ba      	ldr	r2, [r7, #24]
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	4413      	add	r3, r2
 800e088:	61bb      	str	r3, [r7, #24]
    copy_len = (u16_t)(copy_len - len);
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	88fa      	ldrh	r2, [r7, #6]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	80fb      	strh	r3, [r7, #6]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	895b      	ldrh	r3, [r3, #10]
 800e098:	461a      	mov	r2, r3
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d906      	bls.n	800e0ae <pbuf_copy_partial_pbuf+0xda>
 800e0a0:	4b32      	ldr	r3, [pc, #200]	@ (800e16c <pbuf_copy_partial_pbuf+0x198>)
 800e0a2:	f240 32f7 	movw	r2, #1015	@ 0x3f7
 800e0a6:	4932      	ldr	r1, [pc, #200]	@ (800e170 <pbuf_copy_partial_pbuf+0x19c>)
 800e0a8:	4832      	ldr	r0, [pc, #200]	@ (800e174 <pbuf_copy_partial_pbuf+0x1a0>)
 800e0aa:	f00a fe3b 	bl	8018d24 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	895b      	ldrh	r3, [r3, #10]
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d906      	bls.n	800e0c8 <pbuf_copy_partial_pbuf+0xf4>
 800e0ba:	4b2c      	ldr	r3, [pc, #176]	@ (800e16c <pbuf_copy_partial_pbuf+0x198>)
 800e0bc:	f44f 727e 	mov.w	r2, #1016	@ 0x3f8
 800e0c0:	492d      	ldr	r1, [pc, #180]	@ (800e178 <pbuf_copy_partial_pbuf+0x1a4>)
 800e0c2:	482c      	ldr	r0, [pc, #176]	@ (800e174 <pbuf_copy_partial_pbuf+0x1a0>)
 800e0c4:	f00a fe2e 	bl	8018d24 <iprintf>
    if (offset_from >= p_from->len) {
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	895b      	ldrh	r3, [r3, #10]
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	69bb      	ldr	r3, [r7, #24]
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d30d      	bcc.n	800e0f0 <pbuf_copy_partial_pbuf+0x11c>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	61bb      	str	r3, [r7, #24]
      p_from = p_from->next;
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	60bb      	str	r3, [r7, #8]
      LWIP_ERROR("p_from != NULL", (p_from != NULL) || (copy_len == 0), return ERR_ARG;);
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d105      	bne.n	800e0f0 <pbuf_copy_partial_pbuf+0x11c>
 800e0e4:	88fb      	ldrh	r3, [r7, #6]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d002      	beq.n	800e0f0 <pbuf_copy_partial_pbuf+0x11c>
 800e0ea:	f06f 030f 	mvn.w	r3, #15
 800e0ee:	e038      	b.n	800e162 <pbuf_copy_partial_pbuf+0x18e>
    }
    if (offset_to == p_to->len) {
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	895b      	ldrh	r3, [r3, #10]
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d10d      	bne.n	800e118 <pbuf_copy_partial_pbuf+0x144>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	61fb      	str	r3, [r7, #28]
      p_to = p_to->next;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	60fb      	str	r3, [r7, #12]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (copy_len == 0), return ERR_ARG;);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d105      	bne.n	800e118 <pbuf_copy_partial_pbuf+0x144>
 800e10c:	88fb      	ldrh	r3, [r7, #6]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d002      	beq.n	800e118 <pbuf_copy_partial_pbuf+0x144>
 800e112:	f06f 030f 	mvn.w	r3, #15
 800e116:	e024      	b.n	800e162 <pbuf_copy_partial_pbuf+0x18e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d00c      	beq.n	800e138 <pbuf_copy_partial_pbuf+0x164>
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	895a      	ldrh	r2, [r3, #10]
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	891b      	ldrh	r3, [r3, #8]
 800e126:	429a      	cmp	r2, r3
 800e128:	d106      	bne.n	800e138 <pbuf_copy_partial_pbuf+0x164>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d002      	beq.n	800e138 <pbuf_copy_partial_pbuf+0x164>
 800e132:	f06f 0305 	mvn.w	r3, #5
 800e136:	e014      	b.n	800e162 <pbuf_copy_partial_pbuf+0x18e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00c      	beq.n	800e158 <pbuf_copy_partial_pbuf+0x184>
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	895a      	ldrh	r2, [r3, #10]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	891b      	ldrh	r3, [r3, #8]
 800e146:	429a      	cmp	r2, r3
 800e148:	d106      	bne.n	800e158 <pbuf_copy_partial_pbuf+0x184>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy_partial_pbuf() does not allow packet queues!",
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d002      	beq.n	800e158 <pbuf_copy_partial_pbuf+0x184>
 800e152:	f06f 0305 	mvn.w	r3, #5
 800e156:	e004      	b.n	800e162 <pbuf_copy_partial_pbuf+0x18e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (copy_len);
 800e158:	88fb      	ldrh	r3, [r7, #6]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f47f af62 	bne.w	800e024 <pbuf_copy_partial_pbuf+0x50>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy_partial_pbuf: copy complete.\n"));
  return ERR_OK;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3720      	adds	r7, #32
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	0801b358 	.word	0x0801b358
 800e170:	0801b5a8 	.word	0x0801b5a8
 800e174:	0801b39c 	.word	0x0801b39c
 800e178:	0801b5c0 	.word	0x0801b5c0

0800e17c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b088      	sub	sp, #32
 800e180:	af00      	add	r7, sp, #0
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	60b9      	str	r1, [r7, #8]
 800e186:	4611      	mov	r1, r2
 800e188:	461a      	mov	r2, r3
 800e18a:	460b      	mov	r3, r1
 800e18c:	80fb      	strh	r3, [r7, #6]
 800e18e:	4613      	mov	r3, r2
 800e190:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e192:	2300      	movs	r3, #0
 800e194:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e196:	2300      	movs	r3, #0
 800e198:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d101      	bne.n	800e1a4 <pbuf_copy_partial+0x28>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	e043      	b.n	800e22c <pbuf_copy_partial+0xb0>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d101      	bne.n	800e1ae <pbuf_copy_partial+0x32>
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	e03e      	b.n	800e22c <pbuf_copy_partial+0xb0>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	61fb      	str	r3, [r7, #28]
 800e1b2:	e034      	b.n	800e21e <pbuf_copy_partial+0xa2>
    if ((offset != 0) && (offset >= p->len)) {
 800e1b4:	88bb      	ldrh	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d00a      	beq.n	800e1d0 <pbuf_copy_partial+0x54>
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	895b      	ldrh	r3, [r3, #10]
 800e1be:	88ba      	ldrh	r2, [r7, #4]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d305      	bcc.n	800e1d0 <pbuf_copy_partial+0x54>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e1c4:	69fb      	ldr	r3, [r7, #28]
 800e1c6:	895b      	ldrh	r3, [r3, #10]
 800e1c8:	88ba      	ldrh	r2, [r7, #4]
 800e1ca:	1ad3      	subs	r3, r2, r3
 800e1cc:	80bb      	strh	r3, [r7, #4]
 800e1ce:	e023      	b.n	800e218 <pbuf_copy_partial+0x9c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	895a      	ldrh	r2, [r3, #10]
 800e1d4:	88bb      	ldrh	r3, [r7, #4]
 800e1d6:	1ad3      	subs	r3, r2, r3
 800e1d8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e1da:	8b3a      	ldrh	r2, [r7, #24]
 800e1dc:	88fb      	ldrh	r3, [r7, #6]
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d901      	bls.n	800e1e6 <pbuf_copy_partial+0x6a>
        buf_copy_len = len;
 800e1e2:	88fb      	ldrh	r3, [r7, #6]
 800e1e4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e1e6:	8b7b      	ldrh	r3, [r7, #26]
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	18d0      	adds	r0, r2, r3
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	685a      	ldr	r2, [r3, #4]
 800e1f0:	88bb      	ldrh	r3, [r7, #4]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	8b3a      	ldrh	r2, [r7, #24]
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	f00a ffb7 	bl	801916a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e1fc:	8afa      	ldrh	r2, [r7, #22]
 800e1fe:	8b3b      	ldrh	r3, [r7, #24]
 800e200:	4413      	add	r3, r2
 800e202:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e204:	8b7a      	ldrh	r2, [r7, #26]
 800e206:	8b3b      	ldrh	r3, [r7, #24]
 800e208:	4413      	add	r3, r2
 800e20a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e20c:	88fa      	ldrh	r2, [r7, #6]
 800e20e:	8b3b      	ldrh	r3, [r7, #24]
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e214:	2300      	movs	r3, #0
 800e216:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	61fb      	str	r3, [r7, #28]
 800e21e:	88fb      	ldrh	r3, [r7, #6]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d002      	beq.n	800e22a <pbuf_copy_partial+0xae>
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d1c4      	bne.n	800e1b4 <pbuf_copy_partial+0x38>
    }
  }
  return copied_total;
 800e22a:	8afb      	ldrh	r3, [r7, #22]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3720      	adds	r7, #32
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b088      	sub	sp, #32
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	4613      	mov	r3, r2
 800e240:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800e242:	88fb      	ldrh	r3, [r7, #6]
 800e244:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800e246:	2300      	movs	r3, #0
 800e248:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d102      	bne.n	800e256 <pbuf_take+0x22>
 800e250:	f06f 030f 	mvn.w	r3, #15
 800e254:	e059      	b.n	800e30a <pbuf_take+0xd6>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d102      	bne.n	800e262 <pbuf_take+0x2e>
 800e25c:	f06f 030f 	mvn.w	r3, #15
 800e260:	e053      	b.n	800e30a <pbuf_take+0xd6>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	891b      	ldrh	r3, [r3, #8]
 800e266:	88fa      	ldrh	r2, [r7, #6]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d902      	bls.n	800e272 <pbuf_take+0x3e>
 800e26c:	f04f 33ff 	mov.w	r3, #4294967295
 800e270:	e04b      	b.n	800e30a <pbuf_take+0xd6>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d007      	beq.n	800e288 <pbuf_take+0x54>
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d004      	beq.n	800e288 <pbuf_take+0x54>
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	891b      	ldrh	r3, [r3, #8]
 800e282:	88fa      	ldrh	r2, [r7, #6]
 800e284:	429a      	cmp	r2, r3
 800e286:	d902      	bls.n	800e28e <pbuf_take+0x5a>
    return ERR_ARG;
 800e288:	f06f 030f 	mvn.w	r3, #15
 800e28c:	e03d      	b.n	800e30a <pbuf_take+0xd6>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	61fb      	str	r3, [r7, #28]
 800e292:	e028      	b.n	800e2e6 <pbuf_take+0xb2>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d106      	bne.n	800e2a8 <pbuf_take+0x74>
 800e29a:	4b1e      	ldr	r3, [pc, #120]	@ (800e314 <pbuf_take+0xe0>)
 800e29c:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 800e2a0:	491d      	ldr	r1, [pc, #116]	@ (800e318 <pbuf_take+0xe4>)
 800e2a2:	481e      	ldr	r0, [pc, #120]	@ (800e31c <pbuf_take+0xe8>)
 800e2a4:	f00a fd3e 	bl	8018d24 <iprintf>
    buf_copy_len = total_copy_len;
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	895b      	ldrh	r3, [r3, #10]
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d902      	bls.n	800e2be <pbuf_take+0x8a>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	895b      	ldrh	r3, [r3, #10]
 800e2bc:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	6858      	ldr	r0, [r3, #4]
 800e2c2:	68ba      	ldr	r2, [r7, #8]
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	4413      	add	r3, r2
 800e2c8:	69ba      	ldr	r2, [r7, #24]
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	f00a ff4d 	bl	801916a <memcpy>
    total_copy_len -= buf_copy_len;
 800e2d0:	697a      	ldr	r2, [r7, #20]
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	1ad3      	subs	r3, r2, r3
 800e2d6:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800e2d8:	693a      	ldr	r2, [r7, #16]
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	4413      	add	r3, r2
 800e2de:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	61fb      	str	r3, [r7, #28]
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d1d3      	bne.n	800e294 <pbuf_take+0x60>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d103      	bne.n	800e2fa <pbuf_take+0xc6>
 800e2f2:	88fb      	ldrh	r3, [r7, #6]
 800e2f4:	693a      	ldr	r2, [r7, #16]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d006      	beq.n	800e308 <pbuf_take+0xd4>
 800e2fa:	4b06      	ldr	r3, [pc, #24]	@ (800e314 <pbuf_take+0xe0>)
 800e2fc:	f240 42e7 	movw	r2, #1255	@ 0x4e7
 800e300:	4907      	ldr	r1, [pc, #28]	@ (800e320 <pbuf_take+0xec>)
 800e302:	4806      	ldr	r0, [pc, #24]	@ (800e31c <pbuf_take+0xe8>)
 800e304:	f00a fd0e 	bl	8018d24 <iprintf>
  return ERR_OK;
 800e308:	2300      	movs	r3, #0
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3720      	adds	r7, #32
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	0801b358 	.word	0x0801b358
 800e318:	0801b5dc 	.word	0x0801b5dc
 800e31c:	0801b39c 	.word	0x0801b39c
 800e320:	0801b5f4 	.word	0x0801b5f4

0800e324 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	4603      	mov	r3, r0
 800e32c:	603a      	str	r2, [r7, #0]
 800e32e:	71fb      	strb	r3, [r7, #7]
 800e330:	460b      	mov	r3, r1
 800e332:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	8919      	ldrh	r1, [r3, #8]
 800e338:	88ba      	ldrh	r2, [r7, #4]
 800e33a:	79fb      	ldrb	r3, [r7, #7]
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7ff fa2d 	bl	800d79c <pbuf_alloc>
 800e342:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d101      	bne.n	800e34e <pbuf_clone+0x2a>
    return NULL;
 800e34a:	2300      	movs	r3, #0
 800e34c:	e011      	b.n	800e372 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e34e:	6839      	ldr	r1, [r7, #0]
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f7ff fe27 	bl	800dfa4 <pbuf_copy>
 800e356:	4603      	mov	r3, r0
 800e358:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e35a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d006      	beq.n	800e370 <pbuf_clone+0x4c>
 800e362:	4b06      	ldr	r3, [pc, #24]	@ (800e37c <pbuf_clone+0x58>)
 800e364:	f240 5243 	movw	r2, #1347	@ 0x543
 800e368:	4905      	ldr	r1, [pc, #20]	@ (800e380 <pbuf_clone+0x5c>)
 800e36a:	4806      	ldr	r0, [pc, #24]	@ (800e384 <pbuf_clone+0x60>)
 800e36c:	f00a fcda 	bl	8018d24 <iprintf>
  return q;
 800e370:	68fb      	ldr	r3, [r7, #12]
}
 800e372:	4618      	mov	r0, r3
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	0801b358 	.word	0x0801b358
 800e380:	0801b624 	.word	0x0801b624
 800e384:	0801b39c 	.word	0x0801b39c

0800e388 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e38c:	f00a fbca 	bl	8018b24 <rand>
 800e390:	4603      	mov	r3, r0
 800e392:	b29b      	uxth	r3, r3
 800e394:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e398:	b29b      	uxth	r3, r3
 800e39a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e39e:	b29a      	uxth	r2, r3
 800e3a0:	4b01      	ldr	r3, [pc, #4]	@ (800e3a8 <tcp_init+0x20>)
 800e3a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e3a4:	bf00      	nop
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	20000024 	.word	0x20000024

0800e3ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	7d1b      	ldrb	r3, [r3, #20]
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d105      	bne.n	800e3c8 <tcp_free+0x1c>
 800e3bc:	4b06      	ldr	r3, [pc, #24]	@ (800e3d8 <tcp_free+0x2c>)
 800e3be:	22d4      	movs	r2, #212	@ 0xd4
 800e3c0:	4906      	ldr	r1, [pc, #24]	@ (800e3dc <tcp_free+0x30>)
 800e3c2:	4807      	ldr	r0, [pc, #28]	@ (800e3e0 <tcp_free+0x34>)
 800e3c4:	f00a fcae 	bl	8018d24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e3c8:	6879      	ldr	r1, [r7, #4]
 800e3ca:	2001      	movs	r0, #1
 800e3cc:	f7fe fea8 	bl	800d120 <memp_free>
}
 800e3d0:	bf00      	nop
 800e3d2:	3708      	adds	r7, #8
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	0801b6b0 	.word	0x0801b6b0
 800e3dc:	0801b6c4 	.word	0x0801b6c4
 800e3e0:	0801b6d8 	.word	0x0801b6d8

0800e3e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	7d1b      	ldrb	r3, [r3, #20]
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d105      	bne.n	800e400 <tcp_free_listen+0x1c>
 800e3f4:	4b06      	ldr	r3, [pc, #24]	@ (800e410 <tcp_free_listen+0x2c>)
 800e3f6:	22df      	movs	r2, #223	@ 0xdf
 800e3f8:	4906      	ldr	r1, [pc, #24]	@ (800e414 <tcp_free_listen+0x30>)
 800e3fa:	4807      	ldr	r0, [pc, #28]	@ (800e418 <tcp_free_listen+0x34>)
 800e3fc:	f00a fc92 	bl	8018d24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e400:	6879      	ldr	r1, [r7, #4]
 800e402:	2002      	movs	r0, #2
 800e404:	f7fe fe8c 	bl	800d120 <memp_free>
}
 800e408:	bf00      	nop
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	0801b6b0 	.word	0x0801b6b0
 800e414:	0801b700 	.word	0x0801b700
 800e418:	0801b6d8 	.word	0x0801b6d8

0800e41c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e420:	f000 fe84 	bl	800f12c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e424:	4b07      	ldr	r3, [pc, #28]	@ (800e444 <tcp_tmr+0x28>)
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	3301      	adds	r3, #1
 800e42a:	b2da      	uxtb	r2, r3
 800e42c:	4b05      	ldr	r3, [pc, #20]	@ (800e444 <tcp_tmr+0x28>)
 800e42e:	701a      	strb	r2, [r3, #0]
 800e430:	4b04      	ldr	r3, [pc, #16]	@ (800e444 <tcp_tmr+0x28>)
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	f003 0301 	and.w	r3, r3, #1
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e43c:	f000 fb34 	bl	800eaa8 <tcp_slowtmr>
  }
}
 800e440:	bf00      	nop
 800e442:	bd80      	pop	{r7, pc}
 800e444:	2000a319 	.word	0x2000a319

0800e448 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d105      	bne.n	800e464 <tcp_remove_listener+0x1c>
 800e458:	4b0d      	ldr	r3, [pc, #52]	@ (800e490 <tcp_remove_listener+0x48>)
 800e45a:	22ff      	movs	r2, #255	@ 0xff
 800e45c:	490d      	ldr	r1, [pc, #52]	@ (800e494 <tcp_remove_listener+0x4c>)
 800e45e:	480e      	ldr	r0, [pc, #56]	@ (800e498 <tcp_remove_listener+0x50>)
 800e460:	f00a fc60 	bl	8018d24 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	60fb      	str	r3, [r7, #12]
 800e468:	e00a      	b.n	800e480 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e46e:	683a      	ldr	r2, [r7, #0]
 800e470:	429a      	cmp	r2, r3
 800e472:	d102      	bne.n	800e47a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2200      	movs	r2, #0
 800e478:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	60fb      	str	r3, [r7, #12]
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d1f1      	bne.n	800e46a <tcp_remove_listener+0x22>
    }
  }
}
 800e486:	bf00      	nop
 800e488:	bf00      	nop
 800e48a:	3710      	adds	r7, #16
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}
 800e490:	0801b6b0 	.word	0x0801b6b0
 800e494:	0801b71c 	.word	0x0801b71c
 800e498:	0801b6d8 	.word	0x0801b6d8

0800e49c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d106      	bne.n	800e4b8 <tcp_listen_closed+0x1c>
 800e4aa:	4b14      	ldr	r3, [pc, #80]	@ (800e4fc <tcp_listen_closed+0x60>)
 800e4ac:	f240 1211 	movw	r2, #273	@ 0x111
 800e4b0:	4913      	ldr	r1, [pc, #76]	@ (800e500 <tcp_listen_closed+0x64>)
 800e4b2:	4814      	ldr	r0, [pc, #80]	@ (800e504 <tcp_listen_closed+0x68>)
 800e4b4:	f00a fc36 	bl	8018d24 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	7d1b      	ldrb	r3, [r3, #20]
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d006      	beq.n	800e4ce <tcp_listen_closed+0x32>
 800e4c0:	4b0e      	ldr	r3, [pc, #56]	@ (800e4fc <tcp_listen_closed+0x60>)
 800e4c2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e4c6:	4910      	ldr	r1, [pc, #64]	@ (800e508 <tcp_listen_closed+0x6c>)
 800e4c8:	480e      	ldr	r0, [pc, #56]	@ (800e504 <tcp_listen_closed+0x68>)
 800e4ca:	f00a fc2b 	bl	8018d24 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	60fb      	str	r3, [r7, #12]
 800e4d2:	e00b      	b.n	800e4ec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e4d4:	4a0d      	ldr	r2, [pc, #52]	@ (800e50c <tcp_listen_closed+0x70>)
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	6879      	ldr	r1, [r7, #4]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7ff ffb1 	bl	800e448 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	60fb      	str	r3, [r7, #12]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2b03      	cmp	r3, #3
 800e4f0:	d9f0      	bls.n	800e4d4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e4f2:	bf00      	nop
 800e4f4:	bf00      	nop
 800e4f6:	3710      	adds	r7, #16
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	0801b6b0 	.word	0x0801b6b0
 800e500:	0801b744 	.word	0x0801b744
 800e504:	0801b6d8 	.word	0x0801b6d8
 800e508:	0801b750 	.word	0x0801b750
 800e50c:	0801d3dc 	.word	0x0801d3dc

0800e510 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e510:	b5b0      	push	{r4, r5, r7, lr}
 800e512:	b088      	sub	sp, #32
 800e514:	af04      	add	r7, sp, #16
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	460b      	mov	r3, r1
 800e51a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d106      	bne.n	800e530 <tcp_close_shutdown+0x20>
 800e522:	4b63      	ldr	r3, [pc, #396]	@ (800e6b0 <tcp_close_shutdown+0x1a0>)
 800e524:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800e528:	4962      	ldr	r1, [pc, #392]	@ (800e6b4 <tcp_close_shutdown+0x1a4>)
 800e52a:	4863      	ldr	r0, [pc, #396]	@ (800e6b8 <tcp_close_shutdown+0x1a8>)
 800e52c:	f00a fbfa 	bl	8018d24 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e530:	78fb      	ldrb	r3, [r7, #3]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d067      	beq.n	800e606 <tcp_close_shutdown+0xf6>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	7d1b      	ldrb	r3, [r3, #20]
 800e53a:	2b04      	cmp	r3, #4
 800e53c:	d003      	beq.n	800e546 <tcp_close_shutdown+0x36>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	7d1b      	ldrb	r3, [r3, #20]
 800e542:	2b07      	cmp	r3, #7
 800e544:	d15f      	bne.n	800e606 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d105      	bne.n	800e55a <tcp_close_shutdown+0x4a>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e552:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800e556:	4293      	cmp	r3, r2
 800e558:	d055      	beq.n	800e606 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	8b5b      	ldrh	r3, [r3, #26]
 800e55e:	f003 0310 	and.w	r3, r3, #16
 800e562:	2b00      	cmp	r3, #0
 800e564:	d106      	bne.n	800e574 <tcp_close_shutdown+0x64>
 800e566:	4b52      	ldr	r3, [pc, #328]	@ (800e6b0 <tcp_close_shutdown+0x1a0>)
 800e568:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800e56c:	4953      	ldr	r1, [pc, #332]	@ (800e6bc <tcp_close_shutdown+0x1ac>)
 800e56e:	4852      	ldr	r0, [pc, #328]	@ (800e6b8 <tcp_close_shutdown+0x1a8>)
 800e570:	f00a fbd8 	bl	8018d24 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e57c:	687d      	ldr	r5, [r7, #4]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	3304      	adds	r3, #4
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	8ad2      	ldrh	r2, [r2, #22]
 800e586:	6879      	ldr	r1, [r7, #4]
 800e588:	8b09      	ldrh	r1, [r1, #24]
 800e58a:	9102      	str	r1, [sp, #8]
 800e58c:	9201      	str	r2, [sp, #4]
 800e58e:	9300      	str	r3, [sp, #0]
 800e590:	462b      	mov	r3, r5
 800e592:	4622      	mov	r2, r4
 800e594:	4601      	mov	r1, r0
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f004 feda 	bl	8013350 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f001 f88d 	bl	800f6bc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e5a2:	4b47      	ldr	r3, [pc, #284]	@ (800e6c0 <tcp_close_shutdown+0x1b0>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d105      	bne.n	800e5b8 <tcp_close_shutdown+0xa8>
 800e5ac:	4b44      	ldr	r3, [pc, #272]	@ (800e6c0 <tcp_close_shutdown+0x1b0>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	4a43      	ldr	r2, [pc, #268]	@ (800e6c0 <tcp_close_shutdown+0x1b0>)
 800e5b4:	6013      	str	r3, [r2, #0]
 800e5b6:	e013      	b.n	800e5e0 <tcp_close_shutdown+0xd0>
 800e5b8:	4b41      	ldr	r3, [pc, #260]	@ (800e6c0 <tcp_close_shutdown+0x1b0>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	60fb      	str	r3, [r7, #12]
 800e5be:	e00c      	b.n	800e5da <tcp_close_shutdown+0xca>
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d104      	bne.n	800e5d4 <tcp_close_shutdown+0xc4>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	68da      	ldr	r2, [r3, #12]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	60da      	str	r2, [r3, #12]
 800e5d2:	e005      	b.n	800e5e0 <tcp_close_shutdown+0xd0>
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	68db      	ldr	r3, [r3, #12]
 800e5d8:	60fb      	str	r3, [r7, #12]
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1ef      	bne.n	800e5c0 <tcp_close_shutdown+0xb0>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	60da      	str	r2, [r3, #12]
 800e5e6:	4b37      	ldr	r3, [pc, #220]	@ (800e6c4 <tcp_close_shutdown+0x1b4>)
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e5ec:	4b36      	ldr	r3, [pc, #216]	@ (800e6c8 <tcp_close_shutdown+0x1b8>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d102      	bne.n	800e5fc <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e5f6:	f003 fd31 	bl	801205c <tcp_trigger_input_pcb_close>
 800e5fa:	e002      	b.n	800e602 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7ff fed5 	bl	800e3ac <tcp_free>
      }
      return ERR_OK;
 800e602:	2300      	movs	r3, #0
 800e604:	e050      	b.n	800e6a8 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	7d1b      	ldrb	r3, [r3, #20]
 800e60a:	2b02      	cmp	r3, #2
 800e60c:	d03b      	beq.n	800e686 <tcp_close_shutdown+0x176>
 800e60e:	2b02      	cmp	r3, #2
 800e610:	dc44      	bgt.n	800e69c <tcp_close_shutdown+0x18c>
 800e612:	2b00      	cmp	r3, #0
 800e614:	d002      	beq.n	800e61c <tcp_close_shutdown+0x10c>
 800e616:	2b01      	cmp	r3, #1
 800e618:	d02a      	beq.n	800e670 <tcp_close_shutdown+0x160>
 800e61a:	e03f      	b.n	800e69c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	8adb      	ldrh	r3, [r3, #22]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d021      	beq.n	800e668 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e624:	4b29      	ldr	r3, [pc, #164]	@ (800e6cc <tcp_close_shutdown+0x1bc>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d105      	bne.n	800e63a <tcp_close_shutdown+0x12a>
 800e62e:	4b27      	ldr	r3, [pc, #156]	@ (800e6cc <tcp_close_shutdown+0x1bc>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	4a25      	ldr	r2, [pc, #148]	@ (800e6cc <tcp_close_shutdown+0x1bc>)
 800e636:	6013      	str	r3, [r2, #0]
 800e638:	e013      	b.n	800e662 <tcp_close_shutdown+0x152>
 800e63a:	4b24      	ldr	r3, [pc, #144]	@ (800e6cc <tcp_close_shutdown+0x1bc>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	60bb      	str	r3, [r7, #8]
 800e640:	e00c      	b.n	800e65c <tcp_close_shutdown+0x14c>
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	429a      	cmp	r2, r3
 800e64a:	d104      	bne.n	800e656 <tcp_close_shutdown+0x146>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	68da      	ldr	r2, [r3, #12]
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	60da      	str	r2, [r3, #12]
 800e654:	e005      	b.n	800e662 <tcp_close_shutdown+0x152>
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	68db      	ldr	r3, [r3, #12]
 800e65a:	60bb      	str	r3, [r7, #8]
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d1ef      	bne.n	800e642 <tcp_close_shutdown+0x132>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2200      	movs	r2, #0
 800e666:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7ff fe9f 	bl	800e3ac <tcp_free>
      break;
 800e66e:	e01a      	b.n	800e6a6 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7ff ff13 	bl	800e49c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e676:	6879      	ldr	r1, [r7, #4]
 800e678:	4815      	ldr	r0, [pc, #84]	@ (800e6d0 <tcp_close_shutdown+0x1c0>)
 800e67a:	f001 f861 	bl	800f740 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f7ff feb0 	bl	800e3e4 <tcp_free_listen>
      break;
 800e684:	e00f      	b.n	800e6a6 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e686:	6879      	ldr	r1, [r7, #4]
 800e688:	480d      	ldr	r0, [pc, #52]	@ (800e6c0 <tcp_close_shutdown+0x1b0>)
 800e68a:	f001 f859 	bl	800f740 <tcp_pcb_remove>
 800e68e:	4b0d      	ldr	r3, [pc, #52]	@ (800e6c4 <tcp_close_shutdown+0x1b4>)
 800e690:	2201      	movs	r2, #1
 800e692:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f7ff fe89 	bl	800e3ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e69a:	e004      	b.n	800e6a6 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f000 f819 	bl	800e6d4 <tcp_close_shutdown_fin>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	e000      	b.n	800e6a8 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800e6a6:	2300      	movs	r3, #0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bdb0      	pop	{r4, r5, r7, pc}
 800e6b0:	0801b6b0 	.word	0x0801b6b0
 800e6b4:	0801b768 	.word	0x0801b768
 800e6b8:	0801b6d8 	.word	0x0801b6d8
 800e6bc:	0801b788 	.word	0x0801b788
 800e6c0:	2000a310 	.word	0x2000a310
 800e6c4:	2000a318 	.word	0x2000a318
 800e6c8:	2000a350 	.word	0x2000a350
 800e6cc:	2000a308 	.word	0x2000a308
 800e6d0:	2000a30c 	.word	0x2000a30c

0800e6d4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d106      	bne.n	800e6f0 <tcp_close_shutdown_fin+0x1c>
 800e6e2:	4b2e      	ldr	r3, [pc, #184]	@ (800e79c <tcp_close_shutdown_fin+0xc8>)
 800e6e4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800e6e8:	492d      	ldr	r1, [pc, #180]	@ (800e7a0 <tcp_close_shutdown_fin+0xcc>)
 800e6ea:	482e      	ldr	r0, [pc, #184]	@ (800e7a4 <tcp_close_shutdown_fin+0xd0>)
 800e6ec:	f00a fb1a 	bl	8018d24 <iprintf>

  switch (pcb->state) {
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	7d1b      	ldrb	r3, [r3, #20]
 800e6f4:	2b07      	cmp	r3, #7
 800e6f6:	d020      	beq.n	800e73a <tcp_close_shutdown_fin+0x66>
 800e6f8:	2b07      	cmp	r3, #7
 800e6fa:	dc2b      	bgt.n	800e754 <tcp_close_shutdown_fin+0x80>
 800e6fc:	2b03      	cmp	r3, #3
 800e6fe:	d002      	beq.n	800e706 <tcp_close_shutdown_fin+0x32>
 800e700:	2b04      	cmp	r3, #4
 800e702:	d00d      	beq.n	800e720 <tcp_close_shutdown_fin+0x4c>
 800e704:	e026      	b.n	800e754 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f003 feba 	bl	8012480 <tcp_send_fin>
 800e70c:	4603      	mov	r3, r0
 800e70e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d11f      	bne.n	800e758 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2205      	movs	r2, #5
 800e71c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e71e:	e01b      	b.n	800e758 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f003 fead 	bl	8012480 <tcp_send_fin>
 800e726:	4603      	mov	r3, r0
 800e728:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e72a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d114      	bne.n	800e75c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2205      	movs	r2, #5
 800e736:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e738:	e010      	b.n	800e75c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f003 fea0 	bl	8012480 <tcp_send_fin>
 800e740:	4603      	mov	r3, r0
 800e742:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d109      	bne.n	800e760 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2209      	movs	r2, #9
 800e750:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e752:	e005      	b.n	800e760 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	e01c      	b.n	800e792 <tcp_close_shutdown_fin+0xbe>
      break;
 800e758:	bf00      	nop
 800e75a:	e002      	b.n	800e762 <tcp_close_shutdown_fin+0x8e>
      break;
 800e75c:	bf00      	nop
 800e75e:	e000      	b.n	800e762 <tcp_close_shutdown_fin+0x8e>
      break;
 800e760:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d103      	bne.n	800e772 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f003 ffc6 	bl	80126fc <tcp_output>
 800e770:	e00d      	b.n	800e78e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e77a:	d108      	bne.n	800e78e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	8b5b      	ldrh	r3, [r3, #26]
 800e780:	f043 0308 	orr.w	r3, r3, #8
 800e784:	b29a      	uxth	r2, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e78a:	2300      	movs	r3, #0
 800e78c:	e001      	b.n	800e792 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e78e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3710      	adds	r7, #16
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	0801b6b0 	.word	0x0801b6b0
 800e7a0:	0801b744 	.word	0x0801b744
 800e7a4:	0801b6d8 	.word	0x0801b6d8

0800e7a8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d102      	bne.n	800e7bc <tcp_close+0x14>
 800e7b6:	f06f 030f 	mvn.w	r3, #15
 800e7ba:	e00f      	b.n	800e7dc <tcp_close+0x34>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	7d1b      	ldrb	r3, [r3, #20]
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d006      	beq.n	800e7d2 <tcp_close+0x2a>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	8b5b      	ldrh	r3, [r3, #26]
 800e7c8:	f043 0310 	orr.w	r3, r3, #16
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e7d2:	2101      	movs	r1, #1
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f7ff fe9b 	bl	800e510 <tcp_close_shutdown>
 800e7da:	4603      	mov	r3, r0
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3708      	adds	r7, #8
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b08e      	sub	sp, #56	@ 0x38
 800e7e8:	af04      	add	r7, sp, #16
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f000 809a 	beq.w	800e92a <tcp_abandon+0x146>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	7d1b      	ldrb	r3, [r3, #20]
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d106      	bne.n	800e80c <tcp_abandon+0x28>
 800e7fe:	4b4c      	ldr	r3, [pc, #304]	@ (800e930 <tcp_abandon+0x14c>)
 800e800:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800e804:	494b      	ldr	r1, [pc, #300]	@ (800e934 <tcp_abandon+0x150>)
 800e806:	484c      	ldr	r0, [pc, #304]	@ (800e938 <tcp_abandon+0x154>)
 800e808:	f00a fa8c 	bl	8018d24 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	7d1b      	ldrb	r3, [r3, #20]
 800e810:	2b0a      	cmp	r3, #10
 800e812:	d107      	bne.n	800e824 <tcp_abandon+0x40>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e814:	6879      	ldr	r1, [r7, #4]
 800e816:	4849      	ldr	r0, [pc, #292]	@ (800e93c <tcp_abandon+0x158>)
 800e818:	f000 ff92 	bl	800f740 <tcp_pcb_remove>
    tcp_free(pcb);
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f7ff fdc5 	bl	800e3ac <tcp_free>
 800e822:	e082      	b.n	800e92a <tcp_abandon+0x146>
  } else {
    int send_rst = 0;
 800e824:	2300      	movs	r3, #0
 800e826:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800e828:	2300      	movs	r3, #0
 800e82a:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e830:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e836:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e83e:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	691b      	ldr	r3, [r3, #16]
 800e844:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	7d1b      	ldrb	r3, [r3, #20]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d126      	bne.n	800e89c <tcp_abandon+0xb8>
      if (pcb->local_port != 0) {
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	8adb      	ldrh	r3, [r3, #22]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d02e      	beq.n	800e8b4 <tcp_abandon+0xd0>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e856:	4b3a      	ldr	r3, [pc, #232]	@ (800e940 <tcp_abandon+0x15c>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d105      	bne.n	800e86c <tcp_abandon+0x88>
 800e860:	4b37      	ldr	r3, [pc, #220]	@ (800e940 <tcp_abandon+0x15c>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	4a36      	ldr	r2, [pc, #216]	@ (800e940 <tcp_abandon+0x15c>)
 800e868:	6013      	str	r3, [r2, #0]
 800e86a:	e013      	b.n	800e894 <tcp_abandon+0xb0>
 800e86c:	4b34      	ldr	r3, [pc, #208]	@ (800e940 <tcp_abandon+0x15c>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	61fb      	str	r3, [r7, #28]
 800e872:	e00c      	b.n	800e88e <tcp_abandon+0xaa>
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d104      	bne.n	800e888 <tcp_abandon+0xa4>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	68da      	ldr	r2, [r3, #12]
 800e882:	69fb      	ldr	r3, [r7, #28]
 800e884:	60da      	str	r2, [r3, #12]
 800e886:	e005      	b.n	800e894 <tcp_abandon+0xb0>
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	61fb      	str	r3, [r7, #28]
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1ef      	bne.n	800e874 <tcp_abandon+0x90>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	60da      	str	r2, [r3, #12]
 800e89a:	e00b      	b.n	800e8b4 <tcp_abandon+0xd0>
      }
    } else {
      send_rst = reset;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	8adb      	ldrh	r3, [r3, #22]
 800e8a4:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e8a6:	6879      	ldr	r1, [r7, #4]
 800e8a8:	4826      	ldr	r0, [pc, #152]	@ (800e944 <tcp_abandon+0x160>)
 800e8aa:	f000 ff49 	bl	800f740 <tcp_pcb_remove>
 800e8ae:	4b26      	ldr	r3, [pc, #152]	@ (800e948 <tcp_abandon+0x164>)
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d004      	beq.n	800e8c6 <tcp_abandon+0xe2>
      tcp_segs_free(pcb->unacked);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f000 fd07 	bl	800f2d4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d004      	beq.n	800e8d8 <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unsent);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fcfe 	bl	800f2d4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d004      	beq.n	800e8ea <tcp_abandon+0x106>
      tcp_segs_free(pcb->ooseq);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f000 fcf5 	bl	800f2d4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00e      	beq.n	800e90e <tcp_abandon+0x12a>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e8f0:	6879      	ldr	r1, [r7, #4]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	3304      	adds	r3, #4
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	8b12      	ldrh	r2, [r2, #24]
 800e8fa:	9202      	str	r2, [sp, #8]
 800e8fc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e8fe:	9201      	str	r2, [sp, #4]
 800e900:	9300      	str	r3, [sp, #0]
 800e902:	460b      	mov	r3, r1
 800e904:	697a      	ldr	r2, [r7, #20]
 800e906:	69b9      	ldr	r1, [r7, #24]
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f004 fd21 	bl	8013350 <tcp_rst>
    }
    last_state = pcb->state;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	7d1b      	ldrb	r3, [r3, #20]
 800e912:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f7ff fd49 	bl	800e3ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d004      	beq.n	800e92a <tcp_abandon+0x146>
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	f06f 010c 	mvn.w	r1, #12
 800e926:	68f8      	ldr	r0, [r7, #12]
 800e928:	4798      	blx	r3
  }
}
 800e92a:	3728      	adds	r7, #40	@ 0x28
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	0801b6b0 	.word	0x0801b6b0
 800e934:	0801b7a4 	.word	0x0801b7a4
 800e938:	0801b6d8 	.word	0x0801b6d8
 800e93c:	2000a314 	.word	0x2000a314
 800e940:	2000a308 	.word	0x2000a308
 800e944:	2000a310 	.word	0x2000a310
 800e948:	2000a318 	.word	0x2000a318

0800e94c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e954:	2101      	movs	r1, #1
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f7ff ff44 	bl	800e7e4 <tcp_abandon>
}
 800e95c:	bf00      	nop
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d106      	bne.n	800e980 <tcp_update_rcv_ann_wnd+0x1c>
 800e972:	4b25      	ldr	r3, [pc, #148]	@ (800ea08 <tcp_update_rcv_ann_wnd+0xa4>)
 800e974:	f240 32aa 	movw	r2, #938	@ 0x3aa
 800e978:	4924      	ldr	r1, [pc, #144]	@ (800ea0c <tcp_update_rcv_ann_wnd+0xa8>)
 800e97a:	4825      	ldr	r0, [pc, #148]	@ (800ea10 <tcp_update_rcv_ann_wnd+0xac>)
 800e97c:	f00a f9d2 	bl	8018d24 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e988:	4413      	add	r3, r2
 800e98a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e994:	f640 3168 	movw	r1, #2920	@ 0xb68
 800e998:	428a      	cmp	r2, r1
 800e99a:	bf28      	it	cs
 800e99c:	460a      	movcs	r2, r1
 800e99e:	b292      	uxth	r2, r2
 800e9a0:	4413      	add	r3, r2
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	1ad3      	subs	r3, r2, r3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	db08      	blt.n	800e9bc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9b6:	68fa      	ldr	r2, [r7, #12]
 800e9b8:	1ad3      	subs	r3, r2, r3
 800e9ba:	e020      	b.n	800e9fe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	da03      	bge.n	800e9d2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e9d0:	e014      	b.n	800e9fc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9da:	1ad3      	subs	r3, r2, r3
 800e9dc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e9e4:	d306      	bcc.n	800e9f4 <tcp_update_rcv_ann_wnd+0x90>
 800e9e6:	4b08      	ldr	r3, [pc, #32]	@ (800ea08 <tcp_update_rcv_ann_wnd+0xa4>)
 800e9e8:	f240 32ba 	movw	r2, #954	@ 0x3ba
 800e9ec:	4909      	ldr	r1, [pc, #36]	@ (800ea14 <tcp_update_rcv_ann_wnd+0xb0>)
 800e9ee:	4808      	ldr	r0, [pc, #32]	@ (800ea10 <tcp_update_rcv_ann_wnd+0xac>)
 800e9f0:	f00a f998 	bl	8018d24 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	b29a      	uxth	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e9fc:	2300      	movs	r3, #0
  }
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3710      	adds	r7, #16
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	0801b6b0 	.word	0x0801b6b0
 800ea0c:	0801b7f8 	.word	0x0801b7f8
 800ea10:	0801b6d8 	.word	0x0801b6d8
 800ea14:	0801b81c 	.word	0x0801b81c

0800ea18 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	460b      	mov	r3, r1
 800ea22:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d034      	beq.n	800ea94 <tcp_recved+0x7c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	7d1b      	ldrb	r3, [r3, #20]
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d106      	bne.n	800ea40 <tcp_recved+0x28>
 800ea32:	4b1a      	ldr	r3, [pc, #104]	@ (800ea9c <tcp_recved+0x84>)
 800ea34:	f240 32d6 	movw	r2, #982	@ 0x3d6
 800ea38:	4919      	ldr	r1, [pc, #100]	@ (800eaa0 <tcp_recved+0x88>)
 800ea3a:	481a      	ldr	r0, [pc, #104]	@ (800eaa4 <tcp_recved+0x8c>)
 800ea3c:	f00a f972 	bl	8018d24 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ea44:	887b      	ldrh	r3, [r7, #2]
 800ea46:	4413      	add	r3, r2
 800ea48:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ea4a:	89fb      	ldrh	r3, [r7, #14]
 800ea4c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d804      	bhi.n	800ea5e <tcp_recved+0x46>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea58:	89fa      	ldrh	r2, [r7, #14]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d204      	bcs.n	800ea68 <tcp_recved+0x50>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ea64:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ea66:	e002      	b.n	800ea6e <tcp_recved+0x56>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	89fa      	ldrh	r2, [r7, #14]
 800ea6c:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f7ff ff78 	bl	800e964 <tcp_update_rcv_ann_wnd>
 800ea74:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d909      	bls.n	800ea94 <tcp_recved+0x7c>
    tcp_ack_now(pcb);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	8b5b      	ldrh	r3, [r3, #26]
 800ea84:	f043 0302 	orr.w	r3, r3, #2
 800ea88:	b29a      	uxth	r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f003 fe34 	bl	80126fc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	0801b6b0 	.word	0x0801b6b0
 800eaa0:	0801b838 	.word	0x0801b838
 800eaa4:	0801b6d8 	.word	0x0801b6d8

0800eaa8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800eaa8:	b5b0      	push	{r4, r5, r7, lr}
 800eaaa:	b090      	sub	sp, #64	@ 0x40
 800eaac:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800eaae:	2300      	movs	r3, #0
 800eab0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800eab4:	4b95      	ldr	r3, [pc, #596]	@ (800ed0c <tcp_slowtmr+0x264>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	3301      	adds	r3, #1
 800eaba:	4a94      	ldr	r2, [pc, #592]	@ (800ed0c <tcp_slowtmr+0x264>)
 800eabc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800eabe:	4b94      	ldr	r3, [pc, #592]	@ (800ed10 <tcp_slowtmr+0x268>)
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	3301      	adds	r3, #1
 800eac4:	b2da      	uxtb	r2, r3
 800eac6:	4b92      	ldr	r3, [pc, #584]	@ (800ed10 <tcp_slowtmr+0x268>)
 800eac8:	701a      	strb	r2, [r3, #0]
 800eaca:	e000      	b.n	800eace <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800eacc:	bf00      	nop
  prev = NULL;
 800eace:	2300      	movs	r3, #0
 800ead0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800ead2:	4b90      	ldr	r3, [pc, #576]	@ (800ed14 <tcp_slowtmr+0x26c>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ead8:	e29f      	b.n	800f01a <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED", pcb->state != CLOSED);
 800eada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eadc:	7d1b      	ldrb	r3, [r3, #20]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d106      	bne.n	800eaf0 <tcp_slowtmr+0x48>
 800eae2:	4b8d      	ldr	r3, [pc, #564]	@ (800ed18 <tcp_slowtmr+0x270>)
 800eae4:	f240 42c2 	movw	r2, #1218	@ 0x4c2
 800eae8:	498c      	ldr	r1, [pc, #560]	@ (800ed1c <tcp_slowtmr+0x274>)
 800eaea:	488d      	ldr	r0, [pc, #564]	@ (800ed20 <tcp_slowtmr+0x278>)
 800eaec:	f00a f91a 	bl	8018d24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN", pcb->state != LISTEN);
 800eaf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf2:	7d1b      	ldrb	r3, [r3, #20]
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d106      	bne.n	800eb06 <tcp_slowtmr+0x5e>
 800eaf8:	4b87      	ldr	r3, [pc, #540]	@ (800ed18 <tcp_slowtmr+0x270>)
 800eafa:	f240 42c3 	movw	r2, #1219	@ 0x4c3
 800eafe:	4989      	ldr	r1, [pc, #548]	@ (800ed24 <tcp_slowtmr+0x27c>)
 800eb00:	4887      	ldr	r0, [pc, #540]	@ (800ed20 <tcp_slowtmr+0x278>)
 800eb02:	f00a f90f 	bl	8018d24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800eb06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb08:	7d1b      	ldrb	r3, [r3, #20]
 800eb0a:	2b0a      	cmp	r3, #10
 800eb0c:	d106      	bne.n	800eb1c <tcp_slowtmr+0x74>
 800eb0e:	4b82      	ldr	r3, [pc, #520]	@ (800ed18 <tcp_slowtmr+0x270>)
 800eb10:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 800eb14:	4984      	ldr	r1, [pc, #528]	@ (800ed28 <tcp_slowtmr+0x280>)
 800eb16:	4882      	ldr	r0, [pc, #520]	@ (800ed20 <tcp_slowtmr+0x278>)
 800eb18:	f00a f904 	bl	8018d24 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800eb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb1e:	7f9a      	ldrb	r2, [r3, #30]
 800eb20:	4b7b      	ldr	r3, [pc, #492]	@ (800ed10 <tcp_slowtmr+0x268>)
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d105      	bne.n	800eb34 <tcp_slowtmr+0x8c>
      prev = pcb;
 800eb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800eb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800eb32:	e272      	b.n	800f01a <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800eb34:	4b76      	ldr	r3, [pc, #472]	@ (800ed10 <tcp_slowtmr+0x268>)
 800eb36:	781a      	ldrb	r2, [r3, #0]
 800eb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb3a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800eb48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb4a:	7d1b      	ldrb	r3, [r3, #20]
 800eb4c:	2b02      	cmp	r3, #2
 800eb4e:	d10a      	bne.n	800eb66 <tcp_slowtmr+0xbe>
 800eb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eb56:	2b05      	cmp	r3, #5
 800eb58:	d905      	bls.n	800eb66 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800eb5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb5e:	3301      	adds	r3, #1
 800eb60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb64:	e11e      	b.n	800eda4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800eb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eb6c:	2b0b      	cmp	r3, #11
 800eb6e:	d905      	bls.n	800eb7c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800eb70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb74:	3301      	adds	r3, #1
 800eb76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb7a:	e113      	b.n	800eda4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800eb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d075      	beq.n	800ec72 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800eb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d006      	beq.n	800eb9c <tcp_slowtmr+0xf4>
 800eb8e:	4b62      	ldr	r3, [pc, #392]	@ (800ed18 <tcp_slowtmr+0x270>)
 800eb90:	f44f 629b 	mov.w	r2, #1240	@ 0x4d8
 800eb94:	4965      	ldr	r1, [pc, #404]	@ (800ed2c <tcp_slowtmr+0x284>)
 800eb96:	4862      	ldr	r0, [pc, #392]	@ (800ed20 <tcp_slowtmr+0x278>)
 800eb98:	f00a f8c4 	bl	8018d24 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800eb9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d106      	bne.n	800ebb2 <tcp_slowtmr+0x10a>
 800eba4:	4b5c      	ldr	r3, [pc, #368]	@ (800ed18 <tcp_slowtmr+0x270>)
 800eba6:	f240 42d9 	movw	r2, #1241	@ 0x4d9
 800ebaa:	4961      	ldr	r1, [pc, #388]	@ (800ed30 <tcp_slowtmr+0x288>)
 800ebac:	485c      	ldr	r0, [pc, #368]	@ (800ed20 <tcp_slowtmr+0x278>)
 800ebae:	f00a f8b9 	bl	8018d24 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ebb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebb4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ebb8:	2b0b      	cmp	r3, #11
 800ebba:	d905      	bls.n	800ebc8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800ebbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ebc6:	e0ed      	b.n	800eda4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ebc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ebce:	3b01      	subs	r3, #1
 800ebd0:	4a58      	ldr	r2, [pc, #352]	@ (800ed34 <tcp_slowtmr+0x28c>)
 800ebd2:	5cd3      	ldrb	r3, [r2, r3]
 800ebd4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ebd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ebdc:	7c7a      	ldrb	r2, [r7, #17]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d907      	bls.n	800ebf2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800ebe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ebe8:	3301      	adds	r3, #1
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebee:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800ebf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ebf8:	7c7a      	ldrb	r2, [r7, #17]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	f200 80d2 	bhi.w	800eda4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800ec00:	2301      	movs	r3, #1
 800ec02:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800ec04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d108      	bne.n	800ec20 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ec0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec10:	f004 fc88 	bl	8013524 <tcp_zero_window_probe>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d014      	beq.n	800ec44 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	623b      	str	r3, [r7, #32]
 800ec1e:	e011      	b.n	800ec44 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ec20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec26:	4619      	mov	r1, r3
 800ec28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec2a:	f003 fadf 	bl	80121ec <tcp_split_unsent_seg>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d107      	bne.n	800ec44 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800ec34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec36:	f003 fd61 	bl	80126fc <tcp_output>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d101      	bne.n	800ec44 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800ec44:	6a3b      	ldr	r3, [r7, #32]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	f000 80ac 	beq.w	800eda4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800ec4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ec54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec56:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ec5a:	2b06      	cmp	r3, #6
 800ec5c:	f200 80a2 	bhi.w	800eda4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800ec60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec62:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ec66:	3301      	adds	r3, #1
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec6c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800ec70:	e098      	b.n	800eda4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ec72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	db0f      	blt.n	800ec9c <tcp_slowtmr+0x1f4>
 800ec7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ec82:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d008      	beq.n	800ec9c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800ec8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	3301      	adds	r3, #1
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	b21a      	sxth	r2, r3
 800ec98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec9a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800ec9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec9e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800eca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eca4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	db7b      	blt.n	800eda4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ecac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ecae:	f004 f819 	bl	8012ce4 <tcp_rexmit_rto_prepare>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d007      	beq.n	800ecc8 <tcp_slowtmr+0x220>
 800ecb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d171      	bne.n	800eda4 <tcp_slowtmr+0x2fc>
 800ecc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d06d      	beq.n	800eda4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800ecc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecca:	7d1b      	ldrb	r3, [r3, #20]
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d03a      	beq.n	800ed46 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ecd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ecd6:	2b0c      	cmp	r3, #12
 800ecd8:	bf28      	it	cs
 800ecda:	230c      	movcs	r3, #12
 800ecdc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ecde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ece0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ece4:	10db      	asrs	r3, r3, #3
 800ece6:	b21b      	sxth	r3, r3
 800ece8:	461a      	mov	r2, r3
 800ecea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ecf0:	4413      	add	r3, r2
 800ecf2:	7efa      	ldrb	r2, [r7, #27]
 800ecf4:	4910      	ldr	r1, [pc, #64]	@ (800ed38 <tcp_slowtmr+0x290>)
 800ecf6:	5c8a      	ldrb	r2, [r1, r2]
 800ecf8:	4093      	lsls	r3, r2
 800ecfa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ed02:	4293      	cmp	r3, r2
 800ed04:	dc1a      	bgt.n	800ed3c <tcp_slowtmr+0x294>
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	b21a      	sxth	r2, r3
 800ed0a:	e019      	b.n	800ed40 <tcp_slowtmr+0x298>
 800ed0c:	2000a304 	.word	0x2000a304
 800ed10:	2000a31a 	.word	0x2000a31a
 800ed14:	2000a310 	.word	0x2000a310
 800ed18:	0801b6b0 	.word	0x0801b6b0
 800ed1c:	0801b860 	.word	0x0801b860
 800ed20:	0801b6d8 	.word	0x0801b6d8
 800ed24:	0801b88c 	.word	0x0801b88c
 800ed28:	0801b8b8 	.word	0x0801b8b8
 800ed2c:	0801b8e4 	.word	0x0801b8e4
 800ed30:	0801b918 	.word	0x0801b918
 800ed34:	0801d3d4 	.word	0x0801d3d4
 800ed38:	0801d3c4 	.word	0x0801d3c4
 800ed3c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ed40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800ed46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed48:	2200      	movs	r2, #0
 800ed4a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ed4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ed52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	bf28      	it	cs
 800ed5c:	4613      	movcs	r3, r2
 800ed5e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ed60:	8a7b      	ldrh	r3, [r7, #18]
 800ed62:	085b      	lsrs	r3, r3, #1
 800ed64:	b29a      	uxth	r2, r3
 800ed66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed68:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ed6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ed72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed76:	005b      	lsls	r3, r3, #1
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d206      	bcs.n	800ed8c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ed7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed82:	005b      	lsls	r3, r3, #1
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed88:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ed8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed8e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ed90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed92:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ed96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed98:	2200      	movs	r2, #0
 800ed9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ed9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eda0:	f004 f810 	bl	8012dc4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800eda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda6:	7d1b      	ldrb	r3, [r3, #20]
 800eda8:	2b06      	cmp	r3, #6
 800edaa:	d111      	bne.n	800edd0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800edac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edae:	8b5b      	ldrh	r3, [r3, #26]
 800edb0:	f003 0310 	and.w	r3, r3, #16
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d00b      	beq.n	800edd0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800edb8:	4b9d      	ldr	r3, [pc, #628]	@ (800f030 <tcp_slowtmr+0x588>)
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edbe:	6a1b      	ldr	r3, [r3, #32]
 800edc0:	1ad3      	subs	r3, r2, r3
 800edc2:	2b28      	cmp	r3, #40	@ 0x28
 800edc4:	d904      	bls.n	800edd0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800edc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edca:	3301      	adds	r3, #1
 800edcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800edd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edd2:	7a5b      	ldrb	r3, [r3, #9]
 800edd4:	f003 0308 	and.w	r3, r3, #8
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d04c      	beq.n	800ee76 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800eddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edde:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ede0:	2b04      	cmp	r3, #4
 800ede2:	d003      	beq.n	800edec <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800ede4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ede6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ede8:	2b07      	cmp	r3, #7
 800edea:	d144      	bne.n	800ee76 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800edec:	4b90      	ldr	r3, [pc, #576]	@ (800f030 <tcp_slowtmr+0x588>)
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf2:	6a1b      	ldr	r3, [r3, #32]
 800edf4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800edf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800edfc:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800ee00:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800ee04:	498b      	ldr	r1, [pc, #556]	@ (800f034 <tcp_slowtmr+0x58c>)
 800ee06:	fba1 1303 	umull	r1, r3, r1, r3
 800ee0a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d90a      	bls.n	800ee26 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800ee10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee14:	3301      	adds	r3, #1
 800ee16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800ee1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ee1e:	3301      	adds	r3, #1
 800ee20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ee24:	e027      	b.n	800ee76 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee26:	4b82      	ldr	r3, [pc, #520]	@ (800f030 <tcp_slowtmr+0x588>)
 800ee28:	681a      	ldr	r2, [r3, #0]
 800ee2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee2c:	6a1b      	ldr	r3, [r3, #32]
 800ee2e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ee30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee32:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ee36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee38:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	4b7e      	ldr	r3, [pc, #504]	@ (800f038 <tcp_slowtmr+0x590>)
 800ee40:	fb00 f303 	mul.w	r3, r0, r3
 800ee44:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ee46:	497b      	ldr	r1, [pc, #492]	@ (800f034 <tcp_slowtmr+0x58c>)
 800ee48:	fba1 1303 	umull	r1, r3, r1, r3
 800ee4c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d911      	bls.n	800ee76 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800ee52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee54:	f004 fb26 	bl	80134a4 <tcp_keepalive>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800ee5e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d107      	bne.n	800ee76 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800ee66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee68:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	b2da      	uxtb	r2, r3
 800ee70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee72:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800ee76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d011      	beq.n	800eea2 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ee7e:	4b6c      	ldr	r3, [pc, #432]	@ (800f030 <tcp_slowtmr+0x588>)
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee84:	6a1b      	ldr	r3, [r3, #32]
 800ee86:	1ad2      	subs	r2, r2, r3
 800ee88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee8a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ee8e:	4619      	mov	r1, r3
 800ee90:	460b      	mov	r3, r1
 800ee92:	005b      	lsls	r3, r3, #1
 800ee94:	440b      	add	r3, r1
 800ee96:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d302      	bcc.n	800eea2 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800ee9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee9e:	f000 fdb3 	bl	800fa08 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800eea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eea4:	7d1b      	ldrb	r3, [r3, #20]
 800eea6:	2b03      	cmp	r3, #3
 800eea8:	d10b      	bne.n	800eec2 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eeaa:	4b61      	ldr	r3, [pc, #388]	@ (800f030 <tcp_slowtmr+0x588>)
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeb0:	6a1b      	ldr	r3, [r3, #32]
 800eeb2:	1ad3      	subs	r3, r2, r3
 800eeb4:	2b28      	cmp	r3, #40	@ 0x28
 800eeb6:	d904      	bls.n	800eec2 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800eeb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eebc:	3301      	adds	r3, #1
 800eebe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800eec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eec4:	7d1b      	ldrb	r3, [r3, #20]
 800eec6:	2b09      	cmp	r3, #9
 800eec8:	d10b      	bne.n	800eee2 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eeca:	4b59      	ldr	r3, [pc, #356]	@ (800f030 <tcp_slowtmr+0x588>)
 800eecc:	681a      	ldr	r2, [r3, #0]
 800eece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eed0:	6a1b      	ldr	r3, [r3, #32]
 800eed2:	1ad3      	subs	r3, r2, r3
 800eed4:	2bf0      	cmp	r3, #240	@ 0xf0
 800eed6:	d904      	bls.n	800eee2 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800eed8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eedc:	3301      	adds	r3, #1
 800eede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800eee2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d060      	beq.n	800efac <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800eeea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eef0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800eef2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eef4:	f000 fbe2 	bl	800f6bc <tcp_pcb_purge>
      if (prev != NULL) {
 800eef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d010      	beq.n	800ef20 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800eefe:	4b4f      	ldr	r3, [pc, #316]	@ (800f03c <tcp_slowtmr+0x594>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d106      	bne.n	800ef16 <tcp_slowtmr+0x46e>
 800ef08:	4b4d      	ldr	r3, [pc, #308]	@ (800f040 <tcp_slowtmr+0x598>)
 800ef0a:	f240 5271 	movw	r2, #1393	@ 0x571
 800ef0e:	494d      	ldr	r1, [pc, #308]	@ (800f044 <tcp_slowtmr+0x59c>)
 800ef10:	484d      	ldr	r0, [pc, #308]	@ (800f048 <tcp_slowtmr+0x5a0>)
 800ef12:	f009 ff07 	bl	8018d24 <iprintf>
        prev->next = pcb->next;
 800ef16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef18:	68da      	ldr	r2, [r3, #12]
 800ef1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef1c:	60da      	str	r2, [r3, #12]
 800ef1e:	e00f      	b.n	800ef40 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ef20:	4b46      	ldr	r3, [pc, #280]	@ (800f03c <tcp_slowtmr+0x594>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d006      	beq.n	800ef38 <tcp_slowtmr+0x490>
 800ef2a:	4b45      	ldr	r3, [pc, #276]	@ (800f040 <tcp_slowtmr+0x598>)
 800ef2c:	f240 5275 	movw	r2, #1397	@ 0x575
 800ef30:	4946      	ldr	r1, [pc, #280]	@ (800f04c <tcp_slowtmr+0x5a4>)
 800ef32:	4845      	ldr	r0, [pc, #276]	@ (800f048 <tcp_slowtmr+0x5a0>)
 800ef34:	f009 fef6 	bl	8018d24 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ef38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	4a3f      	ldr	r2, [pc, #252]	@ (800f03c <tcp_slowtmr+0x594>)
 800ef3e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800ef40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d013      	beq.n	800ef70 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ef48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef4a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ef4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef4e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ef50:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800ef52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef54:	3304      	adds	r3, #4
 800ef56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef58:	8ad2      	ldrh	r2, [r2, #22]
 800ef5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef5c:	8b09      	ldrh	r1, [r1, #24]
 800ef5e:	9102      	str	r1, [sp, #8]
 800ef60:	9201      	str	r2, [sp, #4]
 800ef62:	9300      	str	r3, [sp, #0]
 800ef64:	462b      	mov	r3, r5
 800ef66:	4622      	mov	r2, r4
 800ef68:	4601      	mov	r1, r0
 800ef6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef6c:	f004 f9f0 	bl	8013350 <tcp_rst>
      err_arg = pcb->callback_arg;
 800ef70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef72:	691b      	ldr	r3, [r3, #16]
 800ef74:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ef76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef78:	7d1b      	ldrb	r3, [r3, #20]
 800ef7a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ef7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef7e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ef80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef82:	68db      	ldr	r3, [r3, #12]
 800ef84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ef86:	6838      	ldr	r0, [r7, #0]
 800ef88:	f7ff fa10 	bl	800e3ac <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ef8c:	4b30      	ldr	r3, [pc, #192]	@ (800f050 <tcp_slowtmr+0x5a8>)
 800ef8e:	2200      	movs	r2, #0
 800ef90:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d004      	beq.n	800efa2 <tcp_slowtmr+0x4fa>
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f06f 010c 	mvn.w	r1, #12
 800ef9e:	68b8      	ldr	r0, [r7, #8]
 800efa0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800efa2:	4b2b      	ldr	r3, [pc, #172]	@ (800f050 <tcp_slowtmr+0x5a8>)
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d037      	beq.n	800f01a <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800efaa:	e590      	b.n	800eace <tcp_slowtmr+0x26>
      prev = pcb;
 800efac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800efb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800efb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efb8:	7f1b      	ldrb	r3, [r3, #28]
 800efba:	3301      	adds	r3, #1
 800efbc:	b2da      	uxtb	r2, r3
 800efbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800efc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc4:	7f1a      	ldrb	r2, [r3, #28]
 800efc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc8:	7f5b      	ldrb	r3, [r3, #29]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d325      	bcc.n	800f01a <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800efce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd0:	2200      	movs	r2, #0
 800efd2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800efd4:	4b1e      	ldr	r3, [pc, #120]	@ (800f050 <tcp_slowtmr+0x5a8>)
 800efd6:	2200      	movs	r2, #0
 800efd8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800efda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d00b      	beq.n	800effc <tcp_slowtmr+0x554>
 800efe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800efea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efec:	6912      	ldr	r2, [r2, #16]
 800efee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eff0:	4610      	mov	r0, r2
 800eff2:	4798      	blx	r3
 800eff4:	4603      	mov	r3, r0
 800eff6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800effa:	e002      	b.n	800f002 <tcp_slowtmr+0x55a>
 800effc:	2300      	movs	r3, #0
 800effe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800f002:	4b13      	ldr	r3, [pc, #76]	@ (800f050 <tcp_slowtmr+0x5a8>)
 800f004:	781b      	ldrb	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	f47f ad60 	bne.w	800eacc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f00c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f010:	2b00      	cmp	r3, #0
 800f012:	d102      	bne.n	800f01a <tcp_slowtmr+0x572>
          tcp_output(prev);
 800f014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f016:	f003 fb71 	bl	80126fc <tcp_output>
  while (pcb != NULL) {
 800f01a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	f47f ad5c 	bne.w	800eada <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f022:	2300      	movs	r3, #0
 800f024:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800f026:	4b0b      	ldr	r3, [pc, #44]	@ (800f054 <tcp_slowtmr+0x5ac>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f02c:	e067      	b.n	800f0fe <tcp_slowtmr+0x656>
 800f02e:	bf00      	nop
 800f030:	2000a304 	.word	0x2000a304
 800f034:	10624dd3 	.word	0x10624dd3
 800f038:	000124f8 	.word	0x000124f8
 800f03c:	2000a310 	.word	0x2000a310
 800f040:	0801b6b0 	.word	0x0801b6b0
 800f044:	0801b950 	.word	0x0801b950
 800f048:	0801b6d8 	.word	0x0801b6d8
 800f04c:	0801b97c 	.word	0x0801b97c
 800f050:	2000a318 	.word	0x2000a318
 800f054:	2000a314 	.word	0x2000a314
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f05a:	7d1b      	ldrb	r3, [r3, #20]
 800f05c:	2b0a      	cmp	r3, #10
 800f05e:	d006      	beq.n	800f06e <tcp_slowtmr+0x5c6>
 800f060:	4b2b      	ldr	r3, [pc, #172]	@ (800f110 <tcp_slowtmr+0x668>)
 800f062:	f240 52a5 	movw	r2, #1445	@ 0x5a5
 800f066:	492b      	ldr	r1, [pc, #172]	@ (800f114 <tcp_slowtmr+0x66c>)
 800f068:	482b      	ldr	r0, [pc, #172]	@ (800f118 <tcp_slowtmr+0x670>)
 800f06a:	f009 fe5b 	bl	8018d24 <iprintf>
    pcb_remove = 0;
 800f06e:	2300      	movs	r3, #0
 800f070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f074:	4b29      	ldr	r3, [pc, #164]	@ (800f11c <tcp_slowtmr+0x674>)
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f07a:	6a1b      	ldr	r3, [r3, #32]
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	2bf0      	cmp	r3, #240	@ 0xf0
 800f080:	d904      	bls.n	800f08c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800f082:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f086:	3301      	adds	r3, #1
 800f088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f08c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f090:	2b00      	cmp	r3, #0
 800f092:	d02f      	beq.n	800f0f4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f094:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f096:	f000 fb11 	bl	800f6bc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d010      	beq.n	800f0c2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f0a0:	4b1f      	ldr	r3, [pc, #124]	@ (800f120 <tcp_slowtmr+0x678>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d106      	bne.n	800f0b8 <tcp_slowtmr+0x610>
 800f0aa:	4b19      	ldr	r3, [pc, #100]	@ (800f110 <tcp_slowtmr+0x668>)
 800f0ac:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f0b0:	491c      	ldr	r1, [pc, #112]	@ (800f124 <tcp_slowtmr+0x67c>)
 800f0b2:	4819      	ldr	r0, [pc, #100]	@ (800f118 <tcp_slowtmr+0x670>)
 800f0b4:	f009 fe36 	bl	8018d24 <iprintf>
        prev->next = pcb->next;
 800f0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ba:	68da      	ldr	r2, [r3, #12]
 800f0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0be:	60da      	str	r2, [r3, #12]
 800f0c0:	e00f      	b.n	800f0e2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f0c2:	4b17      	ldr	r3, [pc, #92]	@ (800f120 <tcp_slowtmr+0x678>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d006      	beq.n	800f0da <tcp_slowtmr+0x632>
 800f0cc:	4b10      	ldr	r3, [pc, #64]	@ (800f110 <tcp_slowtmr+0x668>)
 800f0ce:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 800f0d2:	4915      	ldr	r1, [pc, #84]	@ (800f128 <tcp_slowtmr+0x680>)
 800f0d4:	4810      	ldr	r0, [pc, #64]	@ (800f118 <tcp_slowtmr+0x670>)
 800f0d6:	f009 fe25 	bl	8018d24 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	4a10      	ldr	r2, [pc, #64]	@ (800f120 <tcp_slowtmr+0x678>)
 800f0e0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f0ec:	69f8      	ldr	r0, [r7, #28]
 800f0ee:	f7ff f95d 	bl	800e3ac <tcp_free>
 800f0f2:	e004      	b.n	800f0fe <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800f0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f100:	2b00      	cmp	r3, #0
 800f102:	d1a9      	bne.n	800f058 <tcp_slowtmr+0x5b0>
    }
  }
}
 800f104:	bf00      	nop
 800f106:	bf00      	nop
 800f108:	3730      	adds	r7, #48	@ 0x30
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bdb0      	pop	{r4, r5, r7, pc}
 800f10e:	bf00      	nop
 800f110:	0801b6b0 	.word	0x0801b6b0
 800f114:	0801b9a8 	.word	0x0801b9a8
 800f118:	0801b6d8 	.word	0x0801b6d8
 800f11c:	2000a304 	.word	0x2000a304
 800f120:	2000a314 	.word	0x2000a314
 800f124:	0801b9d8 	.word	0x0801b9d8
 800f128:	0801ba00 	.word	0x0801ba00

0800f12c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f132:	4b2d      	ldr	r3, [pc, #180]	@ (800f1e8 <tcp_fasttmr+0xbc>)
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	3301      	adds	r3, #1
 800f138:	b2da      	uxtb	r2, r3
 800f13a:	4b2b      	ldr	r3, [pc, #172]	@ (800f1e8 <tcp_fasttmr+0xbc>)
 800f13c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f13e:	4b2b      	ldr	r3, [pc, #172]	@ (800f1ec <tcp_fasttmr+0xc0>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f144:	e048      	b.n	800f1d8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	7f9a      	ldrb	r2, [r3, #30]
 800f14a:	4b27      	ldr	r3, [pc, #156]	@ (800f1e8 <tcp_fasttmr+0xbc>)
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	429a      	cmp	r2, r3
 800f150:	d03f      	beq.n	800f1d2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f152:	4b25      	ldr	r3, [pc, #148]	@ (800f1e8 <tcp_fasttmr+0xbc>)
 800f154:	781a      	ldrb	r2, [r3, #0]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	8b5b      	ldrh	r3, [r3, #26]
 800f15e:	f003 0301 	and.w	r3, r3, #1
 800f162:	2b00      	cmp	r3, #0
 800f164:	d010      	beq.n	800f188 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	8b5b      	ldrh	r3, [r3, #26]
 800f16a:	f043 0302 	orr.w	r3, r3, #2
 800f16e:	b29a      	uxth	r2, r3
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f003 fac1 	bl	80126fc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	8b5b      	ldrh	r3, [r3, #26]
 800f17e:	f023 0303 	bic.w	r3, r3, #3
 800f182:	b29a      	uxth	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	8b5b      	ldrh	r3, [r3, #26]
 800f18c:	f003 0308 	and.w	r3, r3, #8
 800f190:	2b00      	cmp	r3, #0
 800f192:	d009      	beq.n	800f1a8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	8b5b      	ldrh	r3, [r3, #26]
 800f198:	f023 0308 	bic.w	r3, r3, #8
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f7ff fa96 	bl	800e6d4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d00a      	beq.n	800f1cc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f1b6:	4b0e      	ldr	r3, [pc, #56]	@ (800f1f0 <tcp_fasttmr+0xc4>)
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 f819 	bl	800f1f4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f1c2:	4b0b      	ldr	r3, [pc, #44]	@ (800f1f0 <tcp_fasttmr+0xc4>)
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d000      	beq.n	800f1cc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f1ca:	e7b8      	b.n	800f13e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	607b      	str	r3, [r7, #4]
 800f1d0:	e002      	b.n	800f1d8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	68db      	ldr	r3, [r3, #12]
 800f1d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d1b3      	bne.n	800f146 <tcp_fasttmr+0x1a>
    }
  }
}
 800f1de:	bf00      	nop
 800f1e0:	bf00      	nop
 800f1e2:	3708      	adds	r7, #8
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}
 800f1e8:	2000a31a 	.word	0x2000a31a
 800f1ec:	2000a310 	.word	0x2000a310
 800f1f0:	2000a318 	.word	0x2000a318

0800f1f4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f1f4:	b590      	push	{r4, r7, lr}
 800f1f6:	b085      	sub	sp, #20
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d102      	bne.n	800f208 <tcp_process_refused_data+0x14>
 800f202:	f06f 030f 	mvn.w	r3, #15
 800f206:	e061      	b.n	800f2cc <tcp_process_refused_data+0xd8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f20c:	7b5b      	ldrb	r3, [r3, #13]
 800f20e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f214:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2200      	movs	r2, #0
 800f21a:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00b      	beq.n	800f23e <tcp_process_refused_data+0x4a>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6918      	ldr	r0, [r3, #16]
 800f230:	2300      	movs	r3, #0
 800f232:	68ba      	ldr	r2, [r7, #8]
 800f234:	6879      	ldr	r1, [r7, #4]
 800f236:	47a0      	blx	r4
 800f238:	4603      	mov	r3, r0
 800f23a:	73fb      	strb	r3, [r7, #15]
 800f23c:	e007      	b.n	800f24e <tcp_process_refused_data+0x5a>
 800f23e:	2300      	movs	r3, #0
 800f240:	68ba      	ldr	r2, [r7, #8]
 800f242:	6879      	ldr	r1, [r7, #4]
 800f244:	2000      	movs	r0, #0
 800f246:	f000 f89f 	bl	800f388 <tcp_recv_null>
 800f24a:	4603      	mov	r3, r0
 800f24c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f24e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d12b      	bne.n	800f2ae <tcp_process_refused_data+0xba>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f256:	7bbb      	ldrb	r3, [r7, #14]
 800f258:	f003 0320 	and.w	r3, r3, #32
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d034      	beq.n	800f2ca <tcp_process_refused_data+0xd6>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f264:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f268:	4293      	cmp	r3, r2
 800f26a:	d005      	beq.n	800f278 <tcp_process_refused_data+0x84>
          pcb->rcv_wnd++;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f270:	3301      	adds	r3, #1
 800f272:	b29a      	uxth	r2, r3
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d00b      	beq.n	800f29a <tcp_process_refused_data+0xa6>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6918      	ldr	r0, [r3, #16]
 800f28c:	2300      	movs	r3, #0
 800f28e:	2200      	movs	r2, #0
 800f290:	6879      	ldr	r1, [r7, #4]
 800f292:	47a0      	blx	r4
 800f294:	4603      	mov	r3, r0
 800f296:	73fb      	strb	r3, [r7, #15]
 800f298:	e001      	b.n	800f29e <tcp_process_refused_data+0xaa>
 800f29a:	2300      	movs	r3, #0
 800f29c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f29e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2a2:	f113 0f0d 	cmn.w	r3, #13
 800f2a6:	d110      	bne.n	800f2ca <tcp_process_refused_data+0xd6>
          return ERR_ABRT;
 800f2a8:	f06f 030c 	mvn.w	r3, #12
 800f2ac:	e00e      	b.n	800f2cc <tcp_process_refused_data+0xd8>
        }
      }
    } else if (err == ERR_ABRT) {
 800f2ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2b2:	f113 0f0d 	cmn.w	r3, #13
 800f2b6:	d102      	bne.n	800f2be <tcp_process_refused_data+0xca>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f2b8:	f06f 030c 	mvn.w	r3, #12
 800f2bc:	e006      	b.n	800f2cc <tcp_process_refused_data+0xd8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	68ba      	ldr	r2, [r7, #8]
 800f2c2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f2c4:	f06f 0304 	mvn.w	r3, #4
 800f2c8:	e000      	b.n	800f2cc <tcp_process_refused_data+0xd8>
    }
  }
  return ERR_OK;
 800f2ca:	2300      	movs	r3, #0
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3714      	adds	r7, #20
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd90      	pop	{r4, r7, pc}

0800f2d4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b084      	sub	sp, #16
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f2dc:	e007      	b.n	800f2ee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 f80a 	bl	800f2fe <tcp_seg_free>
    seg = next;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d1f4      	bne.n	800f2de <tcp_segs_free+0xa>
  }
}
 800f2f4:	bf00      	nop
 800f2f6:	bf00      	nop
 800f2f8:	3710      	adds	r7, #16
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}

0800f2fe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b082      	sub	sp, #8
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d00c      	beq.n	800f326 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d004      	beq.n	800f31e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	4618      	mov	r0, r3
 800f31a:	f7fe fd25 	bl	800dd68 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f31e:	6879      	ldr	r1, [r7, #4]
 800f320:	2003      	movs	r0, #3
 800f322:	f7fd fefd 	bl	800d120 <memp_free>
  }
}
 800f326:	bf00      	nop
 800f328:	3708      	adds	r7, #8
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
	...

0800f330 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d106      	bne.n	800f34c <tcp_seg_copy+0x1c>
 800f33e:	4b0f      	ldr	r3, [pc, #60]	@ (800f37c <tcp_seg_copy+0x4c>)
 800f340:	f240 6286 	movw	r2, #1670	@ 0x686
 800f344:	490e      	ldr	r1, [pc, #56]	@ (800f380 <tcp_seg_copy+0x50>)
 800f346:	480f      	ldr	r0, [pc, #60]	@ (800f384 <tcp_seg_copy+0x54>)
 800f348:	f009 fcec 	bl	8018d24 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f34c:	2003      	movs	r0, #3
 800f34e:	f7fd fe83 	bl	800d058 <memp_malloc>
 800f352:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d101      	bne.n	800f35e <tcp_seg_copy+0x2e>
    return NULL;
 800f35a:	2300      	movs	r3, #0
 800f35c:	e00a      	b.n	800f374 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f35e:	2210      	movs	r2, #16
 800f360:	6879      	ldr	r1, [r7, #4]
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f009 ff01 	bl	801916a <memcpy>
  pbuf_ref(cseg->p);
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7fe fd9b 	bl	800dea8 <pbuf_ref>
  return cseg;
 800f372:	68fb      	ldr	r3, [r7, #12]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3710      	adds	r7, #16
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	0801b6b0 	.word	0x0801b6b0
 800f380:	0801ba28 	.word	0x0801ba28
 800f384:	0801b6d8 	.word	0x0801b6d8

0800f388 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	607a      	str	r2, [r7, #4]
 800f394:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d102      	bne.n	800f3a2 <tcp_recv_null+0x1a>
 800f39c:	f06f 030f 	mvn.w	r3, #15
 800f3a0:	e016      	b.n	800f3d0 <tcp_recv_null+0x48>

  if (p != NULL) {
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d009      	beq.n	800f3bc <tcp_recv_null+0x34>
    tcp_recved(pcb, p->tot_len);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	891b      	ldrh	r3, [r3, #8]
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	68b8      	ldr	r0, [r7, #8]
 800f3b0:	f7ff fb32 	bl	800ea18 <tcp_recved>
    pbuf_free(p);
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f7fe fcd7 	bl	800dd68 <pbuf_free>
 800f3ba:	e008      	b.n	800f3ce <tcp_recv_null+0x46>
  } else if (err == ERR_OK) {
 800f3bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d104      	bne.n	800f3ce <tcp_recv_null+0x46>
    return tcp_close(pcb);
 800f3c4:	68b8      	ldr	r0, [r7, #8]
 800f3c6:	f7ff f9ef 	bl	800e7a8 <tcp_close>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	e000      	b.n	800f3d0 <tcp_recv_null+0x48>
  }
  return ERR_OK;
 800f3ce:	2300      	movs	r3, #0
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3710      	adds	r7, #16
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b086      	sub	sp, #24
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	4603      	mov	r3, r0
 800f3e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f3e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	db01      	blt.n	800f3ee <tcp_kill_prio+0x16>
 800f3ea:	79fb      	ldrb	r3, [r7, #7]
 800f3ec:	e000      	b.n	800f3f0 <tcp_kill_prio+0x18>
 800f3ee:	237f      	movs	r3, #127	@ 0x7f
 800f3f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f3f2:	7afb      	ldrb	r3, [r7, #11]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d034      	beq.n	800f462 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f3f8:	7afb      	ldrb	r3, [r7, #11]
 800f3fa:	3b01      	subs	r3, #1
 800f3fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f3fe:	2300      	movs	r3, #0
 800f400:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f402:	2300      	movs	r3, #0
 800f404:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f406:	4b19      	ldr	r3, [pc, #100]	@ (800f46c <tcp_kill_prio+0x94>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	617b      	str	r3, [r7, #20]
 800f40c:	e01f      	b.n	800f44e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	7d5b      	ldrb	r3, [r3, #21]
 800f412:	7afa      	ldrb	r2, [r7, #11]
 800f414:	429a      	cmp	r2, r3
 800f416:	d80c      	bhi.n	800f432 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f41c:	7afa      	ldrb	r2, [r7, #11]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d112      	bne.n	800f448 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f422:	4b13      	ldr	r3, [pc, #76]	@ (800f470 <tcp_kill_prio+0x98>)
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	6a1b      	ldr	r3, [r3, #32]
 800f42a:	1ad3      	subs	r3, r2, r3
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	429a      	cmp	r2, r3
 800f430:	d80a      	bhi.n	800f448 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f432:	4b0f      	ldr	r3, [pc, #60]	@ (800f470 <tcp_kill_prio+0x98>)
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	6a1b      	ldr	r3, [r3, #32]
 800f43a:	1ad3      	subs	r3, r2, r3
 800f43c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f43e:	697b      	ldr	r3, [r7, #20]
 800f440:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	7d5b      	ldrb	r3, [r3, #21]
 800f446:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	617b      	str	r3, [r7, #20]
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d1dc      	bne.n	800f40e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d004      	beq.n	800f464 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f45a:	6938      	ldr	r0, [r7, #16]
 800f45c:	f7ff fa76 	bl	800e94c <tcp_abort>
 800f460:	e000      	b.n	800f464 <tcp_kill_prio+0x8c>
    return;
 800f462:	bf00      	nop
  }
}
 800f464:	3718      	adds	r7, #24
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	2000a310 	.word	0x2000a310
 800f470:	2000a304 	.word	0x2000a304

0800f474 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b086      	sub	sp, #24
 800f478:	af00      	add	r7, sp, #0
 800f47a:	4603      	mov	r3, r0
 800f47c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f47e:	79fb      	ldrb	r3, [r7, #7]
 800f480:	2b08      	cmp	r3, #8
 800f482:	d009      	beq.n	800f498 <tcp_kill_state+0x24>
 800f484:	79fb      	ldrb	r3, [r7, #7]
 800f486:	2b09      	cmp	r3, #9
 800f488:	d006      	beq.n	800f498 <tcp_kill_state+0x24>
 800f48a:	4b1a      	ldr	r3, [pc, #104]	@ (800f4f4 <tcp_kill_state+0x80>)
 800f48c:	f240 62e1 	movw	r2, #1761	@ 0x6e1
 800f490:	4919      	ldr	r1, [pc, #100]	@ (800f4f8 <tcp_kill_state+0x84>)
 800f492:	481a      	ldr	r0, [pc, #104]	@ (800f4fc <tcp_kill_state+0x88>)
 800f494:	f009 fc46 	bl	8018d24 <iprintf>

  inactivity = 0;
 800f498:	2300      	movs	r3, #0
 800f49a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f49c:	2300      	movs	r3, #0
 800f49e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4a0:	4b17      	ldr	r3, [pc, #92]	@ (800f500 <tcp_kill_state+0x8c>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	617b      	str	r3, [r7, #20]
 800f4a6:	e017      	b.n	800f4d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	7d1b      	ldrb	r3, [r3, #20]
 800f4ac:	79fa      	ldrb	r2, [r7, #7]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d10f      	bne.n	800f4d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f4b2:	4b14      	ldr	r3, [pc, #80]	@ (800f504 <tcp_kill_state+0x90>)
 800f4b4:	681a      	ldr	r2, [r3, #0]
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	6a1b      	ldr	r3, [r3, #32]
 800f4ba:	1ad3      	subs	r3, r2, r3
 800f4bc:	68fa      	ldr	r2, [r7, #12]
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d807      	bhi.n	800f4d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f4c2:	4b10      	ldr	r3, [pc, #64]	@ (800f504 <tcp_kill_state+0x90>)
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	6a1b      	ldr	r3, [r3, #32]
 800f4ca:	1ad3      	subs	r3, r2, r3
 800f4cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	68db      	ldr	r3, [r3, #12]
 800f4d6:	617b      	str	r3, [r7, #20]
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d1e4      	bne.n	800f4a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d003      	beq.n	800f4ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	6938      	ldr	r0, [r7, #16]
 800f4e8:	f7ff f97c 	bl	800e7e4 <tcp_abandon>
  }
}
 800f4ec:	bf00      	nop
 800f4ee:	3718      	adds	r7, #24
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	0801b6b0 	.word	0x0801b6b0
 800f4f8:	0801ba44 	.word	0x0801ba44
 800f4fc:	0801b6d8 	.word	0x0801b6d8
 800f500:	2000a310 	.word	0x2000a310
 800f504:	2000a304 	.word	0x2000a304

0800f508 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f50e:	2300      	movs	r3, #0
 800f510:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f512:	2300      	movs	r3, #0
 800f514:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f516:	4b12      	ldr	r3, [pc, #72]	@ (800f560 <tcp_kill_timewait+0x58>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	60fb      	str	r3, [r7, #12]
 800f51c:	e012      	b.n	800f544 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f51e:	4b11      	ldr	r3, [pc, #68]	@ (800f564 <tcp_kill_timewait+0x5c>)
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	6a1b      	ldr	r3, [r3, #32]
 800f526:	1ad3      	subs	r3, r2, r3
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d807      	bhi.n	800f53e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f52e:	4b0d      	ldr	r3, [pc, #52]	@ (800f564 <tcp_kill_timewait+0x5c>)
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	6a1b      	ldr	r3, [r3, #32]
 800f536:	1ad3      	subs	r3, r2, r3
 800f538:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	60fb      	str	r3, [r7, #12]
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1e9      	bne.n	800f51e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d002      	beq.n	800f556 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f550:	68b8      	ldr	r0, [r7, #8]
 800f552:	f7ff f9fb 	bl	800e94c <tcp_abort>
  }
}
 800f556:	bf00      	nop
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	2000a314 	.word	0x2000a314
 800f564:	2000a304 	.word	0x2000a304

0800f568 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f56e:	4b10      	ldr	r3, [pc, #64]	@ (800f5b0 <tcp_handle_closepend+0x48>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f574:	e014      	b.n	800f5a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	68db      	ldr	r3, [r3, #12]
 800f57a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	8b5b      	ldrh	r3, [r3, #26]
 800f580:	f003 0308 	and.w	r3, r3, #8
 800f584:	2b00      	cmp	r3, #0
 800f586:	d009      	beq.n	800f59c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	8b5b      	ldrh	r3, [r3, #26]
 800f58c:	f023 0308 	bic.w	r3, r3, #8
 800f590:	b29a      	uxth	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f7ff f89c 	bl	800e6d4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d1e7      	bne.n	800f576 <tcp_handle_closepend+0xe>
  }
}
 800f5a6:	bf00      	nop
 800f5a8:	bf00      	nop
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	2000a310 	.word	0x2000a310

0800f5b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5be:	2001      	movs	r0, #1
 800f5c0:	f7fd fd4a 	bl	800d058 <memp_malloc>
 800f5c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d126      	bne.n	800f61a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f5cc:	f7ff ffcc 	bl	800f568 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f5d0:	f7ff ff9a 	bl	800f508 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5d4:	2001      	movs	r0, #1
 800f5d6:	f7fd fd3f 	bl	800d058 <memp_malloc>
 800f5da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d11b      	bne.n	800f61a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f5e2:	2009      	movs	r0, #9
 800f5e4:	f7ff ff46 	bl	800f474 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5e8:	2001      	movs	r0, #1
 800f5ea:	f7fd fd35 	bl	800d058 <memp_malloc>
 800f5ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d111      	bne.n	800f61a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f5f6:	2008      	movs	r0, #8
 800f5f8:	f7ff ff3c 	bl	800f474 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5fc:	2001      	movs	r0, #1
 800f5fe:	f7fd fd2b 	bl	800d058 <memp_malloc>
 800f602:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d107      	bne.n	800f61a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f60a:	79fb      	ldrb	r3, [r7, #7]
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7ff fee3 	bl	800f3d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f612:	2001      	movs	r0, #1
 800f614:	f7fd fd20 	bl	800d058 <memp_malloc>
 800f618:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d03f      	beq.n	800f6a0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f620:	229c      	movs	r2, #156	@ 0x9c
 800f622:	2100      	movs	r1, #0
 800f624:	68f8      	ldr	r0, [r7, #12]
 800f626:	f009 fd25 	bl	8019074 <memset>
    pcb->prio = prio;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	79fa      	ldrb	r2, [r7, #7]
 800f62e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f636:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f640:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	22ff      	movs	r2, #255	@ 0xff
 800f64e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f656:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* Set initial TCP's retransmission timeout to 3000 ms by default.
       This value could be configured in lwipopts */
    pcb->rto = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2206      	movs	r2, #6
 800f65c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = LWIP_TCP_RTO_TIME / TCP_SLOW_INTERVAL;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2206      	movs	r2, #6
 800f664:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f66c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2201      	movs	r2, #1
 800f672:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800f676:	4b0d      	ldr	r3, [pc, #52]	@ (800f6ac <tcp_alloc+0xf8>)
 800f678:	681a      	ldr	r2, [r3, #0]
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f67e:	4b0c      	ldr	r3, [pc, #48]	@ (800f6b0 <tcp_alloc+0xfc>)
 800f680:	781a      	ldrb	r2, [r3, #0]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800f68c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	4a08      	ldr	r2, [pc, #32]	@ (800f6b4 <tcp_alloc+0x100>)
 800f694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	4a07      	ldr	r2, [pc, #28]	@ (800f6b8 <tcp_alloc+0x104>)
 800f69c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
    pcb_tci_init(pcb);
  }
  return pcb;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3710      	adds	r7, #16
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	2000a304 	.word	0x2000a304
 800f6b0:	2000a31a 	.word	0x2000a31a
 800f6b4:	0800f389 	.word	0x0800f389
 800f6b8:	006ddd00 	.word	0x006ddd00

0800f6bc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d037      	beq.n	800f73a <tcp_pcb_purge+0x7e>

  if (pcb->state != CLOSED &&
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	7d1b      	ldrb	r3, [r3, #20]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d033      	beq.n	800f73a <tcp_pcb_purge+0x7e>
      pcb->state != TIME_WAIT &&
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f6d6:	2b0a      	cmp	r3, #10
 800f6d8:	d02f      	beq.n	800f73a <tcp_pcb_purge+0x7e>
      pcb->state != LISTEN) {
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d02b      	beq.n	800f73a <tcp_pcb_purge+0x7e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d007      	beq.n	800f6fa <tcp_pcb_purge+0x3e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fe fb3a 	bl	800dd68 <pbuf_free>
      pcb->refused_data = NULL;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d002      	beq.n	800f708 <tcp_pcb_purge+0x4c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 f980 	bl	800fa08 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f70e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f714:	4618      	mov	r0, r3
 800f716:	f7ff fddd 	bl	800f2d4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f71e:	4618      	mov	r0, r3
 800f720:	f7ff fdd8 	bl	800f2d4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2200      	movs	r2, #0
 800f728:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2200      	movs	r2, #0
 800f736:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d106      	bne.n	800f75e <tcp_pcb_remove+0x1e>
 800f750:	4b3e      	ldr	r3, [pc, #248]	@ (800f84c <tcp_pcb_remove+0x10c>)
 800f752:	f640 028d 	movw	r2, #2189	@ 0x88d
 800f756:	493e      	ldr	r1, [pc, #248]	@ (800f850 <tcp_pcb_remove+0x110>)
 800f758:	483e      	ldr	r0, [pc, #248]	@ (800f854 <tcp_pcb_remove+0x114>)
 800f75a:	f009 fae3 	bl	8018d24 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d106      	bne.n	800f772 <tcp_pcb_remove+0x32>
 800f764:	4b39      	ldr	r3, [pc, #228]	@ (800f84c <tcp_pcb_remove+0x10c>)
 800f766:	f640 028e 	movw	r2, #2190	@ 0x88e
 800f76a:	493b      	ldr	r1, [pc, #236]	@ (800f858 <tcp_pcb_remove+0x118>)
 800f76c:	4839      	ldr	r0, [pc, #228]	@ (800f854 <tcp_pcb_remove+0x114>)
 800f76e:	f009 fad9 	bl	8018d24 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	683a      	ldr	r2, [r7, #0]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d105      	bne.n	800f788 <tcp_pcb_remove+0x48>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	68da      	ldr	r2, [r3, #12]
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	601a      	str	r2, [r3, #0]
 800f786:	e013      	b.n	800f7b0 <tcp_pcb_remove+0x70>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	60fb      	str	r3, [r7, #12]
 800f78e:	e00c      	b.n	800f7aa <tcp_pcb_remove+0x6a>
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	68db      	ldr	r3, [r3, #12]
 800f794:	683a      	ldr	r2, [r7, #0]
 800f796:	429a      	cmp	r2, r3
 800f798:	d104      	bne.n	800f7a4 <tcp_pcb_remove+0x64>
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	68da      	ldr	r2, [r3, #12]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	60da      	str	r2, [r3, #12]
 800f7a2:	e005      	b.n	800f7b0 <tcp_pcb_remove+0x70>
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	68db      	ldr	r3, [r3, #12]
 800f7a8:	60fb      	str	r3, [r7, #12]
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d1ef      	bne.n	800f790 <tcp_pcb_remove+0x50>
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f7b6:	6838      	ldr	r0, [r7, #0]
 800f7b8:	f7ff ff80 	bl	800f6bc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	7d1b      	ldrb	r3, [r3, #20]
 800f7c0:	2b0a      	cmp	r3, #10
 800f7c2:	d013      	beq.n	800f7ec <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	d00f      	beq.n	800f7ec <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	8b5b      	ldrh	r3, [r3, #26]
 800f7d0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d009      	beq.n	800f7ec <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	8b5b      	ldrh	r3, [r3, #26]
 800f7dc:	f043 0302 	orr.w	r3, r3, #2
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f7e6:	6838      	ldr	r0, [r7, #0]
 800f7e8:	f002 ff88 	bl	80126fc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	7d1b      	ldrb	r3, [r3, #20]
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d020      	beq.n	800f836 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d006      	beq.n	800f80a <tcp_pcb_remove+0xca>
 800f7fc:	4b13      	ldr	r3, [pc, #76]	@ (800f84c <tcp_pcb_remove+0x10c>)
 800f7fe:	f640 029d 	movw	r2, #2205	@ 0x89d
 800f802:	4916      	ldr	r1, [pc, #88]	@ (800f85c <tcp_pcb_remove+0x11c>)
 800f804:	4813      	ldr	r0, [pc, #76]	@ (800f854 <tcp_pcb_remove+0x114>)
 800f806:	f009 fa8d 	bl	8018d24 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d006      	beq.n	800f820 <tcp_pcb_remove+0xe0>
 800f812:	4b0e      	ldr	r3, [pc, #56]	@ (800f84c <tcp_pcb_remove+0x10c>)
 800f814:	f640 029e 	movw	r2, #2206	@ 0x89e
 800f818:	4911      	ldr	r1, [pc, #68]	@ (800f860 <tcp_pcb_remove+0x120>)
 800f81a:	480e      	ldr	r0, [pc, #56]	@ (800f854 <tcp_pcb_remove+0x114>)
 800f81c:	f009 fa82 	bl	8018d24 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f824:	2b00      	cmp	r3, #0
 800f826:	d006      	beq.n	800f836 <tcp_pcb_remove+0xf6>
 800f828:	4b08      	ldr	r3, [pc, #32]	@ (800f84c <tcp_pcb_remove+0x10c>)
 800f82a:	f44f 620a 	mov.w	r2, #2208	@ 0x8a0
 800f82e:	490d      	ldr	r1, [pc, #52]	@ (800f864 <tcp_pcb_remove+0x124>)
 800f830:	4808      	ldr	r0, [pc, #32]	@ (800f854 <tcp_pcb_remove+0x114>)
 800f832:	f009 fa77 	bl	8018d24 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	2200      	movs	r2, #0
 800f83a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	2200      	movs	r2, #0
 800f840:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f842:	bf00      	nop
 800f844:	3710      	adds	r7, #16
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
 800f84a:	bf00      	nop
 800f84c:	0801b6b0 	.word	0x0801b6b0
 800f850:	0801baec 	.word	0x0801baec
 800f854:	0801b6d8 	.word	0x0801b6d8
 800f858:	0801bb08 	.word	0x0801bb08
 800f85c:	0801bb28 	.word	0x0801bb28
 800f860:	0801bb40 	.word	0x0801bb40
 800f864:	0801bb5c 	.word	0x0801bb5c

0800f868 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b082      	sub	sp, #8
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d106      	bne.n	800f884 <tcp_next_iss+0x1c>
 800f876:	4b0a      	ldr	r3, [pc, #40]	@ (800f8a0 <tcp_next_iss+0x38>)
 800f878:	f640 02b9 	movw	r2, #2233	@ 0x8b9
 800f87c:	4909      	ldr	r1, [pc, #36]	@ (800f8a4 <tcp_next_iss+0x3c>)
 800f87e:	480a      	ldr	r0, [pc, #40]	@ (800f8a8 <tcp_next_iss+0x40>)
 800f880:	f009 fa50 	bl	8018d24 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f884:	4b09      	ldr	r3, [pc, #36]	@ (800f8ac <tcp_next_iss+0x44>)
 800f886:	681a      	ldr	r2, [r3, #0]
 800f888:	4b09      	ldr	r3, [pc, #36]	@ (800f8b0 <tcp_next_iss+0x48>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	4413      	add	r3, r2
 800f88e:	4a07      	ldr	r2, [pc, #28]	@ (800f8ac <tcp_next_iss+0x44>)
 800f890:	6013      	str	r3, [r2, #0]
  return iss;
 800f892:	4b06      	ldr	r3, [pc, #24]	@ (800f8ac <tcp_next_iss+0x44>)
 800f894:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f896:	4618      	mov	r0, r3
 800f898:	3708      	adds	r7, #8
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	0801b6b0 	.word	0x0801b6b0
 800f8a4:	0801bb74 	.word	0x0801bb74
 800f8a8:	0801b6d8 	.word	0x0801b6d8
 800f8ac:	20000028 	.word	0x20000028
 800f8b0:	2000a304 	.word	0x2000a304

0800f8b4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b086      	sub	sp, #24
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	4603      	mov	r3, r0
 800f8bc:	60b9      	str	r1, [r7, #8]
 800f8be:	607a      	str	r2, [r7, #4]
 800f8c0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d106      	bne.n	800f8d6 <tcp_eff_send_mss_netif+0x22>
 800f8c8:	4b14      	ldr	r3, [pc, #80]	@ (800f91c <tcp_eff_send_mss_netif+0x68>)
 800f8ca:	f640 02cf 	movw	r2, #2255	@ 0x8cf
 800f8ce:	4914      	ldr	r1, [pc, #80]	@ (800f920 <tcp_eff_send_mss_netif+0x6c>)
 800f8d0:	4814      	ldr	r0, [pc, #80]	@ (800f924 <tcp_eff_send_mss_netif+0x70>)
 800f8d2:	f009 fa27 	bl	8018d24 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d101      	bne.n	800f8e0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f8dc:	89fb      	ldrh	r3, [r7, #14]
 800f8de:	e019      	b.n	800f914 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f8e4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f8e6:	8afb      	ldrh	r3, [r7, #22]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d012      	beq.n	800f912 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f8ec:	2328      	movs	r3, #40	@ 0x28
 800f8ee:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f8f0:	8afa      	ldrh	r2, [r7, #22]
 800f8f2:	8abb      	ldrh	r3, [r7, #20]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d904      	bls.n	800f902 <tcp_eff_send_mss_netif+0x4e>
 800f8f8:	8afa      	ldrh	r2, [r7, #22]
 800f8fa:	8abb      	ldrh	r3, [r7, #20]
 800f8fc:	1ad3      	subs	r3, r2, r3
 800f8fe:	b29b      	uxth	r3, r3
 800f900:	e000      	b.n	800f904 <tcp_eff_send_mss_netif+0x50>
 800f902:	2300      	movs	r3, #0
 800f904:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f906:	8a7a      	ldrh	r2, [r7, #18]
 800f908:	89fb      	ldrh	r3, [r7, #14]
 800f90a:	4293      	cmp	r3, r2
 800f90c:	bf28      	it	cs
 800f90e:	4613      	movcs	r3, r2
 800f910:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f912:	89fb      	ldrh	r3, [r7, #14]
}
 800f914:	4618      	mov	r0, r3
 800f916:	3718      	adds	r7, #24
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	0801b6b0 	.word	0x0801b6b0
 800f920:	0801bb90 	.word	0x0801bb90
 800f924:	0801b6d8 	.word	0x0801b6d8

0800f928 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d119      	bne.n	800f970 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f93c:	4b10      	ldr	r3, [pc, #64]	@ (800f980 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f93e:	f640 120a 	movw	r2, #2314	@ 0x90a
 800f942:	4910      	ldr	r1, [pc, #64]	@ (800f984 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f944:	4810      	ldr	r0, [pc, #64]	@ (800f988 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f946:	f009 f9ed 	bl	8018d24 <iprintf>

  while (pcb != NULL) {
 800f94a:	e011      	b.n	800f970 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_eq(&pcb->local_ip, old_addr)
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	429a      	cmp	r2, r3
 800f956:	d108      	bne.n	800f96a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f95e:	68f8      	ldr	r0, [r7, #12]
 800f960:	f7fe fff4 	bl	800e94c <tcp_abort>
      pcb = next;
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	60fb      	str	r3, [r7, #12]
 800f968:	e002      	b.n	800f970 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	68db      	ldr	r3, [r3, #12]
 800f96e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d1ea      	bne.n	800f94c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f976:	bf00      	nop
 800f978:	bf00      	nop
 800f97a:	3710      	adds	r7, #16
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	0801b6b0 	.word	0x0801b6b0
 800f984:	0801bbb8 	.word	0x0801bbb8
 800f988:	0801b6d8 	.word	0x0801b6d8

0800f98c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d02a      	beq.n	800f9f2 <tcp_netif_ip_addr_changed+0x66>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d026      	beq.n	800f9f2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f9a4:	4b15      	ldr	r3, [pc, #84]	@ (800f9fc <tcp_netif_ip_addr_changed+0x70>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f7ff ffbc 	bl	800f928 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f9b0:	4b13      	ldr	r3, [pc, #76]	@ (800fa00 <tcp_netif_ip_addr_changed+0x74>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f7ff ffb6 	bl	800f928 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d017      	beq.n	800f9f2 <tcp_netif_ip_addr_changed+0x66>
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d013      	beq.n	800f9f2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f9ca:	4b0e      	ldr	r3, [pc, #56]	@ (800fa04 <tcp_netif_ip_addr_changed+0x78>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	60fb      	str	r3, [r7, #12]
 800f9d0:	e00c      	b.n	800f9ec <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_eq(&lpcb->local_ip, old_addr)) {
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d103      	bne.n	800f9e6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	68db      	ldr	r3, [r3, #12]
 800f9ea:	60fb      	str	r3, [r7, #12]
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d1ef      	bne.n	800f9d2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f9f2:	bf00      	nop
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	2000a310 	.word	0x2000a310
 800fa00:	2000a308 	.word	0x2000a308
 800fa04:	2000a30c 	.word	0x2000a30c

0800fa08 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d007      	beq.n	800fa28 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7ff fc59 	bl	800f2d4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2200      	movs	r2, #0
 800fa26:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fa28:	bf00      	nop
 800fa2a:	3708      	adds	r7, #8
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fa30:	b590      	push	{r4, r7, lr}
 800fa32:	b08d      	sub	sp, #52	@ 0x34
 800fa34:	af04      	add	r7, sp, #16
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d105      	bne.n	800fa4c <tcp_input+0x1c>
 800fa40:	4b9b      	ldr	r3, [pc, #620]	@ (800fcb0 <tcp_input+0x280>)
 800fa42:	2283      	movs	r2, #131	@ 0x83
 800fa44:	499b      	ldr	r1, [pc, #620]	@ (800fcb4 <tcp_input+0x284>)
 800fa46:	489c      	ldr	r0, [pc, #624]	@ (800fcb8 <tcp_input+0x288>)
 800fa48:	f009 f96c 	bl	8018d24 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	4a9a      	ldr	r2, [pc, #616]	@ (800fcbc <tcp_input+0x28c>)
 800fa52:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	895b      	ldrh	r3, [r3, #10]
 800fa58:	2b13      	cmp	r3, #19
 800fa5a:	f240 83d2 	bls.w	8010202 <tcp_input+0x7d2>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fa5e:	4b98      	ldr	r3, [pc, #608]	@ (800fcc0 <tcp_input+0x290>)
 800fa60:	695b      	ldr	r3, [r3, #20]
 800fa62:	4a97      	ldr	r2, [pc, #604]	@ (800fcc0 <tcp_input+0x290>)
 800fa64:	6812      	ldr	r2, [r2, #0]
 800fa66:	4611      	mov	r1, r2
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f008 f87f 	bl	8017b6c <ip4_addr_isbroadcast_u32>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	f040 83c8 	bne.w	8010206 <tcp_input+0x7d6>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fa76:	4b92      	ldr	r3, [pc, #584]	@ (800fcc0 <tcp_input+0x290>)
 800fa78:	695b      	ldr	r3, [r3, #20]
 800fa7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fa7e:	2be0      	cmp	r3, #224	@ 0xe0
 800fa80:	f000 83c1 	beq.w	8010206 <tcp_input+0x7d6>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fa84:	4b8d      	ldr	r3, [pc, #564]	@ (800fcbc <tcp_input+0x28c>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	899b      	ldrh	r3, [r3, #12]
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fc fdff 	bl	800c690 <lwip_htons>
 800fa92:	4603      	mov	r3, r0
 800fa94:	0b1b      	lsrs	r3, r3, #12
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	009b      	lsls	r3, r3, #2
 800fa9c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fa9e:	7cbb      	ldrb	r3, [r7, #18]
 800faa0:	2b13      	cmp	r3, #19
 800faa2:	f240 83b2 	bls.w	801020a <tcp_input+0x7da>
 800faa6:	7cbb      	ldrb	r3, [r7, #18]
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	891b      	ldrh	r3, [r3, #8]
 800faae:	429a      	cmp	r2, r3
 800fab0:	f200 83ab 	bhi.w	801020a <tcp_input+0x7da>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fab4:	7cbb      	ldrb	r3, [r7, #18]
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	3b14      	subs	r3, #20
 800faba:	b29a      	uxth	r2, r3
 800fabc:	4b81      	ldr	r3, [pc, #516]	@ (800fcc4 <tcp_input+0x294>)
 800fabe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fac0:	4b81      	ldr	r3, [pc, #516]	@ (800fcc8 <tcp_input+0x298>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	895a      	ldrh	r2, [r3, #10]
 800faca:	7cbb      	ldrb	r3, [r7, #18]
 800facc:	b29b      	uxth	r3, r3
 800face:	429a      	cmp	r2, r3
 800fad0:	d309      	bcc.n	800fae6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fad2:	4b7c      	ldr	r3, [pc, #496]	@ (800fcc4 <tcp_input+0x294>)
 800fad4:	881a      	ldrh	r2, [r3, #0]
 800fad6:	4b7d      	ldr	r3, [pc, #500]	@ (800fccc <tcp_input+0x29c>)
 800fad8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fada:	7cbb      	ldrb	r3, [r7, #18]
 800fadc:	4619      	mov	r1, r3
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7fe f8c6 	bl	800dc70 <pbuf_remove_header>
 800fae4:	e04e      	b.n	800fb84 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d105      	bne.n	800fafa <tcp_input+0xca>
 800faee:	4b70      	ldr	r3, [pc, #448]	@ (800fcb0 <tcp_input+0x280>)
 800faf0:	22c2      	movs	r2, #194	@ 0xc2
 800faf2:	4977      	ldr	r1, [pc, #476]	@ (800fcd0 <tcp_input+0x2a0>)
 800faf4:	4870      	ldr	r0, [pc, #448]	@ (800fcb8 <tcp_input+0x288>)
 800faf6:	f009 f915 	bl	8018d24 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fafa:	2114      	movs	r1, #20
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f7fe f8b7 	bl	800dc70 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	895a      	ldrh	r2, [r3, #10]
 800fb06:	4b71      	ldr	r3, [pc, #452]	@ (800fccc <tcp_input+0x29c>)
 800fb08:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fb0a:	4b6e      	ldr	r3, [pc, #440]	@ (800fcc4 <tcp_input+0x294>)
 800fb0c:	881a      	ldrh	r2, [r3, #0]
 800fb0e:	4b6f      	ldr	r3, [pc, #444]	@ (800fccc <tcp_input+0x29c>)
 800fb10:	881b      	ldrh	r3, [r3, #0]
 800fb12:	1ad3      	subs	r3, r2, r3
 800fb14:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fb16:	4b6d      	ldr	r3, [pc, #436]	@ (800fccc <tcp_input+0x29c>)
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7fe f8a7 	bl	800dc70 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	895b      	ldrh	r3, [r3, #10]
 800fb28:	8a3a      	ldrh	r2, [r7, #16]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	f200 836f 	bhi.w	801020e <tcp_input+0x7de>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	4a64      	ldr	r2, [pc, #400]	@ (800fcc8 <tcp_input+0x298>)
 800fb38:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	8a3a      	ldrh	r2, [r7, #16]
 800fb40:	4611      	mov	r1, r2
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fe f894 	bl	800dc70 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	891a      	ldrh	r2, [r3, #8]
 800fb4c:	8a3b      	ldrh	r3, [r7, #16]
 800fb4e:	1ad3      	subs	r3, r2, r3
 800fb50:	b29a      	uxth	r2, r3
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	895b      	ldrh	r3, [r3, #10]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d005      	beq.n	800fb6a <tcp_input+0x13a>
 800fb5e:	4b54      	ldr	r3, [pc, #336]	@ (800fcb0 <tcp_input+0x280>)
 800fb60:	22df      	movs	r2, #223	@ 0xdf
 800fb62:	495c      	ldr	r1, [pc, #368]	@ (800fcd4 <tcp_input+0x2a4>)
 800fb64:	4854      	ldr	r0, [pc, #336]	@ (800fcb8 <tcp_input+0x288>)
 800fb66:	f009 f8dd 	bl	8018d24 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	891a      	ldrh	r2, [r3, #8]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	891b      	ldrh	r3, [r3, #8]
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d005      	beq.n	800fb84 <tcp_input+0x154>
 800fb78:	4b4d      	ldr	r3, [pc, #308]	@ (800fcb0 <tcp_input+0x280>)
 800fb7a:	22e0      	movs	r2, #224	@ 0xe0
 800fb7c:	4956      	ldr	r1, [pc, #344]	@ (800fcd8 <tcp_input+0x2a8>)
 800fb7e:	484e      	ldr	r0, [pc, #312]	@ (800fcb8 <tcp_input+0x288>)
 800fb80:	f009 f8d0 	bl	8018d24 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fb84:	4b4d      	ldr	r3, [pc, #308]	@ (800fcbc <tcp_input+0x28c>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	881b      	ldrh	r3, [r3, #0]
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	4a4b      	ldr	r2, [pc, #300]	@ (800fcbc <tcp_input+0x28c>)
 800fb8e:	6814      	ldr	r4, [r2, #0]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7fc fd7d 	bl	800c690 <lwip_htons>
 800fb96:	4603      	mov	r3, r0
 800fb98:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fb9a:	4b48      	ldr	r3, [pc, #288]	@ (800fcbc <tcp_input+0x28c>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	885b      	ldrh	r3, [r3, #2]
 800fba0:	b29b      	uxth	r3, r3
 800fba2:	4a46      	ldr	r2, [pc, #280]	@ (800fcbc <tcp_input+0x28c>)
 800fba4:	6814      	ldr	r4, [r2, #0]
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fc fd72 	bl	800c690 <lwip_htons>
 800fbac:	4603      	mov	r3, r0
 800fbae:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fbb0:	4b42      	ldr	r3, [pc, #264]	@ (800fcbc <tcp_input+0x28c>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	4a41      	ldr	r2, [pc, #260]	@ (800fcbc <tcp_input+0x28c>)
 800fbb8:	6814      	ldr	r4, [r2, #0]
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fc fd7e 	bl	800c6bc <lwip_htonl>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	6063      	str	r3, [r4, #4]
 800fbc4:	6863      	ldr	r3, [r4, #4]
 800fbc6:	4a45      	ldr	r2, [pc, #276]	@ (800fcdc <tcp_input+0x2ac>)
 800fbc8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fbca:	4b3c      	ldr	r3, [pc, #240]	@ (800fcbc <tcp_input+0x28c>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	689b      	ldr	r3, [r3, #8]
 800fbd0:	4a3a      	ldr	r2, [pc, #232]	@ (800fcbc <tcp_input+0x28c>)
 800fbd2:	6814      	ldr	r4, [r2, #0]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7fc fd71 	bl	800c6bc <lwip_htonl>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	60a3      	str	r3, [r4, #8]
 800fbde:	68a3      	ldr	r3, [r4, #8]
 800fbe0:	4a3f      	ldr	r2, [pc, #252]	@ (800fce0 <tcp_input+0x2b0>)
 800fbe2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fbe4:	4b35      	ldr	r3, [pc, #212]	@ (800fcbc <tcp_input+0x28c>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	89db      	ldrh	r3, [r3, #14]
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	4a33      	ldr	r2, [pc, #204]	@ (800fcbc <tcp_input+0x28c>)
 800fbee:	6814      	ldr	r4, [r2, #0]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fc fd4d 	bl	800c690 <lwip_htons>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fbfa:	4b30      	ldr	r3, [pc, #192]	@ (800fcbc <tcp_input+0x28c>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	899b      	ldrh	r3, [r3, #12]
 800fc00:	b29b      	uxth	r3, r3
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7fc fd44 	bl	800c690 <lwip_htons>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	b2db      	uxtb	r3, r3
 800fc0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc10:	b2da      	uxtb	r2, r3
 800fc12:	4b34      	ldr	r3, [pc, #208]	@ (800fce4 <tcp_input+0x2b4>)
 800fc14:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	891a      	ldrh	r2, [r3, #8]
 800fc1a:	4b33      	ldr	r3, [pc, #204]	@ (800fce8 <tcp_input+0x2b8>)
 800fc1c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fc1e:	4b31      	ldr	r3, [pc, #196]	@ (800fce4 <tcp_input+0x2b4>)
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	f003 0303 	and.w	r3, r3, #3
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d00c      	beq.n	800fc44 <tcp_input+0x214>
    tcplen++;
 800fc2a:	4b2f      	ldr	r3, [pc, #188]	@ (800fce8 <tcp_input+0x2b8>)
 800fc2c:	881b      	ldrh	r3, [r3, #0]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	b29a      	uxth	r2, r3
 800fc32:	4b2d      	ldr	r3, [pc, #180]	@ (800fce8 <tcp_input+0x2b8>)
 800fc34:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	891a      	ldrh	r2, [r3, #8]
 800fc3a:	4b2b      	ldr	r3, [pc, #172]	@ (800fce8 <tcp_input+0x2b8>)
 800fc3c:	881b      	ldrh	r3, [r3, #0]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	f200 82e7 	bhi.w	8010212 <tcp_input+0x7e2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fc44:	2300      	movs	r3, #0
 800fc46:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc48:	4b28      	ldr	r3, [pc, #160]	@ (800fcec <tcp_input+0x2bc>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	61fb      	str	r3, [r7, #28]
 800fc4e:	e09d      	b.n	800fd8c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	7d1b      	ldrb	r3, [r3, #20]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d105      	bne.n	800fc64 <tcp_input+0x234>
 800fc58:	4b15      	ldr	r3, [pc, #84]	@ (800fcb0 <tcp_input+0x280>)
 800fc5a:	22fb      	movs	r2, #251	@ 0xfb
 800fc5c:	4924      	ldr	r1, [pc, #144]	@ (800fcf0 <tcp_input+0x2c0>)
 800fc5e:	4816      	ldr	r0, [pc, #88]	@ (800fcb8 <tcp_input+0x288>)
 800fc60:	f009 f860 	bl	8018d24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	7d1b      	ldrb	r3, [r3, #20]
 800fc68:	2b0a      	cmp	r3, #10
 800fc6a:	d105      	bne.n	800fc78 <tcp_input+0x248>
 800fc6c:	4b10      	ldr	r3, [pc, #64]	@ (800fcb0 <tcp_input+0x280>)
 800fc6e:	22fc      	movs	r2, #252	@ 0xfc
 800fc70:	4920      	ldr	r1, [pc, #128]	@ (800fcf4 <tcp_input+0x2c4>)
 800fc72:	4811      	ldr	r0, [pc, #68]	@ (800fcb8 <tcp_input+0x288>)
 800fc74:	f009 f856 	bl	8018d24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	7d1b      	ldrb	r3, [r3, #20]
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d105      	bne.n	800fc8c <tcp_input+0x25c>
 800fc80:	4b0b      	ldr	r3, [pc, #44]	@ (800fcb0 <tcp_input+0x280>)
 800fc82:	22fd      	movs	r2, #253	@ 0xfd
 800fc84:	491c      	ldr	r1, [pc, #112]	@ (800fcf8 <tcp_input+0x2c8>)
 800fc86:	480c      	ldr	r0, [pc, #48]	@ (800fcb8 <tcp_input+0x288>)
 800fc88:	f009 f84c 	bl	8018d24 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc8c:	69fb      	ldr	r3, [r7, #28]
 800fc8e:	7a1b      	ldrb	r3, [r3, #8]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d033      	beq.n	800fcfc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fc94:	69fb      	ldr	r3, [r7, #28]
 800fc96:	7a1a      	ldrb	r2, [r3, #8]
 800fc98:	4b09      	ldr	r3, [pc, #36]	@ (800fcc0 <tcp_input+0x290>)
 800fc9a:	685b      	ldr	r3, [r3, #4]
 800fc9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fca0:	3301      	adds	r3, #1
 800fca2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d029      	beq.n	800fcfc <tcp_input+0x2cc>
      prev = pcb;
 800fca8:	69fb      	ldr	r3, [r7, #28]
 800fcaa:	61bb      	str	r3, [r7, #24]
      continue;
 800fcac:	e06b      	b.n	800fd86 <tcp_input+0x356>
 800fcae:	bf00      	nop
 800fcb0:	0801bbec 	.word	0x0801bbec
 800fcb4:	0801bc04 	.word	0x0801bc04
 800fcb8:	0801bc1c 	.word	0x0801bc1c
 800fcbc:	2000a32c 	.word	0x2000a32c
 800fcc0:	200035ac 	.word	0x200035ac
 800fcc4:	2000a330 	.word	0x2000a330
 800fcc8:	2000a334 	.word	0x2000a334
 800fccc:	2000a332 	.word	0x2000a332
 800fcd0:	0801bc44 	.word	0x0801bc44
 800fcd4:	0801bc54 	.word	0x0801bc54
 800fcd8:	0801bc60 	.word	0x0801bc60
 800fcdc:	2000a33c 	.word	0x2000a33c
 800fce0:	2000a340 	.word	0x2000a340
 800fce4:	2000a348 	.word	0x2000a348
 800fce8:	2000a346 	.word	0x2000a346
 800fcec:	2000a310 	.word	0x2000a310
 800fcf0:	0801bc80 	.word	0x0801bc80
 800fcf4:	0801bca8 	.word	0x0801bca8
 800fcf8:	0801bcd4 	.word	0x0801bcd4
    }

    if (pcb->remote_port == tcphdr->src &&
 800fcfc:	69fb      	ldr	r3, [r7, #28]
 800fcfe:	8b1a      	ldrh	r2, [r3, #24]
 800fd00:	4b72      	ldr	r3, [pc, #456]	@ (800fecc <tcp_input+0x49c>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	881b      	ldrh	r3, [r3, #0]
 800fd06:	b29b      	uxth	r3, r3
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d13a      	bne.n	800fd82 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fd0c:	69fb      	ldr	r3, [r7, #28]
 800fd0e:	8ada      	ldrh	r2, [r3, #22]
 800fd10:	4b6e      	ldr	r3, [pc, #440]	@ (800fecc <tcp_input+0x49c>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	885b      	ldrh	r3, [r3, #2]
 800fd16:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d132      	bne.n	800fd82 <tcp_input+0x352>
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd1c:	69fb      	ldr	r3, [r7, #28]
 800fd1e:	685a      	ldr	r2, [r3, #4]
 800fd20:	4b6b      	ldr	r3, [pc, #428]	@ (800fed0 <tcp_input+0x4a0>)
 800fd22:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d12c      	bne.n	800fd82 <tcp_input+0x352>
        ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	4b68      	ldr	r3, [pc, #416]	@ (800fed0 <tcp_input+0x4a0>)
 800fd2e:	695b      	ldr	r3, [r3, #20]
        ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d126      	bne.n	800fd82 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	68db      	ldr	r3, [r3, #12]
 800fd38:	69fa      	ldr	r2, [r7, #28]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d106      	bne.n	800fd4c <tcp_input+0x31c>
 800fd3e:	4b65      	ldr	r3, [pc, #404]	@ (800fed4 <tcp_input+0x4a4>)
 800fd40:	f240 120d 	movw	r2, #269	@ 0x10d
 800fd44:	4964      	ldr	r1, [pc, #400]	@ (800fed8 <tcp_input+0x4a8>)
 800fd46:	4865      	ldr	r0, [pc, #404]	@ (800fedc <tcp_input+0x4ac>)
 800fd48:	f008 ffec 	bl	8018d24 <iprintf>
      if (prev != NULL) {
 800fd4c:	69bb      	ldr	r3, [r7, #24]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d00a      	beq.n	800fd68 <tcp_input+0x338>
        prev->next = pcb->next;
 800fd52:	69fb      	ldr	r3, [r7, #28]
 800fd54:	68da      	ldr	r2, [r3, #12]
 800fd56:	69bb      	ldr	r3, [r7, #24]
 800fd58:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fd5a:	4b61      	ldr	r3, [pc, #388]	@ (800fee0 <tcp_input+0x4b0>)
 800fd5c:	681a      	ldr	r2, [r3, #0]
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fd62:	4a5f      	ldr	r2, [pc, #380]	@ (800fee0 <tcp_input+0x4b0>)
 800fd64:	69fb      	ldr	r3, [r7, #28]
 800fd66:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fd68:	69fb      	ldr	r3, [r7, #28]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	69fa      	ldr	r2, [r7, #28]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d111      	bne.n	800fd96 <tcp_input+0x366>
 800fd72:	4b58      	ldr	r3, [pc, #352]	@ (800fed4 <tcp_input+0x4a4>)
 800fd74:	f240 1215 	movw	r2, #277	@ 0x115
 800fd78:	495a      	ldr	r1, [pc, #360]	@ (800fee4 <tcp_input+0x4b4>)
 800fd7a:	4858      	ldr	r0, [pc, #352]	@ (800fedc <tcp_input+0x4ac>)
 800fd7c:	f008 ffd2 	bl	8018d24 <iprintf>
      break;
 800fd80:	e009      	b.n	800fd96 <tcp_input+0x366>
    }
    prev = pcb;
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd86:	69fb      	ldr	r3, [r7, #28]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	61fb      	str	r3, [r7, #28]
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	f47f af5e 	bne.w	800fc50 <tcp_input+0x220>
 800fd94:	e000      	b.n	800fd98 <tcp_input+0x368>
      break;
 800fd96:	bf00      	nop
  }

  if (pcb == NULL) {
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	f040 80aa 	bne.w	800fef4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fda0:	4b51      	ldr	r3, [pc, #324]	@ (800fee8 <tcp_input+0x4b8>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	61fb      	str	r3, [r7, #28]
 800fda6:	e03f      	b.n	800fe28 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fda8:	69fb      	ldr	r3, [r7, #28]
 800fdaa:	7d1b      	ldrb	r3, [r3, #20]
 800fdac:	2b0a      	cmp	r3, #10
 800fdae:	d006      	beq.n	800fdbe <tcp_input+0x38e>
 800fdb0:	4b48      	ldr	r3, [pc, #288]	@ (800fed4 <tcp_input+0x4a4>)
 800fdb2:	f240 121f 	movw	r2, #287	@ 0x11f
 800fdb6:	494d      	ldr	r1, [pc, #308]	@ (800feec <tcp_input+0x4bc>)
 800fdb8:	4848      	ldr	r0, [pc, #288]	@ (800fedc <tcp_input+0x4ac>)
 800fdba:	f008 ffb3 	bl	8018d24 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fdbe:	69fb      	ldr	r3, [r7, #28]
 800fdc0:	7a1b      	ldrb	r3, [r3, #8]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d009      	beq.n	800fdda <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	7a1a      	ldrb	r2, [r3, #8]
 800fdca:	4b41      	ldr	r3, [pc, #260]	@ (800fed0 <tcp_input+0x4a0>)
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d122      	bne.n	800fe20 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fdda:	69fb      	ldr	r3, [r7, #28]
 800fddc:	8b1a      	ldrh	r2, [r3, #24]
 800fdde:	4b3b      	ldr	r3, [pc, #236]	@ (800fecc <tcp_input+0x49c>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	881b      	ldrh	r3, [r3, #0]
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d11b      	bne.n	800fe22 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	8ada      	ldrh	r2, [r3, #22]
 800fdee:	4b37      	ldr	r3, [pc, #220]	@ (800fecc <tcp_input+0x49c>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	885b      	ldrh	r3, [r3, #2]
 800fdf4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d113      	bne.n	800fe22 <tcp_input+0x3f2>
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 800fdfa:	69fb      	ldr	r3, [r7, #28]
 800fdfc:	685a      	ldr	r2, [r3, #4]
 800fdfe:	4b34      	ldr	r3, [pc, #208]	@ (800fed0 <tcp_input+0x4a0>)
 800fe00:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d10d      	bne.n	800fe22 <tcp_input+0x3f2>
          ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	4b31      	ldr	r3, [pc, #196]	@ (800fed0 <tcp_input+0x4a0>)
 800fe0c:	695b      	ldr	r3, [r3, #20]
          ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()) &&
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d107      	bne.n	800fe22 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fe12:	69f8      	ldr	r0, [r7, #28]
 800fe14:	f000 fb58 	bl	80104c8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7fd ffa5 	bl	800dd68 <pbuf_free>
        return;
 800fe1e:	e1fe      	b.n	801021e <tcp_input+0x7ee>
        continue;
 800fe20:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fe22:	69fb      	ldr	r3, [r7, #28]
 800fe24:	68db      	ldr	r3, [r3, #12]
 800fe26:	61fb      	str	r3, [r7, #28]
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d1bc      	bne.n	800fda8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fe32:	4b2f      	ldr	r3, [pc, #188]	@ (800fef0 <tcp_input+0x4c0>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	617b      	str	r3, [r7, #20]
 800fe38:	e02a      	b.n	800fe90 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	7a1b      	ldrb	r3, [r3, #8]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d00c      	beq.n	800fe5c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	7a1a      	ldrb	r2, [r3, #8]
 800fe46:	4b22      	ldr	r3, [pc, #136]	@ (800fed0 <tcp_input+0x4a0>)
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fe4e:	3301      	adds	r3, #1
 800fe50:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d002      	beq.n	800fe5c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	61bb      	str	r3, [r7, #24]
        continue;
 800fe5a:	e016      	b.n	800fe8a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	8ada      	ldrh	r2, [r3, #22]
 800fe60:	4b1a      	ldr	r3, [pc, #104]	@ (800fecc <tcp_input+0x49c>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	885b      	ldrh	r3, [r3, #2]
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d10c      	bne.n	800fe86 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_eq(&lpcb->local_ip, ip_current_dest_addr())) {
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	4b17      	ldr	r3, [pc, #92]	@ (800fed0 <tcp_input+0x4a0>)
 800fe72:	695b      	ldr	r3, [r3, #20]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d00f      	beq.n	800fe98 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d00d      	beq.n	800fe9a <tcp_input+0x46a>
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d009      	beq.n	800fe9a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	617b      	str	r3, [r7, #20]
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d1d1      	bne.n	800fe3a <tcp_input+0x40a>
 800fe96:	e000      	b.n	800fe9a <tcp_input+0x46a>
            break;
 800fe98:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d029      	beq.n	800fef4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fea0:	69bb      	ldr	r3, [r7, #24]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d00a      	beq.n	800febc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	68da      	ldr	r2, [r3, #12]
 800feaa:	69bb      	ldr	r3, [r7, #24]
 800feac:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800feae:	4b10      	ldr	r3, [pc, #64]	@ (800fef0 <tcp_input+0x4c0>)
 800feb0:	681a      	ldr	r2, [r3, #0]
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800feb6:	4a0e      	ldr	r2, [pc, #56]	@ (800fef0 <tcp_input+0x4c0>)
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800febc:	6978      	ldr	r0, [r7, #20]
 800febe:	f000 fa05 	bl	80102cc <tcp_listen_input>
      }
      pbuf_free(p);
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f7fd ff50 	bl	800dd68 <pbuf_free>
      return;
 800fec8:	e1a9      	b.n	801021e <tcp_input+0x7ee>
 800feca:	bf00      	nop
 800fecc:	2000a32c 	.word	0x2000a32c
 800fed0:	200035ac 	.word	0x200035ac
 800fed4:	0801bbec 	.word	0x0801bbec
 800fed8:	0801bcfc 	.word	0x0801bcfc
 800fedc:	0801bc1c 	.word	0x0801bc1c
 800fee0:	2000a310 	.word	0x2000a310
 800fee4:	0801bd28 	.word	0x0801bd28
 800fee8:	2000a314 	.word	0x2000a314
 800feec:	0801bd54 	.word	0x0801bd54
 800fef0:	2000a30c 	.word	0x2000a30c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fef4:	69fb      	ldr	r3, [r7, #28]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	f000 8158 	beq.w	80101ac <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fefc:	4b95      	ldr	r3, [pc, #596]	@ (8010154 <tcp_input+0x724>)
 800fefe:	2200      	movs	r2, #0
 800ff00:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	891a      	ldrh	r2, [r3, #8]
 800ff06:	4b93      	ldr	r3, [pc, #588]	@ (8010154 <tcp_input+0x724>)
 800ff08:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ff0a:	4a92      	ldr	r2, [pc, #584]	@ (8010154 <tcp_input+0x724>)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ff10:	4b91      	ldr	r3, [pc, #580]	@ (8010158 <tcp_input+0x728>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	4a8f      	ldr	r2, [pc, #572]	@ (8010154 <tcp_input+0x724>)
 800ff16:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ff18:	4b90      	ldr	r3, [pc, #576]	@ (801015c <tcp_input+0x72c>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ff1e:	4b90      	ldr	r3, [pc, #576]	@ (8010160 <tcp_input+0x730>)
 800ff20:	2200      	movs	r2, #0
 800ff22:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ff24:	4b8f      	ldr	r3, [pc, #572]	@ (8010164 <tcp_input+0x734>)
 800ff26:	2200      	movs	r2, #0
 800ff28:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ff2a:	4b8f      	ldr	r3, [pc, #572]	@ (8010168 <tcp_input+0x738>)
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	f003 0308 	and.w	r3, r3, #8
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d006      	beq.n	800ff44 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	7b5b      	ldrb	r3, [r3, #13]
 800ff3a:	f043 0301 	orr.w	r3, r3, #1
 800ff3e:	b2da      	uxtb	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ff44:	69fb      	ldr	r3, [r7, #28]
 800ff46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d017      	beq.n	800ff7c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ff4c:	69f8      	ldr	r0, [r7, #28]
 800ff4e:	f7ff f951 	bl	800f1f4 <tcp_process_refused_data>
 800ff52:	4603      	mov	r3, r0
 800ff54:	f113 0f0d 	cmn.w	r3, #13
 800ff58:	d007      	beq.n	800ff6a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ff5a:	69fb      	ldr	r3, [r7, #28]
 800ff5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d00c      	beq.n	800ff7c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ff62:	4b82      	ldr	r3, [pc, #520]	@ (801016c <tcp_input+0x73c>)
 800ff64:	881b      	ldrh	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d008      	beq.n	800ff7c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ff6a:	69fb      	ldr	r3, [r7, #28]
 800ff6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	f040 80e4 	bne.w	801013c <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ff74:	69f8      	ldr	r0, [r7, #28]
 800ff76:	f003 fa33 	bl	80133e0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ff7a:	e0df      	b.n	801013c <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 800ff7c:	4a7c      	ldr	r2, [pc, #496]	@ (8010170 <tcp_input+0x740>)
 800ff7e:	69fb      	ldr	r3, [r7, #28]
 800ff80:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ff82:	69f8      	ldr	r0, [r7, #28]
 800ff84:	f000 fb1a 	bl	80105bc <tcp_process>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ff8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff90:	f113 0f0d 	cmn.w	r3, #13
 800ff94:	f000 80d4 	beq.w	8010140 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 800ff98:	4b71      	ldr	r3, [pc, #452]	@ (8010160 <tcp_input+0x730>)
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	f003 0308 	and.w	r3, r3, #8
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d015      	beq.n	800ffd0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d008      	beq.n	800ffc0 <tcp_input+0x590>
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffb4:	69fa      	ldr	r2, [r7, #28]
 800ffb6:	6912      	ldr	r2, [r2, #16]
 800ffb8:	f06f 010d 	mvn.w	r1, #13
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ffc0:	69f9      	ldr	r1, [r7, #28]
 800ffc2:	486c      	ldr	r0, [pc, #432]	@ (8010174 <tcp_input+0x744>)
 800ffc4:	f7ff fbbc 	bl	800f740 <tcp_pcb_remove>
        tcp_free(pcb);
 800ffc8:	69f8      	ldr	r0, [r7, #28]
 800ffca:	f7fe f9ef 	bl	800e3ac <tcp_free>
 800ffce:	e0da      	b.n	8010186 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ffd4:	4b63      	ldr	r3, [pc, #396]	@ (8010164 <tcp_input+0x734>)
 800ffd6:	881b      	ldrh	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d01d      	beq.n	8010018 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ffdc:	4b61      	ldr	r3, [pc, #388]	@ (8010164 <tcp_input+0x734>)
 800ffde:	881b      	ldrh	r3, [r3, #0]
 800ffe0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d00a      	beq.n	8010002 <tcp_input+0x5d2>
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fff2:	69fa      	ldr	r2, [r7, #28]
 800fff4:	6910      	ldr	r0, [r2, #16]
 800fff6:	89fa      	ldrh	r2, [r7, #14]
 800fff8:	69f9      	ldr	r1, [r7, #28]
 800fffa:	4798      	blx	r3
 800fffc:	4603      	mov	r3, r0
 800fffe:	74fb      	strb	r3, [r7, #19]
 8010000:	e001      	b.n	8010006 <tcp_input+0x5d6>
 8010002:	2300      	movs	r3, #0
 8010004:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010006:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801000a:	f113 0f0d 	cmn.w	r3, #13
 801000e:	f000 8099 	beq.w	8010144 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010012:	4b54      	ldr	r3, [pc, #336]	@ (8010164 <tcp_input+0x734>)
 8010014:	2200      	movs	r2, #0
 8010016:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010018:	69f8      	ldr	r0, [r7, #28]
 801001a:	f000 f917 	bl	801024c <tcp_input_delayed_close>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	f040 8091 	bne.w	8010148 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010026:	4b4d      	ldr	r3, [pc, #308]	@ (801015c <tcp_input+0x72c>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d041      	beq.n	80100b2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010032:	2b00      	cmp	r3, #0
 8010034:	d006      	beq.n	8010044 <tcp_input+0x614>
 8010036:	4b50      	ldr	r3, [pc, #320]	@ (8010178 <tcp_input+0x748>)
 8010038:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801003c:	494f      	ldr	r1, [pc, #316]	@ (801017c <tcp_input+0x74c>)
 801003e:	4850      	ldr	r0, [pc, #320]	@ (8010180 <tcp_input+0x750>)
 8010040:	f008 fe70 	bl	8018d24 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	8b5b      	ldrh	r3, [r3, #26]
 8010048:	f003 0310 	and.w	r3, r3, #16
 801004c:	2b00      	cmp	r3, #0
 801004e:	d008      	beq.n	8010062 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010050:	4b42      	ldr	r3, [pc, #264]	@ (801015c <tcp_input+0x72c>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	4618      	mov	r0, r3
 8010056:	f7fd fe87 	bl	800dd68 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801005a:	69f8      	ldr	r0, [r7, #28]
 801005c:	f7fe fc76 	bl	800e94c <tcp_abort>
            goto aborted;
 8010060:	e091      	b.n	8010186 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010068:	2b00      	cmp	r3, #0
 801006a:	d00c      	beq.n	8010086 <tcp_input+0x656>
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010072:	69fb      	ldr	r3, [r7, #28]
 8010074:	6918      	ldr	r0, [r3, #16]
 8010076:	4b39      	ldr	r3, [pc, #228]	@ (801015c <tcp_input+0x72c>)
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	2300      	movs	r3, #0
 801007c:	69f9      	ldr	r1, [r7, #28]
 801007e:	47a0      	blx	r4
 8010080:	4603      	mov	r3, r0
 8010082:	74fb      	strb	r3, [r7, #19]
 8010084:	e008      	b.n	8010098 <tcp_input+0x668>
 8010086:	4b35      	ldr	r3, [pc, #212]	@ (801015c <tcp_input+0x72c>)
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	2300      	movs	r3, #0
 801008c:	69f9      	ldr	r1, [r7, #28]
 801008e:	2000      	movs	r0, #0
 8010090:	f7ff f97a 	bl	800f388 <tcp_recv_null>
 8010094:	4603      	mov	r3, r0
 8010096:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010098:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801009c:	f113 0f0d 	cmn.w	r3, #13
 80100a0:	d054      	beq.n	801014c <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80100a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d003      	beq.n	80100b2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80100aa:	4b2c      	ldr	r3, [pc, #176]	@ (801015c <tcp_input+0x72c>)
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	69fb      	ldr	r3, [r7, #28]
 80100b0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80100b2:	4b2b      	ldr	r3, [pc, #172]	@ (8010160 <tcp_input+0x730>)
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	f003 0320 	and.w	r3, r3, #32
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d031      	beq.n	8010122 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 80100be:	69fb      	ldr	r3, [r7, #28]
 80100c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d009      	beq.n	80100da <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80100c6:	69fb      	ldr	r3, [r7, #28]
 80100c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100ca:	7b5a      	ldrb	r2, [r3, #13]
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80100d0:	f042 0220 	orr.w	r2, r2, #32
 80100d4:	b2d2      	uxtb	r2, r2
 80100d6:	735a      	strb	r2, [r3, #13]
 80100d8:	e023      	b.n	8010122 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80100da:	69fb      	ldr	r3, [r7, #28]
 80100dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100de:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d005      	beq.n	80100f2 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100ea:	3301      	adds	r3, #1
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	69fb      	ldr	r3, [r7, #28]
 80100f0:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d00b      	beq.n	8010114 <tcp_input+0x6e4>
 80100fc:	69fb      	ldr	r3, [r7, #28]
 80100fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010102:	69fb      	ldr	r3, [r7, #28]
 8010104:	6918      	ldr	r0, [r3, #16]
 8010106:	2300      	movs	r3, #0
 8010108:	2200      	movs	r2, #0
 801010a:	69f9      	ldr	r1, [r7, #28]
 801010c:	47a0      	blx	r4
 801010e:	4603      	mov	r3, r0
 8010110:	74fb      	strb	r3, [r7, #19]
 8010112:	e001      	b.n	8010118 <tcp_input+0x6e8>
 8010114:	2300      	movs	r3, #0
 8010116:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010118:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801011c:	f113 0f0d 	cmn.w	r3, #13
 8010120:	d016      	beq.n	8010150 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010122:	4b13      	ldr	r3, [pc, #76]	@ (8010170 <tcp_input+0x740>)
 8010124:	2200      	movs	r2, #0
 8010126:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010128:	69f8      	ldr	r0, [r7, #28]
 801012a:	f000 f88f 	bl	801024c <tcp_input_delayed_close>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d127      	bne.n	8010184 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010134:	69f8      	ldr	r0, [r7, #28]
 8010136:	f002 fae1 	bl	80126fc <tcp_output>
 801013a:	e024      	b.n	8010186 <tcp_input+0x756>
        goto aborted;
 801013c:	bf00      	nop
 801013e:	e022      	b.n	8010186 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010140:	bf00      	nop
 8010142:	e020      	b.n	8010186 <tcp_input+0x756>
              goto aborted;
 8010144:	bf00      	nop
 8010146:	e01e      	b.n	8010186 <tcp_input+0x756>
          goto aborted;
 8010148:	bf00      	nop
 801014a:	e01c      	b.n	8010186 <tcp_input+0x756>
            goto aborted;
 801014c:	bf00      	nop
 801014e:	e01a      	b.n	8010186 <tcp_input+0x756>
              goto aborted;
 8010150:	bf00      	nop
 8010152:	e018      	b.n	8010186 <tcp_input+0x756>
 8010154:	2000a31c 	.word	0x2000a31c
 8010158:	2000a32c 	.word	0x2000a32c
 801015c:	2000a34c 	.word	0x2000a34c
 8010160:	2000a349 	.word	0x2000a349
 8010164:	2000a344 	.word	0x2000a344
 8010168:	2000a348 	.word	0x2000a348
 801016c:	2000a346 	.word	0x2000a346
 8010170:	2000a350 	.word	0x2000a350
 8010174:	2000a310 	.word	0x2000a310
 8010178:	0801bbec 	.word	0x0801bbec
 801017c:	0801bd84 	.word	0x0801bd84
 8010180:	0801bc1c 	.word	0x0801bc1c
          goto aborted;
 8010184:	bf00      	nop
    tcp_input_pcb = NULL;
 8010186:	4b27      	ldr	r3, [pc, #156]	@ (8010224 <tcp_input+0x7f4>)
 8010188:	2200      	movs	r2, #0
 801018a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801018c:	4b26      	ldr	r3, [pc, #152]	@ (8010228 <tcp_input+0x7f8>)
 801018e:	2200      	movs	r2, #0
 8010190:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010192:	4b26      	ldr	r3, [pc, #152]	@ (801022c <tcp_input+0x7fc>)
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d040      	beq.n	801021c <tcp_input+0x7ec>
      pbuf_free(inseg.p);
 801019a:	4b24      	ldr	r3, [pc, #144]	@ (801022c <tcp_input+0x7fc>)
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fd fde2 	bl	800dd68 <pbuf_free>
      inseg.p = NULL;
 80101a4:	4b21      	ldr	r3, [pc, #132]	@ (801022c <tcp_input+0x7fc>)
 80101a6:	2200      	movs	r2, #0
 80101a8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80101aa:	e037      	b.n	801021c <tcp_input+0x7ec>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80101ac:	4b20      	ldr	r3, [pc, #128]	@ (8010230 <tcp_input+0x800>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	899b      	ldrh	r3, [r3, #12]
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7fc fa6b 	bl	800c690 <lwip_htons>
 80101ba:	4603      	mov	r3, r0
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	f003 0304 	and.w	r3, r3, #4
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d119      	bne.n	80101fa <tcp_input+0x7ca>
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101c6:	4b1b      	ldr	r3, [pc, #108]	@ (8010234 <tcp_input+0x804>)
 80101c8:	6858      	ldr	r0, [r3, #4]
 80101ca:	4b1b      	ldr	r3, [pc, #108]	@ (8010238 <tcp_input+0x808>)
 80101cc:	6819      	ldr	r1, [r3, #0]
 80101ce:	4b1b      	ldr	r3, [pc, #108]	@ (801023c <tcp_input+0x80c>)
 80101d0:	881b      	ldrh	r3, [r3, #0]
 80101d2:	461a      	mov	r2, r3
 80101d4:	4b1a      	ldr	r3, [pc, #104]	@ (8010240 <tcp_input+0x810>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	18d4      	adds	r4, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80101da:	4b15      	ldr	r3, [pc, #84]	@ (8010230 <tcp_input+0x800>)
 80101dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101de:	885b      	ldrh	r3, [r3, #2]
 80101e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80101e2:	4a13      	ldr	r2, [pc, #76]	@ (8010230 <tcp_input+0x800>)
 80101e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101e6:	8812      	ldrh	r2, [r2, #0]
 80101e8:	b292      	uxth	r2, r2
 80101ea:	9202      	str	r2, [sp, #8]
 80101ec:	9301      	str	r3, [sp, #4]
 80101ee:	4b15      	ldr	r3, [pc, #84]	@ (8010244 <tcp_input+0x814>)
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	4b15      	ldr	r3, [pc, #84]	@ (8010248 <tcp_input+0x818>)
 80101f4:	4622      	mov	r2, r4
 80101f6:	f003 f8cc 	bl	8013392 <tcp_rst_netif>
    pbuf_free(p);
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7fd fdb4 	bl	800dd68 <pbuf_free>
  return;
 8010200:	e00c      	b.n	801021c <tcp_input+0x7ec>
    goto dropped;
 8010202:	bf00      	nop
 8010204:	e006      	b.n	8010214 <tcp_input+0x7e4>
    goto dropped;
 8010206:	bf00      	nop
 8010208:	e004      	b.n	8010214 <tcp_input+0x7e4>
    goto dropped;
 801020a:	bf00      	nop
 801020c:	e002      	b.n	8010214 <tcp_input+0x7e4>
      goto dropped;
 801020e:	bf00      	nop
 8010210:	e000      	b.n	8010214 <tcp_input+0x7e4>
      goto dropped;
 8010212:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f7fd fda7 	bl	800dd68 <pbuf_free>
 801021a:	e000      	b.n	801021e <tcp_input+0x7ee>
  return;
 801021c:	bf00      	nop
}
 801021e:	3724      	adds	r7, #36	@ 0x24
 8010220:	46bd      	mov	sp, r7
 8010222:	bd90      	pop	{r4, r7, pc}
 8010224:	2000a350 	.word	0x2000a350
 8010228:	2000a34c 	.word	0x2000a34c
 801022c:	2000a31c 	.word	0x2000a31c
 8010230:	2000a32c 	.word	0x2000a32c
 8010234:	200035ac 	.word	0x200035ac
 8010238:	2000a340 	.word	0x2000a340
 801023c:	2000a346 	.word	0x2000a346
 8010240:	2000a33c 	.word	0x2000a33c
 8010244:	200035bc 	.word	0x200035bc
 8010248:	200035c0 	.word	0x200035c0

0801024c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b082      	sub	sp, #8
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d106      	bne.n	8010268 <tcp_input_delayed_close+0x1c>
 801025a:	4b17      	ldr	r3, [pc, #92]	@ (80102b8 <tcp_input_delayed_close+0x6c>)
 801025c:	f240 225a 	movw	r2, #602	@ 0x25a
 8010260:	4916      	ldr	r1, [pc, #88]	@ (80102bc <tcp_input_delayed_close+0x70>)
 8010262:	4817      	ldr	r0, [pc, #92]	@ (80102c0 <tcp_input_delayed_close+0x74>)
 8010264:	f008 fd5e 	bl	8018d24 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010268:	4b16      	ldr	r3, [pc, #88]	@ (80102c4 <tcp_input_delayed_close+0x78>)
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	f003 0310 	and.w	r3, r3, #16
 8010270:	2b00      	cmp	r3, #0
 8010272:	d01c      	beq.n	80102ae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	8b5b      	ldrh	r3, [r3, #26]
 8010278:	f003 0310 	and.w	r3, r3, #16
 801027c:	2b00      	cmp	r3, #0
 801027e:	d10d      	bne.n	801029c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010286:	2b00      	cmp	r3, #0
 8010288:	d008      	beq.n	801029c <tcp_input_delayed_close+0x50>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	6912      	ldr	r2, [r2, #16]
 8010294:	f06f 010e 	mvn.w	r1, #14
 8010298:	4610      	mov	r0, r2
 801029a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801029c:	6879      	ldr	r1, [r7, #4]
 801029e:	480a      	ldr	r0, [pc, #40]	@ (80102c8 <tcp_input_delayed_close+0x7c>)
 80102a0:	f7ff fa4e 	bl	800f740 <tcp_pcb_remove>
    tcp_free(pcb);
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f7fe f881 	bl	800e3ac <tcp_free>
    return 1;
 80102aa:	2301      	movs	r3, #1
 80102ac:	e000      	b.n	80102b0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80102ae:	2300      	movs	r3, #0
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3708      	adds	r7, #8
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}
 80102b8:	0801bbec 	.word	0x0801bbec
 80102bc:	0801bda0 	.word	0x0801bda0
 80102c0:	0801bc1c 	.word	0x0801bc1c
 80102c4:	2000a349 	.word	0x2000a349
 80102c8:	2000a310 	.word	0x2000a310

080102cc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80102cc:	b590      	push	{r4, r7, lr}
 80102ce:	b08b      	sub	sp, #44	@ 0x2c
 80102d0:	af04      	add	r7, sp, #16
 80102d2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80102d4:	4b6f      	ldr	r3, [pc, #444]	@ (8010494 <tcp_listen_input+0x1c8>)
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	f003 0304 	and.w	r3, r3, #4
 80102dc:	2b00      	cmp	r3, #0
 80102de:	f040 80d3 	bne.w	8010488 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d106      	bne.n	80102f6 <tcp_listen_input+0x2a>
 80102e8:	4b6b      	ldr	r3, [pc, #428]	@ (8010498 <tcp_listen_input+0x1cc>)
 80102ea:	f240 2281 	movw	r2, #641	@ 0x281
 80102ee:	496b      	ldr	r1, [pc, #428]	@ (801049c <tcp_listen_input+0x1d0>)
 80102f0:	486b      	ldr	r0, [pc, #428]	@ (80104a0 <tcp_listen_input+0x1d4>)
 80102f2:	f008 fd17 	bl	8018d24 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80102f6:	4b67      	ldr	r3, [pc, #412]	@ (8010494 <tcp_listen_input+0x1c8>)
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	f003 0310 	and.w	r3, r3, #16
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d01a      	beq.n	8010338 <tcp_listen_input+0x6c>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010302:	4b68      	ldr	r3, [pc, #416]	@ (80104a4 <tcp_listen_input+0x1d8>)
 8010304:	6858      	ldr	r0, [r3, #4]
 8010306:	4b68      	ldr	r3, [pc, #416]	@ (80104a8 <tcp_listen_input+0x1dc>)
 8010308:	6819      	ldr	r1, [r3, #0]
 801030a:	4b68      	ldr	r3, [pc, #416]	@ (80104ac <tcp_listen_input+0x1e0>)
 801030c:	881b      	ldrh	r3, [r3, #0]
 801030e:	461a      	mov	r2, r3
 8010310:	4b67      	ldr	r3, [pc, #412]	@ (80104b0 <tcp_listen_input+0x1e4>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	18d4      	adds	r4, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010316:	4b67      	ldr	r3, [pc, #412]	@ (80104b4 <tcp_listen_input+0x1e8>)
 8010318:	681b      	ldr	r3, [r3, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 801031a:	885b      	ldrh	r3, [r3, #2]
 801031c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801031e:	4a65      	ldr	r2, [pc, #404]	@ (80104b4 <tcp_listen_input+0x1e8>)
 8010320:	6812      	ldr	r2, [r2, #0]
    tcp_rst_netif(ip_data.current_input_netif, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010322:	8812      	ldrh	r2, [r2, #0]
 8010324:	b292      	uxth	r2, r2
 8010326:	9202      	str	r2, [sp, #8]
 8010328:	9301      	str	r3, [sp, #4]
 801032a:	4b63      	ldr	r3, [pc, #396]	@ (80104b8 <tcp_listen_input+0x1ec>)
 801032c:	9300      	str	r3, [sp, #0]
 801032e:	4b63      	ldr	r3, [pc, #396]	@ (80104bc <tcp_listen_input+0x1f0>)
 8010330:	4622      	mov	r2, r4
 8010332:	f003 f82e 	bl	8013392 <tcp_rst_netif>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010336:	e0a9      	b.n	801048c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8010338:	4b56      	ldr	r3, [pc, #344]	@ (8010494 <tcp_listen_input+0x1c8>)
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	f003 0302 	and.w	r3, r3, #2
 8010340:	2b00      	cmp	r3, #0
 8010342:	f000 80a3 	beq.w	801048c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	7d5b      	ldrb	r3, [r3, #21]
 801034a:	4618      	mov	r0, r3
 801034c:	f7ff f932 	bl	800f5b4 <tcp_alloc>
 8010350:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d111      	bne.n	801037c <tcp_listen_input+0xb0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	699b      	ldr	r3, [r3, #24]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d00a      	beq.n	8010376 <tcp_listen_input+0xaa>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	699b      	ldr	r3, [r3, #24]
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	6910      	ldr	r0, [r2, #16]
 8010368:	f04f 32ff 	mov.w	r2, #4294967295
 801036c:	2100      	movs	r1, #0
 801036e:	4798      	blx	r3
 8010370:	4603      	mov	r3, r0
 8010372:	73bb      	strb	r3, [r7, #14]
      return;
 8010374:	e08b      	b.n	801048e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010376:	23f0      	movs	r3, #240	@ 0xf0
 8010378:	73bb      	strb	r3, [r7, #14]
      return;
 801037a:	e088      	b.n	801048e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801037c:	4b49      	ldr	r3, [pc, #292]	@ (80104a4 <tcp_listen_input+0x1d8>)
 801037e:	695a      	ldr	r2, [r3, #20]
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010384:	4b47      	ldr	r3, [pc, #284]	@ (80104a4 <tcp_listen_input+0x1d8>)
 8010386:	691a      	ldr	r2, [r3, #16]
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	8ada      	ldrh	r2, [r3, #22]
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010394:	4b47      	ldr	r3, [pc, #284]	@ (80104b4 <tcp_listen_input+0x1e8>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	881b      	ldrh	r3, [r3, #0]
 801039a:	b29a      	uxth	r2, r3
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	2203      	movs	r2, #3
 80103a4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80103a6:	4b42      	ldr	r3, [pc, #264]	@ (80104b0 <tcp_listen_input+0x1e4>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	1c5a      	adds	r2, r3, #1
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80103b8:	6978      	ldr	r0, [r7, #20]
 80103ba:	f7ff fa55 	bl	800f868 <tcp_next_iss>
 80103be:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	693a      	ldr	r2, [r7, #16]
 80103c4:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	693a      	ldr	r2, [r7, #16]
 80103ca:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	693a      	ldr	r2, [r7, #16]
 80103d0:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	693a      	ldr	r2, [r7, #16]
 80103d6:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80103d8:	4b35      	ldr	r3, [pc, #212]	@ (80104b0 <tcp_listen_input+0x1e4>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	1e5a      	subs	r2, r3, #1
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	691a      	ldr	r2, [r3, #16]
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	7a5b      	ldrb	r3, [r3, #9]
 80103f4:	f003 030c 	and.w	r3, r3, #12
 80103f8:	b2da      	uxtb	r2, r3
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	7a1a      	ldrb	r2, [r3, #8]
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010406:	4b2e      	ldr	r3, [pc, #184]	@ (80104c0 <tcp_listen_input+0x1f4>)
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	60da      	str	r2, [r3, #12]
 801040e:	4a2c      	ldr	r2, [pc, #176]	@ (80104c0 <tcp_listen_input+0x1f4>)
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	6013      	str	r3, [r2, #0]
 8010414:	f003 f954 	bl	80136c0 <tcp_timer_needed>
 8010418:	4b2a      	ldr	r3, [pc, #168]	@ (80104c4 <tcp_listen_input+0x1f8>)
 801041a:	2201      	movs	r2, #1
 801041c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801041e:	6978      	ldr	r0, [r7, #20]
 8010420:	f001 fda4 	bl	8011f6c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010424:	4b23      	ldr	r3, [pc, #140]	@ (80104b4 <tcp_listen_input+0x1e8>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	89db      	ldrh	r3, [r3, #14]
 801042a:	b29a      	uxth	r2, r3
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	3304      	adds	r3, #4
 8010446:	4618      	mov	r0, r3
 8010448:	f007 f8dc 	bl	8017604 <ip4_route>
 801044c:	4601      	mov	r1, r0
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	3304      	adds	r3, #4
 8010452:	461a      	mov	r2, r3
 8010454:	4620      	mov	r0, r4
 8010456:	f7ff fa2d 	bl	800f8b4 <tcp_eff_send_mss_netif>
 801045a:	4603      	mov	r3, r0
 801045c:	461a      	mov	r2, r3
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010462:	2112      	movs	r1, #18
 8010464:	6978      	ldr	r0, [r7, #20]
 8010466:	f002 f85b 	bl	8012520 <tcp_enqueue_flags>
 801046a:	4603      	mov	r3, r0
 801046c:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801046e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d004      	beq.n	8010480 <tcp_listen_input+0x1b4>
      tcp_abandon(npcb, 0);
 8010476:	2100      	movs	r1, #0
 8010478:	6978      	ldr	r0, [r7, #20]
 801047a:	f7fe f9b3 	bl	800e7e4 <tcp_abandon>
      return;
 801047e:	e006      	b.n	801048e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8010480:	6978      	ldr	r0, [r7, #20]
 8010482:	f002 f93b 	bl	80126fc <tcp_output>
  return;
 8010486:	e001      	b.n	801048c <tcp_listen_input+0x1c0>
    return;
 8010488:	bf00      	nop
 801048a:	e000      	b.n	801048e <tcp_listen_input+0x1c2>
  return;
 801048c:	bf00      	nop
}
 801048e:	371c      	adds	r7, #28
 8010490:	46bd      	mov	sp, r7
 8010492:	bd90      	pop	{r4, r7, pc}
 8010494:	2000a348 	.word	0x2000a348
 8010498:	0801bbec 	.word	0x0801bbec
 801049c:	0801bdc8 	.word	0x0801bdc8
 80104a0:	0801bc1c 	.word	0x0801bc1c
 80104a4:	200035ac 	.word	0x200035ac
 80104a8:	2000a340 	.word	0x2000a340
 80104ac:	2000a346 	.word	0x2000a346
 80104b0:	2000a33c 	.word	0x2000a33c
 80104b4:	2000a32c 	.word	0x2000a32c
 80104b8:	200035bc 	.word	0x200035bc
 80104bc:	200035c0 	.word	0x200035c0
 80104c0:	2000a310 	.word	0x2000a310
 80104c4:	2000a318 	.word	0x2000a318

080104c8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b086      	sub	sp, #24
 80104cc:	af04      	add	r7, sp, #16
 80104ce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80104d0:	4b2f      	ldr	r3, [pc, #188]	@ (8010590 <tcp_timewait_input+0xc8>)
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	f003 0304 	and.w	r3, r3, #4
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d153      	bne.n	8010584 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d106      	bne.n	80104f0 <tcp_timewait_input+0x28>
 80104e2:	4b2c      	ldr	r3, [pc, #176]	@ (8010594 <tcp_timewait_input+0xcc>)
 80104e4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80104e8:	492b      	ldr	r1, [pc, #172]	@ (8010598 <tcp_timewait_input+0xd0>)
 80104ea:	482c      	ldr	r0, [pc, #176]	@ (801059c <tcp_timewait_input+0xd4>)
 80104ec:	f008 fc1a 	bl	8018d24 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80104f0:	4b27      	ldr	r3, [pc, #156]	@ (8010590 <tcp_timewait_input+0xc8>)
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	f003 0302 	and.w	r3, r3, #2
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d02a      	beq.n	8010552 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80104fc:	4b28      	ldr	r3, [pc, #160]	@ (80105a0 <tcp_timewait_input+0xd8>)
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010504:	1ad3      	subs	r3, r2, r3
 8010506:	2b00      	cmp	r3, #0
 8010508:	db2d      	blt.n	8010566 <tcp_timewait_input+0x9e>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8010512:	441a      	add	r2, r3
 8010514:	4b22      	ldr	r3, [pc, #136]	@ (80105a0 <tcp_timewait_input+0xd8>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	1ad3      	subs	r3, r2, r3
 801051a:	2b00      	cmp	r3, #0
 801051c:	db23      	blt.n	8010566 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801051e:	4b21      	ldr	r3, [pc, #132]	@ (80105a4 <tcp_timewait_input+0xdc>)
 8010520:	6819      	ldr	r1, [r3, #0]
 8010522:	4b21      	ldr	r3, [pc, #132]	@ (80105a8 <tcp_timewait_input+0xe0>)
 8010524:	881b      	ldrh	r3, [r3, #0]
 8010526:	461a      	mov	r2, r3
 8010528:	4b1d      	ldr	r3, [pc, #116]	@ (80105a0 <tcp_timewait_input+0xd8>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801052e:	4b1f      	ldr	r3, [pc, #124]	@ (80105ac <tcp_timewait_input+0xe4>)
 8010530:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010532:	885b      	ldrh	r3, [r3, #2]
 8010534:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010536:	4a1d      	ldr	r2, [pc, #116]	@ (80105ac <tcp_timewait_input+0xe4>)
 8010538:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801053a:	8812      	ldrh	r2, [r2, #0]
 801053c:	b292      	uxth	r2, r2
 801053e:	9202      	str	r2, [sp, #8]
 8010540:	9301      	str	r3, [sp, #4]
 8010542:	4b1b      	ldr	r3, [pc, #108]	@ (80105b0 <tcp_timewait_input+0xe8>)
 8010544:	9300      	str	r3, [sp, #0]
 8010546:	4b1b      	ldr	r3, [pc, #108]	@ (80105b4 <tcp_timewait_input+0xec>)
 8010548:	4602      	mov	r2, r0
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f002 ff00 	bl	8013350 <tcp_rst>
      return;
 8010550:	e01b      	b.n	801058a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010552:	4b0f      	ldr	r3, [pc, #60]	@ (8010590 <tcp_timewait_input+0xc8>)
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	f003 0301 	and.w	r3, r3, #1
 801055a:	2b00      	cmp	r3, #0
 801055c:	d003      	beq.n	8010566 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801055e:	4b16      	ldr	r3, [pc, #88]	@ (80105b8 <tcp_timewait_input+0xf0>)
 8010560:	681a      	ldr	r2, [r3, #0]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010566:	4b10      	ldr	r3, [pc, #64]	@ (80105a8 <tcp_timewait_input+0xe0>)
 8010568:	881b      	ldrh	r3, [r3, #0]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d00c      	beq.n	8010588 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	8b5b      	ldrh	r3, [r3, #26]
 8010572:	f043 0302 	orr.w	r3, r3, #2
 8010576:	b29a      	uxth	r2, r3
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f002 f8bd 	bl	80126fc <tcp_output>
  }
  return;
 8010582:	e001      	b.n	8010588 <tcp_timewait_input+0xc0>
    return;
 8010584:	bf00      	nop
 8010586:	e000      	b.n	801058a <tcp_timewait_input+0xc2>
  return;
 8010588:	bf00      	nop
}
 801058a:	3708      	adds	r7, #8
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	2000a348 	.word	0x2000a348
 8010594:	0801bbec 	.word	0x0801bbec
 8010598:	0801bde8 	.word	0x0801bde8
 801059c:	0801bc1c 	.word	0x0801bc1c
 80105a0:	2000a33c 	.word	0x2000a33c
 80105a4:	2000a340 	.word	0x2000a340
 80105a8:	2000a346 	.word	0x2000a346
 80105ac:	2000a32c 	.word	0x2000a32c
 80105b0:	200035bc 	.word	0x200035bc
 80105b4:	200035c0 	.word	0x200035c0
 80105b8:	2000a304 	.word	0x2000a304

080105bc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80105bc:	b590      	push	{r4, r7, lr}
 80105be:	b08d      	sub	sp, #52	@ 0x34
 80105c0:	af04      	add	r7, sp, #16
 80105c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80105c4:	2300      	movs	r3, #0
 80105c6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80105c8:	2300      	movs	r3, #0
 80105ca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d106      	bne.n	80105e0 <tcp_process+0x24>
 80105d2:	4b8c      	ldr	r3, [pc, #560]	@ (8010804 <tcp_process+0x248>)
 80105d4:	f240 321f 	movw	r2, #799	@ 0x31f
 80105d8:	498b      	ldr	r1, [pc, #556]	@ (8010808 <tcp_process+0x24c>)
 80105da:	488c      	ldr	r0, [pc, #560]	@ (801080c <tcp_process+0x250>)
 80105dc:	f008 fba2 	bl	8018d24 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80105e0:	4b8b      	ldr	r3, [pc, #556]	@ (8010810 <tcp_process+0x254>)
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	f003 0304 	and.w	r3, r3, #4
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d04e      	beq.n	801068a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	7d1b      	ldrb	r3, [r3, #20]
 80105f0:	2b02      	cmp	r3, #2
 80105f2:	d108      	bne.n	8010606 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80105f8:	4b86      	ldr	r3, [pc, #536]	@ (8010814 <tcp_process+0x258>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d123      	bne.n	8010648 <tcp_process+0x8c>
        acceptable = 1;
 8010600:	2301      	movs	r3, #1
 8010602:	76fb      	strb	r3, [r7, #27]
 8010604:	e020      	b.n	8010648 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801060a:	4b83      	ldr	r3, [pc, #524]	@ (8010818 <tcp_process+0x25c>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	429a      	cmp	r2, r3
 8010610:	d102      	bne.n	8010618 <tcp_process+0x5c>
        acceptable = 1;
 8010612:	2301      	movs	r3, #1
 8010614:	76fb      	strb	r3, [r7, #27]
 8010616:	e017      	b.n	8010648 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010618:	4b7f      	ldr	r3, [pc, #508]	@ (8010818 <tcp_process+0x25c>)
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	2b00      	cmp	r3, #0
 8010624:	db10      	blt.n	8010648 <tcp_process+0x8c>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801062a:	687a      	ldr	r2, [r7, #4]
 801062c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801062e:	441a      	add	r2, r3
 8010630:	4b79      	ldr	r3, [pc, #484]	@ (8010818 <tcp_process+0x25c>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	1ad3      	subs	r3, r2, r3
 8010636:	2b00      	cmp	r3, #0
 8010638:	db06      	blt.n	8010648 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	8b5b      	ldrh	r3, [r3, #26]
 801063e:	f043 0302 	orr.w	r3, r3, #2
 8010642:	b29a      	uxth	r2, r3
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010648:	7efb      	ldrb	r3, [r7, #27]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d01b      	beq.n	8010686 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	7d1b      	ldrb	r3, [r3, #20]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d106      	bne.n	8010664 <tcp_process+0xa8>
 8010656:	4b6b      	ldr	r3, [pc, #428]	@ (8010804 <tcp_process+0x248>)
 8010658:	f240 323b 	movw	r2, #827	@ 0x33b
 801065c:	496f      	ldr	r1, [pc, #444]	@ (801081c <tcp_process+0x260>)
 801065e:	486b      	ldr	r0, [pc, #428]	@ (801080c <tcp_process+0x250>)
 8010660:	f008 fb60 	bl	8018d24 <iprintf>
      recv_flags |= TF_RESET;
 8010664:	4b6e      	ldr	r3, [pc, #440]	@ (8010820 <tcp_process+0x264>)
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	f043 0308 	orr.w	r3, r3, #8
 801066c:	b2da      	uxtb	r2, r3
 801066e:	4b6c      	ldr	r3, [pc, #432]	@ (8010820 <tcp_process+0x264>)
 8010670:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	8b5b      	ldrh	r3, [r3, #26]
 8010676:	f023 0301 	bic.w	r3, r3, #1
 801067a:	b29a      	uxth	r2, r3
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010680:	f06f 030d 	mvn.w	r3, #13
 8010684:	e39e      	b.n	8010dc4 <tcp_process+0x808>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010686:	2300      	movs	r3, #0
 8010688:	e39c      	b.n	8010dc4 <tcp_process+0x808>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801068a:	4b61      	ldr	r3, [pc, #388]	@ (8010810 <tcp_process+0x254>)
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	f003 0302 	and.w	r3, r3, #2
 8010692:	2b00      	cmp	r3, #0
 8010694:	d010      	beq.n	80106b8 <tcp_process+0xfc>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	7d1b      	ldrb	r3, [r3, #20]
 801069a:	2b02      	cmp	r3, #2
 801069c:	d00c      	beq.n	80106b8 <tcp_process+0xfc>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	7d1b      	ldrb	r3, [r3, #20]
 80106a2:	2b03      	cmp	r3, #3
 80106a4:	d008      	beq.n	80106b8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	8b5b      	ldrh	r3, [r3, #26]
 80106aa:	f043 0302 	orr.w	r3, r3, #2
 80106ae:	b29a      	uxth	r2, r3
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80106b4:	2300      	movs	r3, #0
 80106b6:	e385      	b.n	8010dc4 <tcp_process+0x808>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	8b5b      	ldrh	r3, [r3, #26]
 80106bc:	f003 0310 	and.w	r3, r3, #16
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d103      	bne.n	80106cc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80106c4:	4b57      	ldr	r3, [pc, #348]	@ (8010824 <tcp_process+0x268>)
 80106c6:	681a      	ldr	r2, [r3, #0]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2200      	movs	r2, #0
 80106d8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f001 fc45 	bl	8011f6c <tcp_parseopt>

  if (flags & TCP_SYN) {
 80106e2:	4b4b      	ldr	r3, [pc, #300]	@ (8010810 <tcp_process+0x254>)
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	f003 0302 	and.w	r3, r3, #2
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d009      	beq.n	8010702 <tcp_process+0x146>
    /* accept SYN only in 2 states: */
    if ((pcb->state != SYN_SENT) && (pcb->state != SYN_RCVD)) {
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	7d1b      	ldrb	r3, [r3, #20]
 80106f2:	2b02      	cmp	r3, #2
 80106f4:	d005      	beq.n	8010702 <tcp_process+0x146>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	7d1b      	ldrb	r3, [r3, #20]
 80106fa:	2b03      	cmp	r3, #3
 80106fc:	d001      	beq.n	8010702 <tcp_process+0x146>
      return ERR_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	e360      	b.n	8010dc4 <tcp_process+0x808>
    }
  }

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	7d1b      	ldrb	r3, [r3, #20]
 8010706:	3b02      	subs	r3, #2
 8010708:	2b07      	cmp	r3, #7
 801070a:	f200 834b 	bhi.w	8010da4 <tcp_process+0x7e8>
 801070e:	a201      	add	r2, pc, #4	@ (adr r2, 8010714 <tcp_process+0x158>)
 8010710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010714:	08010735 	.word	0x08010735
 8010718:	0801095b 	.word	0x0801095b
 801071c:	08010b0f 	.word	0x08010b0f
 8010720:	08010b39 	.word	0x08010b39
 8010724:	08010c27 	.word	0x08010c27
 8010728:	08010b0f 	.word	0x08010b0f
 801072c:	08010cb3 	.word	0x08010cb3
 8010730:	08010d6f 	.word	0x08010d6f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %s %"U32_F"\n",
                                    ackno, pcb->snd_nxt, pcb->unacked ? "" : " empty:",
                                    pcb->unacked ? lwip_ntohl(pcb->unacked->tcphdr->seqno) : 0));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010734:	4b36      	ldr	r3, [pc, #216]	@ (8010810 <tcp_process+0x254>)
 8010736:	781b      	ldrb	r3, [r3, #0]
 8010738:	f003 0310 	and.w	r3, r3, #16
 801073c:	2b00      	cmp	r3, #0
 801073e:	f000 80df 	beq.w	8010900 <tcp_process+0x344>
 8010742:	4b33      	ldr	r3, [pc, #204]	@ (8010810 <tcp_process+0x254>)
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	f003 0302 	and.w	r3, r3, #2
 801074a:	2b00      	cmp	r3, #0
 801074c:	f000 80d8 	beq.w	8010900 <tcp_process+0x344>
          && (ackno == pcb->lastack + 1)) {
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010754:	1c5a      	adds	r2, r3, #1
 8010756:	4b2f      	ldr	r3, [pc, #188]	@ (8010814 <tcp_process+0x258>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	429a      	cmp	r2, r3
 801075c:	f040 80d0 	bne.w	8010900 <tcp_process+0x344>
        pcb->rcv_nxt = seqno + 1;
 8010760:	4b2d      	ldr	r3, [pc, #180]	@ (8010818 <tcp_process+0x25c>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	1c5a      	adds	r2, r3, #1
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8010772:	4b28      	ldr	r3, [pc, #160]	@ (8010814 <tcp_process+0x258>)
 8010774:	681a      	ldr	r2, [r3, #0]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801077a:	4b2b      	ldr	r3, [pc, #172]	@ (8010828 <tcp_process+0x26c>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	89db      	ldrh	r3, [r3, #14]
 8010780:	b29a      	uxth	r2, r3
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010794:	4b20      	ldr	r3, [pc, #128]	@ (8010818 <tcp_process+0x25c>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	1e5a      	subs	r2, r3, #1
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2204      	movs	r2, #4
 80107a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	3304      	adds	r3, #4
 80107ac:	4618      	mov	r0, r3
 80107ae:	f006 ff29 	bl	8017604 <ip4_route>
 80107b2:	4601      	mov	r1, r0
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	3304      	adds	r3, #4
 80107b8:	461a      	mov	r2, r3
 80107ba:	4620      	mov	r0, r4
 80107bc:	f7ff f87a 	bl	800f8b4 <tcp_eff_send_mss_netif>
 80107c0:	4603      	mov	r3, r0
 80107c2:	461a      	mov	r2, r3
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80107cc:	009a      	lsls	r2, r3, #2
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80107d2:	005b      	lsls	r3, r3, #1
 80107d4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80107d8:	428b      	cmp	r3, r1
 80107da:	bf38      	it	cc
 80107dc:	460b      	movcc	r3, r1
 80107de:	429a      	cmp	r2, r3
 80107e0:	d204      	bcs.n	80107ec <tcp_process+0x230>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80107e6:	009b      	lsls	r3, r3, #2
 80107e8:	b29b      	uxth	r3, r3
 80107ea:	e021      	b.n	8010830 <tcp_process+0x274>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80107f0:	005b      	lsls	r3, r3, #1
 80107f2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80107f6:	4293      	cmp	r3, r2
 80107f8:	d918      	bls.n	801082c <tcp_process+0x270>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80107fe:	005b      	lsls	r3, r3, #1
 8010800:	b29b      	uxth	r3, r3
 8010802:	e015      	b.n	8010830 <tcp_process+0x274>
 8010804:	0801bbec 	.word	0x0801bbec
 8010808:	0801be08 	.word	0x0801be08
 801080c:	0801bc1c 	.word	0x0801bc1c
 8010810:	2000a348 	.word	0x2000a348
 8010814:	2000a340 	.word	0x2000a340
 8010818:	2000a33c 	.word	0x2000a33c
 801081c:	0801be24 	.word	0x0801be24
 8010820:	2000a349 	.word	0x2000a349
 8010824:	2000a304 	.word	0x2000a304
 8010828:	2000a32c 	.word	0x2000a32c
 801082c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010830:	687a      	ldr	r2, [r7, #4]
 8010832:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801083c:	2b00      	cmp	r3, #0
 801083e:	d106      	bne.n	801084e <tcp_process+0x292>
 8010840:	4b97      	ldr	r3, [pc, #604]	@ (8010aa0 <tcp_process+0x4e4>)
 8010842:	f240 3277 	movw	r2, #887	@ 0x377
 8010846:	4997      	ldr	r1, [pc, #604]	@ (8010aa4 <tcp_process+0x4e8>)
 8010848:	4897      	ldr	r0, [pc, #604]	@ (8010aa8 <tcp_process+0x4ec>)
 801084a:	f008 fa6b 	bl	8018d24 <iprintf>
        --pcb->snd_queuelen;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010854:	3b01      	subs	r3, #1
 8010856:	b29a      	uxth	r2, r3
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010862:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d111      	bne.n	801088e <tcp_process+0x2d2>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801086e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d106      	bne.n	8010884 <tcp_process+0x2c8>
 8010876:	4b8a      	ldr	r3, [pc, #552]	@ (8010aa0 <tcp_process+0x4e4>)
 8010878:	f240 327f 	movw	r2, #895	@ 0x37f
 801087c:	498b      	ldr	r1, [pc, #556]	@ (8010aac <tcp_process+0x4f0>)
 801087e:	488a      	ldr	r0, [pc, #552]	@ (8010aa8 <tcp_process+0x4ec>)
 8010880:	f008 fa50 	bl	8018d24 <iprintf>
          pcb->unsent = rseg->next;
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	681a      	ldr	r2, [r3, #0]
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801088c:	e003      	b.n	8010896 <tcp_process+0x2da>
        } else {
          pcb->unacked = rseg->next;
 801088e:	69fb      	ldr	r3, [r7, #28]
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010896:	69f8      	ldr	r0, [r7, #28]
 8010898:	f7fe fd31 	bl	800f2fe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d104      	bne.n	80108ae <tcp_process+0x2f2>
          pcb->rtime = -1;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80108aa:	861a      	strh	r2, [r3, #48]	@ 0x30
 80108ac:	e006      	b.n	80108bc <tcp_process+0x300>
        } else {
          pcb->rtime = 0;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2200      	movs	r2, #0
 80108b2:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2200      	movs	r2, #0
 80108b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d00a      	beq.n	80108dc <tcp_process+0x320>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	6910      	ldr	r0, [r2, #16]
 80108d0:	2200      	movs	r2, #0
 80108d2:	6879      	ldr	r1, [r7, #4]
 80108d4:	4798      	blx	r3
 80108d6:	4603      	mov	r3, r0
 80108d8:	76bb      	strb	r3, [r7, #26]
 80108da:	e001      	b.n	80108e0 <tcp_process+0x324>
 80108dc:	2300      	movs	r3, #0
 80108de:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80108e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80108e4:	f113 0f0d 	cmn.w	r3, #13
 80108e8:	d102      	bne.n	80108f0 <tcp_process+0x334>
          return ERR_ABRT;
 80108ea:	f06f 030c 	mvn.w	r3, #12
 80108ee:	e269      	b.n	8010dc4 <tcp_process+0x808>
        }
        tcp_ack_now(pcb);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	8b5b      	ldrh	r3, [r3, #26]
 80108f4:	f043 0302 	orr.w	r3, r3, #2
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80108fe:	e253      	b.n	8010da8 <tcp_process+0x7ec>
      else if (flags & TCP_ACK) {
 8010900:	4b6b      	ldr	r3, [pc, #428]	@ (8010ab0 <tcp_process+0x4f4>)
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	f003 0310 	and.w	r3, r3, #16
 8010908:	2b00      	cmp	r3, #0
 801090a:	f000 824d 	beq.w	8010da8 <tcp_process+0x7ec>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801090e:	4b69      	ldr	r3, [pc, #420]	@ (8010ab4 <tcp_process+0x4f8>)
 8010910:	6819      	ldr	r1, [r3, #0]
 8010912:	4b69      	ldr	r3, [pc, #420]	@ (8010ab8 <tcp_process+0x4fc>)
 8010914:	881b      	ldrh	r3, [r3, #0]
 8010916:	461a      	mov	r2, r3
 8010918:	4b68      	ldr	r3, [pc, #416]	@ (8010abc <tcp_process+0x500>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801091e:	4b68      	ldr	r3, [pc, #416]	@ (8010ac0 <tcp_process+0x504>)
 8010920:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010922:	885b      	ldrh	r3, [r3, #2]
 8010924:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010926:	4a66      	ldr	r2, [pc, #408]	@ (8010ac0 <tcp_process+0x504>)
 8010928:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801092a:	8812      	ldrh	r2, [r2, #0]
 801092c:	b292      	uxth	r2, r2
 801092e:	9202      	str	r2, [sp, #8]
 8010930:	9301      	str	r3, [sp, #4]
 8010932:	4b64      	ldr	r3, [pc, #400]	@ (8010ac4 <tcp_process+0x508>)
 8010934:	9300      	str	r3, [sp, #0]
 8010936:	4b64      	ldr	r3, [pc, #400]	@ (8010ac8 <tcp_process+0x50c>)
 8010938:	4602      	mov	r2, r0
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f002 fd08 	bl	8013350 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010946:	2b05      	cmp	r3, #5
 8010948:	f200 822e 	bhi.w	8010da8 <tcp_process+0x7ec>
          pcb->rtime = 0;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2200      	movs	r2, #0
 8010950:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f002 fa5e 	bl	8012e14 <tcp_rexmit_rto>
      break;
 8010958:	e226      	b.n	8010da8 <tcp_process+0x7ec>
    case SYN_RCVD:
      if (flags & TCP_SYN) {
 801095a:	4b55      	ldr	r3, [pc, #340]	@ (8010ab0 <tcp_process+0x4f4>)
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	f003 0302 	and.w	r3, r3, #2
 8010962:	2b00      	cmp	r3, #0
 8010964:	d00b      	beq.n	801097e <tcp_process+0x3c2>
        if (seqno == pcb->rcv_nxt - 1) {
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801096a:	1e5a      	subs	r2, r3, #1
 801096c:	4b53      	ldr	r3, [pc, #332]	@ (8010abc <tcp_process+0x500>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	429a      	cmp	r2, r3
 8010972:	f040 821b 	bne.w	8010dac <tcp_process+0x7f0>
          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
          tcp_rexmit(pcb);
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f002 fa6e 	bl	8012e58 <tcp_rexmit>
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
        }
      }
      break;
 801097c:	e216      	b.n	8010dac <tcp_process+0x7f0>
      } else if (flags & TCP_ACK) {
 801097e:	4b4c      	ldr	r3, [pc, #304]	@ (8010ab0 <tcp_process+0x4f4>)
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	f003 0310 	and.w	r3, r3, #16
 8010986:	2b00      	cmp	r3, #0
 8010988:	f000 8210 	beq.w	8010dac <tcp_process+0x7f0>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801098c:	4b49      	ldr	r3, [pc, #292]	@ (8010ab4 <tcp_process+0x4f8>)
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010994:	1ad3      	subs	r3, r2, r3
 8010996:	3b01      	subs	r3, #1
 8010998:	2b00      	cmp	r3, #0
 801099a:	f2c0 809d 	blt.w	8010ad8 <tcp_process+0x51c>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80109a2:	4b44      	ldr	r3, [pc, #272]	@ (8010ab4 <tcp_process+0x4f8>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	1ad3      	subs	r3, r2, r3
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	f2c0 8095 	blt.w	8010ad8 <tcp_process+0x51c>
          pcb->state = ESTABLISHED;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2204      	movs	r2, #4
 80109b2:	751a      	strb	r2, [r3, #20]
          if (pcb->listener == NULL) {
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d102      	bne.n	80109c2 <tcp_process+0x406>
            err = ERR_VAL;
 80109bc:	23fa      	movs	r3, #250	@ 0xfa
 80109be:	76bb      	strb	r3, [r7, #26]
 80109c0:	e01d      	b.n	80109fe <tcp_process+0x442>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109c6:	699b      	ldr	r3, [r3, #24]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d106      	bne.n	80109da <tcp_process+0x41e>
 80109cc:	4b34      	ldr	r3, [pc, #208]	@ (8010aa0 <tcp_process+0x4e4>)
 80109ce:	f44f 726e 	mov.w	r2, #952	@ 0x3b8
 80109d2:	493e      	ldr	r1, [pc, #248]	@ (8010acc <tcp_process+0x510>)
 80109d4:	4834      	ldr	r0, [pc, #208]	@ (8010aa8 <tcp_process+0x4ec>)
 80109d6:	f008 f9a5 	bl	8018d24 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109de:	699b      	ldr	r3, [r3, #24]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d00a      	beq.n	80109fa <tcp_process+0x43e>
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109e8:	699b      	ldr	r3, [r3, #24]
 80109ea:	687a      	ldr	r2, [r7, #4]
 80109ec:	6910      	ldr	r0, [r2, #16]
 80109ee:	2200      	movs	r2, #0
 80109f0:	6879      	ldr	r1, [r7, #4]
 80109f2:	4798      	blx	r3
 80109f4:	4603      	mov	r3, r0
 80109f6:	76bb      	strb	r3, [r7, #26]
 80109f8:	e001      	b.n	80109fe <tcp_process+0x442>
 80109fa:	23f0      	movs	r3, #240	@ 0xf0
 80109fc:	76bb      	strb	r3, [r7, #26]
          if (err != ERR_OK) {
 80109fe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00a      	beq.n	8010a1c <tcp_process+0x460>
            if (err != ERR_ABRT) {
 8010a06:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010a0a:	f113 0f0d 	cmn.w	r3, #13
 8010a0e:	d002      	beq.n	8010a16 <tcp_process+0x45a>
              tcp_abort(pcb);
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f7fd ff9b 	bl	800e94c <tcp_abort>
            return ERR_ABRT;
 8010a16:	f06f 030c 	mvn.w	r3, #12
 8010a1a:	e1d3      	b.n	8010dc4 <tcp_process+0x808>
          tcp_receive(pcb);
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f000 fae3 	bl	8010fe8 <tcp_receive>
          if (recv_acked != 0) {
 8010a22:	4b2b      	ldr	r3, [pc, #172]	@ (8010ad0 <tcp_process+0x514>)
 8010a24:	881b      	ldrh	r3, [r3, #0]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d005      	beq.n	8010a36 <tcp_process+0x47a>
            recv_acked--;
 8010a2a:	4b29      	ldr	r3, [pc, #164]	@ (8010ad0 <tcp_process+0x514>)
 8010a2c:	881b      	ldrh	r3, [r3, #0]
 8010a2e:	3b01      	subs	r3, #1
 8010a30:	b29a      	uxth	r2, r3
 8010a32:	4b27      	ldr	r3, [pc, #156]	@ (8010ad0 <tcp_process+0x514>)
 8010a34:	801a      	strh	r2, [r3, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a3a:	009a      	lsls	r2, r3, #2
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a40:	005b      	lsls	r3, r3, #1
 8010a42:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010a46:	428b      	cmp	r3, r1
 8010a48:	bf38      	it	cc
 8010a4a:	460b      	movcc	r3, r1
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d204      	bcs.n	8010a5a <tcp_process+0x49e>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a54:	009b      	lsls	r3, r3, #2
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	e00d      	b.n	8010a76 <tcp_process+0x4ba>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a5e:	005b      	lsls	r3, r3, #1
 8010a60:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d904      	bls.n	8010a72 <tcp_process+0x4b6>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a6c:	005b      	lsls	r3, r3, #1
 8010a6e:	b29b      	uxth	r3, r3
 8010a70:	e001      	b.n	8010a76 <tcp_process+0x4ba>
 8010a72:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010a76:	687a      	ldr	r2, [r7, #4]
 8010a78:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          if (recv_flags & TF_GOT_FIN) {
 8010a7c:	4b15      	ldr	r3, [pc, #84]	@ (8010ad4 <tcp_process+0x518>)
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	f003 0320 	and.w	r3, r3, #32
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d041      	beq.n	8010b0c <tcp_process+0x550>
            tcp_ack_now(pcb);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	8b5b      	ldrh	r3, [r3, #26]
 8010a8c:	f043 0302 	orr.w	r3, r3, #2
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2207      	movs	r2, #7
 8010a9a:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010a9c:	e036      	b.n	8010b0c <tcp_process+0x550>
 8010a9e:	bf00      	nop
 8010aa0:	0801bbec 	.word	0x0801bbec
 8010aa4:	0801be44 	.word	0x0801be44
 8010aa8:	0801bc1c 	.word	0x0801bc1c
 8010aac:	0801be5c 	.word	0x0801be5c
 8010ab0:	2000a348 	.word	0x2000a348
 8010ab4:	2000a340 	.word	0x2000a340
 8010ab8:	2000a346 	.word	0x2000a346
 8010abc:	2000a33c 	.word	0x2000a33c
 8010ac0:	2000a32c 	.word	0x2000a32c
 8010ac4:	200035bc 	.word	0x200035bc
 8010ac8:	200035c0 	.word	0x200035c0
 8010acc:	0801be70 	.word	0x0801be70
 8010ad0:	2000a344 	.word	0x2000a344
 8010ad4:	2000a349 	.word	0x2000a349
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ad8:	4b8d      	ldr	r3, [pc, #564]	@ (8010d10 <tcp_process+0x754>)
 8010ada:	6819      	ldr	r1, [r3, #0]
 8010adc:	4b8d      	ldr	r3, [pc, #564]	@ (8010d14 <tcp_process+0x758>)
 8010ade:	881b      	ldrh	r3, [r3, #0]
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	4b8d      	ldr	r3, [pc, #564]	@ (8010d18 <tcp_process+0x75c>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8010d1c <tcp_process+0x760>)
 8010aea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010aec:	885b      	ldrh	r3, [r3, #2]
 8010aee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010af0:	4a8a      	ldr	r2, [pc, #552]	@ (8010d1c <tcp_process+0x760>)
 8010af2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010af4:	8812      	ldrh	r2, [r2, #0]
 8010af6:	b292      	uxth	r2, r2
 8010af8:	9202      	str	r2, [sp, #8]
 8010afa:	9301      	str	r3, [sp, #4]
 8010afc:	4b88      	ldr	r3, [pc, #544]	@ (8010d20 <tcp_process+0x764>)
 8010afe:	9300      	str	r3, [sp, #0]
 8010b00:	4b88      	ldr	r3, [pc, #544]	@ (8010d24 <tcp_process+0x768>)
 8010b02:	4602      	mov	r2, r0
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f002 fc23 	bl	8013350 <tcp_rst>
      break;
 8010b0a:	e14f      	b.n	8010dac <tcp_process+0x7f0>
 8010b0c:	e14e      	b.n	8010dac <tcp_process+0x7f0>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 fa6a 	bl	8010fe8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010b14:	4b84      	ldr	r3, [pc, #528]	@ (8010d28 <tcp_process+0x76c>)
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	f003 0320 	and.w	r3, r3, #32
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f000 8147 	beq.w	8010db0 <tcp_process+0x7f4>
        tcp_ack_now(pcb);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	8b5b      	ldrh	r3, [r3, #26]
 8010b26:	f043 0302 	orr.w	r3, r3, #2
 8010b2a:	b29a      	uxth	r2, r3
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2207      	movs	r2, #7
 8010b34:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010b36:	e13b      	b.n	8010db0 <tcp_process+0x7f4>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f000 fa55 	bl	8010fe8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010b3e:	4b7a      	ldr	r3, [pc, #488]	@ (8010d28 <tcp_process+0x76c>)
 8010b40:	781b      	ldrb	r3, [r3, #0]
 8010b42:	f003 0320 	and.w	r3, r3, #32
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d056      	beq.n	8010bf8 <tcp_process+0x63c>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b4a:	4b78      	ldr	r3, [pc, #480]	@ (8010d2c <tcp_process+0x770>)
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	f003 0310 	and.w	r3, r3, #16
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d045      	beq.n	8010be2 <tcp_process+0x626>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010b5a:	4b6d      	ldr	r3, [pc, #436]	@ (8010d10 <tcp_process+0x754>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d13f      	bne.n	8010be2 <tcp_process+0x626>
            pcb->unsent == NULL) {
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d13b      	bne.n	8010be2 <tcp_process+0x626>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	8b5b      	ldrh	r3, [r3, #26]
 8010b6e:	f043 0302 	orr.w	r3, r3, #2
 8010b72:	b29a      	uxth	r2, r3
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7fe fd9f 	bl	800f6bc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010b7e:	4b6c      	ldr	r3, [pc, #432]	@ (8010d30 <tcp_process+0x774>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d105      	bne.n	8010b94 <tcp_process+0x5d8>
 8010b88:	4b69      	ldr	r3, [pc, #420]	@ (8010d30 <tcp_process+0x774>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	68db      	ldr	r3, [r3, #12]
 8010b8e:	4a68      	ldr	r2, [pc, #416]	@ (8010d30 <tcp_process+0x774>)
 8010b90:	6013      	str	r3, [r2, #0]
 8010b92:	e013      	b.n	8010bbc <tcp_process+0x600>
 8010b94:	4b66      	ldr	r3, [pc, #408]	@ (8010d30 <tcp_process+0x774>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	617b      	str	r3, [r7, #20]
 8010b9a:	e00c      	b.n	8010bb6 <tcp_process+0x5fa>
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d104      	bne.n	8010bb0 <tcp_process+0x5f4>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	68da      	ldr	r2, [r3, #12]
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	60da      	str	r2, [r3, #12]
 8010bae:	e005      	b.n	8010bbc <tcp_process+0x600>
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	617b      	str	r3, [r7, #20]
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d1ef      	bne.n	8010b9c <tcp_process+0x5e0>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	60da      	str	r2, [r3, #12]
 8010bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8010d34 <tcp_process+0x778>)
 8010bc4:	2201      	movs	r2, #1
 8010bc6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	220a      	movs	r2, #10
 8010bcc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010bce:	4b5a      	ldr	r3, [pc, #360]	@ (8010d38 <tcp_process+0x77c>)
 8010bd0:	681a      	ldr	r2, [r3, #0]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	60da      	str	r2, [r3, #12]
 8010bd6:	4a58      	ldr	r2, [pc, #352]	@ (8010d38 <tcp_process+0x77c>)
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6013      	str	r3, [r2, #0]
 8010bdc:	f002 fd70 	bl	80136c0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010be0:	e0e8      	b.n	8010db4 <tcp_process+0x7f8>
          tcp_ack_now(pcb);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	8b5b      	ldrh	r3, [r3, #26]
 8010be6:	f043 0302 	orr.w	r3, r3, #2
 8010bea:	b29a      	uxth	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2208      	movs	r2, #8
 8010bf4:	751a      	strb	r2, [r3, #20]
      break;
 8010bf6:	e0dd      	b.n	8010db4 <tcp_process+0x7f8>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010bf8:	4b4c      	ldr	r3, [pc, #304]	@ (8010d2c <tcp_process+0x770>)
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	f003 0310 	and.w	r3, r3, #16
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	f000 80d7 	beq.w	8010db4 <tcp_process+0x7f8>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010c0a:	4b41      	ldr	r3, [pc, #260]	@ (8010d10 <tcp_process+0x754>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	f040 80d0 	bne.w	8010db4 <tcp_process+0x7f8>
                 pcb->unsent == NULL) {
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	f040 80cb 	bne.w	8010db4 <tcp_process+0x7f8>
        pcb->state = FIN_WAIT_2;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2206      	movs	r2, #6
 8010c22:	751a      	strb	r2, [r3, #20]
      break;
 8010c24:	e0c6      	b.n	8010db4 <tcp_process+0x7f8>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f000 f9de 	bl	8010fe8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8010d28 <tcp_process+0x76c>)
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	f003 0320 	and.w	r3, r3, #32
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	f000 80bf 	beq.w	8010db8 <tcp_process+0x7fc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	8b5b      	ldrh	r3, [r3, #26]
 8010c3e:	f043 0302 	orr.w	r3, r3, #2
 8010c42:	b29a      	uxth	r2, r3
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f7fe fd37 	bl	800f6bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010c4e:	4b38      	ldr	r3, [pc, #224]	@ (8010d30 <tcp_process+0x774>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	687a      	ldr	r2, [r7, #4]
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d105      	bne.n	8010c64 <tcp_process+0x6a8>
 8010c58:	4b35      	ldr	r3, [pc, #212]	@ (8010d30 <tcp_process+0x774>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	68db      	ldr	r3, [r3, #12]
 8010c5e:	4a34      	ldr	r2, [pc, #208]	@ (8010d30 <tcp_process+0x774>)
 8010c60:	6013      	str	r3, [r2, #0]
 8010c62:	e013      	b.n	8010c8c <tcp_process+0x6d0>
 8010c64:	4b32      	ldr	r3, [pc, #200]	@ (8010d30 <tcp_process+0x774>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	613b      	str	r3, [r7, #16]
 8010c6a:	e00c      	b.n	8010c86 <tcp_process+0x6ca>
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	429a      	cmp	r2, r3
 8010c74:	d104      	bne.n	8010c80 <tcp_process+0x6c4>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	68da      	ldr	r2, [r3, #12]
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	60da      	str	r2, [r3, #12]
 8010c7e:	e005      	b.n	8010c8c <tcp_process+0x6d0>
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	68db      	ldr	r3, [r3, #12]
 8010c84:	613b      	str	r3, [r7, #16]
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d1ef      	bne.n	8010c6c <tcp_process+0x6b0>
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	60da      	str	r2, [r3, #12]
 8010c92:	4b28      	ldr	r3, [pc, #160]	@ (8010d34 <tcp_process+0x778>)
 8010c94:	2201      	movs	r2, #1
 8010c96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	220a      	movs	r2, #10
 8010c9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010c9e:	4b26      	ldr	r3, [pc, #152]	@ (8010d38 <tcp_process+0x77c>)
 8010ca0:	681a      	ldr	r2, [r3, #0]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	60da      	str	r2, [r3, #12]
 8010ca6:	4a24      	ldr	r2, [pc, #144]	@ (8010d38 <tcp_process+0x77c>)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6013      	str	r3, [r2, #0]
 8010cac:	f002 fd08 	bl	80136c0 <tcp_timer_needed>
      }
      break;
 8010cb0:	e082      	b.n	8010db8 <tcp_process+0x7fc>
    case CLOSING:
      tcp_receive(pcb);
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f000 f998 	bl	8010fe8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8010d2c <tcp_process+0x770>)
 8010cba:	781b      	ldrb	r3, [r3, #0]
 8010cbc:	f003 0310 	and.w	r3, r3, #16
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d07b      	beq.n	8010dbc <tcp_process+0x800>
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010cc8:	4b11      	ldr	r3, [pc, #68]	@ (8010d10 <tcp_process+0x754>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d175      	bne.n	8010dbc <tcp_process+0x800>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d171      	bne.n	8010dbc <tcp_process+0x800>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f7fe fcef 	bl	800f6bc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010cde:	4b14      	ldr	r3, [pc, #80]	@ (8010d30 <tcp_process+0x774>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	687a      	ldr	r2, [r7, #4]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d105      	bne.n	8010cf4 <tcp_process+0x738>
 8010ce8:	4b11      	ldr	r3, [pc, #68]	@ (8010d30 <tcp_process+0x774>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	68db      	ldr	r3, [r3, #12]
 8010cee:	4a10      	ldr	r2, [pc, #64]	@ (8010d30 <tcp_process+0x774>)
 8010cf0:	6013      	str	r3, [r2, #0]
 8010cf2:	e029      	b.n	8010d48 <tcp_process+0x78c>
 8010cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8010d30 <tcp_process+0x774>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	60fb      	str	r3, [r7, #12]
 8010cfa:	e022      	b.n	8010d42 <tcp_process+0x786>
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d11a      	bne.n	8010d3c <tcp_process+0x780>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	68da      	ldr	r2, [r3, #12]
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	60da      	str	r2, [r3, #12]
 8010d0e:	e01b      	b.n	8010d48 <tcp_process+0x78c>
 8010d10:	2000a340 	.word	0x2000a340
 8010d14:	2000a346 	.word	0x2000a346
 8010d18:	2000a33c 	.word	0x2000a33c
 8010d1c:	2000a32c 	.word	0x2000a32c
 8010d20:	200035bc 	.word	0x200035bc
 8010d24:	200035c0 	.word	0x200035c0
 8010d28:	2000a349 	.word	0x2000a349
 8010d2c:	2000a348 	.word	0x2000a348
 8010d30:	2000a310 	.word	0x2000a310
 8010d34:	2000a318 	.word	0x2000a318
 8010d38:	2000a314 	.word	0x2000a314
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	68db      	ldr	r3, [r3, #12]
 8010d40:	60fb      	str	r3, [r7, #12]
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d1d9      	bne.n	8010cfc <tcp_process+0x740>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	60da      	str	r2, [r3, #12]
 8010d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8010dcc <tcp_process+0x810>)
 8010d50:	2201      	movs	r2, #1
 8010d52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	220a      	movs	r2, #10
 8010d58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8010dd0 <tcp_process+0x814>)
 8010d5c:	681a      	ldr	r2, [r3, #0]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	60da      	str	r2, [r3, #12]
 8010d62:	4a1b      	ldr	r2, [pc, #108]	@ (8010dd0 <tcp_process+0x814>)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6013      	str	r3, [r2, #0]
 8010d68:	f002 fcaa 	bl	80136c0 <tcp_timer_needed>
      }
      break;
 8010d6c:	e026      	b.n	8010dbc <tcp_process+0x800>
    case LAST_ACK:
      tcp_receive(pcb);
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f000 f93a 	bl	8010fe8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010d74:	4b17      	ldr	r3, [pc, #92]	@ (8010dd4 <tcp_process+0x818>)
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	f003 0310 	and.w	r3, r3, #16
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d01f      	beq.n	8010dc0 <tcp_process+0x804>
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010d84:	4b14      	ldr	r3, [pc, #80]	@ (8010dd8 <tcp_process+0x81c>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d119      	bne.n	8010dc0 <tcp_process+0x804>
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d115      	bne.n	8010dc0 <tcp_process+0x804>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010d94:	4b11      	ldr	r3, [pc, #68]	@ (8010ddc <tcp_process+0x820>)
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	f043 0310 	orr.w	r3, r3, #16
 8010d9c:	b2da      	uxtb	r2, r3
 8010d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8010ddc <tcp_process+0x820>)
 8010da0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010da2:	e00d      	b.n	8010dc0 <tcp_process+0x804>
    default:
      break;
 8010da4:	bf00      	nop
 8010da6:	e00c      	b.n	8010dc2 <tcp_process+0x806>
      break;
 8010da8:	bf00      	nop
 8010daa:	e00a      	b.n	8010dc2 <tcp_process+0x806>
      break;
 8010dac:	bf00      	nop
 8010dae:	e008      	b.n	8010dc2 <tcp_process+0x806>
      break;
 8010db0:	bf00      	nop
 8010db2:	e006      	b.n	8010dc2 <tcp_process+0x806>
      break;
 8010db4:	bf00      	nop
 8010db6:	e004      	b.n	8010dc2 <tcp_process+0x806>
      break;
 8010db8:	bf00      	nop
 8010dba:	e002      	b.n	8010dc2 <tcp_process+0x806>
      break;
 8010dbc:	bf00      	nop
 8010dbe:	e000      	b.n	8010dc2 <tcp_process+0x806>
      break;
 8010dc0:	bf00      	nop
  }
  return ERR_OK;
 8010dc2:	2300      	movs	r3, #0
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3724      	adds	r7, #36	@ 0x24
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd90      	pop	{r4, r7, pc}
 8010dcc:	2000a318 	.word	0x2000a318
 8010dd0:	2000a314 	.word	0x2000a314
 8010dd4:	2000a348 	.word	0x2000a348
 8010dd8:	2000a340 	.word	0x2000a340
 8010ddc:	2000a349 	.word	0x2000a349

08010de0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010de0:	b590      	push	{r4, r7, lr}
 8010de2:	b085      	sub	sp, #20
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d106      	bne.n	8010dfe <tcp_oos_insert_segment+0x1e>
 8010df0:	4b3b      	ldr	r3, [pc, #236]	@ (8010ee0 <tcp_oos_insert_segment+0x100>)
 8010df2:	f240 422c 	movw	r2, #1068	@ 0x42c
 8010df6:	493b      	ldr	r1, [pc, #236]	@ (8010ee4 <tcp_oos_insert_segment+0x104>)
 8010df8:	483b      	ldr	r0, [pc, #236]	@ (8010ee8 <tcp_oos_insert_segment+0x108>)
 8010dfa:	f007 ff93 	bl	8018d24 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	68db      	ldr	r3, [r3, #12]
 8010e02:	899b      	ldrh	r3, [r3, #12]
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7fb fc42 	bl	800c690 <lwip_htons>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	b2db      	uxtb	r3, r3
 8010e10:	f003 0301 	and.w	r3, r3, #1
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d028      	beq.n	8010e6a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010e18:	6838      	ldr	r0, [r7, #0]
 8010e1a:	f7fe fa5b 	bl	800f2d4 <tcp_segs_free>
    next = NULL;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	603b      	str	r3, [r7, #0]
 8010e22:	e056      	b.n	8010ed2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	68db      	ldr	r3, [r3, #12]
 8010e28:	899b      	ldrh	r3, [r3, #12]
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7fb fc2f 	bl	800c690 <lwip_htons>
 8010e32:	4603      	mov	r3, r0
 8010e34:	b2db      	uxtb	r3, r3
 8010e36:	f003 0301 	and.w	r3, r3, #1
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d00d      	beq.n	8010e5a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	68db      	ldr	r3, [r3, #12]
 8010e42:	899b      	ldrh	r3, [r3, #12]
 8010e44:	b29c      	uxth	r4, r3
 8010e46:	2001      	movs	r0, #1
 8010e48:	f7fb fc22 	bl	800c690 <lwip_htons>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	461a      	mov	r2, r3
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	68db      	ldr	r3, [r3, #12]
 8010e54:	4322      	orrs	r2, r4
 8010e56:	b292      	uxth	r2, r2
 8010e58:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010e64:	68f8      	ldr	r0, [r7, #12]
 8010e66:	f7fe fa4a 	bl	800f2fe <tcp_seg_free>
    while (next &&
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d00e      	beq.n	8010e8e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	891b      	ldrh	r3, [r3, #8]
 8010e74:	461a      	mov	r2, r3
 8010e76:	4b1d      	ldr	r3, [pc, #116]	@ (8010eec <tcp_oos_insert_segment+0x10c>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	441a      	add	r2, r3
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	6839      	ldr	r1, [r7, #0]
 8010e84:	8909      	ldrh	r1, [r1, #8]
 8010e86:	440b      	add	r3, r1
 8010e88:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	daca      	bge.n	8010e24 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d01e      	beq.n	8010ed2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	685a      	ldr	r2, [r3, #4]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	891b      	ldrh	r3, [r3, #8]
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	4b12      	ldr	r3, [pc, #72]	@ (8010eec <tcp_oos_insert_segment+0x10c>)
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	440b      	add	r3, r1
 8010ea6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	da12      	bge.n	8010ed2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	68db      	ldr	r3, [r3, #12]
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	b29a      	uxth	r2, r3
 8010eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8010eec <tcp_oos_insert_segment+0x10c>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	1ad3      	subs	r3, r2, r3
 8010ebc:	b29a      	uxth	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	685a      	ldr	r2, [r3, #4]
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	891b      	ldrh	r3, [r3, #8]
 8010eca:	4619      	mov	r1, r3
 8010ecc:	4610      	mov	r0, r2
 8010ece:	f7fc fdc3 	bl	800da58 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	683a      	ldr	r2, [r7, #0]
 8010ed6:	601a      	str	r2, [r3, #0]
}
 8010ed8:	bf00      	nop
 8010eda:	3714      	adds	r7, #20
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd90      	pop	{r4, r7, pc}
 8010ee0:	0801bbec 	.word	0x0801bbec
 8010ee4:	0801be90 	.word	0x0801be90
 8010ee8:	0801bc1c 	.word	0x0801bc1c
 8010eec:	2000a33c 	.word	0x2000a33c

08010ef0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ef2:	b087      	sub	sp, #28
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	60f8      	str	r0, [r7, #12]
 8010ef8:	60b9      	str	r1, [r7, #8]
 8010efa:	607a      	str	r2, [r7, #4]
 8010efc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010efe:	e03e      	b.n	8010f7e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010f04:	68bb      	ldr	r3, [r7, #8]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fc ffb2 	bl	800de78 <pbuf_clen>
 8010f14:	4603      	mov	r3, r0
 8010f16:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f1e:	8a7a      	ldrh	r2, [r7, #18]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d906      	bls.n	8010f32 <tcp_free_acked_segments+0x42>
 8010f24:	4b2a      	ldr	r3, [pc, #168]	@ (8010fd0 <tcp_free_acked_segments+0xe0>)
 8010f26:	f240 4264 	movw	r2, #1124	@ 0x464
 8010f2a:	492a      	ldr	r1, [pc, #168]	@ (8010fd4 <tcp_free_acked_segments+0xe4>)
 8010f2c:	482a      	ldr	r0, [pc, #168]	@ (8010fd8 <tcp_free_acked_segments+0xe8>)
 8010f2e:	f007 fef9 	bl	8018d24 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8010f38:	8a7b      	ldrh	r3, [r7, #18]
 8010f3a:	1ad3      	subs	r3, r2, r3
 8010f3c:	b29a      	uxth	r2, r3
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	891a      	ldrh	r2, [r3, #8]
 8010f48:	4b24      	ldr	r3, [pc, #144]	@ (8010fdc <tcp_free_acked_segments+0xec>)
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	4413      	add	r3, r2
 8010f4e:	b29a      	uxth	r2, r3
 8010f50:	4b22      	ldr	r3, [pc, #136]	@ (8010fdc <tcp_free_acked_segments+0xec>)
 8010f52:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010f54:	6978      	ldr	r0, [r7, #20]
 8010f56:	f7fe f9d2 	bl	800f2fe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d00c      	beq.n	8010f7e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d109      	bne.n	8010f7e <tcp_free_acked_segments+0x8e>
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d106      	bne.n	8010f7e <tcp_free_acked_segments+0x8e>
 8010f70:	4b17      	ldr	r3, [pc, #92]	@ (8010fd0 <tcp_free_acked_segments+0xe0>)
 8010f72:	f240 426e 	movw	r2, #1134	@ 0x46e
 8010f76:	491a      	ldr	r1, [pc, #104]	@ (8010fe0 <tcp_free_acked_segments+0xf0>)
 8010f78:	4817      	ldr	r0, [pc, #92]	@ (8010fd8 <tcp_free_acked_segments+0xe8>)
 8010f7a:	f007 fed3 	bl	8018d24 <iprintf>
  while (seg_list != NULL &&
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d020      	beq.n	8010fc6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010f84:	4b17      	ldr	r3, [pc, #92]	@ (8010fe4 <tcp_free_acked_segments+0xf4>)
 8010f86:	681c      	ldr	r4, [r3, #0]
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	68db      	ldr	r3, [r3, #12]
 8010f8c:	685b      	ldr	r3, [r3, #4]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7fb fb94 	bl	800c6bc <lwip_htonl>
 8010f94:	4605      	mov	r5, r0
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	891b      	ldrh	r3, [r3, #8]
 8010f9a:	461e      	mov	r6, r3
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	68db      	ldr	r3, [r3, #12]
 8010fa0:	899b      	ldrh	r3, [r3, #12]
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7fb fb73 	bl	800c690 <lwip_htons>
 8010faa:	4603      	mov	r3, r0
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	f003 0303 	and.w	r3, r3, #3
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d001      	beq.n	8010fba <tcp_free_acked_segments+0xca>
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	e000      	b.n	8010fbc <tcp_free_acked_segments+0xcc>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	4433      	add	r3, r6
 8010fbe:	442b      	add	r3, r5
 8010fc0:	1ae3      	subs	r3, r4, r3
  while (seg_list != NULL &&
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	da9c      	bge.n	8010f00 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010fc6:	68bb      	ldr	r3, [r7, #8]
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	371c      	adds	r7, #28
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fd0:	0801bbec 	.word	0x0801bbec
 8010fd4:	0801beb8 	.word	0x0801beb8
 8010fd8:	0801bc1c 	.word	0x0801bc1c
 8010fdc:	2000a344 	.word	0x2000a344
 8010fe0:	0801bee0 	.word	0x0801bee0
 8010fe4:	2000a340 	.word	0x2000a340

08010fe8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010fe8:	b5b0      	push	{r4, r5, r7, lr}
 8010fea:	b094      	sub	sp, #80	@ 0x50
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d106      	bne.n	8011004 <tcp_receive+0x1c>
 8010ff6:	4ba1      	ldr	r3, [pc, #644]	@ (801127c <tcp_receive+0x294>)
 8010ff8:	f240 4287 	movw	r2, #1159	@ 0x487
 8010ffc:	49a0      	ldr	r1, [pc, #640]	@ (8011280 <tcp_receive+0x298>)
 8010ffe:	48a1      	ldr	r0, [pc, #644]	@ (8011284 <tcp_receive+0x29c>)
 8011000:	f007 fe90 	bl	8018d24 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	7d1b      	ldrb	r3, [r3, #20]
 8011008:	2b03      	cmp	r3, #3
 801100a:	d806      	bhi.n	801101a <tcp_receive+0x32>
 801100c:	4b9b      	ldr	r3, [pc, #620]	@ (801127c <tcp_receive+0x294>)
 801100e:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 8011012:	499d      	ldr	r1, [pc, #628]	@ (8011288 <tcp_receive+0x2a0>)
 8011014:	489b      	ldr	r0, [pc, #620]	@ (8011284 <tcp_receive+0x29c>)
 8011016:	f007 fe85 	bl	8018d24 <iprintf>

  if (flags & TCP_ACK) {
 801101a:	4b9c      	ldr	r3, [pc, #624]	@ (801128c <tcp_receive+0x2a4>)
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	f003 0310 	and.w	r3, r3, #16
 8011022:	2b00      	cmp	r3, #0
 8011024:	f000 825f 	beq.w	80114e6 <tcp_receive+0x4fe>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801102e:	461a      	mov	r2, r3
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011034:	4413      	add	r3, r2
 8011036:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801103c:	4b94      	ldr	r3, [pc, #592]	@ (8011290 <tcp_receive+0x2a8>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	1ad3      	subs	r3, r2, r3
 8011042:	2b00      	cmp	r3, #0
 8011044:	db1b      	blt.n	801107e <tcp_receive+0x96>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801104a:	4b91      	ldr	r3, [pc, #580]	@ (8011290 <tcp_receive+0x2a8>)
 801104c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801104e:	429a      	cmp	r2, r3
 8011050:	d106      	bne.n	8011060 <tcp_receive+0x78>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011056:	4b8f      	ldr	r3, [pc, #572]	@ (8011294 <tcp_receive+0x2ac>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	1ad3      	subs	r3, r2, r3
 801105c:	2b00      	cmp	r3, #0
 801105e:	db0e      	blt.n	801107e <tcp_receive+0x96>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011064:	4b8b      	ldr	r3, [pc, #556]	@ (8011294 <tcp_receive+0x2ac>)
 8011066:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011068:	429a      	cmp	r2, r3
 801106a:	d125      	bne.n	80110b8 <tcp_receive+0xd0>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801106c:	4b8a      	ldr	r3, [pc, #552]	@ (8011298 <tcp_receive+0x2b0>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	89db      	ldrh	r3, [r3, #14]
 8011072:	b29a      	uxth	r2, r3
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801107a:	429a      	cmp	r2, r3
 801107c:	d91c      	bls.n	80110b8 <tcp_receive+0xd0>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801107e:	4b86      	ldr	r3, [pc, #536]	@ (8011298 <tcp_receive+0x2b0>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	89db      	ldrh	r3, [r3, #14]
 8011084:	b29a      	uxth	r2, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011098:	429a      	cmp	r2, r3
 801109a:	d205      	bcs.n	80110a8 <tcp_receive+0xc0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80110a8:	4b79      	ldr	r3, [pc, #484]	@ (8011290 <tcp_receive+0x2a8>)
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80110b0:	4b78      	ldr	r3, [pc, #480]	@ (8011294 <tcp_receive+0x2ac>)
 80110b2:	681a      	ldr	r2, [r3, #0]
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80110bc:	4b75      	ldr	r3, [pc, #468]	@ (8011294 <tcp_receive+0x2ac>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	db53      	blt.n	801116e <tcp_receive+0x186>
      /* Clause 2 */
      if (tcplen == 0) {
 80110c6:	4b75      	ldr	r3, [pc, #468]	@ (801129c <tcp_receive+0x2b4>)
 80110c8:	881b      	ldrh	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	f040 81ab 	bne.w	8011426 <tcp_receive+0x43e>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80110d4:	687a      	ldr	r2, [r7, #4]
 80110d6:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80110da:	4413      	add	r3, r2
 80110dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80110de:	429a      	cmp	r2, r3
 80110e0:	f040 81a1 	bne.w	8011426 <tcp_receive+0x43e>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f2c0 819b 	blt.w	8011426 <tcp_receive+0x43e>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80110f4:	4b67      	ldr	r3, [pc, #412]	@ (8011294 <tcp_receive+0x2ac>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	f040 8194 	bne.w	8011426 <tcp_receive+0x43e>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011104:	2bff      	cmp	r3, #255	@ 0xff
 8011106:	d007      	beq.n	8011118 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801110e:	3301      	adds	r3, #1
 8011110:	b2da      	uxtb	r2, r3
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801111e:	2b03      	cmp	r3, #3
 8011120:	d91b      	bls.n	801115a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801112c:	4413      	add	r3, r2
 801112e:	b29a      	uxth	r2, r3
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011136:	429a      	cmp	r2, r3
 8011138:	d30a      	bcc.n	8011150 <tcp_receive+0x168>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011144:	4413      	add	r3, r2
 8011146:	b29a      	uxth	r2, r3
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801114e:	e004      	b.n	801115a <tcp_receive+0x172>
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011156:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011160:	2b02      	cmp	r3, #2
 8011162:	f240 8160 	bls.w	8011426 <tcp_receive+0x43e>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f001 fee2 	bl	8012f30 <tcp_rexmit_fast>
 801116c:	e15b      	b.n	8011426 <tcp_receive+0x43e>
              }
            }
          }
        }
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801116e:	4b49      	ldr	r3, [pc, #292]	@ (8011294 <tcp_receive+0x2ac>)
 8011170:	681a      	ldr	r2, [r3, #0]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011176:	1ad3      	subs	r3, r2, r3
 8011178:	3b01      	subs	r3, #1
 801117a:	2b00      	cmp	r3, #0
 801117c:	f2c0 814e 	blt.w	801141c <tcp_receive+0x434>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011184:	4b43      	ldr	r3, [pc, #268]	@ (8011294 <tcp_receive+0x2ac>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	1ad3      	subs	r3, r2, r3
 801118a:	2b00      	cmp	r3, #0
 801118c:	f2c0 8146 	blt.w	801141c <tcp_receive+0x434>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	8b5b      	ldrh	r3, [r3, #26]
 8011194:	f003 0304 	and.w	r3, r3, #4
 8011198:	2b00      	cmp	r3, #0
 801119a:	d010      	beq.n	80111be <tcp_receive+0x1d6>
        tcp_clear_flags(pcb, TF_INFR);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	8b5b      	ldrh	r3, [r3, #26]
 80111a0:	f023 0304 	bic.w	r3, r3, #4
 80111a4:	b29a      	uxth	r2, r3
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2200      	movs	r2, #0
 80111ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2200      	movs	r2, #0
 80111c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80111cc:	10db      	asrs	r3, r3, #3
 80111ce:	b21b      	sxth	r3, r3
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80111d8:	b29b      	uxth	r3, r3
 80111da:	4413      	add	r3, r2
 80111dc:	b29b      	uxth	r3, r3
 80111de:	b21a      	sxth	r2, r3
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80111e6:	4b2b      	ldr	r3, [pc, #172]	@ (8011294 <tcp_receive+0x2ac>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	b29a      	uxth	r2, r3
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	1ad3      	subs	r3, r2, r3
 80111f4:	867b      	strh	r3, [r7, #50]	@ 0x32

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2200      	movs	r2, #0
 80111fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80111fe:	4b25      	ldr	r3, [pc, #148]	@ (8011294 <tcp_receive+0x2ac>)
 8011200:	681a      	ldr	r2, [r3, #0]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	7d1b      	ldrb	r3, [r3, #20]
 801120a:	2b03      	cmp	r3, #3
 801120c:	f240 8097 	bls.w	801133e <tcp_receive+0x356>
        if (pcb->cwnd < pcb->ssthresh) {
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801121c:	429a      	cmp	r2, r3
 801121e:	d245      	bcs.n	80112ac <tcp_receive+0x2c4>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	8b5b      	ldrh	r3, [r3, #26]
 8011224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011228:	2b00      	cmp	r3, #0
 801122a:	d001      	beq.n	8011230 <tcp_receive+0x248>
 801122c:	2301      	movs	r3, #1
 801122e:	e000      	b.n	8011232 <tcp_receive+0x24a>
 8011230:	2302      	movs	r3, #2
 8011232:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011236:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 801123a:	b29a      	uxth	r2, r3
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011240:	fb12 f303 	smulbb	r3, r2, r3
 8011244:	b29b      	uxth	r3, r3
 8011246:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8011248:	4293      	cmp	r3, r2
 801124a:	bf28      	it	cs
 801124c:	4613      	movcs	r3, r2
 801124e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
          TCP_WND_INC(pcb->cwnd, increase);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011256:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011258:	4413      	add	r3, r2
 801125a:	b29a      	uxth	r2, r3
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011262:	429a      	cmp	r2, r3
 8011264:	d31c      	bcc.n	80112a0 <tcp_receive+0x2b8>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801126c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801126e:	4413      	add	r3, r2
 8011270:	b29a      	uxth	r2, r3
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011278:	e061      	b.n	801133e <tcp_receive+0x356>
 801127a:	bf00      	nop
 801127c:	0801bbec 	.word	0x0801bbec
 8011280:	0801bf00 	.word	0x0801bf00
 8011284:	0801bc1c 	.word	0x0801bc1c
 8011288:	0801bf1c 	.word	0x0801bf1c
 801128c:	2000a348 	.word	0x2000a348
 8011290:	2000a33c 	.word	0x2000a33c
 8011294:	2000a340 	.word	0x2000a340
 8011298:	2000a32c 	.word	0x2000a32c
 801129c:	2000a346 	.word	0x2000a346
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80112a6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80112aa:	e048      	b.n	801133e <tcp_receive+0x356>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80112b2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80112b4:	4413      	add	r3, r2
 80112b6:	b29a      	uxth	r2, r3
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80112be:	429a      	cmp	r2, r3
 80112c0:	d309      	bcc.n	80112d6 <tcp_receive+0x2ee>
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80112c8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80112ca:	4413      	add	r3, r2
 80112cc:	b29a      	uxth	r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80112d4:	e004      	b.n	80112e0 <tcp_receive+0x2f8>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80112dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d326      	bcc.n	801133e <tcp_receive+0x356>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80112fc:	1ad3      	subs	r3, r2, r3
 80112fe:	b29a      	uxth	r2, r3
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011310:	4413      	add	r3, r2
 8011312:	b29a      	uxth	r2, r3
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801131a:	429a      	cmp	r2, r3
 801131c:	d30a      	bcc.n	8011334 <tcp_receive+0x34c>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011328:	4413      	add	r3, r2
 801132a:	b29a      	uxth	r2, r3
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011332:	e004      	b.n	801133e <tcp_receive+0x356>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801133a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011346:	4a98      	ldr	r2, [pc, #608]	@ (80115a8 <tcp_receive+0x5c0>)
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f7ff fdd1 	bl	8010ef0 <tcp_free_acked_segments>
 801134e:	4602      	mov	r2, r0
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801135c:	4a93      	ldr	r2, [pc, #588]	@ (80115ac <tcp_receive+0x5c4>)
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f7ff fdc6 	bl	8010ef0 <tcp_free_acked_segments>
 8011364:	4602      	mov	r2, r0
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801136e:	2b00      	cmp	r3, #0
 8011370:	d104      	bne.n	801137c <tcp_receive+0x394>
        pcb->rtime = -1;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011378:	861a      	strh	r2, [r3, #48]	@ 0x30
 801137a:	e002      	b.n	8011382 <tcp_receive+0x39a>
      } else {
        pcb->rtime = 0;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	2200      	movs	r2, #0
 8011380:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	2200      	movs	r2, #0
 8011386:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801138c:	2b00      	cmp	r3, #0
 801138e:	d103      	bne.n	8011398 <tcp_receive+0x3b0>
        pcb->unsent_oversize = 0;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2200      	movs	r2, #0
 8011394:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801139e:	4b84      	ldr	r3, [pc, #528]	@ (80115b0 <tcp_receive+0x5c8>)
 80113a0:	881b      	ldrh	r3, [r3, #0]
 80113a2:	4413      	add	r3, r2
 80113a4:	b29a      	uxth	r2, r3
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	8b5b      	ldrh	r3, [r3, #26]
 80113b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d035      	beq.n	8011424 <tcp_receive+0x43c>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d118      	bne.n	80113f2 <tcp_receive+0x40a>
          if ((pcb->unsent == NULL) ||
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d00c      	beq.n	80113e2 <tcp_receive+0x3fa>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113cc:	68db      	ldr	r3, [r3, #12]
 80113ce:	685b      	ldr	r3, [r3, #4]
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7fb f973 	bl	800c6bc <lwip_htonl>
 80113d6:	4602      	mov	r2, r0
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80113dc:	1ad3      	subs	r3, r2, r3
          if ((pcb->unsent == NULL) ||
 80113de:	2b00      	cmp	r3, #0
 80113e0:	db20      	blt.n	8011424 <tcp_receive+0x43c>
            tcp_clear_flags(pcb, TF_RTO);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	8b5b      	ldrh	r3, [r3, #26]
 80113e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80113ea:	b29a      	uxth	r2, r3
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80113f0:	e018      	b.n	8011424 <tcp_receive+0x43c>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7fb f95e 	bl	800c6bc <lwip_htonl>
 8011400:	4602      	mov	r2, r0
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	2b00      	cmp	r3, #0
 801140a:	db0b      	blt.n	8011424 <tcp_receive+0x43c>
          tcp_clear_flags(pcb, TF_RTO);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	8b5b      	ldrh	r3, [r3, #26]
 8011410:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011414:	b29a      	uxth	r2, r3
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801141a:	e003      	b.n	8011424 <tcp_receive+0x43c>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f001 ffdf 	bl	80133e0 <tcp_send_empty_ack>
 8011422:	e000      	b.n	8011426 <tcp_receive+0x43e>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011424:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801142a:	2b00      	cmp	r3, #0
 801142c:	d05b      	beq.n	80114e6 <tcp_receive+0x4fe>
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011432:	4b60      	ldr	r3, [pc, #384]	@ (80115b4 <tcp_receive+0x5cc>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	1ad3      	subs	r3, r2, r3
 8011438:	2b00      	cmp	r3, #0
 801143a:	da54      	bge.n	80114e6 <tcp_receive+0x4fe>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801143c:	4b5e      	ldr	r3, [pc, #376]	@ (80115b8 <tcp_receive+0x5d0>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	b29a      	uxth	r2, r3
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011446:	b29b      	uxth	r3, r3
 8011448:	1ad3      	subs	r3, r2, r3
 801144a:	b29b      	uxth	r3, r3
 801144c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011450:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801145a:	10db      	asrs	r3, r3, #3
 801145c:	b21b      	sxth	r3, r3
 801145e:	b29b      	uxth	r3, r3
 8011460:	1ad3      	subs	r3, r2, r3
 8011462:	b29b      	uxth	r3, r3
 8011464:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801146e:	b29a      	uxth	r2, r3
 8011470:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011474:	4413      	add	r3, r2
 8011476:	b29b      	uxth	r3, r3
 8011478:	b21a      	sxth	r2, r3
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801147e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011482:	2b00      	cmp	r3, #0
 8011484:	da05      	bge.n	8011492 <tcp_receive+0x4aa>
        m = (s16_t) - m;
 8011486:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801148a:	425b      	negs	r3, r3
 801148c:	b29b      	uxth	r3, r3
 801148e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011492:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801149c:	109b      	asrs	r3, r3, #2
 801149e:	b21b      	sxth	r3, r3
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	1ad3      	subs	r3, r2, r3
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80114b0:	b29a      	uxth	r2, r3
 80114b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80114b6:	4413      	add	r3, r2
 80114b8:	b29b      	uxth	r3, r3
 80114ba:	b21a      	sxth	r2, r3
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80114c6:	10db      	asrs	r3, r3, #3
 80114c8:	b21b      	sxth	r3, r3
 80114ca:	b29a      	uxth	r2, r3
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80114d2:	b29b      	uxth	r3, r3
 80114d4:	4413      	add	r3, r2
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	b21a      	sxth	r2, r3
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2200      	movs	r2, #0
 80114e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80114e6:	4b35      	ldr	r3, [pc, #212]	@ (80115bc <tcp_receive+0x5d4>)
 80114e8:	881b      	ldrh	r3, [r3, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	f000 84de 	beq.w	8011eac <tcp_receive+0xec4>
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	7d1b      	ldrb	r3, [r3, #20]
 80114f4:	2b06      	cmp	r3, #6
 80114f6:	f200 84d9 	bhi.w	8011eac <tcp_receive+0xec4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80114fe:	4b30      	ldr	r3, [pc, #192]	@ (80115c0 <tcp_receive+0x5d8>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	1ad3      	subs	r3, r2, r3
 8011504:	3b01      	subs	r3, #1
 8011506:	2b00      	cmp	r3, #0
 8011508:	f2c0 808e 	blt.w	8011628 <tcp_receive+0x640>
 801150c:	4b2b      	ldr	r3, [pc, #172]	@ (80115bc <tcp_receive+0x5d4>)
 801150e:	881b      	ldrh	r3, [r3, #0]
 8011510:	461a      	mov	r2, r3
 8011512:	4b2b      	ldr	r3, [pc, #172]	@ (80115c0 <tcp_receive+0x5d8>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	441a      	add	r2, r3
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801151c:	1ad3      	subs	r3, r2, r3
 801151e:	3b01      	subs	r3, #1
 8011520:	2b00      	cmp	r3, #0
 8011522:	f2c0 8081 	blt.w	8011628 <tcp_receive+0x640>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011526:	4b27      	ldr	r3, [pc, #156]	@ (80115c4 <tcp_receive+0x5dc>)
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	64bb      	str	r3, [r7, #72]	@ 0x48
      u32_t off32 = pcb->rcv_nxt - seqno;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011530:	4b23      	ldr	r3, [pc, #140]	@ (80115c0 <tcp_receive+0x5d8>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	1ad3      	subs	r3, r2, r3
 8011536:	62bb      	str	r3, [r7, #40]	@ 0x28
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011538:	4b22      	ldr	r3, [pc, #136]	@ (80115c4 <tcp_receive+0x5dc>)
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d106      	bne.n	801154e <tcp_receive+0x566>
 8011540:	4b21      	ldr	r3, [pc, #132]	@ (80115c8 <tcp_receive+0x5e0>)
 8011542:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011546:	4921      	ldr	r1, [pc, #132]	@ (80115cc <tcp_receive+0x5e4>)
 8011548:	4821      	ldr	r0, [pc, #132]	@ (80115d0 <tcp_receive+0x5e8>)
 801154a:	f007 fbeb 	bl	8018d24 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801154e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011550:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011554:	4293      	cmp	r3, r2
 8011556:	d906      	bls.n	8011566 <tcp_receive+0x57e>
 8011558:	4b1b      	ldr	r3, [pc, #108]	@ (80115c8 <tcp_receive+0x5e0>)
 801155a:	f240 529b 	movw	r2, #1435	@ 0x59b
 801155e:	491d      	ldr	r1, [pc, #116]	@ (80115d4 <tcp_receive+0x5ec>)
 8011560:	481b      	ldr	r0, [pc, #108]	@ (80115d0 <tcp_receive+0x5e8>)
 8011562:	f007 fbdf 	bl	8018d24 <iprintf>
      off = (u16_t)off32;
 8011566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011568:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801156c:	4b15      	ldr	r3, [pc, #84]	@ (80115c4 <tcp_receive+0x5dc>)
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	891b      	ldrh	r3, [r3, #8]
 8011572:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011576:	429a      	cmp	r2, r3
 8011578:	d906      	bls.n	8011588 <tcp_receive+0x5a0>
 801157a:	4b13      	ldr	r3, [pc, #76]	@ (80115c8 <tcp_receive+0x5e0>)
 801157c:	f240 529d 	movw	r2, #1437	@ 0x59d
 8011580:	4915      	ldr	r1, [pc, #84]	@ (80115d8 <tcp_receive+0x5f0>)
 8011582:	4813      	ldr	r0, [pc, #76]	@ (80115d0 <tcp_receive+0x5e8>)
 8011584:	f007 fbce 	bl	8018d24 <iprintf>
      inseg.len -= off;
 8011588:	4b0e      	ldr	r3, [pc, #56]	@ (80115c4 <tcp_receive+0x5dc>)
 801158a:	891a      	ldrh	r2, [r3, #8]
 801158c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011590:	1ad3      	subs	r3, r2, r3
 8011592:	b29a      	uxth	r2, r3
 8011594:	4b0b      	ldr	r3, [pc, #44]	@ (80115c4 <tcp_receive+0x5dc>)
 8011596:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011598:	4b0a      	ldr	r3, [pc, #40]	@ (80115c4 <tcp_receive+0x5dc>)
 801159a:	685b      	ldr	r3, [r3, #4]
 801159c:	891a      	ldrh	r2, [r3, #8]
 801159e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
      while (p->len < off) {
 80115a6:	e029      	b.n	80115fc <tcp_receive+0x614>
 80115a8:	0801bf38 	.word	0x0801bf38
 80115ac:	0801bf40 	.word	0x0801bf40
 80115b0:	2000a344 	.word	0x2000a344
 80115b4:	2000a340 	.word	0x2000a340
 80115b8:	2000a304 	.word	0x2000a304
 80115bc:	2000a346 	.word	0x2000a346
 80115c0:	2000a33c 	.word	0x2000a33c
 80115c4:	2000a31c 	.word	0x2000a31c
 80115c8:	0801bbec 	.word	0x0801bbec
 80115cc:	0801bf48 	.word	0x0801bf48
 80115d0:	0801bc1c 	.word	0x0801bc1c
 80115d4:	0801bf58 	.word	0x0801bf58
 80115d8:	0801bf68 	.word	0x0801bf68
        off -= p->len;
 80115dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115de:	895b      	ldrh	r3, [r3, #10]
 80115e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80115e4:	1ad3      	subs	r3, r2, r3
 80115e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80115ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115ec:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80115ee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80115f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115f2:	2200      	movs	r2, #0
 80115f4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80115f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      while (p->len < off) {
 80115fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115fe:	895b      	ldrh	r3, [r3, #10]
 8011600:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011604:	429a      	cmp	r2, r3
 8011606:	d8e9      	bhi.n	80115dc <tcp_receive+0x5f4>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011608:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801160c:	4619      	mov	r1, r3
 801160e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8011610:	f7fc fb2e 	bl	800dc70 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011618:	4a90      	ldr	r2, [pc, #576]	@ (801185c <tcp_receive+0x874>)
 801161a:	6013      	str	r3, [r2, #0]
 801161c:	4b90      	ldr	r3, [pc, #576]	@ (8011860 <tcp_receive+0x878>)
 801161e:	68db      	ldr	r3, [r3, #12]
 8011620:	4a8e      	ldr	r2, [pc, #568]	@ (801185c <tcp_receive+0x874>)
 8011622:	6812      	ldr	r2, [r2, #0]
 8011624:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011626:	e00d      	b.n	8011644 <tcp_receive+0x65c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011628:	4b8c      	ldr	r3, [pc, #560]	@ (801185c <tcp_receive+0x874>)
 801162a:	681a      	ldr	r2, [r3, #0]
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011630:	1ad3      	subs	r3, r2, r3
 8011632:	2b00      	cmp	r3, #0
 8011634:	da06      	bge.n	8011644 <tcp_receive+0x65c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	8b5b      	ldrh	r3, [r3, #26]
 801163a:	f043 0302 	orr.w	r3, r3, #2
 801163e:	b29a      	uxth	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011644:	4b85      	ldr	r3, [pc, #532]	@ (801185c <tcp_receive+0x874>)
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801164c:	1ad3      	subs	r3, r2, r3
 801164e:	2b00      	cmp	r3, #0
 8011650:	f2c0 8427 	blt.w	8011ea2 <tcp_receive+0xeba>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011658:	687a      	ldr	r2, [r7, #4]
 801165a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801165c:	441a      	add	r2, r3
 801165e:	4b7f      	ldr	r3, [pc, #508]	@ (801185c <tcp_receive+0x874>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	1ad3      	subs	r3, r2, r3
 8011664:	3b01      	subs	r3, #1
 8011666:	2b00      	cmp	r3, #0
 8011668:	f2c0 841b 	blt.w	8011ea2 <tcp_receive+0xeba>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011670:	4b7a      	ldr	r3, [pc, #488]	@ (801185c <tcp_receive+0x874>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	429a      	cmp	r2, r3
 8011676:	f040 8298 	bne.w	8011baa <tcp_receive+0xbc2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801167a:	4b79      	ldr	r3, [pc, #484]	@ (8011860 <tcp_receive+0x878>)
 801167c:	891c      	ldrh	r4, [r3, #8]
 801167e:	4b78      	ldr	r3, [pc, #480]	@ (8011860 <tcp_receive+0x878>)
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	899b      	ldrh	r3, [r3, #12]
 8011684:	b29b      	uxth	r3, r3
 8011686:	4618      	mov	r0, r3
 8011688:	f7fb f802 	bl	800c690 <lwip_htons>
 801168c:	4603      	mov	r3, r0
 801168e:	b2db      	uxtb	r3, r3
 8011690:	f003 0303 	and.w	r3, r3, #3
 8011694:	2b00      	cmp	r3, #0
 8011696:	d001      	beq.n	801169c <tcp_receive+0x6b4>
 8011698:	2301      	movs	r3, #1
 801169a:	e000      	b.n	801169e <tcp_receive+0x6b6>
 801169c:	2300      	movs	r3, #0
 801169e:	4423      	add	r3, r4
 80116a0:	b29a      	uxth	r2, r3
 80116a2:	4b70      	ldr	r3, [pc, #448]	@ (8011864 <tcp_receive+0x87c>)
 80116a4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80116aa:	4b6e      	ldr	r3, [pc, #440]	@ (8011864 <tcp_receive+0x87c>)
 80116ac:	881b      	ldrh	r3, [r3, #0]
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d274      	bcs.n	801179c <tcp_receive+0x7b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80116b2:	4b6b      	ldr	r3, [pc, #428]	@ (8011860 <tcp_receive+0x878>)
 80116b4:	68db      	ldr	r3, [r3, #12]
 80116b6:	899b      	ldrh	r3, [r3, #12]
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fa ffe8 	bl	800c690 <lwip_htons>
 80116c0:	4603      	mov	r3, r0
 80116c2:	b2db      	uxtb	r3, r3
 80116c4:	f003 0301 	and.w	r3, r3, #1
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d01e      	beq.n	801170a <tcp_receive+0x722>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80116cc:	4b64      	ldr	r3, [pc, #400]	@ (8011860 <tcp_receive+0x878>)
 80116ce:	68db      	ldr	r3, [r3, #12]
 80116d0:	899b      	ldrh	r3, [r3, #12]
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	b21b      	sxth	r3, r3
 80116d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80116da:	b21c      	sxth	r4, r3
 80116dc:	4b60      	ldr	r3, [pc, #384]	@ (8011860 <tcp_receive+0x878>)
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	899b      	ldrh	r3, [r3, #12]
 80116e2:	b29b      	uxth	r3, r3
 80116e4:	4618      	mov	r0, r3
 80116e6:	f7fa ffd3 	bl	800c690 <lwip_htons>
 80116ea:	4603      	mov	r3, r0
 80116ec:	b2db      	uxtb	r3, r3
 80116ee:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7fa ffcb 	bl	800c690 <lwip_htons>
 80116fa:	4603      	mov	r3, r0
 80116fc:	b21b      	sxth	r3, r3
 80116fe:	4323      	orrs	r3, r4
 8011700:	b21a      	sxth	r2, r3
 8011702:	4b57      	ldr	r3, [pc, #348]	@ (8011860 <tcp_receive+0x878>)
 8011704:	68db      	ldr	r3, [r3, #12]
 8011706:	b292      	uxth	r2, r2
 8011708:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801170e:	4b54      	ldr	r3, [pc, #336]	@ (8011860 <tcp_receive+0x878>)
 8011710:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011712:	4b53      	ldr	r3, [pc, #332]	@ (8011860 <tcp_receive+0x878>)
 8011714:	68db      	ldr	r3, [r3, #12]
 8011716:	899b      	ldrh	r3, [r3, #12]
 8011718:	b29b      	uxth	r3, r3
 801171a:	4618      	mov	r0, r3
 801171c:	f7fa ffb8 	bl	800c690 <lwip_htons>
 8011720:	4603      	mov	r3, r0
 8011722:	b2db      	uxtb	r3, r3
 8011724:	f003 0302 	and.w	r3, r3, #2
 8011728:	2b00      	cmp	r3, #0
 801172a:	d005      	beq.n	8011738 <tcp_receive+0x750>
            inseg.len -= 1;
 801172c:	4b4c      	ldr	r3, [pc, #304]	@ (8011860 <tcp_receive+0x878>)
 801172e:	891b      	ldrh	r3, [r3, #8]
 8011730:	3b01      	subs	r3, #1
 8011732:	b29a      	uxth	r2, r3
 8011734:	4b4a      	ldr	r3, [pc, #296]	@ (8011860 <tcp_receive+0x878>)
 8011736:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011738:	4b49      	ldr	r3, [pc, #292]	@ (8011860 <tcp_receive+0x878>)
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	4a48      	ldr	r2, [pc, #288]	@ (8011860 <tcp_receive+0x878>)
 801173e:	8912      	ldrh	r2, [r2, #8]
 8011740:	4611      	mov	r1, r2
 8011742:	4618      	mov	r0, r3
 8011744:	f7fc f988 	bl	800da58 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011748:	4b45      	ldr	r3, [pc, #276]	@ (8011860 <tcp_receive+0x878>)
 801174a:	891c      	ldrh	r4, [r3, #8]
 801174c:	4b44      	ldr	r3, [pc, #272]	@ (8011860 <tcp_receive+0x878>)
 801174e:	68db      	ldr	r3, [r3, #12]
 8011750:	899b      	ldrh	r3, [r3, #12]
 8011752:	b29b      	uxth	r3, r3
 8011754:	4618      	mov	r0, r3
 8011756:	f7fa ff9b 	bl	800c690 <lwip_htons>
 801175a:	4603      	mov	r3, r0
 801175c:	b2db      	uxtb	r3, r3
 801175e:	f003 0303 	and.w	r3, r3, #3
 8011762:	2b00      	cmp	r3, #0
 8011764:	d001      	beq.n	801176a <tcp_receive+0x782>
 8011766:	2301      	movs	r3, #1
 8011768:	e000      	b.n	801176c <tcp_receive+0x784>
 801176a:	2300      	movs	r3, #0
 801176c:	4423      	add	r3, r4
 801176e:	b29a      	uxth	r2, r3
 8011770:	4b3c      	ldr	r3, [pc, #240]	@ (8011864 <tcp_receive+0x87c>)
 8011772:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 8011774:	4b3b      	ldr	r3, [pc, #236]	@ (8011864 <tcp_receive+0x87c>)
 8011776:	881b      	ldrh	r3, [r3, #0]
 8011778:	461a      	mov	r2, r3
 801177a:	4b38      	ldr	r3, [pc, #224]	@ (801185c <tcp_receive+0x874>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	441a      	add	r2, r3
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011784:	6879      	ldr	r1, [r7, #4]
 8011786:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011788:	440b      	add	r3, r1
 801178a:	429a      	cmp	r2, r3
 801178c:	d006      	beq.n	801179c <tcp_receive+0x7b4>
 801178e:	4b36      	ldr	r3, [pc, #216]	@ (8011868 <tcp_receive+0x880>)
 8011790:	f240 52d1 	movw	r2, #1489	@ 0x5d1
 8011794:	4935      	ldr	r1, [pc, #212]	@ (801186c <tcp_receive+0x884>)
 8011796:	4836      	ldr	r0, [pc, #216]	@ (8011870 <tcp_receive+0x888>)
 8011798:	f007 fac4 	bl	8018d24 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	f000 80e6 	beq.w	8011972 <tcp_receive+0x98a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80117a6:	4b2e      	ldr	r3, [pc, #184]	@ (8011860 <tcp_receive+0x878>)
 80117a8:	68db      	ldr	r3, [r3, #12]
 80117aa:	899b      	ldrh	r3, [r3, #12]
 80117ac:	b29b      	uxth	r3, r3
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fa ff6e 	bl	800c690 <lwip_htons>
 80117b4:	4603      	mov	r3, r0
 80117b6:	b2db      	uxtb	r3, r3
 80117b8:	f003 0301 	and.w	r3, r3, #1
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d010      	beq.n	80117e2 <tcp_receive+0x7fa>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80117c0:	e00a      	b.n	80117d8 <tcp_receive+0x7f0>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117c6:	613b      	str	r3, [r7, #16]
              pcb->ooseq = pcb->ooseq->next;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80117d2:	6938      	ldr	r0, [r7, #16]
 80117d4:	f7fd fd93 	bl	800f2fe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d1f0      	bne.n	80117c2 <tcp_receive+0x7da>
 80117e0:	e0c7      	b.n	8011972 <tcp_receive+0x98a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117e6:	643b      	str	r3, [r7, #64]	@ 0x40
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80117e8:	e051      	b.n	801188e <tcp_receive+0x8a6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80117ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117ec:	68db      	ldr	r3, [r3, #12]
 80117ee:	899b      	ldrh	r3, [r3, #12]
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7fa ff4c 	bl	800c690 <lwip_htons>
 80117f8:	4603      	mov	r3, r0
 80117fa:	b2db      	uxtb	r3, r3
 80117fc:	f003 0301 	and.w	r3, r3, #1
 8011800:	2b00      	cmp	r3, #0
 8011802:	d03c      	beq.n	801187e <tcp_receive+0x896>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011804:	4b16      	ldr	r3, [pc, #88]	@ (8011860 <tcp_receive+0x878>)
 8011806:	68db      	ldr	r3, [r3, #12]
 8011808:	899b      	ldrh	r3, [r3, #12]
 801180a:	b29b      	uxth	r3, r3
 801180c:	4618      	mov	r0, r3
 801180e:	f7fa ff3f 	bl	800c690 <lwip_htons>
 8011812:	4603      	mov	r3, r0
 8011814:	b2db      	uxtb	r3, r3
 8011816:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801181a:	2b00      	cmp	r3, #0
 801181c:	d12f      	bne.n	801187e <tcp_receive+0x896>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801181e:	4b10      	ldr	r3, [pc, #64]	@ (8011860 <tcp_receive+0x878>)
 8011820:	68db      	ldr	r3, [r3, #12]
 8011822:	899b      	ldrh	r3, [r3, #12]
 8011824:	b29c      	uxth	r4, r3
 8011826:	2001      	movs	r0, #1
 8011828:	f7fa ff32 	bl	800c690 <lwip_htons>
 801182c:	4603      	mov	r3, r0
 801182e:	461a      	mov	r2, r3
 8011830:	4b0b      	ldr	r3, [pc, #44]	@ (8011860 <tcp_receive+0x878>)
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	4322      	orrs	r2, r4
 8011836:	b292      	uxth	r2, r2
 8011838:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801183a:	4b09      	ldr	r3, [pc, #36]	@ (8011860 <tcp_receive+0x878>)
 801183c:	891c      	ldrh	r4, [r3, #8]
 801183e:	4b08      	ldr	r3, [pc, #32]	@ (8011860 <tcp_receive+0x878>)
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	899b      	ldrh	r3, [r3, #12]
 8011844:	b29b      	uxth	r3, r3
 8011846:	4618      	mov	r0, r3
 8011848:	f7fa ff22 	bl	800c690 <lwip_htons>
 801184c:	4603      	mov	r3, r0
 801184e:	b2db      	uxtb	r3, r3
 8011850:	f003 0303 	and.w	r3, r3, #3
 8011854:	2b00      	cmp	r3, #0
 8011856:	d00d      	beq.n	8011874 <tcp_receive+0x88c>
 8011858:	2301      	movs	r3, #1
 801185a:	e00c      	b.n	8011876 <tcp_receive+0x88e>
 801185c:	2000a33c 	.word	0x2000a33c
 8011860:	2000a31c 	.word	0x2000a31c
 8011864:	2000a346 	.word	0x2000a346
 8011868:	0801bbec 	.word	0x0801bbec
 801186c:	0801bf78 	.word	0x0801bf78
 8011870:	0801bc1c 	.word	0x0801bc1c
 8011874:	2300      	movs	r3, #0
 8011876:	4423      	add	r3, r4
 8011878:	b29a      	uxth	r2, r3
 801187a:	4b98      	ldr	r3, [pc, #608]	@ (8011adc <tcp_receive+0xaf4>)
 801187c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801187e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011880:	617b      	str	r3, [r7, #20]
              next = next->next;
 8011882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	643b      	str	r3, [r7, #64]	@ 0x40
              tcp_seg_free(tmp);
 8011888:	6978      	ldr	r0, [r7, #20]
 801188a:	f7fd fd38 	bl	800f2fe <tcp_seg_free>
            while (next &&
 801188e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011890:	2b00      	cmp	r3, #0
 8011892:	d00e      	beq.n	80118b2 <tcp_receive+0x8ca>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011894:	4b91      	ldr	r3, [pc, #580]	@ (8011adc <tcp_receive+0xaf4>)
 8011896:	881b      	ldrh	r3, [r3, #0]
 8011898:	461a      	mov	r2, r3
 801189a:	4b91      	ldr	r3, [pc, #580]	@ (8011ae0 <tcp_receive+0xaf8>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	441a      	add	r2, r3
 80118a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80118a8:	8909      	ldrh	r1, [r1, #8]
 80118aa:	440b      	add	r3, r1
 80118ac:	1ad3      	subs	r3, r2, r3
            while (next &&
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	da9b      	bge.n	80117ea <tcp_receive+0x802>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80118b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d059      	beq.n	801196c <tcp_receive+0x984>
                TCP_SEQ_GT(seqno + tcplen,
 80118b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118ba:	68db      	ldr	r3, [r3, #12]
 80118bc:	685a      	ldr	r2, [r3, #4]
 80118be:	4b87      	ldr	r3, [pc, #540]	@ (8011adc <tcp_receive+0xaf4>)
 80118c0:	881b      	ldrh	r3, [r3, #0]
 80118c2:	4619      	mov	r1, r3
 80118c4:	4b86      	ldr	r3, [pc, #536]	@ (8011ae0 <tcp_receive+0xaf8>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	440b      	add	r3, r1
 80118ca:	1ad3      	subs	r3, r2, r3
            if (next &&
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	da4d      	bge.n	801196c <tcp_receive+0x984>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80118d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	b29a      	uxth	r2, r3
 80118d8:	4b81      	ldr	r3, [pc, #516]	@ (8011ae0 <tcp_receive+0xaf8>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	b29b      	uxth	r3, r3
 80118de:	1ad3      	subs	r3, r2, r3
 80118e0:	b29a      	uxth	r2, r3
 80118e2:	4b80      	ldr	r3, [pc, #512]	@ (8011ae4 <tcp_receive+0xafc>)
 80118e4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80118e6:	4b7f      	ldr	r3, [pc, #508]	@ (8011ae4 <tcp_receive+0xafc>)
 80118e8:	68db      	ldr	r3, [r3, #12]
 80118ea:	899b      	ldrh	r3, [r3, #12]
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7fa fece 	bl	800c690 <lwip_htons>
 80118f4:	4603      	mov	r3, r0
 80118f6:	b2db      	uxtb	r3, r3
 80118f8:	f003 0302 	and.w	r3, r3, #2
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d005      	beq.n	801190c <tcp_receive+0x924>
                inseg.len -= 1;
 8011900:	4b78      	ldr	r3, [pc, #480]	@ (8011ae4 <tcp_receive+0xafc>)
 8011902:	891b      	ldrh	r3, [r3, #8]
 8011904:	3b01      	subs	r3, #1
 8011906:	b29a      	uxth	r2, r3
 8011908:	4b76      	ldr	r3, [pc, #472]	@ (8011ae4 <tcp_receive+0xafc>)
 801190a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801190c:	4b75      	ldr	r3, [pc, #468]	@ (8011ae4 <tcp_receive+0xafc>)
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	4a74      	ldr	r2, [pc, #464]	@ (8011ae4 <tcp_receive+0xafc>)
 8011912:	8912      	ldrh	r2, [r2, #8]
 8011914:	4611      	mov	r1, r2
 8011916:	4618      	mov	r0, r3
 8011918:	f7fc f89e 	bl	800da58 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801191c:	4b71      	ldr	r3, [pc, #452]	@ (8011ae4 <tcp_receive+0xafc>)
 801191e:	891c      	ldrh	r4, [r3, #8]
 8011920:	4b70      	ldr	r3, [pc, #448]	@ (8011ae4 <tcp_receive+0xafc>)
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	899b      	ldrh	r3, [r3, #12]
 8011926:	b29b      	uxth	r3, r3
 8011928:	4618      	mov	r0, r3
 801192a:	f7fa feb1 	bl	800c690 <lwip_htons>
 801192e:	4603      	mov	r3, r0
 8011930:	b2db      	uxtb	r3, r3
 8011932:	f003 0303 	and.w	r3, r3, #3
 8011936:	2b00      	cmp	r3, #0
 8011938:	d001      	beq.n	801193e <tcp_receive+0x956>
 801193a:	2301      	movs	r3, #1
 801193c:	e000      	b.n	8011940 <tcp_receive+0x958>
 801193e:	2300      	movs	r3, #0
 8011940:	4423      	add	r3, r4
 8011942:	b29a      	uxth	r2, r3
 8011944:	4b65      	ldr	r3, [pc, #404]	@ (8011adc <tcp_receive+0xaf4>)
 8011946:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue",
 8011948:	4b64      	ldr	r3, [pc, #400]	@ (8011adc <tcp_receive+0xaf4>)
 801194a:	881b      	ldrh	r3, [r3, #0]
 801194c:	461a      	mov	r2, r3
 801194e:	4b64      	ldr	r3, [pc, #400]	@ (8011ae0 <tcp_receive+0xaf8>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	441a      	add	r2, r3
 8011954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011956:	68db      	ldr	r3, [r3, #12]
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	429a      	cmp	r2, r3
 801195c:	d006      	beq.n	801196c <tcp_receive+0x984>
 801195e:	4b62      	ldr	r3, [pc, #392]	@ (8011ae8 <tcp_receive+0xb00>)
 8011960:	f240 6202 	movw	r2, #1538	@ 0x602
 8011964:	4961      	ldr	r1, [pc, #388]	@ (8011aec <tcp_receive+0xb04>)
 8011966:	4862      	ldr	r0, [pc, #392]	@ (8011af0 <tcp_receive+0xb08>)
 8011968:	f007 f9dc 	bl	8018d24 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011970:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011972:	4b5a      	ldr	r3, [pc, #360]	@ (8011adc <tcp_receive+0xaf4>)
 8011974:	881b      	ldrh	r3, [r3, #0]
 8011976:	461a      	mov	r2, r3
 8011978:	4b59      	ldr	r3, [pc, #356]	@ (8011ae0 <tcp_receive+0xaf8>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	441a      	add	r2, r3
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd", pcb->rcv_wnd >= tcplen);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011986:	4b55      	ldr	r3, [pc, #340]	@ (8011adc <tcp_receive+0xaf4>)
 8011988:	881b      	ldrh	r3, [r3, #0]
 801198a:	429a      	cmp	r2, r3
 801198c:	d206      	bcs.n	801199c <tcp_receive+0x9b4>
 801198e:	4b56      	ldr	r3, [pc, #344]	@ (8011ae8 <tcp_receive+0xb00>)
 8011990:	f240 620d 	movw	r2, #1549	@ 0x60d
 8011994:	4957      	ldr	r1, [pc, #348]	@ (8011af4 <tcp_receive+0xb0c>)
 8011996:	4856      	ldr	r0, [pc, #344]	@ (8011af0 <tcp_receive+0xb08>)
 8011998:	f007 f9c4 	bl	8018d24 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80119a0:	4b4e      	ldr	r3, [pc, #312]	@ (8011adc <tcp_receive+0xaf4>)
 80119a2:	881b      	ldrh	r3, [r3, #0]
 80119a4:	1ad3      	subs	r3, r2, r3
 80119a6:	b29a      	uxth	r2, r3
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f7fc ffd9 	bl	800e964 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80119b2:	4b4c      	ldr	r3, [pc, #304]	@ (8011ae4 <tcp_receive+0xafc>)
 80119b4:	685b      	ldr	r3, [r3, #4]
 80119b6:	891b      	ldrh	r3, [r3, #8]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d006      	beq.n	80119ca <tcp_receive+0x9e2>
          recv_data = inseg.p;
 80119bc:	4b49      	ldr	r3, [pc, #292]	@ (8011ae4 <tcp_receive+0xafc>)
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	4a4d      	ldr	r2, [pc, #308]	@ (8011af8 <tcp_receive+0xb10>)
 80119c2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80119c4:	4b47      	ldr	r3, [pc, #284]	@ (8011ae4 <tcp_receive+0xafc>)
 80119c6:	2200      	movs	r2, #0
 80119c8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80119ca:	4b46      	ldr	r3, [pc, #280]	@ (8011ae4 <tcp_receive+0xafc>)
 80119cc:	68db      	ldr	r3, [r3, #12]
 80119ce:	899b      	ldrh	r3, [r3, #12]
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fa fe5c 	bl	800c690 <lwip_htons>
 80119d8:	4603      	mov	r3, r0
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	f003 0301 	and.w	r3, r3, #1
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	f000 80b8 	beq.w	8011b56 <tcp_receive+0xb6e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80119e6:	4b45      	ldr	r3, [pc, #276]	@ (8011afc <tcp_receive+0xb14>)
 80119e8:	781b      	ldrb	r3, [r3, #0]
 80119ea:	f043 0320 	orr.w	r3, r3, #32
 80119ee:	b2da      	uxtb	r2, r3
 80119f0:	4b42      	ldr	r3, [pc, #264]	@ (8011afc <tcp_receive+0xb14>)
 80119f2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80119f4:	e0af      	b.n	8011b56 <tcp_receive+0xb6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119fa:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a00:	68db      	ldr	r3, [r3, #12]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	4a36      	ldr	r2, [pc, #216]	@ (8011ae0 <tcp_receive+0xaf8>)
 8011a06:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	891b      	ldrh	r3, [r3, #8]
 8011a0c:	461c      	mov	r4, r3
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	68db      	ldr	r3, [r3, #12]
 8011a12:	899b      	ldrh	r3, [r3, #12]
 8011a14:	b29b      	uxth	r3, r3
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7fa fe3a 	bl	800c690 <lwip_htons>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	f003 0303 	and.w	r3, r3, #3
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d001      	beq.n	8011a2c <tcp_receive+0xa44>
 8011a28:	2301      	movs	r3, #1
 8011a2a:	e000      	b.n	8011a2e <tcp_receive+0xa46>
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	191a      	adds	r2, r3, r4
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a34:	441a      	add	r2, r3
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd",
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a3e:	461c      	mov	r4, r3
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	891b      	ldrh	r3, [r3, #8]
 8011a44:	461d      	mov	r5, r3
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	68db      	ldr	r3, [r3, #12]
 8011a4a:	899b      	ldrh	r3, [r3, #12]
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7fa fe1e 	bl	800c690 <lwip_htons>
 8011a54:	4603      	mov	r3, r0
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	f003 0303 	and.w	r3, r3, #3
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d001      	beq.n	8011a64 <tcp_receive+0xa7c>
 8011a60:	2301      	movs	r3, #1
 8011a62:	e000      	b.n	8011a66 <tcp_receive+0xa7e>
 8011a64:	2300      	movs	r3, #0
 8011a66:	442b      	add	r3, r5
 8011a68:	429c      	cmp	r4, r3
 8011a6a:	d206      	bcs.n	8011a7a <tcp_receive+0xa92>
 8011a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8011ae8 <tcp_receive+0xb00>)
 8011a6e:	f240 6231 	movw	r2, #1585	@ 0x631
 8011a72:	4923      	ldr	r1, [pc, #140]	@ (8011b00 <tcp_receive+0xb18>)
 8011a74:	481e      	ldr	r0, [pc, #120]	@ (8011af0 <tcp_receive+0xb08>)
 8011a76:	f007 f955 	bl	8018d24 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	891b      	ldrh	r3, [r3, #8]
 8011a7e:	461c      	mov	r4, r3
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	899b      	ldrh	r3, [r3, #12]
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f7fa fe01 	bl	800c690 <lwip_htons>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	f003 0303 	and.w	r3, r3, #3
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d001      	beq.n	8011a9e <tcp_receive+0xab6>
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	e000      	b.n	8011aa0 <tcp_receive+0xab8>
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	1919      	adds	r1, r3, r4
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011aa6:	b28b      	uxth	r3, r1
 8011aa8:	1ad3      	subs	r3, r2, r3
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f7fc ff57 	bl	800e964 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	891b      	ldrh	r3, [r3, #8]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d028      	beq.n	8011b12 <tcp_receive+0xb2a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8011af8 <tcp_receive+0xb10>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d01d      	beq.n	8011b04 <tcp_receive+0xb1c>
              pbuf_cat(recv_data, cseg->p);
 8011ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8011af8 <tcp_receive+0xb10>)
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	4619      	mov	r1, r3
 8011ad2:	4610      	mov	r0, r2
 8011ad4:	f7fc fa0a 	bl	800deec <pbuf_cat>
 8011ad8:	e018      	b.n	8011b0c <tcp_receive+0xb24>
 8011ada:	bf00      	nop
 8011adc:	2000a346 	.word	0x2000a346
 8011ae0:	2000a33c 	.word	0x2000a33c
 8011ae4:	2000a31c 	.word	0x2000a31c
 8011ae8:	0801bbec 	.word	0x0801bbec
 8011aec:	0801bfb0 	.word	0x0801bfb0
 8011af0:	0801bc1c 	.word	0x0801bc1c
 8011af4:	0801bfec 	.word	0x0801bfec
 8011af8:	2000a34c 	.word	0x2000a34c
 8011afc:	2000a349 	.word	0x2000a349
 8011b00:	0801c00c 	.word	0x0801c00c
            } else {
              recv_data = cseg->p;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	4a70      	ldr	r2, [pc, #448]	@ (8011ccc <tcp_receive+0xce4>)
 8011b0a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	68db      	ldr	r3, [r3, #12]
 8011b16:	899b      	ldrh	r3, [r3, #12]
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7fa fdb8 	bl	800c690 <lwip_htons>
 8011b20:	4603      	mov	r3, r0
 8011b22:	b2db      	uxtb	r3, r3
 8011b24:	f003 0301 	and.w	r3, r3, #1
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d00d      	beq.n	8011b48 <tcp_receive+0xb60>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011b2c:	4b68      	ldr	r3, [pc, #416]	@ (8011cd0 <tcp_receive+0xce8>)
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	f043 0320 	orr.w	r3, r3, #32
 8011b34:	b2da      	uxtb	r2, r3
 8011b36:	4b66      	ldr	r3, [pc, #408]	@ (8011cd0 <tcp_receive+0xce8>)
 8011b38:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	7d1b      	ldrb	r3, [r3, #20]
 8011b3e:	2b04      	cmp	r3, #4
 8011b40:	d102      	bne.n	8011b48 <tcp_receive+0xb60>
              pcb->state = CLOSE_WAIT;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	2207      	movs	r2, #7
 8011b46:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011b50:	68f8      	ldr	r0, [r7, #12]
 8011b52:	f7fd fbd4 	bl	800f2fe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d008      	beq.n	8011b70 <tcp_receive+0xb88>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b62:	68db      	ldr	r3, [r3, #12]
 8011b64:	685a      	ldr	r2, [r3, #4]
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	f43f af43 	beq.w	80119f6 <tcp_receive+0xa0e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	8b5b      	ldrh	r3, [r3, #26]
 8011b74:	f003 0301 	and.w	r3, r3, #1
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d00e      	beq.n	8011b9a <tcp_receive+0xbb2>
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	8b5b      	ldrh	r3, [r3, #26]
 8011b80:	f023 0301 	bic.w	r3, r3, #1
 8011b84:	b29a      	uxth	r2, r3
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	835a      	strh	r2, [r3, #26]
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	8b5b      	ldrh	r3, [r3, #26]
 8011b8e:	f043 0302 	orr.w	r3, r3, #2
 8011b92:	b29a      	uxth	r2, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011b98:	e187      	b.n	8011eaa <tcp_receive+0xec2>
        tcp_ack(pcb);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	8b5b      	ldrh	r3, [r3, #26]
 8011b9e:	f043 0301 	orr.w	r3, r3, #1
 8011ba2:	b29a      	uxth	r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011ba8:	e17f      	b.n	8011eaa <tcp_receive+0xec2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d106      	bne.n	8011bc0 <tcp_receive+0xbd8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011bb2:	4848      	ldr	r0, [pc, #288]	@ (8011cd4 <tcp_receive+0xcec>)
 8011bb4:	f7fd fbbc 	bl	800f330 <tcp_seg_copy>
 8011bb8:	4602      	mov	r2, r0
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	675a      	str	r2, [r3, #116]	@ 0x74
 8011bbe:	e16c      	b.n	8011e9a <tcp_receive+0xeb2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011bca:	e156      	b.n	8011e7a <tcp_receive+0xe92>
            if (seqno == next->tcphdr->seqno) {
 8011bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bce:	68db      	ldr	r3, [r3, #12]
 8011bd0:	685a      	ldr	r2, [r3, #4]
 8011bd2:	4b41      	ldr	r3, [pc, #260]	@ (8011cd8 <tcp_receive+0xcf0>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d11d      	bne.n	8011c16 <tcp_receive+0xc2e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011bda:	4b3e      	ldr	r3, [pc, #248]	@ (8011cd4 <tcp_receive+0xcec>)
 8011bdc:	891a      	ldrh	r2, [r3, #8]
 8011bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011be0:	891b      	ldrh	r3, [r3, #8]
 8011be2:	429a      	cmp	r2, r3
 8011be4:	f240 814e 	bls.w	8011e84 <tcp_receive+0xe9c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011be8:	483a      	ldr	r0, [pc, #232]	@ (8011cd4 <tcp_receive+0xcec>)
 8011bea:	f7fd fba1 	bl	800f330 <tcp_seg_copy>
 8011bee:	61b8      	str	r0, [r7, #24]
                if (cseg != NULL) {
 8011bf0:	69bb      	ldr	r3, [r7, #24]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	f000 8148 	beq.w	8011e88 <tcp_receive+0xea0>
                  if (prev != NULL) {
 8011bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d003      	beq.n	8011c06 <tcp_receive+0xc1e>
                    prev->next = cseg;
 8011bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c00:	69ba      	ldr	r2, [r7, #24]
 8011c02:	601a      	str	r2, [r3, #0]
 8011c04:	e002      	b.n	8011c0c <tcp_receive+0xc24>
                  } else {
                    pcb->ooseq = cseg;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	69ba      	ldr	r2, [r7, #24]
 8011c0a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011c0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011c0e:	69b8      	ldr	r0, [r7, #24]
 8011c10:	f7ff f8e6 	bl	8010de0 <tcp_oos_insert_segment>
                }
                break;
 8011c14:	e138      	b.n	8011e88 <tcp_receive+0xea0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d117      	bne.n	8011c4c <tcp_receive+0xc64>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8011cd8 <tcp_receive+0xcf0>)
 8011c1e:	681a      	ldr	r2, [r3, #0]
 8011c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	1ad3      	subs	r3, r2, r3
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	da57      	bge.n	8011cdc <tcp_receive+0xcf4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011c2c:	4829      	ldr	r0, [pc, #164]	@ (8011cd4 <tcp_receive+0xcec>)
 8011c2e:	f7fd fb7f 	bl	800f330 <tcp_seg_copy>
 8011c32:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011c34:	69fb      	ldr	r3, [r7, #28]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	f000 8128 	beq.w	8011e8c <tcp_receive+0xea4>
                    pcb->ooseq = cseg;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	69fa      	ldr	r2, [r7, #28]
 8011c40:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011c42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011c44:	69f8      	ldr	r0, [r7, #28]
 8011c46:	f7ff f8cb 	bl	8010de0 <tcp_oos_insert_segment>
                  }
                  break;
 8011c4a:	e11f      	b.n	8011e8c <tcp_receive+0xea4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011c4c:	4b22      	ldr	r3, [pc, #136]	@ (8011cd8 <tcp_receive+0xcf0>)
 8011c4e:	681a      	ldr	r2, [r3, #0]
 8011c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	1ad3      	subs	r3, r2, r3
 8011c58:	3b01      	subs	r3, #1
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	db3e      	blt.n	8011cdc <tcp_receive+0xcf4>
 8011c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c60:	68db      	ldr	r3, [r3, #12]
 8011c62:	685a      	ldr	r2, [r3, #4]
 8011c64:	4b1c      	ldr	r3, [pc, #112]	@ (8011cd8 <tcp_receive+0xcf0>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	1ad3      	subs	r3, r2, r3
 8011c6a:	3b01      	subs	r3, #1
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	db35      	blt.n	8011cdc <tcp_receive+0xcf4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011c70:	4818      	ldr	r0, [pc, #96]	@ (8011cd4 <tcp_receive+0xcec>)
 8011c72:	f7fd fb5d 	bl	800f330 <tcp_seg_copy>
 8011c76:	6238      	str	r0, [r7, #32]
                  if (cseg != NULL) {
 8011c78:	6a3b      	ldr	r3, [r7, #32]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	f000 8108 	beq.w	8011e90 <tcp_receive+0xea8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011c80:	4b15      	ldr	r3, [pc, #84]	@ (8011cd8 <tcp_receive+0xcf0>)
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c86:	68db      	ldr	r3, [r3, #12]
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011c8c:	8909      	ldrh	r1, [r1, #8]
 8011c8e:	440b      	add	r3, r1
 8011c90:	1ad3      	subs	r3, r2, r3
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	da12      	bge.n	8011cbc <tcp_receive+0xcd4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011c96:	4b10      	ldr	r3, [pc, #64]	@ (8011cd8 <tcp_receive+0xcf0>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	b29a      	uxth	r2, r3
 8011c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c9e:	68db      	ldr	r3, [r3, #12]
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	b29b      	uxth	r3, r3
 8011ca4:	1ad3      	subs	r3, r2, r3
 8011ca6:	b29a      	uxth	r2, r3
 8011ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011caa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cae:	685a      	ldr	r2, [r3, #4]
 8011cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cb2:	891b      	ldrh	r3, [r3, #8]
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	4610      	mov	r0, r2
 8011cb8:	f7fb fece 	bl	800da58 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cbe:	6a3a      	ldr	r2, [r7, #32]
 8011cc0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011cc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011cc4:	6a38      	ldr	r0, [r7, #32]
 8011cc6:	f7ff f88b 	bl	8010de0 <tcp_oos_insert_segment>
                  }
                  break;
 8011cca:	e0e1      	b.n	8011e90 <tcp_receive+0xea8>
 8011ccc:	2000a34c 	.word	0x2000a34c
 8011cd0:	2000a349 	.word	0x2000a349
 8011cd4:	2000a31c 	.word	0x2000a31c
 8011cd8:	2000a33c 	.word	0x2000a33c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cde:	63bb      	str	r3, [r7, #56]	@ 0x38

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	f040 80c5 	bne.w	8011e74 <tcp_receive+0xe8c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cec:	68db      	ldr	r3, [r3, #12]
 8011cee:	685a      	ldr	r2, [r3, #4]
 8011cf0:	4b7d      	ldr	r3, [pc, #500]	@ (8011ee8 <tcp_receive+0xf00>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	f280 80bc 	bge.w	8011e74 <tcp_receive+0xe8c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cfe:	68db      	ldr	r3, [r3, #12]
 8011d00:	899b      	ldrh	r3, [r3, #12]
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7fa fcc3 	bl	800c690 <lwip_htons>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	b2db      	uxtb	r3, r3
 8011d0e:	f003 0301 	and.w	r3, r3, #1
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	f040 80be 	bne.w	8011e94 <tcp_receive+0xeac>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011d18:	4874      	ldr	r0, [pc, #464]	@ (8011eec <tcp_receive+0xf04>)
 8011d1a:	f7fd fb09 	bl	800f330 <tcp_seg_copy>
 8011d1e:	4602      	mov	r2, r0
 8011d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d22:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	f000 80b5 	beq.w	8011e98 <tcp_receive+0xeb0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011d2e:	4b6e      	ldr	r3, [pc, #440]	@ (8011ee8 <tcp_receive+0xf00>)
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011d3a:	8909      	ldrh	r1, [r1, #8]
 8011d3c:	440b      	add	r3, r1
 8011d3e:	1ad3      	subs	r3, r2, r3
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	da12      	bge.n	8011d6a <tcp_receive+0xd82>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011d44:	4b68      	ldr	r3, [pc, #416]	@ (8011ee8 <tcp_receive+0xf00>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	b29a      	uxth	r2, r3
 8011d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d4c:	68db      	ldr	r3, [r3, #12]
 8011d4e:	685b      	ldr	r3, [r3, #4]
 8011d50:	b29b      	uxth	r3, r3
 8011d52:	1ad3      	subs	r3, r2, r3
 8011d54:	b29a      	uxth	r2, r3
 8011d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d58:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d5c:	685a      	ldr	r2, [r3, #4]
 8011d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d60:	891b      	ldrh	r3, [r3, #8]
 8011d62:	4619      	mov	r1, r3
 8011d64:	4610      	mov	r0, r2
 8011d66:	f7fb fe77 	bl	800da58 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d6e:	687a      	ldr	r2, [r7, #4]
 8011d70:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011d72:	441a      	add	r2, r3
 8011d74:	4b5e      	ldr	r3, [pc, #376]	@ (8011ef0 <tcp_receive+0xf08>)
 8011d76:	881b      	ldrh	r3, [r3, #0]
 8011d78:	4619      	mov	r1, r3
 8011d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8011ee8 <tcp_receive+0xf00>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	440b      	add	r3, r1
 8011d80:	1ad3      	subs	r3, r2, r3
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	f280 8088 	bge.w	8011e98 <tcp_receive+0xeb0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	68db      	ldr	r3, [r3, #12]
 8011d8e:	899b      	ldrh	r3, [r3, #12]
 8011d90:	b29b      	uxth	r3, r3
 8011d92:	4618      	mov	r0, r3
 8011d94:	f7fa fc7c 	bl	800c690 <lwip_htons>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	b2db      	uxtb	r3, r3
 8011d9c:	f003 0301 	and.w	r3, r3, #1
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d021      	beq.n	8011de8 <tcp_receive+0xe00>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	68db      	ldr	r3, [r3, #12]
 8011daa:	899b      	ldrh	r3, [r3, #12]
 8011dac:	b29b      	uxth	r3, r3
 8011dae:	b21b      	sxth	r3, r3
 8011db0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011db4:	b21c      	sxth	r4, r3
 8011db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	899b      	ldrh	r3, [r3, #12]
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7fa fc65 	bl	800c690 <lwip_htons>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	b2db      	uxtb	r3, r3
 8011dca:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7fa fc5d 	bl	800c690 <lwip_htons>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	b21b      	sxth	r3, r3
 8011dda:	4323      	orrs	r3, r4
 8011ddc:	b21a      	sxth	r2, r3
 8011dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	b292      	uxth	r2, r2
 8011de6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dec:	b29a      	uxth	r2, r3
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011df2:	4413      	add	r3, r2
 8011df4:	b299      	uxth	r1, r3
 8011df6:	4b3c      	ldr	r3, [pc, #240]	@ (8011ee8 <tcp_receive+0xf00>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	b29a      	uxth	r2, r3
 8011dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	1a8a      	subs	r2, r1, r2
 8011e02:	b292      	uxth	r2, r2
 8011e04:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	685a      	ldr	r2, [r3, #4]
 8011e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	891b      	ldrh	r3, [r3, #8]
 8011e12:	4619      	mov	r1, r3
 8011e14:	4610      	mov	r0, r2
 8011e16:	f7fb fe1f 	bl	800da58 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	891c      	ldrh	r4, [r3, #8]
 8011e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	68db      	ldr	r3, [r3, #12]
 8011e26:	899b      	ldrh	r3, [r3, #12]
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f7fa fc30 	bl	800c690 <lwip_htons>
 8011e30:	4603      	mov	r3, r0
 8011e32:	b2db      	uxtb	r3, r3
 8011e34:	f003 0303 	and.w	r3, r3, #3
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d001      	beq.n	8011e40 <tcp_receive+0xe58>
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	e000      	b.n	8011e42 <tcp_receive+0xe5a>
 8011e40:	2300      	movs	r3, #0
 8011e42:	4423      	add	r3, r4
 8011e44:	b29a      	uxth	r2, r3
 8011e46:	4b2a      	ldr	r3, [pc, #168]	@ (8011ef0 <tcp_receive+0xf08>)
 8011e48:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd",
 8011e4a:	4b29      	ldr	r3, [pc, #164]	@ (8011ef0 <tcp_receive+0xf08>)
 8011e4c:	881b      	ldrh	r3, [r3, #0]
 8011e4e:	461a      	mov	r2, r3
 8011e50:	4b25      	ldr	r3, [pc, #148]	@ (8011ee8 <tcp_receive+0xf00>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	441a      	add	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e5a:	6879      	ldr	r1, [r7, #4]
 8011e5c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011e5e:	440b      	add	r3, r1
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d019      	beq.n	8011e98 <tcp_receive+0xeb0>
 8011e64:	4b23      	ldr	r3, [pc, #140]	@ (8011ef4 <tcp_receive+0xf0c>)
 8011e66:	f240 62fe 	movw	r2, #1790	@ 0x6fe
 8011e6a:	4923      	ldr	r1, [pc, #140]	@ (8011ef8 <tcp_receive+0xf10>)
 8011e6c:	4823      	ldr	r0, [pc, #140]	@ (8011efc <tcp_receive+0xf14>)
 8011e6e:	f006 ff59 	bl	8018d24 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011e72:	e011      	b.n	8011e98 <tcp_receive+0xeb0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	f47f aea5 	bne.w	8011bcc <tcp_receive+0xbe4>
 8011e82:	e00a      	b.n	8011e9a <tcp_receive+0xeb2>
                break;
 8011e84:	bf00      	nop
 8011e86:	e008      	b.n	8011e9a <tcp_receive+0xeb2>
                break;
 8011e88:	bf00      	nop
 8011e8a:	e006      	b.n	8011e9a <tcp_receive+0xeb2>
                  break;
 8011e8c:	bf00      	nop
 8011e8e:	e004      	b.n	8011e9a <tcp_receive+0xeb2>
                  break;
 8011e90:	bf00      	nop
 8011e92:	e002      	b.n	8011e9a <tcp_receive+0xeb2>
                  break;
 8011e94:	bf00      	nop
 8011e96:	e000      	b.n	8011e9a <tcp_receive+0xeb2>
                break;
 8011e98:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f001 faa0 	bl	80133e0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011ea0:	e003      	b.n	8011eaa <tcp_receive+0xec2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f001 fa9c 	bl	80133e0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011ea8:	e01a      	b.n	8011ee0 <tcp_receive+0xef8>
 8011eaa:	e019      	b.n	8011ee0 <tcp_receive+0xef8>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011eac:	4b0e      	ldr	r3, [pc, #56]	@ (8011ee8 <tcp_receive+0xf00>)
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011eb4:	1ad3      	subs	r3, r2, r3
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	db0a      	blt.n	8011ed0 <tcp_receive+0xee8>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ebe:	687a      	ldr	r2, [r7, #4]
 8011ec0:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011ec2:	441a      	add	r2, r3
 8011ec4:	4b08      	ldr	r3, [pc, #32]	@ (8011ee8 <tcp_receive+0xf00>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	1ad3      	subs	r3, r2, r3
 8011eca:	3b01      	subs	r3, #1
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	da07      	bge.n	8011ee0 <tcp_receive+0xef8>
      tcp_ack_now(pcb);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	8b5b      	ldrh	r3, [r3, #26]
 8011ed4:	f043 0302 	orr.w	r3, r3, #2
 8011ed8:	b29a      	uxth	r2, r3
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011ede:	e7ff      	b.n	8011ee0 <tcp_receive+0xef8>
 8011ee0:	bf00      	nop
 8011ee2:	3750      	adds	r7, #80	@ 0x50
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8011ee8:	2000a33c 	.word	0x2000a33c
 8011eec:	2000a31c 	.word	0x2000a31c
 8011ef0:	2000a346 	.word	0x2000a346
 8011ef4:	0801bbec 	.word	0x0801bbec
 8011ef8:	0801bf78 	.word	0x0801bf78
 8011efc:	0801bc1c 	.word	0x0801bc1c

08011f00 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011f00:	b480      	push	{r7}
 8011f02:	b083      	sub	sp, #12
 8011f04:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011f06:	4b15      	ldr	r3, [pc, #84]	@ (8011f5c <tcp_get_next_optbyte+0x5c>)
 8011f08:	881b      	ldrh	r3, [r3, #0]
 8011f0a:	1c5a      	adds	r2, r3, #1
 8011f0c:	b291      	uxth	r1, r2
 8011f0e:	4a13      	ldr	r2, [pc, #76]	@ (8011f5c <tcp_get_next_optbyte+0x5c>)
 8011f10:	8011      	strh	r1, [r2, #0]
 8011f12:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011f14:	4b12      	ldr	r3, [pc, #72]	@ (8011f60 <tcp_get_next_optbyte+0x60>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d004      	beq.n	8011f26 <tcp_get_next_optbyte+0x26>
 8011f1c:	4b11      	ldr	r3, [pc, #68]	@ (8011f64 <tcp_get_next_optbyte+0x64>)
 8011f1e:	881b      	ldrh	r3, [r3, #0]
 8011f20:	88fa      	ldrh	r2, [r7, #6]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d208      	bcs.n	8011f38 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011f26:	4b10      	ldr	r3, [pc, #64]	@ (8011f68 <tcp_get_next_optbyte+0x68>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	3314      	adds	r3, #20
 8011f2c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011f2e:	88fb      	ldrh	r3, [r7, #6]
 8011f30:	683a      	ldr	r2, [r7, #0]
 8011f32:	4413      	add	r3, r2
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	e00b      	b.n	8011f50 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011f38:	88fb      	ldrh	r3, [r7, #6]
 8011f3a:	b2da      	uxtb	r2, r3
 8011f3c:	4b09      	ldr	r3, [pc, #36]	@ (8011f64 <tcp_get_next_optbyte+0x64>)
 8011f3e:	881b      	ldrh	r3, [r3, #0]
 8011f40:	b2db      	uxtb	r3, r3
 8011f42:	1ad3      	subs	r3, r2, r3
 8011f44:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011f46:	4b06      	ldr	r3, [pc, #24]	@ (8011f60 <tcp_get_next_optbyte+0x60>)
 8011f48:	681a      	ldr	r2, [r3, #0]
 8011f4a:	797b      	ldrb	r3, [r7, #5]
 8011f4c:	4413      	add	r3, r2
 8011f4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	370c      	adds	r7, #12
 8011f54:	46bd      	mov	sp, r7
 8011f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5a:	4770      	bx	lr
 8011f5c:	2000a338 	.word	0x2000a338
 8011f60:	2000a334 	.word	0x2000a334
 8011f64:	2000a332 	.word	0x2000a332
 8011f68:	2000a32c 	.word	0x2000a32c

08011f6c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b084      	sub	sp, #16
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d106      	bne.n	8011f88 <tcp_parseopt+0x1c>
 8011f7a:	4b33      	ldr	r3, [pc, #204]	@ (8012048 <tcp_parseopt+0xdc>)
 8011f7c:	f240 7283 	movw	r2, #1923	@ 0x783
 8011f80:	4932      	ldr	r1, [pc, #200]	@ (801204c <tcp_parseopt+0xe0>)
 8011f82:	4833      	ldr	r0, [pc, #204]	@ (8012050 <tcp_parseopt+0xe4>)
 8011f84:	f006 fece 	bl	8018d24 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011f88:	4b32      	ldr	r3, [pc, #200]	@ (8012054 <tcp_parseopt+0xe8>)
 8011f8a:	881b      	ldrh	r3, [r3, #0]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d057      	beq.n	8012040 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011f90:	4b31      	ldr	r3, [pc, #196]	@ (8012058 <tcp_parseopt+0xec>)
 8011f92:	2200      	movs	r2, #0
 8011f94:	801a      	strh	r2, [r3, #0]
 8011f96:	e047      	b.n	8012028 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8011f98:	f7ff ffb2 	bl	8011f00 <tcp_get_next_optbyte>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011fa0:	7bfb      	ldrb	r3, [r7, #15]
 8011fa2:	2b02      	cmp	r3, #2
 8011fa4:	d006      	beq.n	8011fb4 <tcp_parseopt+0x48>
 8011fa6:	2b02      	cmp	r3, #2
 8011fa8:	dc2b      	bgt.n	8012002 <tcp_parseopt+0x96>
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d043      	beq.n	8012036 <tcp_parseopt+0xca>
 8011fae:	2b01      	cmp	r3, #1
 8011fb0:	d039      	beq.n	8012026 <tcp_parseopt+0xba>
 8011fb2:	e026      	b.n	8012002 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011fb4:	f7ff ffa4 	bl	8011f00 <tcp_get_next_optbyte>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b04      	cmp	r3, #4
 8011fbc:	d13d      	bne.n	801203a <tcp_parseopt+0xce>
 8011fbe:	4b26      	ldr	r3, [pc, #152]	@ (8012058 <tcp_parseopt+0xec>)
 8011fc0:	881b      	ldrh	r3, [r3, #0]
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	4a23      	ldr	r2, [pc, #140]	@ (8012054 <tcp_parseopt+0xe8>)
 8011fc6:	8812      	ldrh	r2, [r2, #0]
 8011fc8:	4293      	cmp	r3, r2
 8011fca:	da36      	bge.n	801203a <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011fcc:	f7ff ff98 	bl	8011f00 <tcp_get_next_optbyte>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	021b      	lsls	r3, r3, #8
 8011fd4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011fd6:	f7ff ff93 	bl	8011f00 <tcp_get_next_optbyte>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	461a      	mov	r2, r3
 8011fde:	89bb      	ldrh	r3, [r7, #12]
 8011fe0:	4313      	orrs	r3, r2
 8011fe2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011fe4:	89bb      	ldrh	r3, [r7, #12]
 8011fe6:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8011fea:	4293      	cmp	r3, r2
 8011fec:	d804      	bhi.n	8011ff8 <tcp_parseopt+0x8c>
 8011fee:	89bb      	ldrh	r3, [r7, #12]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d001      	beq.n	8011ff8 <tcp_parseopt+0x8c>
 8011ff4:	89ba      	ldrh	r2, [r7, #12]
 8011ff6:	e001      	b.n	8011ffc <tcp_parseopt+0x90>
 8011ff8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8012000:	e012      	b.n	8012028 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012002:	f7ff ff7d 	bl	8011f00 <tcp_get_next_optbyte>
 8012006:	4603      	mov	r3, r0
 8012008:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801200a:	7afb      	ldrb	r3, [r7, #11]
 801200c:	2b01      	cmp	r3, #1
 801200e:	d916      	bls.n	801203e <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012010:	7afb      	ldrb	r3, [r7, #11]
 8012012:	b29a      	uxth	r2, r3
 8012014:	4b10      	ldr	r3, [pc, #64]	@ (8012058 <tcp_parseopt+0xec>)
 8012016:	881b      	ldrh	r3, [r3, #0]
 8012018:	4413      	add	r3, r2
 801201a:	b29b      	uxth	r3, r3
 801201c:	3b02      	subs	r3, #2
 801201e:	b29a      	uxth	r2, r3
 8012020:	4b0d      	ldr	r3, [pc, #52]	@ (8012058 <tcp_parseopt+0xec>)
 8012022:	801a      	strh	r2, [r3, #0]
 8012024:	e000      	b.n	8012028 <tcp_parseopt+0xbc>
          break;
 8012026:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012028:	4b0b      	ldr	r3, [pc, #44]	@ (8012058 <tcp_parseopt+0xec>)
 801202a:	881a      	ldrh	r2, [r3, #0]
 801202c:	4b09      	ldr	r3, [pc, #36]	@ (8012054 <tcp_parseopt+0xe8>)
 801202e:	881b      	ldrh	r3, [r3, #0]
 8012030:	429a      	cmp	r2, r3
 8012032:	d3b1      	bcc.n	8011f98 <tcp_parseopt+0x2c>
 8012034:	e004      	b.n	8012040 <tcp_parseopt+0xd4>
          return;
 8012036:	bf00      	nop
 8012038:	e002      	b.n	8012040 <tcp_parseopt+0xd4>
            return;
 801203a:	bf00      	nop
 801203c:	e000      	b.n	8012040 <tcp_parseopt+0xd4>
            return;
 801203e:	bf00      	nop
      }
    }
  }
}
 8012040:	3710      	adds	r7, #16
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop
 8012048:	0801bbec 	.word	0x0801bbec
 801204c:	0801c030 	.word	0x0801c030
 8012050:	0801bc1c 	.word	0x0801bc1c
 8012054:	2000a330 	.word	0x2000a330
 8012058:	2000a338 	.word	0x2000a338

0801205c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801205c:	b480      	push	{r7}
 801205e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012060:	4b05      	ldr	r3, [pc, #20]	@ (8012078 <tcp_trigger_input_pcb_close+0x1c>)
 8012062:	781b      	ldrb	r3, [r3, #0]
 8012064:	f043 0310 	orr.w	r3, r3, #16
 8012068:	b2da      	uxtb	r2, r3
 801206a:	4b03      	ldr	r3, [pc, #12]	@ (8012078 <tcp_trigger_input_pcb_close+0x1c>)
 801206c:	701a      	strb	r2, [r3, #0]
}
 801206e:	bf00      	nop
 8012070:	46bd      	mov	sp, r7
 8012072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012076:	4770      	bx	lr
 8012078:	2000a349 	.word	0x2000a349

0801207c <tcp_route>:
                                              struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b084      	sub	sp, #16
 8012080:	af00      	add	r7, sp, #0
 8012082:	60f8      	str	r0, [r7, #12]
 8012084:	60b9      	str	r1, [r7, #8]
 8012086:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d00a      	beq.n	80120a4 <tcp_route+0x28>
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	7a1b      	ldrb	r3, [r3, #8]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d006      	beq.n	80120a4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	7a1b      	ldrb	r3, [r3, #8]
 801209a:	4618      	mov	r0, r3
 801209c:	f7fb fb02 	bl	800d6a4 <netif_get_by_index>
 80120a0:	4603      	mov	r3, r0
 80120a2:	e003      	b.n	80120ac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f005 faad 	bl	8017604 <ip4_route>
 80120aa:	4603      	mov	r3, r0
  }
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3710      	adds	r7, #16
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80120b4:	b590      	push	{r4, r7, lr}
 80120b6:	b087      	sub	sp, #28
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	60f8      	str	r0, [r7, #12]
 80120bc:	60b9      	str	r1, [r7, #8]
 80120be:	603b      	str	r3, [r7, #0]
 80120c0:	4613      	mov	r3, r2
 80120c2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d105      	bne.n	80120d6 <tcp_create_segment+0x22>
 80120ca:	4b43      	ldr	r3, [pc, #268]	@ (80121d8 <tcp_create_segment+0x124>)
 80120cc:	22a6      	movs	r2, #166	@ 0xa6
 80120ce:	4943      	ldr	r1, [pc, #268]	@ (80121dc <tcp_create_segment+0x128>)
 80120d0:	4843      	ldr	r0, [pc, #268]	@ (80121e0 <tcp_create_segment+0x12c>)
 80120d2:	f006 fe27 	bl	8018d24 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d105      	bne.n	80120e8 <tcp_create_segment+0x34>
 80120dc:	4b3e      	ldr	r3, [pc, #248]	@ (80121d8 <tcp_create_segment+0x124>)
 80120de:	22a7      	movs	r2, #167	@ 0xa7
 80120e0:	4940      	ldr	r1, [pc, #256]	@ (80121e4 <tcp_create_segment+0x130>)
 80120e2:	483f      	ldr	r0, [pc, #252]	@ (80121e0 <tcp_create_segment+0x12c>)
 80120e4:	f006 fe1e 	bl	8018d24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80120e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80120ec:	009b      	lsls	r3, r3, #2
 80120ee:	b2db      	uxtb	r3, r3
 80120f0:	f003 0304 	and.w	r3, r3, #4
 80120f4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80120f6:	2003      	movs	r0, #3
 80120f8:	f7fa ffae 	bl	800d058 <memp_malloc>
 80120fc:	6138      	str	r0, [r7, #16]
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d104      	bne.n	801210e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012104:	68b8      	ldr	r0, [r7, #8]
 8012106:	f7fb fe2f 	bl	800dd68 <pbuf_free>
    return NULL;
 801210a:	2300      	movs	r3, #0
 801210c:	e060      	b.n	80121d0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801210e:	693b      	ldr	r3, [r7, #16]
 8012110:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012114:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	2200      	movs	r2, #0
 801211a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801211c:	693b      	ldr	r3, [r7, #16]
 801211e:	68ba      	ldr	r2, [r7, #8]
 8012120:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	891a      	ldrh	r2, [r3, #8]
 8012126:	7dfb      	ldrb	r3, [r7, #23]
 8012128:	b29b      	uxth	r3, r3
 801212a:	429a      	cmp	r2, r3
 801212c:	d205      	bcs.n	801213a <tcp_create_segment+0x86>
 801212e:	4b2a      	ldr	r3, [pc, #168]	@ (80121d8 <tcp_create_segment+0x124>)
 8012130:	22b3      	movs	r2, #179	@ 0xb3
 8012132:	492d      	ldr	r1, [pc, #180]	@ (80121e8 <tcp_create_segment+0x134>)
 8012134:	482a      	ldr	r0, [pc, #168]	@ (80121e0 <tcp_create_segment+0x12c>)
 8012136:	f006 fdf5 	bl	8018d24 <iprintf>
  seg->len = p->tot_len - optlen;
 801213a:	68bb      	ldr	r3, [r7, #8]
 801213c:	891a      	ldrh	r2, [r3, #8]
 801213e:	7dfb      	ldrb	r3, [r7, #23]
 8012140:	b29b      	uxth	r3, r3
 8012142:	1ad3      	subs	r3, r2, r3
 8012144:	b29a      	uxth	r2, r3
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801214a:	2114      	movs	r1, #20
 801214c:	68b8      	ldr	r0, [r7, #8]
 801214e:	f7fb fd7f 	bl	800dc50 <pbuf_add_header>
 8012152:	4603      	mov	r3, r0
 8012154:	2b00      	cmp	r3, #0
 8012156:	d004      	beq.n	8012162 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012158:	6938      	ldr	r0, [r7, #16]
 801215a:	f7fd f8d0 	bl	800f2fe <tcp_seg_free>
    return NULL;
 801215e:	2300      	movs	r3, #0
 8012160:	e036      	b.n	80121d0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012162:	693b      	ldr	r3, [r7, #16]
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	685a      	ldr	r2, [r3, #4]
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	8ada      	ldrh	r2, [r3, #22]
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	68dc      	ldr	r4, [r3, #12]
 8012174:	4610      	mov	r0, r2
 8012176:	f7fa fa8b 	bl	800c690 <lwip_htons>
 801217a:	4603      	mov	r3, r0
 801217c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	8b1a      	ldrh	r2, [r3, #24]
 8012182:	693b      	ldr	r3, [r7, #16]
 8012184:	68dc      	ldr	r4, [r3, #12]
 8012186:	4610      	mov	r0, r2
 8012188:	f7fa fa82 	bl	800c690 <lwip_htons>
 801218c:	4603      	mov	r3, r0
 801218e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	68dc      	ldr	r4, [r3, #12]
 8012194:	6838      	ldr	r0, [r7, #0]
 8012196:	f7fa fa91 	bl	800c6bc <lwip_htonl>
 801219a:	4603      	mov	r3, r0
 801219c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801219e:	7dfb      	ldrb	r3, [r7, #23]
 80121a0:	089b      	lsrs	r3, r3, #2
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	3305      	adds	r3, #5
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	031b      	lsls	r3, r3, #12
 80121aa:	b29a      	uxth	r2, r3
 80121ac:	79fb      	ldrb	r3, [r7, #7]
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	4313      	orrs	r3, r2
 80121b2:	b29a      	uxth	r2, r3
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	68dc      	ldr	r4, [r3, #12]
 80121b8:	4610      	mov	r0, r2
 80121ba:	f7fa fa69 	bl	800c690 <lwip_htons>
 80121be:	4603      	mov	r3, r0
 80121c0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	68db      	ldr	r3, [r3, #12]
 80121c6:	2200      	movs	r2, #0
 80121c8:	749a      	strb	r2, [r3, #18]
 80121ca:	2200      	movs	r2, #0
 80121cc:	74da      	strb	r2, [r3, #19]
  return seg;
 80121ce:	693b      	ldr	r3, [r7, #16]
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	371c      	adds	r7, #28
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd90      	pop	{r4, r7, pc}
 80121d8:	0801c04c 	.word	0x0801c04c
 80121dc:	0801c064 	.word	0x0801c064
 80121e0:	0801c084 	.word	0x0801c084
 80121e4:	0801c0ac 	.word	0x0801c0ac
 80121e8:	0801c0d0 	.word	0x0801c0d0

080121ec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80121ec:	b590      	push	{r4, r7, lr}
 80121ee:	b08b      	sub	sp, #44	@ 0x2c
 80121f0:	af02      	add	r7, sp, #8
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	460b      	mov	r3, r1
 80121f6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80121f8:	2300      	movs	r3, #0
 80121fa:	61fb      	str	r3, [r7, #28]
 80121fc:	2300      	movs	r3, #0
 80121fe:	613b      	str	r3, [r7, #16]
  struct pbuf *p = NULL;
 8012200:	2300      	movs	r3, #0
 8012202:	61bb      	str	r3, [r7, #24]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d106      	bne.n	8012218 <tcp_split_unsent_seg+0x2c>
 801220a:	4b96      	ldr	r3, [pc, #600]	@ (8012464 <tcp_split_unsent_seg+0x278>)
 801220c:	f240 324e 	movw	r2, #846	@ 0x34e
 8012210:	4995      	ldr	r1, [pc, #596]	@ (8012468 <tcp_split_unsent_seg+0x27c>)
 8012212:	4896      	ldr	r0, [pc, #600]	@ (801246c <tcp_split_unsent_seg+0x280>)
 8012214:	f006 fd86 	bl	8018d24 <iprintf>

  useg = pcb->unsent;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801221c:	613b      	str	r3, [r7, #16]
  if (useg == NULL) {
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d102      	bne.n	801222a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012224:	f04f 33ff 	mov.w	r3, #4294967295
 8012228:	e117      	b.n	801245a <tcp_split_unsent_seg+0x26e>
  }

  if (split == 0) {
 801222a:	887b      	ldrh	r3, [r7, #2]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d109      	bne.n	8012244 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012230:	4b8c      	ldr	r3, [pc, #560]	@ (8012464 <tcp_split_unsent_seg+0x278>)
 8012232:	f240 3256 	movw	r2, #854	@ 0x356
 8012236:	498e      	ldr	r1, [pc, #568]	@ (8012470 <tcp_split_unsent_seg+0x284>)
 8012238:	488c      	ldr	r0, [pc, #560]	@ (801246c <tcp_split_unsent_seg+0x280>)
 801223a:	f006 fd73 	bl	8018d24 <iprintf>
    return ERR_VAL;
 801223e:	f06f 0305 	mvn.w	r3, #5
 8012242:	e10a      	b.n	801245a <tcp_split_unsent_seg+0x26e>
  }

  if (useg->len <= split) {
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	891b      	ldrh	r3, [r3, #8]
 8012248:	887a      	ldrh	r2, [r7, #2]
 801224a:	429a      	cmp	r2, r3
 801224c:	d301      	bcc.n	8012252 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801224e:	2300      	movs	r3, #0
 8012250:	e103      	b.n	801245a <tcp_split_unsent_seg+0x26e>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012256:	887a      	ldrh	r2, [r7, #2]
 8012258:	429a      	cmp	r2, r3
 801225a:	d906      	bls.n	801226a <tcp_split_unsent_seg+0x7e>
 801225c:	4b81      	ldr	r3, [pc, #516]	@ (8012464 <tcp_split_unsent_seg+0x278>)
 801225e:	f240 325e 	movw	r2, #862	@ 0x35e
 8012262:	4984      	ldr	r1, [pc, #528]	@ (8012474 <tcp_split_unsent_seg+0x288>)
 8012264:	4881      	ldr	r0, [pc, #516]	@ (801246c <tcp_split_unsent_seg+0x280>)
 8012266:	f006 fd5d 	bl	8018d24 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	891b      	ldrh	r3, [r3, #8]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d106      	bne.n	8012280 <tcp_split_unsent_seg+0x94>
 8012272:	4b7c      	ldr	r3, [pc, #496]	@ (8012464 <tcp_split_unsent_seg+0x278>)
 8012274:	f240 325f 	movw	r2, #863	@ 0x35f
 8012278:	497f      	ldr	r1, [pc, #508]	@ (8012478 <tcp_split_unsent_seg+0x28c>)
 801227a:	487c      	ldr	r0, [pc, #496]	@ (801246c <tcp_split_unsent_seg+0x280>)
 801227c:	f006 fd52 	bl	8018d24 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012280:	693b      	ldr	r3, [r7, #16]
 8012282:	7a9b      	ldrb	r3, [r3, #10]
 8012284:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012286:	7bfb      	ldrb	r3, [r7, #15]
 8012288:	009b      	lsls	r3, r3, #2
 801228a:	b2db      	uxtb	r3, r3
 801228c:	f003 0304 	and.w	r3, r3, #4
 8012290:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	891a      	ldrh	r2, [r3, #8]
 8012296:	887b      	ldrh	r3, [r7, #2]
 8012298:	1ad3      	subs	r3, r2, r3
 801229a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801229c:	7bbb      	ldrb	r3, [r7, #14]
 801229e:	b29a      	uxth	r2, r3
 80122a0:	89bb      	ldrh	r3, [r7, #12]
 80122a2:	4413      	add	r3, r2
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80122aa:	4619      	mov	r1, r3
 80122ac:	2036      	movs	r0, #54	@ 0x36
 80122ae:	f7fb fa75 	bl	800d79c <pbuf_alloc>
 80122b2:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80122b4:	69bb      	ldr	r3, [r7, #24]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	f000 80ba 	beq.w	8012430 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80122bc:	693b      	ldr	r3, [r7, #16]
 80122be:	685b      	ldr	r3, [r3, #4]
 80122c0:	891a      	ldrh	r2, [r3, #8]
 80122c2:	693b      	ldr	r3, [r7, #16]
 80122c4:	891b      	ldrh	r3, [r3, #8]
 80122c6:	1ad3      	subs	r3, r2, r3
 80122c8:	b29a      	uxth	r2, r3
 80122ca:	887b      	ldrh	r3, [r7, #2]
 80122cc:	4413      	add	r3, r2
 80122ce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	6858      	ldr	r0, [r3, #4]
 80122d4:	69bb      	ldr	r3, [r7, #24]
 80122d6:	685a      	ldr	r2, [r3, #4]
 80122d8:	7bbb      	ldrb	r3, [r7, #14]
 80122da:	18d1      	adds	r1, r2, r3
 80122dc:	897b      	ldrh	r3, [r7, #10]
 80122de:	89ba      	ldrh	r2, [r7, #12]
 80122e0:	f7fb ff4c 	bl	800e17c <pbuf_copy_partial>
 80122e4:	4603      	mov	r3, r0
 80122e6:	461a      	mov	r2, r3
 80122e8:	89bb      	ldrh	r3, [r7, #12]
 80122ea:	4293      	cmp	r3, r2
 80122ec:	f040 80a2 	bne.w	8012434 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	68db      	ldr	r3, [r3, #12]
 80122f4:	899b      	ldrh	r3, [r3, #12]
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7fa f9c9 	bl	800c690 <lwip_htons>
 80122fe:	4603      	mov	r3, r0
 8012300:	b2db      	uxtb	r3, r3
 8012302:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012306:	75fb      	strb	r3, [r7, #23]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012308:	2300      	movs	r3, #0
 801230a:	75bb      	strb	r3, [r7, #22]

  if (split_flags & TCP_PSH) {
 801230c:	7dfb      	ldrb	r3, [r7, #23]
 801230e:	f003 0308 	and.w	r3, r3, #8
 8012312:	2b00      	cmp	r3, #0
 8012314:	d007      	beq.n	8012326 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012316:	7dfb      	ldrb	r3, [r7, #23]
 8012318:	f023 0308 	bic.w	r3, r3, #8
 801231c:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_PSH;
 801231e:	7dbb      	ldrb	r3, [r7, #22]
 8012320:	f043 0308 	orr.w	r3, r3, #8
 8012324:	75bb      	strb	r3, [r7, #22]
  }
  if (split_flags & TCP_FIN) {
 8012326:	7dfb      	ldrb	r3, [r7, #23]
 8012328:	f003 0301 	and.w	r3, r3, #1
 801232c:	2b00      	cmp	r3, #0
 801232e:	d007      	beq.n	8012340 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012330:	7dfb      	ldrb	r3, [r7, #23]
 8012332:	f023 0301 	bic.w	r3, r3, #1
 8012336:	75fb      	strb	r3, [r7, #23]
    remainder_flags |= TCP_FIN;
 8012338:	7dbb      	ldrb	r3, [r7, #22]
 801233a:	f043 0301 	orr.w	r3, r3, #1
 801233e:	75bb      	strb	r3, [r7, #22]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012340:	693b      	ldr	r3, [r7, #16]
 8012342:	68db      	ldr	r3, [r3, #12]
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	4618      	mov	r0, r3
 8012348:	f7fa f9b8 	bl	800c6bc <lwip_htonl>
 801234c:	4602      	mov	r2, r0
 801234e:	887b      	ldrh	r3, [r7, #2]
 8012350:	18d1      	adds	r1, r2, r3
 8012352:	7dba      	ldrb	r2, [r7, #22]
 8012354:	7bfb      	ldrb	r3, [r7, #15]
 8012356:	9300      	str	r3, [sp, #0]
 8012358:	460b      	mov	r3, r1
 801235a:	69b9      	ldr	r1, [r7, #24]
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f7ff fea9 	bl	80120b4 <tcp_create_segment>
 8012362:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012364:	69fb      	ldr	r3, [r7, #28]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d102      	bne.n	8012370 <tcp_split_unsent_seg+0x184>
    p = NULL; /* Freed by tcp_create_segment */
 801236a:	2300      	movs	r3, #0
 801236c:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 801236e:	e062      	b.n	8012436 <tcp_split_unsent_seg+0x24a>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	4618      	mov	r0, r3
 8012376:	f7fb fd7f 	bl	800de78 <pbuf_clen>
 801237a:	4603      	mov	r3, r0
 801237c:	461a      	mov	r2, r3
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012384:	1a9b      	subs	r3, r3, r2
 8012386:	b29a      	uxth	r2, r3
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801238e:	693b      	ldr	r3, [r7, #16]
 8012390:	6858      	ldr	r0, [r3, #4]
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	891a      	ldrh	r2, [r3, #8]
 8012398:	89bb      	ldrh	r3, [r7, #12]
 801239a:	1ad3      	subs	r3, r2, r3
 801239c:	b29b      	uxth	r3, r3
 801239e:	4619      	mov	r1, r3
 80123a0:	f7fb fb5a 	bl	800da58 <pbuf_realloc>
  useg->len -= remainder;
 80123a4:	693b      	ldr	r3, [r7, #16]
 80123a6:	891a      	ldrh	r2, [r3, #8]
 80123a8:	89bb      	ldrh	r3, [r7, #12]
 80123aa:	1ad3      	subs	r3, r2, r3
 80123ac:	b29a      	uxth	r2, r3
 80123ae:	693b      	ldr	r3, [r7, #16]
 80123b0:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80123b2:	693b      	ldr	r3, [r7, #16]
 80123b4:	68db      	ldr	r3, [r3, #12]
 80123b6:	899b      	ldrh	r3, [r3, #12]
 80123b8:	b29c      	uxth	r4, r3
 80123ba:	7dfb      	ldrb	r3, [r7, #23]
 80123bc:	b29b      	uxth	r3, r3
 80123be:	4618      	mov	r0, r3
 80123c0:	f7fa f966 	bl	800c690 <lwip_htons>
 80123c4:	4603      	mov	r3, r0
 80123c6:	461a      	mov	r2, r3
 80123c8:	693b      	ldr	r3, [r7, #16]
 80123ca:	68db      	ldr	r3, [r3, #12]
 80123cc:	4322      	orrs	r2, r4
 80123ce:	b292      	uxth	r2, r2
 80123d0:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	685b      	ldr	r3, [r3, #4]
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7fb fd4e 	bl	800de78 <pbuf_clen>
 80123dc:	4603      	mov	r3, r0
 80123de:	461a      	mov	r2, r3
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80123e6:	4413      	add	r3, r2
 80123e8:	b29a      	uxth	r2, r3
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80123f0:	69fb      	ldr	r3, [r7, #28]
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7fb fd3f 	bl	800de78 <pbuf_clen>
 80123fa:	4603      	mov	r3, r0
 80123fc:	461a      	mov	r2, r3
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012404:	4413      	add	r3, r2
 8012406:	b29a      	uxth	r2, r3
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	681a      	ldr	r2, [r3, #0]
 8012412:	69fb      	ldr	r3, [r7, #28]
 8012414:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	69fa      	ldr	r2, [r7, #28]
 801241a:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801241c:	69fb      	ldr	r3, [r7, #28]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d103      	bne.n	801242c <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2200      	movs	r2, #0
 8012428:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801242c:	2300      	movs	r3, #0
 801242e:	e014      	b.n	801245a <tcp_split_unsent_seg+0x26e>
    goto memerr;
 8012430:	bf00      	nop
 8012432:	e000      	b.n	8012436 <tcp_split_unsent_seg+0x24a>
    goto memerr;
 8012434:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d006      	beq.n	801244a <tcp_split_unsent_seg+0x25e>
 801243c:	4b09      	ldr	r3, [pc, #36]	@ (8012464 <tcp_split_unsent_seg+0x278>)
 801243e:	f44f 7277 	mov.w	r2, #988	@ 0x3dc
 8012442:	490e      	ldr	r1, [pc, #56]	@ (801247c <tcp_split_unsent_seg+0x290>)
 8012444:	4809      	ldr	r0, [pc, #36]	@ (801246c <tcp_split_unsent_seg+0x280>)
 8012446:	f006 fc6d 	bl	8018d24 <iprintf>
  if (p != NULL) {
 801244a:	69bb      	ldr	r3, [r7, #24]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d002      	beq.n	8012456 <tcp_split_unsent_seg+0x26a>
    pbuf_free(p);
 8012450:	69b8      	ldr	r0, [r7, #24]
 8012452:	f7fb fc89 	bl	800dd68 <pbuf_free>
  }

  return ERR_MEM;
 8012456:	f04f 33ff 	mov.w	r3, #4294967295
}
 801245a:	4618      	mov	r0, r3
 801245c:	3724      	adds	r7, #36	@ 0x24
 801245e:	46bd      	mov	sp, r7
 8012460:	bd90      	pop	{r4, r7, pc}
 8012462:	bf00      	nop
 8012464:	0801c04c 	.word	0x0801c04c
 8012468:	0801c378 	.word	0x0801c378
 801246c:	0801c084 	.word	0x0801c084
 8012470:	0801c39c 	.word	0x0801c39c
 8012474:	0801c3c0 	.word	0x0801c3c0
 8012478:	0801c3d0 	.word	0x0801c3d0
 801247c:	0801c3e0 	.word	0x0801c3e0

08012480 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012480:	b590      	push	{r4, r7, lr}
 8012482:	b085      	sub	sp, #20
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d106      	bne.n	801249c <tcp_send_fin+0x1c>
 801248e:	4b21      	ldr	r3, [pc, #132]	@ (8012514 <tcp_send_fin+0x94>)
 8012490:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8012494:	4920      	ldr	r1, [pc, #128]	@ (8012518 <tcp_send_fin+0x98>)
 8012496:	4821      	ldr	r0, [pc, #132]	@ (801251c <tcp_send_fin+0x9c>)
 8012498:	f006 fc44 	bl	8018d24 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d02e      	beq.n	8012502 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124a8:	60fb      	str	r3, [r7, #12]
 80124aa:	e002      	b.n	80124b2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d1f8      	bne.n	80124ac <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	68db      	ldr	r3, [r3, #12]
 80124be:	899b      	ldrh	r3, [r3, #12]
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7fa f8e4 	bl	800c690 <lwip_htons>
 80124c8:	4603      	mov	r3, r0
 80124ca:	b2db      	uxtb	r3, r3
 80124cc:	f003 0307 	and.w	r3, r3, #7
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d116      	bne.n	8012502 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	68db      	ldr	r3, [r3, #12]
 80124d8:	899b      	ldrh	r3, [r3, #12]
 80124da:	b29c      	uxth	r4, r3
 80124dc:	2001      	movs	r0, #1
 80124de:	f7fa f8d7 	bl	800c690 <lwip_htons>
 80124e2:	4603      	mov	r3, r0
 80124e4:	461a      	mov	r2, r3
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	68db      	ldr	r3, [r3, #12]
 80124ea:	4322      	orrs	r2, r4
 80124ec:	b292      	uxth	r2, r2
 80124ee:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	8b5b      	ldrh	r3, [r3, #26]
 80124f4:	f043 0320 	orr.w	r3, r3, #32
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80124fe:	2300      	movs	r3, #0
 8012500:	e004      	b.n	801250c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012502:	2101      	movs	r1, #1
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	f000 f80b 	bl	8012520 <tcp_enqueue_flags>
 801250a:	4603      	mov	r3, r0
}
 801250c:	4618      	mov	r0, r3
 801250e:	3714      	adds	r7, #20
 8012510:	46bd      	mov	sp, r7
 8012512:	bd90      	pop	{r4, r7, pc}
 8012514:	0801c04c 	.word	0x0801c04c
 8012518:	0801c3ec 	.word	0x0801c3ec
 801251c:	0801c084 	.word	0x0801c084

08012520 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b08a      	sub	sp, #40	@ 0x28
 8012524:	af02      	add	r7, sp, #8
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	460b      	mov	r3, r1
 801252a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801252c:	2300      	movs	r3, #0
 801252e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012530:	2300      	movs	r3, #0
 8012532:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012534:	78fb      	ldrb	r3, [r7, #3]
 8012536:	f003 0303 	and.w	r3, r3, #3
 801253a:	2b00      	cmp	r3, #0
 801253c:	d106      	bne.n	801254c <tcp_enqueue_flags+0x2c>
 801253e:	4b67      	ldr	r3, [pc, #412]	@ (80126dc <tcp_enqueue_flags+0x1bc>)
 8012540:	f240 4213 	movw	r2, #1043	@ 0x413
 8012544:	4966      	ldr	r1, [pc, #408]	@ (80126e0 <tcp_enqueue_flags+0x1c0>)
 8012546:	4867      	ldr	r0, [pc, #412]	@ (80126e4 <tcp_enqueue_flags+0x1c4>)
 8012548:	f006 fbec 	bl	8018d24 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d106      	bne.n	8012560 <tcp_enqueue_flags+0x40>
 8012552:	4b62      	ldr	r3, [pc, #392]	@ (80126dc <tcp_enqueue_flags+0x1bc>)
 8012554:	f240 4215 	movw	r2, #1045	@ 0x415
 8012558:	4963      	ldr	r1, [pc, #396]	@ (80126e8 <tcp_enqueue_flags+0x1c8>)
 801255a:	4862      	ldr	r0, [pc, #392]	@ (80126e4 <tcp_enqueue_flags+0x1c4>)
 801255c:	f006 fbe2 	bl	8018d24 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012560:	78fb      	ldrb	r3, [r7, #3]
 8012562:	f003 0302 	and.w	r3, r3, #2
 8012566:	2b00      	cmp	r3, #0
 8012568:	d001      	beq.n	801256e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801256a:	2301      	movs	r3, #1
 801256c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801256e:	7ffb      	ldrb	r3, [r7, #31]
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	b2db      	uxtb	r3, r3
 8012574:	f003 0304 	and.w	r3, r3, #4
 8012578:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801257a:	7dfb      	ldrb	r3, [r7, #23]
 801257c:	b29b      	uxth	r3, r3
 801257e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012582:	4619      	mov	r1, r3
 8012584:	2036      	movs	r0, #54	@ 0x36
 8012586:	f7fb f909 	bl	800d79c <pbuf_alloc>
 801258a:	6138      	str	r0, [r7, #16]
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d109      	bne.n	80125a6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	8b5b      	ldrh	r3, [r3, #26]
 8012596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801259a:	b29a      	uxth	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80125a0:	f04f 33ff 	mov.w	r3, #4294967295
 80125a4:	e095      	b.n	80126d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	895a      	ldrh	r2, [r3, #10]
 80125aa:	7dfb      	ldrb	r3, [r7, #23]
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d206      	bcs.n	80125c0 <tcp_enqueue_flags+0xa0>
 80125b2:	4b4a      	ldr	r3, [pc, #296]	@ (80126dc <tcp_enqueue_flags+0x1bc>)
 80125b4:	f240 423d 	movw	r2, #1085	@ 0x43d
 80125b8:	494c      	ldr	r1, [pc, #304]	@ (80126ec <tcp_enqueue_flags+0x1cc>)
 80125ba:	484a      	ldr	r0, [pc, #296]	@ (80126e4 <tcp_enqueue_flags+0x1c4>)
 80125bc:	f006 fbb2 	bl	8018d24 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80125c4:	78fa      	ldrb	r2, [r7, #3]
 80125c6:	7ffb      	ldrb	r3, [r7, #31]
 80125c8:	9300      	str	r3, [sp, #0]
 80125ca:	460b      	mov	r3, r1
 80125cc:	6939      	ldr	r1, [r7, #16]
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f7ff fd70 	bl	80120b4 <tcp_create_segment>
 80125d4:	60f8      	str	r0, [r7, #12]
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d109      	bne.n	80125f0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	8b5b      	ldrh	r3, [r3, #26]
 80125e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125e4:	b29a      	uxth	r2, r3
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80125ea:	f04f 33ff 	mov.w	r3, #4294967295
 80125ee:	e070      	b.n	80126d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	f003 0303 	and.w	r3, r3, #3
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d006      	beq.n	801260a <tcp_enqueue_flags+0xea>
 80125fc:	4b37      	ldr	r3, [pc, #220]	@ (80126dc <tcp_enqueue_flags+0x1bc>)
 80125fe:	f240 4246 	movw	r2, #1094	@ 0x446
 8012602:	493b      	ldr	r1, [pc, #236]	@ (80126f0 <tcp_enqueue_flags+0x1d0>)
 8012604:	4837      	ldr	r0, [pc, #220]	@ (80126e4 <tcp_enqueue_flags+0x1c4>)
 8012606:	f006 fb8d 	bl	8018d24 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	891b      	ldrh	r3, [r3, #8]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d006      	beq.n	8012620 <tcp_enqueue_flags+0x100>
 8012612:	4b32      	ldr	r3, [pc, #200]	@ (80126dc <tcp_enqueue_flags+0x1bc>)
 8012614:	f240 4247 	movw	r2, #1095	@ 0x447
 8012618:	4936      	ldr	r1, [pc, #216]	@ (80126f4 <tcp_enqueue_flags+0x1d4>)
 801261a:	4832      	ldr	r0, [pc, #200]	@ (80126e4 <tcp_enqueue_flags+0x1c4>)
 801261c:	f006 fb82 	bl	8018d24 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012624:	2b00      	cmp	r3, #0
 8012626:	d103      	bne.n	8012630 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	68fa      	ldr	r2, [r7, #12]
 801262c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801262e:	e00d      	b.n	801264c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012634:	61bb      	str	r3, [r7, #24]
 8012636:	e002      	b.n	801263e <tcp_enqueue_flags+0x11e>
 8012638:	69bb      	ldr	r3, [r7, #24]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	61bb      	str	r3, [r7, #24]
 801263e:	69bb      	ldr	r3, [r7, #24]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d1f8      	bne.n	8012638 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	68fa      	ldr	r2, [r7, #12]
 801264a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2200      	movs	r2, #0
 8012650:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012654:	78fb      	ldrb	r3, [r7, #3]
 8012656:	f003 0302 	and.w	r3, r3, #2
 801265a:	2b00      	cmp	r3, #0
 801265c:	d104      	bne.n	8012668 <tcp_enqueue_flags+0x148>
 801265e:	78fb      	ldrb	r3, [r7, #3]
 8012660:	f003 0301 	and.w	r3, r3, #1
 8012664:	2b00      	cmp	r3, #0
 8012666:	d004      	beq.n	8012672 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801266c:	1c5a      	adds	r2, r3, #1
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012672:	78fb      	ldrb	r3, [r7, #3]
 8012674:	f003 0301 	and.w	r3, r3, #1
 8012678:	2b00      	cmp	r3, #0
 801267a:	d006      	beq.n	801268a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	8b5b      	ldrh	r3, [r3, #26]
 8012680:	f043 0320 	orr.w	r3, r3, #32
 8012684:	b29a      	uxth	r2, r3
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	685b      	ldr	r3, [r3, #4]
 801268e:	4618      	mov	r0, r3
 8012690:	f7fb fbf2 	bl	800de78 <pbuf_clen>
 8012694:	4603      	mov	r3, r0
 8012696:	461a      	mov	r2, r3
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801269e:	4413      	add	r3, r2
 80126a0:	b29a      	uxth	r2, r3
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d00e      	beq.n	80126d0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d10a      	bne.n	80126d0 <tcp_enqueue_flags+0x1b0>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d106      	bne.n	80126d0 <tcp_enqueue_flags+0x1b0>
 80126c2:	4b06      	ldr	r3, [pc, #24]	@ (80126dc <tcp_enqueue_flags+0x1bc>)
 80126c4:	f240 4269 	movw	r2, #1129	@ 0x469
 80126c8:	490b      	ldr	r1, [pc, #44]	@ (80126f8 <tcp_enqueue_flags+0x1d8>)
 80126ca:	4806      	ldr	r0, [pc, #24]	@ (80126e4 <tcp_enqueue_flags+0x1c4>)
 80126cc:	f006 fb2a 	bl	8018d24 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80126d0:	2300      	movs	r3, #0
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3720      	adds	r7, #32
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
 80126da:	bf00      	nop
 80126dc:	0801c04c 	.word	0x0801c04c
 80126e0:	0801c408 	.word	0x0801c408
 80126e4:	0801c084 	.word	0x0801c084
 80126e8:	0801c460 	.word	0x0801c460
 80126ec:	0801c480 	.word	0x0801c480
 80126f0:	0801c4bc 	.word	0x0801c4bc
 80126f4:	0801c4d4 	.word	0x0801c4d4
 80126f8:	0801c500 	.word	0x0801c500

080126fc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80126fc:	b5b0      	push	{r4, r5, r7, lr}
 80126fe:	b08a      	sub	sp, #40	@ 0x28
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d106      	bne.n	8012718 <tcp_output+0x1c>
 801270a:	4b8a      	ldr	r3, [pc, #552]	@ (8012934 <tcp_output+0x238>)
 801270c:	f240 42e5 	movw	r2, #1253	@ 0x4e5
 8012710:	4989      	ldr	r1, [pc, #548]	@ (8012938 <tcp_output+0x23c>)
 8012712:	488a      	ldr	r0, [pc, #552]	@ (801293c <tcp_output+0x240>)
 8012714:	f006 fb06 	bl	8018d24 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	7d1b      	ldrb	r3, [r3, #20]
 801271c:	2b01      	cmp	r3, #1
 801271e:	d106      	bne.n	801272e <tcp_output+0x32>
 8012720:	4b84      	ldr	r3, [pc, #528]	@ (8012934 <tcp_output+0x238>)
 8012722:	f240 42e7 	movw	r2, #1255	@ 0x4e7
 8012726:	4986      	ldr	r1, [pc, #536]	@ (8012940 <tcp_output+0x244>)
 8012728:	4884      	ldr	r0, [pc, #528]	@ (801293c <tcp_output+0x240>)
 801272a:	f006 fafb 	bl	8018d24 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801272e:	4b85      	ldr	r3, [pc, #532]	@ (8012944 <tcp_output+0x248>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	429a      	cmp	r2, r3
 8012736:	d101      	bne.n	801273c <tcp_output+0x40>
    return ERR_OK;
 8012738:	2300      	movs	r3, #0
 801273a:	e1ce      	b.n	8012ada <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012748:	4293      	cmp	r3, r2
 801274a:	bf28      	it	cs
 801274c:	4613      	movcs	r3, r2
 801274e:	b29b      	uxth	r3, r3
 8012750:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012756:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801275a:	2b00      	cmp	r3, #0
 801275c:	d10b      	bne.n	8012776 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	8b5b      	ldrh	r3, [r3, #26]
 8012762:	f003 0302 	and.w	r3, r3, #2
 8012766:	2b00      	cmp	r3, #0
 8012768:	f000 81aa 	beq.w	8012ac0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f000 fe37 	bl	80133e0 <tcp_send_empty_ack>
 8012772:	4603      	mov	r3, r0
 8012774:	e1b1      	b.n	8012ada <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012776:	6879      	ldr	r1, [r7, #4]
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	3304      	adds	r3, #4
 801277c:	461a      	mov	r2, r3
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f7ff fc7c 	bl	801207c <tcp_route>
 8012784:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d102      	bne.n	8012792 <tcp_output+0x96>
    return ERR_RTE;
 801278c:	f06f 0303 	mvn.w	r3, #3
 8012790:	e1a3      	b.n	8012ada <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d003      	beq.n	80127a0 <tcp_output+0xa4>
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d111      	bne.n	80127c4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d002      	beq.n	80127ac <tcp_output+0xb0>
 80127a6:	697b      	ldr	r3, [r7, #20]
 80127a8:	3304      	adds	r3, #4
 80127aa:	e000      	b.n	80127ae <tcp_output+0xb2>
 80127ac:	2300      	movs	r3, #0
 80127ae:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d102      	bne.n	80127bc <tcp_output+0xc0>
      return ERR_RTE;
 80127b6:	f06f 0303 	mvn.w	r3, #3
 80127ba:	e18e      	b.n	8012ada <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	681a      	ldr	r2, [r3, #0]
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80127c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127c6:	68db      	ldr	r3, [r3, #12]
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7f9 ff76 	bl	800c6bc <lwip_htonl>
 80127d0:	4602      	mov	r2, r0
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80127d6:	1ad3      	subs	r3, r2, r3
 80127d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127da:	8912      	ldrh	r2, [r2, #8]
 80127dc:	4413      	add	r3, r2
 80127de:	69ba      	ldr	r2, [r7, #24]
 80127e0:	429a      	cmp	r2, r3
 80127e2:	d227      	bcs.n	8012834 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80127ea:	461a      	mov	r2, r3
 80127ec:	69bb      	ldr	r3, [r7, #24]
 80127ee:	4293      	cmp	r3, r2
 80127f0:	d114      	bne.n	801281c <tcp_output+0x120>
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d110      	bne.n	801281c <tcp_output+0x120>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012800:	2b00      	cmp	r3, #0
 8012802:	d10b      	bne.n	801281c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2200      	movs	r2, #0
 8012808:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2201      	movs	r2, #1
 8012810:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2200      	movs	r2, #0
 8012818:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	8b5b      	ldrh	r3, [r3, #26]
 8012820:	f003 0302 	and.w	r3, r3, #2
 8012824:	2b00      	cmp	r3, #0
 8012826:	f000 814d 	beq.w	8012ac4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f000 fdd8 	bl	80133e0 <tcp_send_empty_ack>
 8012830:	4603      	mov	r3, r0
 8012832:	e152      	b.n	8012ada <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2200      	movs	r2, #0
 8012838:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012840:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012842:	6a3b      	ldr	r3, [r7, #32]
 8012844:	2b00      	cmp	r3, #0
 8012846:	f000 811c 	beq.w	8012a82 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801284a:	e002      	b.n	8012852 <tcp_output+0x156>
 801284c:	6a3b      	ldr	r3, [r7, #32]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	623b      	str	r3, [r7, #32]
 8012852:	6a3b      	ldr	r3, [r7, #32]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d1f8      	bne.n	801284c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801285a:	e112      	b.n	8012a82 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801285e:	68db      	ldr	r3, [r3, #12]
 8012860:	899b      	ldrh	r3, [r3, #12]
 8012862:	b29b      	uxth	r3, r3
 8012864:	4618      	mov	r0, r3
 8012866:	f7f9 ff13 	bl	800c690 <lwip_htons>
 801286a:	4603      	mov	r3, r0
 801286c:	b2db      	uxtb	r3, r3
 801286e:	f003 0304 	and.w	r3, r3, #4
 8012872:	2b00      	cmp	r3, #0
 8012874:	d006      	beq.n	8012884 <tcp_output+0x188>
 8012876:	4b2f      	ldr	r3, [pc, #188]	@ (8012934 <tcp_output+0x238>)
 8012878:	f240 523a 	movw	r2, #1338	@ 0x53a
 801287c:	4932      	ldr	r1, [pc, #200]	@ (8012948 <tcp_output+0x24c>)
 801287e:	482f      	ldr	r0, [pc, #188]	@ (801293c <tcp_output+0x240>)
 8012880:	f006 fa50 	bl	8018d24 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012888:	2b00      	cmp	r3, #0
 801288a:	d01f      	beq.n	80128cc <tcp_output+0x1d0>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	8b5b      	ldrh	r3, [r3, #26]
 8012890:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012894:	2b00      	cmp	r3, #0
 8012896:	d119      	bne.n	80128cc <tcp_output+0x1d0>
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801289c:	2b00      	cmp	r3, #0
 801289e:	d00b      	beq.n	80128b8 <tcp_output+0x1bc>
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d110      	bne.n	80128cc <tcp_output+0x1d0>
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128ae:	891a      	ldrh	r2, [r3, #8]
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d209      	bcs.n	80128cc <tcp_output+0x1d0>
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d004      	beq.n	80128cc <tcp_output+0x1d0>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80128c8:	2b0f      	cmp	r3, #15
 80128ca:	d901      	bls.n	80128d0 <tcp_output+0x1d4>
 80128cc:	2301      	movs	r3, #1
 80128ce:	e000      	b.n	80128d2 <tcp_output+0x1d6>
 80128d0:	2300      	movs	r3, #0
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d106      	bne.n	80128e4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	8b5b      	ldrh	r3, [r3, #26]
 80128da:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80128de:	2b00      	cmp	r3, #0
 80128e0:	f000 80e4 	beq.w	8012aac <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	7d1b      	ldrb	r3, [r3, #20]
 80128e8:	2b02      	cmp	r3, #2
 80128ea:	d00d      	beq.n	8012908 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80128ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128ee:	68db      	ldr	r3, [r3, #12]
 80128f0:	899b      	ldrh	r3, [r3, #12]
 80128f2:	b29c      	uxth	r4, r3
 80128f4:	2010      	movs	r0, #16
 80128f6:	f7f9 fecb 	bl	800c690 <lwip_htons>
 80128fa:	4603      	mov	r3, r0
 80128fc:	461a      	mov	r2, r3
 80128fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012900:	68db      	ldr	r3, [r3, #12]
 8012902:	4322      	orrs	r2, r4
 8012904:	b292      	uxth	r2, r2
 8012906:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012908:	697a      	ldr	r2, [r7, #20]
 801290a:	6879      	ldr	r1, [r7, #4]
 801290c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801290e:	f000 f909 	bl	8012b24 <tcp_output_segment>
 8012912:	4603      	mov	r3, r0
 8012914:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d016      	beq.n	801294c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	8b5b      	ldrh	r3, [r3, #26]
 8012922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012926:	b29a      	uxth	r2, r3
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	835a      	strh	r2, [r3, #26]
      return err;
 801292c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012930:	e0d3      	b.n	8012ada <tcp_output+0x3de>
 8012932:	bf00      	nop
 8012934:	0801c04c 	.word	0x0801c04c
 8012938:	0801c528 	.word	0x0801c528
 801293c:	0801c084 	.word	0x0801c084
 8012940:	0801c540 	.word	0x0801c540
 8012944:	2000a350 	.word	0x2000a350
 8012948:	0801c568 	.word	0x0801c568
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	7d1b      	ldrb	r3, [r3, #20]
 8012958:	2b02      	cmp	r3, #2
 801295a:	d006      	beq.n	801296a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	8b5b      	ldrh	r3, [r3, #26]
 8012960:	f023 0303 	bic.w	r3, r3, #3
 8012964:	b29a      	uxth	r2, r3
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801296c:	68db      	ldr	r3, [r3, #12]
 801296e:	685b      	ldr	r3, [r3, #4]
 8012970:	4618      	mov	r0, r3
 8012972:	f7f9 fea3 	bl	800c6bc <lwip_htonl>
 8012976:	4604      	mov	r4, r0
 8012978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801297a:	891b      	ldrh	r3, [r3, #8]
 801297c:	461d      	mov	r5, r3
 801297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012980:	68db      	ldr	r3, [r3, #12]
 8012982:	899b      	ldrh	r3, [r3, #12]
 8012984:	b29b      	uxth	r3, r3
 8012986:	4618      	mov	r0, r3
 8012988:	f7f9 fe82 	bl	800c690 <lwip_htons>
 801298c:	4603      	mov	r3, r0
 801298e:	b2db      	uxtb	r3, r3
 8012990:	f003 0303 	and.w	r3, r3, #3
 8012994:	2b00      	cmp	r3, #0
 8012996:	d001      	beq.n	801299c <tcp_output+0x2a0>
 8012998:	2301      	movs	r3, #1
 801299a:	e000      	b.n	801299e <tcp_output+0x2a2>
 801299c:	2300      	movs	r3, #0
 801299e:	442b      	add	r3, r5
 80129a0:	4423      	add	r3, r4
 80129a2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	1ad3      	subs	r3, r2, r3
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	da02      	bge.n	80129b6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	68ba      	ldr	r2, [r7, #8]
 80129b4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80129b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129b8:	891b      	ldrh	r3, [r3, #8]
 80129ba:	461c      	mov	r4, r3
 80129bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	899b      	ldrh	r3, [r3, #12]
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7f9 fe63 	bl	800c690 <lwip_htons>
 80129ca:	4603      	mov	r3, r0
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	f003 0303 	and.w	r3, r3, #3
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d001      	beq.n	80129da <tcp_output+0x2de>
 80129d6:	2301      	movs	r3, #1
 80129d8:	e000      	b.n	80129dc <tcp_output+0x2e0>
 80129da:	2300      	movs	r3, #0
 80129dc:	4423      	add	r3, r4
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d049      	beq.n	8012a76 <tcp_output+0x37a>
      seg->next = NULL;
 80129e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129e4:	2200      	movs	r2, #0
 80129e6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d105      	bne.n	80129fc <tcp_output+0x300>
        pcb->unacked = seg;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129f4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80129f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129f8:	623b      	str	r3, [r7, #32]
 80129fa:	e03f      	b.n	8012a7c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80129fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129fe:	68db      	ldr	r3, [r3, #12]
 8012a00:	685b      	ldr	r3, [r3, #4]
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7f9 fe5a 	bl	800c6bc <lwip_htonl>
 8012a08:	4604      	mov	r4, r0
 8012a0a:	6a3b      	ldr	r3, [r7, #32]
 8012a0c:	68db      	ldr	r3, [r3, #12]
 8012a0e:	685b      	ldr	r3, [r3, #4]
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7f9 fe53 	bl	800c6bc <lwip_htonl>
 8012a16:	4603      	mov	r3, r0
 8012a18:	1ae3      	subs	r3, r4, r3
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	da24      	bge.n	8012a68 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	3370      	adds	r3, #112	@ 0x70
 8012a22:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012a24:	e002      	b.n	8012a2c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012a2c:	69fb      	ldr	r3, [r7, #28]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d011      	beq.n	8012a58 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	68db      	ldr	r3, [r3, #12]
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7f9 fe3d 	bl	800c6bc <lwip_htonl>
 8012a42:	4604      	mov	r4, r0
 8012a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a46:	68db      	ldr	r3, [r3, #12]
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7f9 fe36 	bl	800c6bc <lwip_htonl>
 8012a50:	4603      	mov	r3, r0
 8012a52:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	dbe6      	blt.n	8012a26 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012a58:	69fb      	ldr	r3, [r7, #28]
 8012a5a:	681a      	ldr	r2, [r3, #0]
 8012a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a5e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012a60:	69fb      	ldr	r3, [r7, #28]
 8012a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a64:	601a      	str	r2, [r3, #0]
 8012a66:	e009      	b.n	8012a7c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012a68:	6a3b      	ldr	r3, [r7, #32]
 8012a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a6c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012a6e:	6a3b      	ldr	r3, [r7, #32]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	623b      	str	r3, [r7, #32]
 8012a74:	e002      	b.n	8012a7c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012a76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012a78:	f7fc fc41 	bl	800f2fe <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a80:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d012      	beq.n	8012aae <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a8a:	68db      	ldr	r3, [r3, #12]
 8012a8c:	685b      	ldr	r3, [r3, #4]
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7f9 fe14 	bl	800c6bc <lwip_htonl>
 8012a94:	4602      	mov	r2, r0
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a9a:	1ad3      	subs	r3, r2, r3
 8012a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a9e:	8912      	ldrh	r2, [r2, #8]
 8012aa0:	4413      	add	r3, r2
  while (seg != NULL &&
 8012aa2:	69ba      	ldr	r2, [r7, #24]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	f4bf aed9 	bcs.w	801285c <tcp_output+0x160>
 8012aaa:	e000      	b.n	8012aae <tcp_output+0x3b2>
      break;
 8012aac:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d108      	bne.n	8012ac8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012abe:	e004      	b.n	8012aca <tcp_output+0x3ce>
    goto output_done;
 8012ac0:	bf00      	nop
 8012ac2:	e002      	b.n	8012aca <tcp_output+0x3ce>
    goto output_done;
 8012ac4:	bf00      	nop
 8012ac6:	e000      	b.n	8012aca <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012ac8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	8b5b      	ldrh	r3, [r3, #26]
 8012ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012ad2:	b29a      	uxth	r2, r3
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012ad8:	2300      	movs	r3, #0
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3728      	adds	r7, #40	@ 0x28
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8012ae2:	bf00      	nop

08012ae4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b082      	sub	sp, #8
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d106      	bne.n	8012b00 <tcp_output_segment_busy+0x1c>
 8012af2:	4b09      	ldr	r3, [pc, #36]	@ (8012b18 <tcp_output_segment_busy+0x34>)
 8012af4:	f240 529e 	movw	r2, #1438	@ 0x59e
 8012af8:	4908      	ldr	r1, [pc, #32]	@ (8012b1c <tcp_output_segment_busy+0x38>)
 8012afa:	4809      	ldr	r0, [pc, #36]	@ (8012b20 <tcp_output_segment_busy+0x3c>)
 8012afc:	f006 f912 	bl	8018d24 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	7b9b      	ldrb	r3, [r3, #14]
 8012b06:	2b01      	cmp	r3, #1
 8012b08:	d001      	beq.n	8012b0e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	e000      	b.n	8012b10 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012b0e:	2300      	movs	r3, #0
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	3708      	adds	r7, #8
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	0801c04c 	.word	0x0801c04c
 8012b1c:	0801c580 	.word	0x0801c580
 8012b20:	0801c084 	.word	0x0801c084

08012b24 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012b24:	b5b0      	push	{r4, r5, r7, lr}
 8012b26:	b08c      	sub	sp, #48	@ 0x30
 8012b28:	af04      	add	r7, sp, #16
 8012b2a:	60f8      	str	r0, [r7, #12]
 8012b2c:	60b9      	str	r1, [r7, #8]
 8012b2e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d106      	bne.n	8012b44 <tcp_output_segment+0x20>
 8012b36:	4b64      	ldr	r3, [pc, #400]	@ (8012cc8 <tcp_output_segment+0x1a4>)
 8012b38:	f240 52bc 	movw	r2, #1468	@ 0x5bc
 8012b3c:	4963      	ldr	r1, [pc, #396]	@ (8012ccc <tcp_output_segment+0x1a8>)
 8012b3e:	4864      	ldr	r0, [pc, #400]	@ (8012cd0 <tcp_output_segment+0x1ac>)
 8012b40:	f006 f8f0 	bl	8018d24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d106      	bne.n	8012b58 <tcp_output_segment+0x34>
 8012b4a:	4b5f      	ldr	r3, [pc, #380]	@ (8012cc8 <tcp_output_segment+0x1a4>)
 8012b4c:	f240 52bd 	movw	r2, #1469	@ 0x5bd
 8012b50:	4960      	ldr	r1, [pc, #384]	@ (8012cd4 <tcp_output_segment+0x1b0>)
 8012b52:	485f      	ldr	r0, [pc, #380]	@ (8012cd0 <tcp_output_segment+0x1ac>)
 8012b54:	f006 f8e6 	bl	8018d24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d106      	bne.n	8012b6c <tcp_output_segment+0x48>
 8012b5e:	4b5a      	ldr	r3, [pc, #360]	@ (8012cc8 <tcp_output_segment+0x1a4>)
 8012b60:	f240 52be 	movw	r2, #1470	@ 0x5be
 8012b64:	495c      	ldr	r1, [pc, #368]	@ (8012cd8 <tcp_output_segment+0x1b4>)
 8012b66:	485a      	ldr	r0, [pc, #360]	@ (8012cd0 <tcp_output_segment+0x1ac>)
 8012b68:	f006 f8dc 	bl	8018d24 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012b6c:	68f8      	ldr	r0, [r7, #12]
 8012b6e:	f7ff ffb9 	bl	8012ae4 <tcp_output_segment_busy>
 8012b72:	4603      	mov	r3, r0
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d001      	beq.n	8012b7c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	e0a1      	b.n	8012cc0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	68dc      	ldr	r4, [r3, #12]
 8012b84:	4610      	mov	r0, r2
 8012b86:	f7f9 fd99 	bl	800c6bc <lwip_htonl>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	68dc      	ldr	r4, [r3, #12]
 8012b96:	4610      	mov	r0, r2
 8012b98:	f7f9 fd7a 	bl	800c690 <lwip_htons>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ba4:	68ba      	ldr	r2, [r7, #8]
 8012ba6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012ba8:	441a      	add	r2, r3
 8012baa:	68bb      	ldr	r3, [r7, #8]
 8012bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	68db      	ldr	r3, [r3, #12]
 8012bb2:	3314      	adds	r3, #20
 8012bb4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	7a9b      	ldrb	r3, [r3, #10]
 8012bba:	f003 0301 	and.w	r3, r3, #1
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d015      	beq.n	8012bee <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	3304      	adds	r3, #4
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	6879      	ldr	r1, [r7, #4]
 8012bca:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8012bce:	f7fc fe71 	bl	800f8b4 <tcp_eff_send_mss_netif>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012bd6:	8b7b      	ldrh	r3, [r7, #26]
 8012bd8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f7f9 fd6d 	bl	800c6bc <lwip_htonl>
 8012be2:	4602      	mov	r2, r0
 8012be4:	69fb      	ldr	r3, [r7, #28]
 8012be6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012be8:	69fb      	ldr	r3, [r7, #28]
 8012bea:	3304      	adds	r3, #4
 8012bec:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	da02      	bge.n	8012bfe <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d10c      	bne.n	8012c20 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012c06:	4b35      	ldr	r3, [pc, #212]	@ (8012cdc <tcp_output_segment+0x1b8>)
 8012c08:	681a      	ldr	r2, [r3, #0]
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	685b      	ldr	r3, [r3, #4]
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7f9 fd51 	bl	800c6bc <lwip_htonl>
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	68da      	ldr	r2, [r3, #12]
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	685b      	ldr	r3, [r3, #4]
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	1ad3      	subs	r3, r2, r3
 8012c2c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	685b      	ldr	r3, [r3, #4]
 8012c32:	8959      	ldrh	r1, [r3, #10]
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	8b3a      	ldrh	r2, [r7, #24]
 8012c3a:	1a8a      	subs	r2, r1, r2
 8012c3c:	b292      	uxth	r2, r2
 8012c3e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	685b      	ldr	r3, [r3, #4]
 8012c44:	8919      	ldrh	r1, [r3, #8]
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	685b      	ldr	r3, [r3, #4]
 8012c4a:	8b3a      	ldrh	r2, [r7, #24]
 8012c4c:	1a8a      	subs	r2, r1, r2
 8012c4e:	b292      	uxth	r2, r2
 8012c50:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	685b      	ldr	r3, [r3, #4]
 8012c56:	68fa      	ldr	r2, [r7, #12]
 8012c58:	68d2      	ldr	r2, [r2, #12]
 8012c5a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	68db      	ldr	r3, [r3, #12]
 8012c60:	2200      	movs	r2, #0
 8012c62:	741a      	strb	r2, [r3, #16]
 8012c64:	2200      	movs	r2, #0
 8012c66:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	68da      	ldr	r2, [r3, #12]
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	7a9b      	ldrb	r3, [r3, #10]
 8012c70:	f003 0301 	and.w	r3, r3, #1
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d001      	beq.n	8012c7c <tcp_output_segment+0x158>
 8012c78:	2318      	movs	r3, #24
 8012c7a:	e000      	b.n	8012c7e <tcp_output_segment+0x15a>
 8012c7c:	2314      	movs	r3, #20
 8012c7e:	4413      	add	r3, r2
 8012c80:	69fa      	ldr	r2, [r7, #28]
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d006      	beq.n	8012c94 <tcp_output_segment+0x170>
 8012c86:	4b10      	ldr	r3, [pc, #64]	@ (8012cc8 <tcp_output_segment+0x1a4>)
 8012c88:	f44f 62c4 	mov.w	r2, #1568	@ 0x620
 8012c8c:	4914      	ldr	r1, [pc, #80]	@ (8012ce0 <tcp_output_segment+0x1bc>)
 8012c8e:	4810      	ldr	r0, [pc, #64]	@ (8012cd0 <tcp_output_segment+0x1ac>)
 8012c90:	f006 f848 	bl	8018d24 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	6858      	ldr	r0, [r3, #4]
 8012c98:	68b9      	ldr	r1, [r7, #8]
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	1d1c      	adds	r4, r3, #4
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	7add      	ldrb	r5, [r3, #11]
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	7a9b      	ldrb	r3, [r3, #10]
 8012ca6:	687a      	ldr	r2, [r7, #4]
 8012ca8:	9202      	str	r2, [sp, #8]
 8012caa:	2206      	movs	r2, #6
 8012cac:	9201      	str	r2, [sp, #4]
 8012cae:	9300      	str	r3, [sp, #0]
 8012cb0:	462b      	mov	r3, r5
 8012cb2:	4622      	mov	r2, r4
 8012cb4:	f004 fe82 	bl	80179bc <ip4_output_if>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	3720      	adds	r7, #32
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8012cc8:	0801c04c 	.word	0x0801c04c
 8012ccc:	0801c5a8 	.word	0x0801c5a8
 8012cd0:	0801c084 	.word	0x0801c084
 8012cd4:	0801c5c8 	.word	0x0801c5c8
 8012cd8:	0801c5e8 	.word	0x0801c5e8
 8012cdc:	2000a304 	.word	0x2000a304
 8012ce0:	0801c60c 	.word	0x0801c60c

08012ce4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012ce4:	b5b0      	push	{r4, r5, r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d106      	bne.n	8012d00 <tcp_rexmit_rto_prepare+0x1c>
 8012cf2:	4b31      	ldr	r3, [pc, #196]	@ (8012db8 <tcp_rexmit_rto_prepare+0xd4>)
 8012cf4:	f240 6267 	movw	r2, #1639	@ 0x667
 8012cf8:	4930      	ldr	r1, [pc, #192]	@ (8012dbc <tcp_rexmit_rto_prepare+0xd8>)
 8012cfa:	4831      	ldr	r0, [pc, #196]	@ (8012dc0 <tcp_rexmit_rto_prepare+0xdc>)
 8012cfc:	f006 f812 	bl	8018d24 <iprintf>

  if (pcb->unacked == NULL) {
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d102      	bne.n	8012d0e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012d08:	f06f 0305 	mvn.w	r3, #5
 8012d0c:	e050      	b.n	8012db0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d12:	60fb      	str	r3, [r7, #12]
 8012d14:	e00b      	b.n	8012d2e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012d16:	68f8      	ldr	r0, [r7, #12]
 8012d18:	f7ff fee4 	bl	8012ae4 <tcp_output_segment_busy>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d002      	beq.n	8012d28 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012d22:	f06f 0305 	mvn.w	r3, #5
 8012d26:	e043      	b.n	8012db0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	60fb      	str	r3, [r7, #12]
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d1ef      	bne.n	8012d16 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012d36:	68f8      	ldr	r0, [r7, #12]
 8012d38:	f7ff fed4 	bl	8012ae4 <tcp_output_segment_busy>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d002      	beq.n	8012d48 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012d42:	f06f 0305 	mvn.w	r3, #5
 8012d46:	e033      	b.n	8012db0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	8b5b      	ldrh	r3, [r3, #26]
 8012d62:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012d66:	b29a      	uxth	r2, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7f9 fca2 	bl	800c6bc <lwip_htonl>
 8012d78:	4604      	mov	r4, r0
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	891b      	ldrh	r3, [r3, #8]
 8012d7e:	461d      	mov	r5, r3
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	68db      	ldr	r3, [r3, #12]
 8012d84:	899b      	ldrh	r3, [r3, #12]
 8012d86:	b29b      	uxth	r3, r3
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f7f9 fc81 	bl	800c690 <lwip_htons>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	b2db      	uxtb	r3, r3
 8012d92:	f003 0303 	and.w	r3, r3, #3
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d001      	beq.n	8012d9e <tcp_rexmit_rto_prepare+0xba>
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	e000      	b.n	8012da0 <tcp_rexmit_rto_prepare+0xbc>
 8012d9e:	2300      	movs	r3, #0
 8012da0:	442b      	add	r3, r5
 8012da2:	18e2      	adds	r2, r4, r3
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2200      	movs	r2, #0
 8012dac:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012dae:	2300      	movs	r3, #0
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3710      	adds	r7, #16
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bdb0      	pop	{r4, r5, r7, pc}
 8012db8:	0801c04c 	.word	0x0801c04c
 8012dbc:	0801c620 	.word	0x0801c620
 8012dc0:	0801c084 	.word	0x0801c084

08012dc4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d106      	bne.n	8012de0 <tcp_rexmit_rto_commit+0x1c>
 8012dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8012e08 <tcp_rexmit_rto_commit+0x44>)
 8012dd4:	f240 629c 	movw	r2, #1692	@ 0x69c
 8012dd8:	490c      	ldr	r1, [pc, #48]	@ (8012e0c <tcp_rexmit_rto_commit+0x48>)
 8012dda:	480d      	ldr	r0, [pc, #52]	@ (8012e10 <tcp_rexmit_rto_commit+0x4c>)
 8012ddc:	f005 ffa2 	bl	8018d24 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012de6:	2bff      	cmp	r3, #255	@ 0xff
 8012de8:	d007      	beq.n	8012dfa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012df0:	3301      	adds	r3, #1
 8012df2:	b2da      	uxtb	r2, r3
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f7ff fc7e 	bl	80126fc <tcp_output>
}
 8012e00:	bf00      	nop
 8012e02:	3708      	adds	r7, #8
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}
 8012e08:	0801c04c 	.word	0x0801c04c
 8012e0c:	0801c644 	.word	0x0801c644
 8012e10:	0801c084 	.word	0x0801c084

08012e14 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b082      	sub	sp, #8
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d106      	bne.n	8012e30 <tcp_rexmit_rto+0x1c>
 8012e22:	4b0a      	ldr	r3, [pc, #40]	@ (8012e4c <tcp_rexmit_rto+0x38>)
 8012e24:	f240 62b1 	movw	r2, #1713	@ 0x6b1
 8012e28:	4909      	ldr	r1, [pc, #36]	@ (8012e50 <tcp_rexmit_rto+0x3c>)
 8012e2a:	480a      	ldr	r0, [pc, #40]	@ (8012e54 <tcp_rexmit_rto+0x40>)
 8012e2c:	f005 ff7a 	bl	8018d24 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f7ff ff57 	bl	8012ce4 <tcp_rexmit_rto_prepare>
 8012e36:	4603      	mov	r3, r0
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d102      	bne.n	8012e42 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f7ff ffc1 	bl	8012dc4 <tcp_rexmit_rto_commit>
  }
}
 8012e42:	bf00      	nop
 8012e44:	3708      	adds	r7, #8
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}
 8012e4a:	bf00      	nop
 8012e4c:	0801c04c 	.word	0x0801c04c
 8012e50:	0801c668 	.word	0x0801c668
 8012e54:	0801c084 	.word	0x0801c084

08012e58 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012e58:	b590      	push	{r4, r7, lr}
 8012e5a:	b085      	sub	sp, #20
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d106      	bne.n	8012e74 <tcp_rexmit+0x1c>
 8012e66:	4b2f      	ldr	r3, [pc, #188]	@ (8012f24 <tcp_rexmit+0xcc>)
 8012e68:	f240 62c5 	movw	r2, #1733	@ 0x6c5
 8012e6c:	492e      	ldr	r1, [pc, #184]	@ (8012f28 <tcp_rexmit+0xd0>)
 8012e6e:	482f      	ldr	r0, [pc, #188]	@ (8012f2c <tcp_rexmit+0xd4>)
 8012e70:	f005 ff58 	bl	8018d24 <iprintf>

  if (pcb->unacked == NULL) {
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d102      	bne.n	8012e82 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012e7c:	f06f 0305 	mvn.w	r3, #5
 8012e80:	e04c      	b.n	8012f1c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e86:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012e88:	68b8      	ldr	r0, [r7, #8]
 8012e8a:	f7ff fe2b 	bl	8012ae4 <tcp_output_segment_busy>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d002      	beq.n	8012e9a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012e94:	f06f 0305 	mvn.w	r3, #5
 8012e98:	e040      	b.n	8012f1c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	681a      	ldr	r2, [r3, #0]
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	336c      	adds	r3, #108	@ 0x6c
 8012ea6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012ea8:	e002      	b.n	8012eb0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d011      	beq.n	8012edc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	68db      	ldr	r3, [r3, #12]
 8012ebe:	685b      	ldr	r3, [r3, #4]
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7f9 fbfb 	bl	800c6bc <lwip_htonl>
 8012ec6:	4604      	mov	r4, r0
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	68db      	ldr	r3, [r3, #12]
 8012ecc:	685b      	ldr	r3, [r3, #4]
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7f9 fbf4 	bl	800c6bc <lwip_htonl>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	dbe6      	blt.n	8012eaa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	681a      	ldr	r2, [r3, #0]
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	68ba      	ldr	r2, [r7, #8]
 8012ee8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d103      	bne.n	8012efa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012f00:	2bff      	cmp	r3, #255	@ 0xff
 8012f02:	d007      	beq.n	8012f14 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012f0a:	3301      	adds	r3, #1
 8012f0c:	b2da      	uxtb	r2, r3
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2200      	movs	r2, #0
 8012f18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012f1a:	2300      	movs	r3, #0
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3714      	adds	r7, #20
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd90      	pop	{r4, r7, pc}
 8012f24:	0801c04c 	.word	0x0801c04c
 8012f28:	0801c684 	.word	0x0801c684
 8012f2c:	0801c084 	.word	0x0801c084

08012f30 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b082      	sub	sp, #8
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d106      	bne.n	8012f4c <tcp_rexmit_fast+0x1c>
 8012f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8012fe8 <tcp_rexmit_fast+0xb8>)
 8012f40:	f240 62fd 	movw	r2, #1789	@ 0x6fd
 8012f44:	4929      	ldr	r1, [pc, #164]	@ (8012fec <tcp_rexmit_fast+0xbc>)
 8012f46:	482a      	ldr	r0, [pc, #168]	@ (8012ff0 <tcp_rexmit_fast+0xc0>)
 8012f48:	f005 feec 	bl	8018d24 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d044      	beq.n	8012fde <tcp_rexmit_fast+0xae>
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	8b5b      	ldrh	r3, [r3, #26]
 8012f58:	f003 0304 	and.w	r3, r3, #4
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d13e      	bne.n	8012fde <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f7ff ff79 	bl	8012e58 <tcp_rexmit>
 8012f66:	4603      	mov	r3, r0
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d138      	bne.n	8012fde <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012f78:	4293      	cmp	r3, r2
 8012f7a:	bf28      	it	cs
 8012f7c:	4613      	movcs	r3, r2
 8012f7e:	b29b      	uxth	r3, r3
 8012f80:	0fda      	lsrs	r2, r3, #31
 8012f82:	4413      	add	r3, r2
 8012f84:	105b      	asrs	r3, r3, #1
 8012f86:	b29a      	uxth	r2, r3
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012f94:	461a      	mov	r2, r3
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f9a:	005b      	lsls	r3, r3, #1
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d206      	bcs.n	8012fae <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012fa4:	005b      	lsls	r3, r3, #1
 8012fa6:	b29a      	uxth	r2, r3
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012fb8:	4619      	mov	r1, r3
 8012fba:	0049      	lsls	r1, r1, #1
 8012fbc:	440b      	add	r3, r1
 8012fbe:	b29b      	uxth	r3, r3
 8012fc0:	4413      	add	r3, r2
 8012fc2:	b29a      	uxth	r2, r3
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	8b5b      	ldrh	r3, [r3, #26]
 8012fce:	f043 0304 	orr.w	r3, r3, #4
 8012fd2:	b29a      	uxth	r2, r3
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012fde:	bf00      	nop
 8012fe0:	3708      	adds	r7, #8
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	0801c04c 	.word	0x0801c04c
 8012fec:	0801c69c 	.word	0x0801c69c
 8012ff0:	0801c084 	.word	0x0801c084

08012ff4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b086      	sub	sp, #24
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	607b      	str	r3, [r7, #4]
 8012ffe:	460b      	mov	r3, r1
 8013000:	817b      	strh	r3, [r7, #10]
 8013002:	4613      	mov	r3, r2
 8013004:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013006:	897a      	ldrh	r2, [r7, #10]
 8013008:	893b      	ldrh	r3, [r7, #8]
 801300a:	4413      	add	r3, r2
 801300c:	b29b      	uxth	r3, r3
 801300e:	3314      	adds	r3, #20
 8013010:	b29b      	uxth	r3, r3
 8013012:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013016:	4619      	mov	r1, r3
 8013018:	2022      	movs	r0, #34	@ 0x22
 801301a:	f7fa fbbf 	bl	800d79c <pbuf_alloc>
 801301e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d04d      	beq.n	80130c2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013026:	897b      	ldrh	r3, [r7, #10]
 8013028:	3313      	adds	r3, #19
 801302a:	697a      	ldr	r2, [r7, #20]
 801302c:	8952      	ldrh	r2, [r2, #10]
 801302e:	4293      	cmp	r3, r2
 8013030:	db06      	blt.n	8013040 <tcp_output_alloc_header_common+0x4c>
 8013032:	4b26      	ldr	r3, [pc, #152]	@ (80130cc <tcp_output_alloc_header_common+0xd8>)
 8013034:	f240 7227 	movw	r2, #1831	@ 0x727
 8013038:	4925      	ldr	r1, [pc, #148]	@ (80130d0 <tcp_output_alloc_header_common+0xdc>)
 801303a:	4826      	ldr	r0, [pc, #152]	@ (80130d4 <tcp_output_alloc_header_common+0xe0>)
 801303c:	f005 fe72 	bl	8018d24 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	685b      	ldr	r3, [r3, #4]
 8013044:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013046:	8c3b      	ldrh	r3, [r7, #32]
 8013048:	4618      	mov	r0, r3
 801304a:	f7f9 fb21 	bl	800c690 <lwip_htons>
 801304e:	4603      	mov	r3, r0
 8013050:	461a      	mov	r2, r3
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013056:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013058:	4618      	mov	r0, r3
 801305a:	f7f9 fb19 	bl	800c690 <lwip_htons>
 801305e:	4603      	mov	r3, r0
 8013060:	461a      	mov	r2, r3
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013066:	693b      	ldr	r3, [r7, #16]
 8013068:	687a      	ldr	r2, [r7, #4]
 801306a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801306c:	68f8      	ldr	r0, [r7, #12]
 801306e:	f7f9 fb25 	bl	800c6bc <lwip_htonl>
 8013072:	4602      	mov	r2, r0
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013078:	897b      	ldrh	r3, [r7, #10]
 801307a:	089b      	lsrs	r3, r3, #2
 801307c:	b29b      	uxth	r3, r3
 801307e:	3305      	adds	r3, #5
 8013080:	b29b      	uxth	r3, r3
 8013082:	031b      	lsls	r3, r3, #12
 8013084:	b29a      	uxth	r2, r3
 8013086:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801308a:	b29b      	uxth	r3, r3
 801308c:	4313      	orrs	r3, r2
 801308e:	b29b      	uxth	r3, r3
 8013090:	4618      	mov	r0, r3
 8013092:	f7f9 fafd 	bl	800c690 <lwip_htons>
 8013096:	4603      	mov	r3, r0
 8013098:	461a      	mov	r2, r3
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801309e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80130a0:	4618      	mov	r0, r3
 80130a2:	f7f9 faf5 	bl	800c690 <lwip_htons>
 80130a6:	4603      	mov	r3, r0
 80130a8:	461a      	mov	r2, r3
 80130aa:	693b      	ldr	r3, [r7, #16]
 80130ac:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80130ae:	693b      	ldr	r3, [r7, #16]
 80130b0:	2200      	movs	r2, #0
 80130b2:	741a      	strb	r2, [r3, #16]
 80130b4:	2200      	movs	r2, #0
 80130b6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80130b8:	693b      	ldr	r3, [r7, #16]
 80130ba:	2200      	movs	r2, #0
 80130bc:	749a      	strb	r2, [r3, #18]
 80130be:	2200      	movs	r2, #0
 80130c0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80130c2:	697b      	ldr	r3, [r7, #20]
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3718      	adds	r7, #24
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}
 80130cc:	0801c04c 	.word	0x0801c04c
 80130d0:	0801c6bc 	.word	0x0801c6bc
 80130d4:	0801c084 	.word	0x0801c084

080130d8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80130d8:	b5b0      	push	{r4, r5, r7, lr}
 80130da:	b08a      	sub	sp, #40	@ 0x28
 80130dc:	af04      	add	r7, sp, #16
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	607b      	str	r3, [r7, #4]
 80130e2:	460b      	mov	r3, r1
 80130e4:	817b      	strh	r3, [r7, #10]
 80130e6:	4613      	mov	r3, r2
 80130e8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d106      	bne.n	80130fe <tcp_output_alloc_header+0x26>
 80130f0:	4b15      	ldr	r3, [pc, #84]	@ (8013148 <tcp_output_alloc_header+0x70>)
 80130f2:	f240 7246 	movw	r2, #1862	@ 0x746
 80130f6:	4915      	ldr	r1, [pc, #84]	@ (801314c <tcp_output_alloc_header+0x74>)
 80130f8:	4815      	ldr	r0, [pc, #84]	@ (8013150 <tcp_output_alloc_header+0x78>)
 80130fa:	f005 fe13 	bl	8018d24 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	8adb      	ldrh	r3, [r3, #22]
 8013106:	68fa      	ldr	r2, [r7, #12]
 8013108:	8b12      	ldrh	r2, [r2, #24]
 801310a:	68f9      	ldr	r1, [r7, #12]
 801310c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801310e:	893d      	ldrh	r5, [r7, #8]
 8013110:	897c      	ldrh	r4, [r7, #10]
 8013112:	9103      	str	r1, [sp, #12]
 8013114:	2110      	movs	r1, #16
 8013116:	9102      	str	r1, [sp, #8]
 8013118:	9201      	str	r2, [sp, #4]
 801311a:	9300      	str	r3, [sp, #0]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	462a      	mov	r2, r5
 8013120:	4621      	mov	r1, r4
 8013122:	f7ff ff67 	bl	8012ff4 <tcp_output_alloc_header_common>
 8013126:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d006      	beq.n	801313c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013132:	68fa      	ldr	r2, [r7, #12]
 8013134:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013136:	441a      	add	r2, r3
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801313c:	697b      	ldr	r3, [r7, #20]
}
 801313e:	4618      	mov	r0, r3
 8013140:	3718      	adds	r7, #24
 8013142:	46bd      	mov	sp, r7
 8013144:	bdb0      	pop	{r4, r5, r7, pc}
 8013146:	bf00      	nop
 8013148:	0801c04c 	.word	0x0801c04c
 801314c:	0801c6ec 	.word	0x0801c6ec
 8013150:	0801c084 	.word	0x0801c084

08013154 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b088      	sub	sp, #32
 8013158:	af00      	add	r7, sp, #0
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	60b9      	str	r1, [r7, #8]
 801315e:	4611      	mov	r1, r2
 8013160:	461a      	mov	r2, r3
 8013162:	460b      	mov	r3, r1
 8013164:	71fb      	strb	r3, [r7, #7]
 8013166:	4613      	mov	r3, r2
 8013168:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801316a:	2300      	movs	r3, #0
 801316c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d106      	bne.n	8013182 <tcp_output_fill_options+0x2e>
 8013174:	4b12      	ldr	r3, [pc, #72]	@ (80131c0 <tcp_output_fill_options+0x6c>)
 8013176:	f240 725a 	movw	r2, #1882	@ 0x75a
 801317a:	4912      	ldr	r1, [pc, #72]	@ (80131c4 <tcp_output_fill_options+0x70>)
 801317c:	4812      	ldr	r0, [pc, #72]	@ (80131c8 <tcp_output_fill_options+0x74>)
 801317e:	f005 fdd1 	bl	8018d24 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013182:	68bb      	ldr	r3, [r7, #8]
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013188:	69bb      	ldr	r3, [r7, #24]
 801318a:	3314      	adds	r3, #20
 801318c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801318e:	8bfb      	ldrh	r3, [r7, #30]
 8013190:	009b      	lsls	r3, r3, #2
 8013192:	461a      	mov	r2, r3
 8013194:	79fb      	ldrb	r3, [r7, #7]
 8013196:	009b      	lsls	r3, r3, #2
 8013198:	f003 0304 	and.w	r3, r3, #4
 801319c:	4413      	add	r3, r2
 801319e:	3314      	adds	r3, #20
 80131a0:	69ba      	ldr	r2, [r7, #24]
 80131a2:	4413      	add	r3, r2
 80131a4:	697a      	ldr	r2, [r7, #20]
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d006      	beq.n	80131b8 <tcp_output_fill_options+0x64>
 80131aa:	4b05      	ldr	r3, [pc, #20]	@ (80131c0 <tcp_output_fill_options+0x6c>)
 80131ac:	f240 7279 	movw	r2, #1913	@ 0x779
 80131b0:	4906      	ldr	r1, [pc, #24]	@ (80131cc <tcp_output_fill_options+0x78>)
 80131b2:	4805      	ldr	r0, [pc, #20]	@ (80131c8 <tcp_output_fill_options+0x74>)
 80131b4:	f005 fdb6 	bl	8018d24 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80131b8:	bf00      	nop
 80131ba:	3720      	adds	r7, #32
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}
 80131c0:	0801c04c 	.word	0x0801c04c
 80131c4:	0801c714 	.word	0x0801c714
 80131c8:	0801c084 	.word	0x0801c084
 80131cc:	0801c60c 	.word	0x0801c60c

080131d0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b088      	sub	sp, #32
 80131d4:	af02      	add	r7, sp, #8
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	607a      	str	r2, [r7, #4]
 80131dc:	603b      	str	r3, [r7, #0]
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d106      	bne.n	80131f2 <tcp_output_control_segment+0x22>
 80131e4:	4b11      	ldr	r3, [pc, #68]	@ (801322c <tcp_output_control_segment+0x5c>)
 80131e6:	f240 728a 	movw	r2, #1930	@ 0x78a
 80131ea:	4911      	ldr	r1, [pc, #68]	@ (8013230 <tcp_output_control_segment+0x60>)
 80131ec:	4811      	ldr	r0, [pc, #68]	@ (8013234 <tcp_output_control_segment+0x64>)
 80131ee:	f005 fd99 	bl	8018d24 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80131f2:	683a      	ldr	r2, [r7, #0]
 80131f4:	6879      	ldr	r1, [r7, #4]
 80131f6:	68f8      	ldr	r0, [r7, #12]
 80131f8:	f7fe ff40 	bl	801207c <tcp_route>
 80131fc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d105      	bne.n	8013210 <tcp_output_control_segment+0x40>
    pbuf_free(p);
 8013204:	68b8      	ldr	r0, [r7, #8]
 8013206:	f7fa fdaf 	bl	800dd68 <pbuf_free>
    return ERR_RTE;
 801320a:	f06f 0303 	mvn.w	r3, #3
 801320e:	e008      	b.n	8013222 <tcp_output_control_segment+0x52>
  }
  return tcp_output_control_segment_netif(pcb, p, src, dst, netif);
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	9300      	str	r3, [sp, #0]
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	687a      	ldr	r2, [r7, #4]
 8013218:	68b9      	ldr	r1, [r7, #8]
 801321a:	68f8      	ldr	r0, [r7, #12]
 801321c:	f000 f80c 	bl	8013238 <tcp_output_control_segment_netif>
 8013220:	4603      	mov	r3, r0
}
 8013222:	4618      	mov	r0, r3
 8013224:	3718      	adds	r7, #24
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}
 801322a:	bf00      	nop
 801322c:	0801c04c 	.word	0x0801c04c
 8013230:	0801c73c 	.word	0x0801c73c
 8013234:	0801c084 	.word	0x0801c084

08013238 <tcp_output_control_segment_netif>:
 */
static err_t
tcp_output_control_segment_netif(const struct tcp_pcb *pcb, struct pbuf *p,
                                 const ip_addr_t *src, const ip_addr_t *dst,
                                 struct netif *netif)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b08a      	sub	sp, #40	@ 0x28
 801323c:	af04      	add	r7, sp, #16
 801323e:	60f8      	str	r0, [r7, #12]
 8013240:	60b9      	str	r1, [r7, #8]
 8013242:	607a      	str	r2, [r7, #4]
 8013244:	603b      	str	r3, [r7, #0]
  err_t err;
  u8_t ttl, tos;

  LWIP_ASSERT("tcp_output_control_segment_netif: no netif given", netif != NULL);
 8013246:	6a3b      	ldr	r3, [r7, #32]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d106      	bne.n	801325a <tcp_output_control_segment_netif+0x22>
 801324c:	4b16      	ldr	r3, [pc, #88]	@ (80132a8 <tcp_output_control_segment_netif+0x70>)
 801324e:	f240 72a1 	movw	r2, #1953	@ 0x7a1
 8013252:	4916      	ldr	r1, [pc, #88]	@ (80132ac <tcp_output_control_segment_netif+0x74>)
 8013254:	4816      	ldr	r0, [pc, #88]	@ (80132b0 <tcp_output_control_segment_netif+0x78>)
 8013256:	f005 fd65 	bl	8018d24 <iprintf>
    struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                      src, dst);
  }
#endif
  if (pcb != NULL) {
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d006      	beq.n	801326e <tcp_output_control_segment_netif+0x36>
    NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
    ttl = pcb->ttl;
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	7adb      	ldrb	r3, [r3, #11]
 8013264:	75fb      	strb	r3, [r7, #23]
    tos = pcb->tos;
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	7a9b      	ldrb	r3, [r3, #10]
 801326a:	75bb      	strb	r3, [r7, #22]
 801326c:	e003      	b.n	8013276 <tcp_output_control_segment_netif+0x3e>
  } else {
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ttl = TCP_TTL;
 801326e:	23ff      	movs	r3, #255	@ 0xff
 8013270:	75fb      	strb	r3, [r7, #23]
    tos = 0;
 8013272:	2300      	movs	r3, #0
 8013274:	75bb      	strb	r3, [r7, #22]
  }
  TCP_STATS_INC(tcp.xmit);
  err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013276:	7dfa      	ldrb	r2, [r7, #23]
 8013278:	6a3b      	ldr	r3, [r7, #32]
 801327a:	9302      	str	r3, [sp, #8]
 801327c:	2306      	movs	r3, #6
 801327e:	9301      	str	r3, [sp, #4]
 8013280:	7dbb      	ldrb	r3, [r7, #22]
 8013282:	9300      	str	r3, [sp, #0]
 8013284:	4613      	mov	r3, r2
 8013286:	683a      	ldr	r2, [r7, #0]
 8013288:	6879      	ldr	r1, [r7, #4]
 801328a:	68b8      	ldr	r0, [r7, #8]
 801328c:	f004 fb96 	bl	80179bc <ip4_output_if>
 8013290:	4603      	mov	r3, r0
 8013292:	757b      	strb	r3, [r7, #21]
  NETIF_RESET_HINTS(netif);

  pbuf_free(p);
 8013294:	68b8      	ldr	r0, [r7, #8]
 8013296:	f7fa fd67 	bl	800dd68 <pbuf_free>
  return err;
 801329a:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3718      	adds	r7, #24
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
 80132a6:	bf00      	nop
 80132a8:	0801c04c 	.word	0x0801c04c
 80132ac:	0801c768 	.word	0x0801c768
 80132b0:	0801c084 	.word	0x0801c084

080132b4 <tcp_rst_common>:

static struct pbuf *
tcp_rst_common(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
               const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
               u16_t local_port, u16_t remote_port)
{
 80132b4:	b590      	push	{r4, r7, lr}
 80132b6:	b08b      	sub	sp, #44	@ 0x2c
 80132b8:	af04      	add	r7, sp, #16
 80132ba:	60f8      	str	r0, [r7, #12]
 80132bc:	60b9      	str	r1, [r7, #8]
 80132be:	607a      	str	r2, [r7, #4]
 80132c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d106      	bne.n	80132d6 <tcp_rst_common+0x22>
 80132c8:	4b1d      	ldr	r3, [pc, #116]	@ (8013340 <tcp_rst_common+0x8c>)
 80132ca:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80132ce:	491d      	ldr	r1, [pc, #116]	@ (8013344 <tcp_rst_common+0x90>)
 80132d0:	481d      	ldr	r0, [pc, #116]	@ (8013348 <tcp_rst_common+0x94>)
 80132d2:	f005 fd27 	bl	8018d24 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80132d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d106      	bne.n	80132ea <tcp_rst_common+0x36>
 80132dc:	4b18      	ldr	r3, [pc, #96]	@ (8013340 <tcp_rst_common+0x8c>)
 80132de:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80132e2:	491a      	ldr	r1, [pc, #104]	@ (801334c <tcp_rst_common+0x98>)
 80132e4:	4818      	ldr	r0, [pc, #96]	@ (8013348 <tcp_rst_common+0x94>)
 80132e6:	f005 fd1d 	bl	8018d24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80132ea:	2300      	movs	r3, #0
 80132ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80132ee:	f24d 0316 	movw	r3, #53270	@ 0xd016
 80132f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80132f4:	7dfb      	ldrb	r3, [r7, #23]
 80132f6:	b29c      	uxth	r4, r3
 80132f8:	68b8      	ldr	r0, [r7, #8]
 80132fa:	f7f9 f9df 	bl	800c6bc <lwip_htonl>
 80132fe:	4602      	mov	r2, r0
 8013300:	8abb      	ldrh	r3, [r7, #20]
 8013302:	9303      	str	r3, [sp, #12]
 8013304:	2314      	movs	r3, #20
 8013306:	9302      	str	r3, [sp, #8]
 8013308:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801330a:	9301      	str	r3, [sp, #4]
 801330c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801330e:	9300      	str	r3, [sp, #0]
 8013310:	4613      	mov	r3, r2
 8013312:	2200      	movs	r2, #0
 8013314:	4621      	mov	r1, r4
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f7ff fe6c 	bl	8012ff4 <tcp_output_alloc_header_common>
 801331c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d101      	bne.n	8013328 <tcp_rst_common+0x74>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return NULL;
 8013324:	2300      	movs	r3, #0
 8013326:	e006      	b.n	8013336 <tcp_rst_common+0x82>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8013328:	2300      	movs	r3, #0
 801332a:	2200      	movs	r2, #0
 801332c:	6939      	ldr	r1, [r7, #16]
 801332e:	68f8      	ldr	r0, [r7, #12]
 8013330:	f7ff ff10 	bl	8013154 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
  return p;
 8013334:	693b      	ldr	r3, [r7, #16]
}
 8013336:	4618      	mov	r0, r3
 8013338:	371c      	adds	r7, #28
 801333a:	46bd      	mov	sp, r7
 801333c:	bd90      	pop	{r4, r7, pc}
 801333e:	bf00      	nop
 8013340:	0801c04c 	.word	0x0801c04c
 8013344:	0801c79c 	.word	0x0801c79c
 8013348:	0801c084 	.word	0x0801c084
 801334c:	0801c7b8 	.word	0x0801c7b8

08013350 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b08a      	sub	sp, #40	@ 0x28
 8013354:	af04      	add	r7, sp, #16
 8013356:	60f8      	str	r0, [r7, #12]
 8013358:	60b9      	str	r1, [r7, #8]
 801335a:	607a      	str	r2, [r7, #4]
 801335c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  
  p = tcp_rst_common(pcb, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 801335e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013360:	9302      	str	r3, [sp, #8]
 8013362:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013364:	9301      	str	r3, [sp, #4]
 8013366:	6a3b      	ldr	r3, [r7, #32]
 8013368:	9300      	str	r3, [sp, #0]
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	687a      	ldr	r2, [r7, #4]
 801336e:	68b9      	ldr	r1, [r7, #8]
 8013370:	68f8      	ldr	r0, [r7, #12]
 8013372:	f7ff ff9f 	bl	80132b4 <tcp_rst_common>
 8013376:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d005      	beq.n	801338a <tcp_rst+0x3a>
    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801337e:	6a3b      	ldr	r3, [r7, #32]
 8013380:	683a      	ldr	r2, [r7, #0]
 8013382:	6979      	ldr	r1, [r7, #20]
 8013384:	68f8      	ldr	r0, [r7, #12]
 8013386:	f7ff ff23 	bl	80131d0 <tcp_output_control_segment>
  }
}
 801338a:	bf00      	nop
 801338c:	3718      	adds	r7, #24
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}

08013392 <tcp_rst_netif>:
 */
void
tcp_rst_netif(struct netif *netif, u32_t seqno, u32_t ackno,
              const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
              u16_t local_port, u16_t remote_port)
{
 8013392:	b580      	push	{r7, lr}
 8013394:	b08a      	sub	sp, #40	@ 0x28
 8013396:	af04      	add	r7, sp, #16
 8013398:	60f8      	str	r0, [r7, #12]
 801339a:	60b9      	str	r1, [r7, #8]
 801339c:	607a      	str	r2, [r7, #4]
 801339e:	603b      	str	r3, [r7, #0]
  if (netif) {
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d017      	beq.n	80133d6 <tcp_rst_netif+0x44>
    struct pbuf *p = tcp_rst_common(NULL, seqno, ackno, local_ip, remote_ip, local_port, remote_port);
 80133a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80133a8:	9302      	str	r3, [sp, #8]
 80133aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133ac:	9301      	str	r3, [sp, #4]
 80133ae:	6a3b      	ldr	r3, [r7, #32]
 80133b0:	9300      	str	r3, [sp, #0]
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	687a      	ldr	r2, [r7, #4]
 80133b6:	68b9      	ldr	r1, [r7, #8]
 80133b8:	2000      	movs	r0, #0
 80133ba:	f7ff ff7b 	bl	80132b4 <tcp_rst_common>
 80133be:	6178      	str	r0, [r7, #20]
    if (p != NULL) {
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d007      	beq.n	80133d6 <tcp_rst_netif+0x44>
      tcp_output_control_segment_netif(NULL, p, local_ip, remote_ip, netif);
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	9300      	str	r3, [sp, #0]
 80133ca:	6a3b      	ldr	r3, [r7, #32]
 80133cc:	683a      	ldr	r2, [r7, #0]
 80133ce:	6979      	ldr	r1, [r7, #20]
 80133d0:	2000      	movs	r0, #0
 80133d2:	f7ff ff31 	bl	8013238 <tcp_output_control_segment_netif>
    }
  } else {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_rst_netif: no netif given\n"));
  }
}
 80133d6:	bf00      	nop
 80133d8:	3718      	adds	r7, #24
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}
	...

080133e0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80133e0:	b590      	push	{r4, r7, lr}
 80133e2:	b087      	sub	sp, #28
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80133e8:	2300      	movs	r3, #0
 80133ea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80133ec:	2300      	movs	r3, #0
 80133ee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d106      	bne.n	8013404 <tcp_send_empty_ack+0x24>
 80133f6:	4b28      	ldr	r3, [pc, #160]	@ (8013498 <tcp_send_empty_ack+0xb8>)
 80133f8:	f640 022d 	movw	r2, #2093	@ 0x82d
 80133fc:	4927      	ldr	r1, [pc, #156]	@ (801349c <tcp_send_empty_ack+0xbc>)
 80133fe:	4828      	ldr	r0, [pc, #160]	@ (80134a0 <tcp_send_empty_ack+0xc0>)
 8013400:	f005 fc90 	bl	8018d24 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013404:	7dfb      	ldrb	r3, [r7, #23]
 8013406:	009b      	lsls	r3, r3, #2
 8013408:	b2db      	uxtb	r3, r3
 801340a:	f003 0304 	and.w	r3, r3, #4
 801340e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013410:	7d7b      	ldrb	r3, [r7, #21]
 8013412:	b29c      	uxth	r4, r3
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013418:	4618      	mov	r0, r3
 801341a:	f7f9 f94f 	bl	800c6bc <lwip_htonl>
 801341e:	4603      	mov	r3, r0
 8013420:	2200      	movs	r2, #0
 8013422:	4621      	mov	r1, r4
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f7ff fe57 	bl	80130d8 <tcp_output_alloc_header>
 801342a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d109      	bne.n	8013446 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	8b5b      	ldrh	r3, [r3, #26]
 8013436:	f043 0303 	orr.w	r3, r3, #3
 801343a:	b29a      	uxth	r2, r3
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013440:	f06f 0301 	mvn.w	r3, #1
 8013444:	e023      	b.n	801348e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013446:	7dbb      	ldrb	r3, [r7, #22]
 8013448:	7dfa      	ldrb	r2, [r7, #23]
 801344a:	6939      	ldr	r1, [r7, #16]
 801344c:	6878      	ldr	r0, [r7, #4]
 801344e:	f7ff fe81 	bl	8013154 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013452:	687a      	ldr	r2, [r7, #4]
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	3304      	adds	r3, #4
 8013458:	6939      	ldr	r1, [r7, #16]
 801345a:	6878      	ldr	r0, [r7, #4]
 801345c:	f7ff feb8 	bl	80131d0 <tcp_output_control_segment>
 8013460:	4603      	mov	r3, r0
 8013462:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d007      	beq.n	801347c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	8b5b      	ldrh	r3, [r3, #26]
 8013470:	f043 0303 	orr.w	r3, r3, #3
 8013474:	b29a      	uxth	r2, r3
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	835a      	strh	r2, [r3, #26]
 801347a:	e006      	b.n	801348a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	8b5b      	ldrh	r3, [r3, #26]
 8013480:	f023 0303 	bic.w	r3, r3, #3
 8013484:	b29a      	uxth	r2, r3
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801348e:	4618      	mov	r0, r3
 8013490:	371c      	adds	r7, #28
 8013492:	46bd      	mov	sp, r7
 8013494:	bd90      	pop	{r4, r7, pc}
 8013496:	bf00      	nop
 8013498:	0801c04c 	.word	0x0801c04c
 801349c:	0801c7d4 	.word	0x0801c7d4
 80134a0:	0801c084 	.word	0x0801c084

080134a4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80134a4:	b590      	push	{r4, r7, lr}
 80134a6:	b087      	sub	sp, #28
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80134ac:	2300      	movs	r3, #0
 80134ae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d106      	bne.n	80134c4 <tcp_keepalive+0x20>
 80134b6:	4b18      	ldr	r3, [pc, #96]	@ (8013518 <tcp_keepalive+0x74>)
 80134b8:	f640 0267 	movw	r2, #2151	@ 0x867
 80134bc:	4917      	ldr	r1, [pc, #92]	@ (801351c <tcp_keepalive+0x78>)
 80134be:	4818      	ldr	r0, [pc, #96]	@ (8013520 <tcp_keepalive+0x7c>)
 80134c0:	f005 fc30 	bl	8018d24 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80134c4:	7dfb      	ldrb	r3, [r7, #23]
 80134c6:	b29c      	uxth	r4, r3
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80134cc:	3b01      	subs	r3, #1
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7f9 f8f4 	bl	800c6bc <lwip_htonl>
 80134d4:	4603      	mov	r3, r0
 80134d6:	2200      	movs	r2, #0
 80134d8:	4621      	mov	r1, r4
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	f7ff fdfc 	bl	80130d8 <tcp_output_alloc_header>
 80134e0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d102      	bne.n	80134ee <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80134e8:	f04f 33ff 	mov.w	r3, #4294967295
 80134ec:	e010      	b.n	8013510 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 80134ee:	2300      	movs	r3, #0
 80134f0:	2200      	movs	r2, #0
 80134f2:	6939      	ldr	r1, [r7, #16]
 80134f4:	6878      	ldr	r0, [r7, #4]
 80134f6:	f7ff fe2d 	bl	8013154 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80134fa:	687a      	ldr	r2, [r7, #4]
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	3304      	adds	r3, #4
 8013500:	6939      	ldr	r1, [r7, #16]
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f7ff fe64 	bl	80131d0 <tcp_output_control_segment>
 8013508:	4603      	mov	r3, r0
 801350a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801350c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013510:	4618      	mov	r0, r3
 8013512:	371c      	adds	r7, #28
 8013514:	46bd      	mov	sp, r7
 8013516:	bd90      	pop	{r4, r7, pc}
 8013518:	0801c04c 	.word	0x0801c04c
 801351c:	0801c7f4 	.word	0x0801c7f4
 8013520:	0801c084 	.word	0x0801c084

08013524 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013524:	b590      	push	{r4, r7, lr}
 8013526:	b08b      	sub	sp, #44	@ 0x2c
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801352c:	2300      	movs	r3, #0
 801352e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d106      	bne.n	8013546 <tcp_zero_window_probe+0x22>
 8013538:	4b4c      	ldr	r3, [pc, #304]	@ (801366c <tcp_zero_window_probe+0x148>)
 801353a:	f640 0292 	movw	r2, #2194	@ 0x892
 801353e:	494c      	ldr	r1, [pc, #304]	@ (8013670 <tcp_zero_window_probe+0x14c>)
 8013540:	484c      	ldr	r0, [pc, #304]	@ (8013674 <tcp_zero_window_probe+0x150>)
 8013542:	f005 fbef 	bl	8018d24 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801354a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801354c:	6a3b      	ldr	r3, [r7, #32]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d101      	bne.n	8013556 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013552:	2300      	movs	r3, #0
 8013554:	e085      	b.n	8013662 <tcp_zero_window_probe+0x13e>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801355c:	2bff      	cmp	r3, #255	@ 0xff
 801355e:	d007      	beq.n	8013570 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013566:	3301      	adds	r3, #1
 8013568:	b2da      	uxtb	r2, r3
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013570:	6a3b      	ldr	r3, [r7, #32]
 8013572:	68db      	ldr	r3, [r3, #12]
 8013574:	899b      	ldrh	r3, [r3, #12]
 8013576:	b29b      	uxth	r3, r3
 8013578:	4618      	mov	r0, r3
 801357a:	f7f9 f889 	bl	800c690 <lwip_htons>
 801357e:	4603      	mov	r3, r0
 8013580:	b2db      	uxtb	r3, r3
 8013582:	f003 0301 	and.w	r3, r3, #1
 8013586:	2b00      	cmp	r3, #0
 8013588:	d005      	beq.n	8013596 <tcp_zero_window_probe+0x72>
 801358a:	6a3b      	ldr	r3, [r7, #32]
 801358c:	891b      	ldrh	r3, [r3, #8]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d101      	bne.n	8013596 <tcp_zero_window_probe+0x72>
 8013592:	2301      	movs	r3, #1
 8013594:	e000      	b.n	8013598 <tcp_zero_window_probe+0x74>
 8013596:	2300      	movs	r3, #0
 8013598:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801359a:	7ffb      	ldrb	r3, [r7, #31]
 801359c:	2b00      	cmp	r3, #0
 801359e:	bf0c      	ite	eq
 80135a0:	2301      	moveq	r3, #1
 80135a2:	2300      	movne	r3, #0
 80135a4:	b2db      	uxtb	r3, r3
 80135a6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80135a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80135ac:	b299      	uxth	r1, r3
 80135ae:	6a3b      	ldr	r3, [r7, #32]
 80135b0:	68db      	ldr	r3, [r3, #12]
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	8bba      	ldrh	r2, [r7, #28]
 80135b6:	6878      	ldr	r0, [r7, #4]
 80135b8:	f7ff fd8e 	bl	80130d8 <tcp_output_alloc_header>
 80135bc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d102      	bne.n	80135ca <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80135c4:	f04f 33ff 	mov.w	r3, #4294967295
 80135c8:	e04b      	b.n	8013662 <tcp_zero_window_probe+0x13e>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80135ca:	69bb      	ldr	r3, [r7, #24]
 80135cc:	685b      	ldr	r3, [r3, #4]
 80135ce:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80135d0:	7ffb      	ldrb	r3, [r7, #31]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d011      	beq.n	80135fa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	899b      	ldrh	r3, [r3, #12]
 80135da:	b29b      	uxth	r3, r3
 80135dc:	b21b      	sxth	r3, r3
 80135de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80135e2:	b21c      	sxth	r4, r3
 80135e4:	2011      	movs	r0, #17
 80135e6:	f7f9 f853 	bl	800c690 <lwip_htons>
 80135ea:	4603      	mov	r3, r0
 80135ec:	b21b      	sxth	r3, r3
 80135ee:	4323      	orrs	r3, r4
 80135f0:	b21b      	sxth	r3, r3
 80135f2:	b29a      	uxth	r2, r3
 80135f4:	697b      	ldr	r3, [r7, #20]
 80135f6:	819a      	strh	r2, [r3, #12]
 80135f8:	e010      	b.n	801361c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	685b      	ldr	r3, [r3, #4]
 80135fe:	3314      	adds	r3, #20
 8013600:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013602:	6a3b      	ldr	r3, [r7, #32]
 8013604:	6858      	ldr	r0, [r3, #4]
 8013606:	6a3b      	ldr	r3, [r7, #32]
 8013608:	685b      	ldr	r3, [r3, #4]
 801360a:	891a      	ldrh	r2, [r3, #8]
 801360c:	6a3b      	ldr	r3, [r7, #32]
 801360e:	891b      	ldrh	r3, [r3, #8]
 8013610:	1ad3      	subs	r3, r2, r3
 8013612:	b29b      	uxth	r3, r3
 8013614:	2201      	movs	r2, #1
 8013616:	6939      	ldr	r1, [r7, #16]
 8013618:	f7fa fdb0 	bl	800e17c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801361c:	6a3b      	ldr	r3, [r7, #32]
 801361e:	68db      	ldr	r3, [r3, #12]
 8013620:	685b      	ldr	r3, [r3, #4]
 8013622:	4618      	mov	r0, r3
 8013624:	f7f9 f84a 	bl	800c6bc <lwip_htonl>
 8013628:	4603      	mov	r3, r0
 801362a:	3301      	adds	r3, #1
 801362c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	1ad3      	subs	r3, r2, r3
 8013636:	2b00      	cmp	r3, #0
 8013638:	da02      	bge.n	8013640 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	68fa      	ldr	r2, [r7, #12]
 801363e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, 0);
 8013640:	2300      	movs	r3, #0
 8013642:	2200      	movs	r2, #0
 8013644:	69b9      	ldr	r1, [r7, #24]
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f7ff fd84 	bl	8013154 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801364c:	687a      	ldr	r2, [r7, #4]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	3304      	adds	r3, #4
 8013652:	69b9      	ldr	r1, [r7, #24]
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f7ff fdbb 	bl	80131d0 <tcp_output_control_segment>
 801365a:	4603      	mov	r3, r0
 801365c:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801365e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013662:	4618      	mov	r0, r3
 8013664:	372c      	adds	r7, #44	@ 0x2c
 8013666:	46bd      	mov	sp, r7
 8013668:	bd90      	pop	{r4, r7, pc}
 801366a:	bf00      	nop
 801366c:	0801c04c 	.word	0x0801c04c
 8013670:	0801c810 	.word	0x0801c810
 8013674:	0801c084 	.word	0x0801c084

08013678 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b082      	sub	sp, #8
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013680:	f7fa fecc 	bl	800e41c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013684:	4b0a      	ldr	r3, [pc, #40]	@ (80136b0 <tcpip_tcp_timer+0x38>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d103      	bne.n	8013694 <tcpip_tcp_timer+0x1c>
 801368c:	4b09      	ldr	r3, [pc, #36]	@ (80136b4 <tcpip_tcp_timer+0x3c>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d005      	beq.n	80136a0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013694:	2200      	movs	r2, #0
 8013696:	4908      	ldr	r1, [pc, #32]	@ (80136b8 <tcpip_tcp_timer+0x40>)
 8013698:	20fa      	movs	r0, #250	@ 0xfa
 801369a:	f000 f8f3 	bl	8013884 <sys_timeout>
 801369e:	e003      	b.n	80136a8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80136a0:	4b06      	ldr	r3, [pc, #24]	@ (80136bc <tcpip_tcp_timer+0x44>)
 80136a2:	2200      	movs	r2, #0
 80136a4:	601a      	str	r2, [r3, #0]
  }
}
 80136a6:	bf00      	nop
 80136a8:	bf00      	nop
 80136aa:	3708      	adds	r7, #8
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}
 80136b0:	2000a310 	.word	0x2000a310
 80136b4:	2000a314 	.word	0x2000a314
 80136b8:	08013679 	.word	0x08013679
 80136bc:	2000a35c 	.word	0x2000a35c

080136c0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80136c4:	4b0a      	ldr	r3, [pc, #40]	@ (80136f0 <tcp_timer_needed+0x30>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d10f      	bne.n	80136ec <tcp_timer_needed+0x2c>
 80136cc:	4b09      	ldr	r3, [pc, #36]	@ (80136f4 <tcp_timer_needed+0x34>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d103      	bne.n	80136dc <tcp_timer_needed+0x1c>
 80136d4:	4b08      	ldr	r3, [pc, #32]	@ (80136f8 <tcp_timer_needed+0x38>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d007      	beq.n	80136ec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80136dc:	4b04      	ldr	r3, [pc, #16]	@ (80136f0 <tcp_timer_needed+0x30>)
 80136de:	2201      	movs	r2, #1
 80136e0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80136e2:	2200      	movs	r2, #0
 80136e4:	4905      	ldr	r1, [pc, #20]	@ (80136fc <tcp_timer_needed+0x3c>)
 80136e6:	20fa      	movs	r0, #250	@ 0xfa
 80136e8:	f000 f8cc 	bl	8013884 <sys_timeout>
  }
}
 80136ec:	bf00      	nop
 80136ee:	bd80      	pop	{r7, pc}
 80136f0:	2000a35c 	.word	0x2000a35c
 80136f4:	2000a310 	.word	0x2000a310
 80136f8:	2000a314 	.word	0x2000a314
 80136fc:	08013679 	.word	0x08013679

08013700 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b086      	sub	sp, #24
 8013704:	af00      	add	r7, sp, #0
 8013706:	60f8      	str	r0, [r7, #12]
 8013708:	60b9      	str	r1, [r7, #8]
 801370a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801370c:	2006      	movs	r0, #6
 801370e:	f7f9 fca3 	bl	800d058 <memp_malloc>
 8013712:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d109      	bne.n	801372e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d151      	bne.n	80137c4 <sys_timeout_abs+0xc4>
 8013720:	4b2a      	ldr	r3, [pc, #168]	@ (80137cc <sys_timeout_abs+0xcc>)
 8013722:	22be      	movs	r2, #190	@ 0xbe
 8013724:	492a      	ldr	r1, [pc, #168]	@ (80137d0 <sys_timeout_abs+0xd0>)
 8013726:	482b      	ldr	r0, [pc, #172]	@ (80137d4 <sys_timeout_abs+0xd4>)
 8013728:	f005 fafc 	bl	8018d24 <iprintf>
    return;
 801372c:	e04a      	b.n	80137c4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	2200      	movs	r2, #0
 8013732:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	68ba      	ldr	r2, [r7, #8]
 8013738:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	687a      	ldr	r2, [r7, #4]
 801373e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013740:	693b      	ldr	r3, [r7, #16]
 8013742:	68fa      	ldr	r2, [r7, #12]
 8013744:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013746:	4b24      	ldr	r3, [pc, #144]	@ (80137d8 <sys_timeout_abs+0xd8>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d103      	bne.n	8013756 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801374e:	4a22      	ldr	r2, [pc, #136]	@ (80137d8 <sys_timeout_abs+0xd8>)
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	6013      	str	r3, [r2, #0]
    return;
 8013754:	e037      	b.n	80137c6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	685a      	ldr	r2, [r3, #4]
 801375a:	4b1f      	ldr	r3, [pc, #124]	@ (80137d8 <sys_timeout_abs+0xd8>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	685b      	ldr	r3, [r3, #4]
 8013760:	1ad3      	subs	r3, r2, r3
 8013762:	0fdb      	lsrs	r3, r3, #31
 8013764:	f003 0301 	and.w	r3, r3, #1
 8013768:	b2db      	uxtb	r3, r3
 801376a:	2b00      	cmp	r3, #0
 801376c:	d007      	beq.n	801377e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801376e:	4b1a      	ldr	r3, [pc, #104]	@ (80137d8 <sys_timeout_abs+0xd8>)
 8013770:	681a      	ldr	r2, [r3, #0]
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013776:	4a18      	ldr	r2, [pc, #96]	@ (80137d8 <sys_timeout_abs+0xd8>)
 8013778:	693b      	ldr	r3, [r7, #16]
 801377a:	6013      	str	r3, [r2, #0]
 801377c:	e023      	b.n	80137c6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801377e:	4b16      	ldr	r3, [pc, #88]	@ (80137d8 <sys_timeout_abs+0xd8>)
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	617b      	str	r3, [r7, #20]
 8013784:	e01a      	b.n	80137bc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d00b      	beq.n	80137a6 <sys_timeout_abs+0xa6>
 801378e:	693b      	ldr	r3, [r7, #16]
 8013790:	685a      	ldr	r2, [r3, #4]
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	685b      	ldr	r3, [r3, #4]
 8013798:	1ad3      	subs	r3, r2, r3
 801379a:	0fdb      	lsrs	r3, r3, #31
 801379c:	f003 0301 	and.w	r3, r3, #1
 80137a0:	b2db      	uxtb	r3, r3
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d007      	beq.n	80137b6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	681a      	ldr	r2, [r3, #0]
 80137aa:	693b      	ldr	r3, [r7, #16]
 80137ac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	693a      	ldr	r2, [r7, #16]
 80137b2:	601a      	str	r2, [r3, #0]
        break;
 80137b4:	e007      	b.n	80137c6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	617b      	str	r3, [r7, #20]
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d1e1      	bne.n	8013786 <sys_timeout_abs+0x86>
 80137c2:	e000      	b.n	80137c6 <sys_timeout_abs+0xc6>
    return;
 80137c4:	bf00      	nop
      }
    }
  }
}
 80137c6:	3718      	adds	r7, #24
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}
 80137cc:	0801c834 	.word	0x0801c834
 80137d0:	0801c84c 	.word	0x0801c84c
 80137d4:	0801c88c 	.word	0x0801c88c
 80137d8:	2000a354 	.word	0x2000a354

080137dc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b086      	sub	sp, #24
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80137e8:	697b      	ldr	r3, [r7, #20]
 80137ea:	685b      	ldr	r3, [r3, #4]
 80137ec:	4798      	blx	r3

  now = sys_now();
 80137ee:	f7f8 fdfd 	bl	800c3ec <sys_now>
 80137f2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	681a      	ldr	r2, [r3, #0]
 80137f8:	4b0f      	ldr	r3, [pc, #60]	@ (8013838 <lwip_cyclic_timer+0x5c>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	4413      	add	r3, r2
 80137fe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013800:	68fa      	ldr	r2, [r7, #12]
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	1ad3      	subs	r3, r2, r3
 8013806:	0fdb      	lsrs	r3, r3, #31
 8013808:	f003 0301 	and.w	r3, r3, #1
 801380c:	b2db      	uxtb	r3, r3
 801380e:	2b00      	cmp	r3, #0
 8013810:	d009      	beq.n	8013826 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	681a      	ldr	r2, [r3, #0]
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	4413      	add	r3, r2
 801381a:	687a      	ldr	r2, [r7, #4]
 801381c:	4907      	ldr	r1, [pc, #28]	@ (801383c <lwip_cyclic_timer+0x60>)
 801381e:	4618      	mov	r0, r3
 8013820:	f7ff ff6e 	bl	8013700 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013824:	e004      	b.n	8013830 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013826:	687a      	ldr	r2, [r7, #4]
 8013828:	4904      	ldr	r1, [pc, #16]	@ (801383c <lwip_cyclic_timer+0x60>)
 801382a:	68f8      	ldr	r0, [r7, #12]
 801382c:	f7ff ff68 	bl	8013700 <sys_timeout_abs>
}
 8013830:	bf00      	nop
 8013832:	3718      	adds	r7, #24
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}
 8013838:	2000a358 	.word	0x2000a358
 801383c:	080137dd 	.word	0x080137dd

08013840 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b082      	sub	sp, #8
 8013844:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013846:	2301      	movs	r3, #1
 8013848:	607b      	str	r3, [r7, #4]
 801384a:	e00e      	b.n	801386a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801384c:	4a0b      	ldr	r2, [pc, #44]	@ (801387c <sys_timeouts_init+0x3c>)
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	00db      	lsls	r3, r3, #3
 8013858:	4a08      	ldr	r2, [pc, #32]	@ (801387c <sys_timeouts_init+0x3c>)
 801385a:	4413      	add	r3, r2
 801385c:	461a      	mov	r2, r3
 801385e:	4908      	ldr	r1, [pc, #32]	@ (8013880 <sys_timeouts_init+0x40>)
 8013860:	f000 f810 	bl	8013884 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	3301      	adds	r3, #1
 8013868:	607b      	str	r3, [r7, #4]
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	2b05      	cmp	r3, #5
 801386e:	d9ed      	bls.n	801384c <sys_timeouts_init+0xc>
  }
}
 8013870:	bf00      	nop
 8013872:	bf00      	nop
 8013874:	3708      	adds	r7, #8
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}
 801387a:	bf00      	nop
 801387c:	0801d3ec 	.word	0x0801d3ec
 8013880:	080137dd 	.word	0x080137dd

08013884 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b086      	sub	sp, #24
 8013888:	af00      	add	r7, sp, #0
 801388a:	60f8      	str	r0, [r7, #12]
 801388c:	60b9      	str	r1, [r7, #8]
 801388e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013896:	d306      	bcc.n	80138a6 <sys_timeout+0x22>
 8013898:	4b0a      	ldr	r3, [pc, #40]	@ (80138c4 <sys_timeout+0x40>)
 801389a:	f240 1229 	movw	r2, #297	@ 0x129
 801389e:	490a      	ldr	r1, [pc, #40]	@ (80138c8 <sys_timeout+0x44>)
 80138a0:	480a      	ldr	r0, [pc, #40]	@ (80138cc <sys_timeout+0x48>)
 80138a2:	f005 fa3f 	bl	8018d24 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */
 80138a6:	f7f8 fda1 	bl	800c3ec <sys_now>
 80138aa:	4602      	mov	r2, r0
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	4413      	add	r3, r2
 80138b0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80138b2:	687a      	ldr	r2, [r7, #4]
 80138b4:	68b9      	ldr	r1, [r7, #8]
 80138b6:	6978      	ldr	r0, [r7, #20]
 80138b8:	f7ff ff22 	bl	8013700 <sys_timeout_abs>
#endif
}
 80138bc:	bf00      	nop
 80138be:	3718      	adds	r7, #24
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}
 80138c4:	0801c834 	.word	0x0801c834
 80138c8:	0801c8b4 	.word	0x0801c8b4
 80138cc:	0801c88c 	.word	0x0801c88c

080138d0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b084      	sub	sp, #16
 80138d4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80138d6:	f7f8 fd89 	bl	800c3ec <sys_now>
 80138da:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80138dc:	4b1a      	ldr	r3, [pc, #104]	@ (8013948 <sys_check_timeouts+0x78>)
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	b2db      	uxtb	r3, r3
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d001      	beq.n	80138ea <sys_check_timeouts+0x1a>
 80138e6:	f7f9 ff03 	bl	800d6f0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80138ea:	4b18      	ldr	r3, [pc, #96]	@ (801394c <sys_check_timeouts+0x7c>)
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d022      	beq.n	801393c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80138f6:	68bb      	ldr	r3, [r7, #8]
 80138f8:	685b      	ldr	r3, [r3, #4]
 80138fa:	68fa      	ldr	r2, [r7, #12]
 80138fc:	1ad3      	subs	r3, r2, r3
 80138fe:	0fdb      	lsrs	r3, r3, #31
 8013900:	f003 0301 	and.w	r3, r3, #1
 8013904:	b2db      	uxtb	r3, r3
 8013906:	2b00      	cmp	r3, #0
 8013908:	d11a      	bne.n	8013940 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	4a0f      	ldr	r2, [pc, #60]	@ (801394c <sys_check_timeouts+0x7c>)
 8013910:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	689b      	ldr	r3, [r3, #8]
 8013916:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	68db      	ldr	r3, [r3, #12]
 801391c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	685b      	ldr	r3, [r3, #4]
 8013922:	4a0b      	ldr	r2, [pc, #44]	@ (8013950 <sys_check_timeouts+0x80>)
 8013924:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013926:	68b9      	ldr	r1, [r7, #8]
 8013928:	2006      	movs	r0, #6
 801392a:	f7f9 fbf9 	bl	800d120 <memp_free>
    if (handler != NULL) {
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d0d3      	beq.n	80138dc <sys_check_timeouts+0xc>
      handler(arg);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	6838      	ldr	r0, [r7, #0]
 8013938:	4798      	blx	r3
  do {
 801393a:	e7cf      	b.n	80138dc <sys_check_timeouts+0xc>
      return;
 801393c:	bf00      	nop
 801393e:	e000      	b.n	8013942 <sys_check_timeouts+0x72>
      return;
 8013940:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013942:	3710      	adds	r7, #16
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	2000a301 	.word	0x2000a301
 801394c:	2000a354 	.word	0x2000a354
 8013950:	2000a358 	.word	0x2000a358

08013954 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013958:	f005 f8e4 	bl	8018b24 <rand>
 801395c:	4603      	mov	r3, r0
 801395e:	b29b      	uxth	r3, r3
 8013960:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013964:	b29b      	uxth	r3, r3
 8013966:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801396a:	b29a      	uxth	r2, r3
 801396c:	4b01      	ldr	r3, [pc, #4]	@ (8013974 <udp_init+0x20>)
 801396e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013970:	bf00      	nop
 8013972:	bd80      	pop	{r7, pc}
 8013974:	2000002c 	.word	0x2000002c

08013978 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013978:	b480      	push	{r7}
 801397a:	b083      	sub	sp, #12
 801397c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801397e:	2300      	movs	r3, #0
 8013980:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013982:	4b17      	ldr	r3, [pc, #92]	@ (80139e0 <udp_new_port+0x68>)
 8013984:	881b      	ldrh	r3, [r3, #0]
 8013986:	1c5a      	adds	r2, r3, #1
 8013988:	b291      	uxth	r1, r2
 801398a:	4a15      	ldr	r2, [pc, #84]	@ (80139e0 <udp_new_port+0x68>)
 801398c:	8011      	strh	r1, [r2, #0]
 801398e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013992:	4293      	cmp	r3, r2
 8013994:	d103      	bne.n	801399e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013996:	4b12      	ldr	r3, [pc, #72]	@ (80139e0 <udp_new_port+0x68>)
 8013998:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801399c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801399e:	4b11      	ldr	r3, [pc, #68]	@ (80139e4 <udp_new_port+0x6c>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	603b      	str	r3, [r7, #0]
 80139a4:	e011      	b.n	80139ca <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	8a5a      	ldrh	r2, [r3, #18]
 80139aa:	4b0d      	ldr	r3, [pc, #52]	@ (80139e0 <udp_new_port+0x68>)
 80139ac:	881b      	ldrh	r3, [r3, #0]
 80139ae:	429a      	cmp	r2, r3
 80139b0:	d108      	bne.n	80139c4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80139b2:	88fb      	ldrh	r3, [r7, #6]
 80139b4:	3301      	adds	r3, #1
 80139b6:	80fb      	strh	r3, [r7, #6]
 80139b8:	88fb      	ldrh	r3, [r7, #6]
 80139ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80139be:	d3e0      	bcc.n	8013982 <udp_new_port+0xa>
        return 0;
 80139c0:	2300      	movs	r3, #0
 80139c2:	e007      	b.n	80139d4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	68db      	ldr	r3, [r3, #12]
 80139c8:	603b      	str	r3, [r7, #0]
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d1ea      	bne.n	80139a6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80139d0:	4b03      	ldr	r3, [pc, #12]	@ (80139e0 <udp_new_port+0x68>)
 80139d2:	881b      	ldrh	r3, [r3, #0]
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	370c      	adds	r7, #12
 80139d8:	46bd      	mov	sp, r7
 80139da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139de:	4770      	bx	lr
 80139e0:	2000002c 	.word	0x2000002c
 80139e4:	2000a360 	.word	0x2000a360

080139e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b084      	sub	sp, #16
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	60f8      	str	r0, [r7, #12]
 80139f0:	60b9      	str	r1, [r7, #8]
 80139f2:	4613      	mov	r3, r2
 80139f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d105      	bne.n	8013a08 <udp_input_local_match+0x20>
 80139fc:	4b27      	ldr	r3, [pc, #156]	@ (8013a9c <udp_input_local_match+0xb4>)
 80139fe:	2287      	movs	r2, #135	@ 0x87
 8013a00:	4927      	ldr	r1, [pc, #156]	@ (8013aa0 <udp_input_local_match+0xb8>)
 8013a02:	4828      	ldr	r0, [pc, #160]	@ (8013aa4 <udp_input_local_match+0xbc>)
 8013a04:	f005 f98e 	bl	8018d24 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d105      	bne.n	8013a1a <udp_input_local_match+0x32>
 8013a0e:	4b23      	ldr	r3, [pc, #140]	@ (8013a9c <udp_input_local_match+0xb4>)
 8013a10:	2288      	movs	r2, #136	@ 0x88
 8013a12:	4925      	ldr	r1, [pc, #148]	@ (8013aa8 <udp_input_local_match+0xc0>)
 8013a14:	4823      	ldr	r0, [pc, #140]	@ (8013aa4 <udp_input_local_match+0xbc>)
 8013a16:	f005 f985 	bl	8018d24 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	7a1b      	ldrb	r3, [r3, #8]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d00b      	beq.n	8013a3a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	7a1a      	ldrb	r2, [r3, #8]
 8013a26:	4b21      	ldr	r3, [pc, #132]	@ (8013aac <udp_input_local_match+0xc4>)
 8013a28:	685b      	ldr	r3, [r3, #4]
 8013a2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013a2e:	3301      	adds	r3, #1
 8013a30:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a32:	429a      	cmp	r2, r3
 8013a34:	d001      	beq.n	8013a3a <udp_input_local_match+0x52>
    return 0;
 8013a36:	2300      	movs	r3, #0
 8013a38:	e02b      	b.n	8013a92 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013a3a:	79fb      	ldrb	r3, [r7, #7]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d018      	beq.n	8013a72 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d013      	beq.n	8013a6e <udp_input_local_match+0x86>
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d00f      	beq.n	8013a6e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013a4e:	4b17      	ldr	r3, [pc, #92]	@ (8013aac <udp_input_local_match+0xc4>)
 8013a50:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a56:	d00a      	beq.n	8013a6e <udp_input_local_match+0x86>
            ip4_addr_net_eq(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	681a      	ldr	r2, [r3, #0]
 8013a5c:	4b13      	ldr	r3, [pc, #76]	@ (8013aac <udp_input_local_match+0xc4>)
 8013a5e:	695b      	ldr	r3, [r3, #20]
 8013a60:	405a      	eors	r2, r3
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	3308      	adds	r3, #8
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d110      	bne.n	8013a90 <udp_input_local_match+0xa8>
          return 1;
 8013a6e:	2301      	movs	r3, #1
 8013a70:	e00f      	b.n	8013a92 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_eq(&pcb->local_ip, ip_current_dest_addr())) {
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d009      	beq.n	8013a8c <udp_input_local_match+0xa4>
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d005      	beq.n	8013a8c <udp_input_local_match+0xa4>
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	681a      	ldr	r2, [r3, #0]
 8013a84:	4b09      	ldr	r3, [pc, #36]	@ (8013aac <udp_input_local_match+0xc4>)
 8013a86:	695b      	ldr	r3, [r3, #20]
 8013a88:	429a      	cmp	r2, r3
 8013a8a:	d101      	bne.n	8013a90 <udp_input_local_match+0xa8>
        return 1;
 8013a8c:	2301      	movs	r3, #1
 8013a8e:	e000      	b.n	8013a92 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013a90:	2300      	movs	r3, #0
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3710      	adds	r7, #16
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	0801c900 	.word	0x0801c900
 8013aa0:	0801c914 	.word	0x0801c914
 8013aa4:	0801c938 	.word	0x0801c938
 8013aa8:	0801c960 	.word	0x0801c960
 8013aac:	200035ac 	.word	0x200035ac

08013ab0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013ab0:	b590      	push	{r4, r7, lr}
 8013ab2:	b08d      	sub	sp, #52	@ 0x34
 8013ab4:	af02      	add	r7, sp, #8
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013aba:	2300      	movs	r3, #0
 8013abc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d105      	bne.n	8013ad0 <udp_input+0x20>
 8013ac4:	4b7c      	ldr	r3, [pc, #496]	@ (8013cb8 <udp_input+0x208>)
 8013ac6:	22cf      	movs	r2, #207	@ 0xcf
 8013ac8:	497c      	ldr	r1, [pc, #496]	@ (8013cbc <udp_input+0x20c>)
 8013aca:	487d      	ldr	r0, [pc, #500]	@ (8013cc0 <udp_input+0x210>)
 8013acc:	f005 f92a 	bl	8018d24 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d105      	bne.n	8013ae2 <udp_input+0x32>
 8013ad6:	4b78      	ldr	r3, [pc, #480]	@ (8013cb8 <udp_input+0x208>)
 8013ad8:	22d0      	movs	r2, #208	@ 0xd0
 8013ada:	497a      	ldr	r1, [pc, #488]	@ (8013cc4 <udp_input+0x214>)
 8013adc:	4878      	ldr	r0, [pc, #480]	@ (8013cc0 <udp_input+0x210>)
 8013ade:	f005 f921 	bl	8018d24 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	895b      	ldrh	r3, [r3, #10]
 8013ae6:	2b07      	cmp	r3, #7
 8013ae8:	d803      	bhi.n	8013af2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	f7fa f93c 	bl	800dd68 <pbuf_free>
    goto end;
 8013af0:	e0de      	b.n	8013cb0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013af8:	4b73      	ldr	r3, [pc, #460]	@ (8013cc8 <udp_input+0x218>)
 8013afa:	695b      	ldr	r3, [r3, #20]
 8013afc:	4a72      	ldr	r2, [pc, #456]	@ (8013cc8 <udp_input+0x218>)
 8013afe:	6812      	ldr	r2, [r2, #0]
 8013b00:	4611      	mov	r1, r2
 8013b02:	4618      	mov	r0, r3
 8013b04:	f004 f832 	bl	8017b6c <ip4_addr_isbroadcast_u32>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	881b      	ldrh	r3, [r3, #0]
 8013b10:	b29b      	uxth	r3, r3
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7f8 fdbc 	bl	800c690 <lwip_htons>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	885b      	ldrh	r3, [r3, #2]
 8013b20:	b29b      	uxth	r3, r3
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7f8 fdb4 	bl	800c690 <lwip_htons>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013b30:	2300      	movs	r3, #0
 8013b32:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013b34:	2300      	movs	r3, #0
 8013b36:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b38:	4b64      	ldr	r3, [pc, #400]	@ (8013ccc <udp_input+0x21c>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8013b3e:	e054      	b.n	8013bea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b42:	8a5b      	ldrh	r3, [r3, #18]
 8013b44:	89fa      	ldrh	r2, [r7, #14]
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d14a      	bne.n	8013be0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013b4a:	7cfb      	ldrb	r3, [r7, #19]
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	6839      	ldr	r1, [r7, #0]
 8013b50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013b52:	f7ff ff49 	bl	80139e8 <udp_input_local_match>
 8013b56:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d041      	beq.n	8013be0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b5e:	7c1b      	ldrb	r3, [r3, #16]
 8013b60:	f003 0304 	and.w	r3, r3, #4
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d11d      	bne.n	8013ba4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d102      	bne.n	8013b74 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b70:	61fb      	str	r3, [r7, #28]
 8013b72:	e017      	b.n	8013ba4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013b74:	7cfb      	ldrb	r3, [r7, #19]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d014      	beq.n	8013ba4 <udp_input+0xf4>
 8013b7a:	4b53      	ldr	r3, [pc, #332]	@ (8013cc8 <udp_input+0x218>)
 8013b7c:	695b      	ldr	r3, [r3, #20]
 8013b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b82:	d10f      	bne.n	8013ba4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_eq(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013b84:	69fb      	ldr	r3, [r7, #28]
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	3304      	adds	r3, #4
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	429a      	cmp	r2, r3
 8013b90:	d008      	beq.n	8013ba4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_eq(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b94:	681a      	ldr	r2, [r3, #0]
 8013b96:	683b      	ldr	r3, [r7, #0]
 8013b98:	3304      	adds	r3, #4
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d101      	bne.n	8013ba4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ba2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ba6:	8a9b      	ldrh	r3, [r3, #20]
 8013ba8:	8a3a      	ldrh	r2, [r7, #16]
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d118      	bne.n	8013be0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bb0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d005      	beq.n	8013bc2 <udp_input+0x112>
           ip_addr_eq(&pcb->remote_ip, ip_current_src_addr()))) {
 8013bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bb8:	685a      	ldr	r2, [r3, #4]
 8013bba:	4b43      	ldr	r3, [pc, #268]	@ (8013cc8 <udp_input+0x218>)
 8013bbc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d10e      	bne.n	8013be0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013bc2:	6a3b      	ldr	r3, [r7, #32]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d014      	beq.n	8013bf2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bca:	68da      	ldr	r2, [r3, #12]
 8013bcc:	6a3b      	ldr	r3, [r7, #32]
 8013bce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8013ccc <udp_input+0x21c>)
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bd6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8013ccc <udp_input+0x21c>)
 8013bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bdc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013bde:	e008      	b.n	8013bf2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013be2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013be6:	68db      	ldr	r3, [r3, #12]
 8013be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8013bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d1a7      	bne.n	8013b40 <udp_input+0x90>
 8013bf0:	e000      	b.n	8013bf4 <udp_input+0x144>
        break;
 8013bf2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d101      	bne.n	8013bfe <udp_input+0x14e>
    pcb = uncon_pcb;
 8013bfa:	69fb      	ldr	r3, [r7, #28]
 8013bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d002      	beq.n	8013c0a <udp_input+0x15a>
    for_us = 1;
 8013c04:	2301      	movs	r3, #1
 8013c06:	76fb      	strb	r3, [r7, #27]
 8013c08:	e00a      	b.n	8013c20 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_eq(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	3304      	adds	r3, #4
 8013c0e:	681a      	ldr	r2, [r3, #0]
 8013c10:	4b2d      	ldr	r3, [pc, #180]	@ (8013cc8 <udp_input+0x218>)
 8013c12:	695b      	ldr	r3, [r3, #20]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	bf0c      	ite	eq
 8013c18:	2301      	moveq	r3, #1
 8013c1a:	2300      	movne	r3, #0
 8013c1c:	b2db      	uxtb	r3, r3
 8013c1e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013c20:	7efb      	ldrb	r3, [r7, #27]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d041      	beq.n	8013caa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013c26:	2108      	movs	r1, #8
 8013c28:	6878      	ldr	r0, [r7, #4]
 8013c2a:	f7fa f821 	bl	800dc70 <pbuf_remove_header>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d00a      	beq.n	8013c4a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed", 0);
 8013c34:	4b20      	ldr	r3, [pc, #128]	@ (8013cb8 <udp_input+0x208>)
 8013c36:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013c3a:	4925      	ldr	r1, [pc, #148]	@ (8013cd0 <udp_input+0x220>)
 8013c3c:	4820      	ldr	r0, [pc, #128]	@ (8013cc0 <udp_input+0x210>)
 8013c3e:	f005 f871 	bl	8018d24 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f7fa f890 	bl	800dd68 <pbuf_free>
      goto end;
 8013c48:	e032      	b.n	8013cb0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d012      	beq.n	8013c76 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c52:	699b      	ldr	r3, [r3, #24]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d00a      	beq.n	8013c6e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c5a:	699c      	ldr	r4, [r3, #24]
 8013c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c5e:	69d8      	ldr	r0, [r3, #28]
 8013c60:	8a3b      	ldrh	r3, [r7, #16]
 8013c62:	9300      	str	r3, [sp, #0]
 8013c64:	4b1b      	ldr	r3, [pc, #108]	@ (8013cd4 <udp_input+0x224>)
 8013c66:	687a      	ldr	r2, [r7, #4]
 8013c68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013c6a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013c6c:	e021      	b.n	8013cb2 <udp_input+0x202>
        pbuf_free(p);
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f7fa f87a 	bl	800dd68 <pbuf_free>
        goto end;
 8013c74:	e01c      	b.n	8013cb0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013c76:	7cfb      	ldrb	r3, [r7, #19]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d112      	bne.n	8013ca2 <udp_input+0x1f2>
 8013c7c:	4b12      	ldr	r3, [pc, #72]	@ (8013cc8 <udp_input+0x218>)
 8013c7e:	695b      	ldr	r3, [r3, #20]
 8013c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013c84:	2be0      	cmp	r3, #224	@ 0xe0
 8013c86:	d00c      	beq.n	8013ca2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013c88:	4b0f      	ldr	r3, [pc, #60]	@ (8013cc8 <udp_input+0x218>)
 8013c8a:	899b      	ldrh	r3, [r3, #12]
 8013c8c:	3308      	adds	r3, #8
 8013c8e:	b29b      	uxth	r3, r3
 8013c90:	b21b      	sxth	r3, r3
 8013c92:	4619      	mov	r1, r3
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f7fa f854 	bl	800dd42 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013c9a:	2103      	movs	r1, #3
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f003 fc13 	bl	80174c8 <icmp_dest_unreach>
      pbuf_free(p);
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f7fa f860 	bl	800dd68 <pbuf_free>
  return;
 8013ca8:	e003      	b.n	8013cb2 <udp_input+0x202>
    pbuf_free(p);
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f7fa f85c 	bl	800dd68 <pbuf_free>
  return;
 8013cb0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013cb2:	372c      	adds	r7, #44	@ 0x2c
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd90      	pop	{r4, r7, pc}
 8013cb8:	0801c900 	.word	0x0801c900
 8013cbc:	0801c988 	.word	0x0801c988
 8013cc0:	0801c938 	.word	0x0801c938
 8013cc4:	0801c9a0 	.word	0x0801c9a0
 8013cc8:	200035ac 	.word	0x200035ac
 8013ccc:	2000a360 	.word	0x2000a360
 8013cd0:	0801c9bc 	.word	0x0801c9bc
 8013cd4:	200035bc 	.word	0x200035bc

08013cd8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b082      	sub	sp, #8
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
 8013ce0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d102      	bne.n	8013cee <udp_send+0x16>
 8013ce8:	f06f 030f 	mvn.w	r3, #15
 8013cec:	e00e      	b.n	8013d0c <udp_send+0x34>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d102      	bne.n	8013cfa <udp_send+0x22>
 8013cf4:	f06f 030f 	mvn.w	r3, #15
 8013cf8:	e008      	b.n	8013d0c <udp_send+0x34>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	1d1a      	adds	r2, r3, #4
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	8a9b      	ldrh	r3, [r3, #20]
 8013d02:	6839      	ldr	r1, [r7, #0]
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f000 f805 	bl	8013d14 <udp_sendto>
 8013d0a:	4603      	mov	r3, r0
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3708      	adds	r7, #8
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b088      	sub	sp, #32
 8013d18:	af02      	add	r7, sp, #8
 8013d1a:	60f8      	str	r0, [r7, #12]
 8013d1c:	60b9      	str	r1, [r7, #8]
 8013d1e:	607a      	str	r2, [r7, #4]
 8013d20:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d102      	bne.n	8013d2e <udp_sendto+0x1a>
 8013d28:	f06f 030f 	mvn.w	r3, #15
 8013d2c:	e02a      	b.n	8013d84 <udp_sendto+0x70>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d102      	bne.n	8013d3a <udp_sendto+0x26>
 8013d34:	f06f 030f 	mvn.w	r3, #15
 8013d38:	e024      	b.n	8013d84 <udp_sendto+0x70>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d102      	bne.n	8013d46 <udp_sendto+0x32>
 8013d40:	f06f 030f 	mvn.w	r3, #15
 8013d44:	e01e      	b.n	8013d84 <udp_sendto+0x70>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	7a1b      	ldrb	r3, [r3, #8]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d006      	beq.n	8013d5c <udp_sendto+0x48>
    netif = netif_get_by_index(pcb->netif_idx);
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	7a1b      	ldrb	r3, [r3, #8]
 8013d52:	4618      	mov	r0, r3
 8013d54:	f7f9 fca6 	bl	800d6a4 <netif_get_by_index>
 8013d58:	6178      	str	r0, [r7, #20]
 8013d5a:	e003      	b.n	8013d64 <udp_sendto+0x50>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f003 fc51 	bl	8017604 <ip4_route>
 8013d62:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d102      	bne.n	8013d70 <udp_sendto+0x5c>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013d6a:	f06f 0303 	mvn.w	r3, #3
 8013d6e:	e009      	b.n	8013d84 <udp_sendto+0x70>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8013d70:	887a      	ldrh	r2, [r7, #2]
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	9300      	str	r3, [sp, #0]
 8013d76:	4613      	mov	r3, r2
 8013d78:	687a      	ldr	r2, [r7, #4]
 8013d7a:	68b9      	ldr	r1, [r7, #8]
 8013d7c:	68f8      	ldr	r0, [r7, #12]
 8013d7e:	f000 f805 	bl	8013d8c <udp_sendto_if>
 8013d82:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013d84:	4618      	mov	r0, r3
 8013d86:	3718      	adds	r7, #24
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}

08013d8c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b088      	sub	sp, #32
 8013d90:	af02      	add	r7, sp, #8
 8013d92:	60f8      	str	r0, [r7, #12]
 8013d94:	60b9      	str	r1, [r7, #8]
 8013d96:	607a      	str	r2, [r7, #4]
 8013d98:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d102      	bne.n	8013da6 <udp_sendto_if+0x1a>
 8013da0:	f06f 030f 	mvn.w	r3, #15
 8013da4:	e03a      	b.n	8013e1c <udp_sendto_if+0x90>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d102      	bne.n	8013db2 <udp_sendto_if+0x26>
 8013dac:	f06f 030f 	mvn.w	r3, #15
 8013db0:	e034      	b.n	8013e1c <udp_sendto_if+0x90>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d102      	bne.n	8013dbe <udp_sendto_if+0x32>
 8013db8:	f06f 030f 	mvn.w	r3, #15
 8013dbc:	e02e      	b.n	8013e1c <udp_sendto_if+0x90>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013dbe:	6a3b      	ldr	r3, [r7, #32]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d102      	bne.n	8013dca <udp_sendto_if+0x3e>
 8013dc4:	f06f 030f 	mvn.w	r3, #15
 8013dc8:	e028      	b.n	8013e1c <udp_sendto_if+0x90>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d009      	beq.n	8013de4 <udp_sendto_if+0x58>
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d005      	beq.n	8013de4 <udp_sendto_if+0x58>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013de0:	2be0      	cmp	r3, #224	@ 0xe0
 8013de2:	d103      	bne.n	8013dec <udp_sendto_if+0x60>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013de4:	6a3b      	ldr	r3, [r7, #32]
 8013de6:	3304      	adds	r3, #4
 8013de8:	617b      	str	r3, [r7, #20]
 8013dea:	e00b      	b.n	8013e04 <udp_sendto_if+0x78>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_eq(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	681a      	ldr	r2, [r3, #0]
 8013df0:	6a3b      	ldr	r3, [r7, #32]
 8013df2:	3304      	adds	r3, #4
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	429a      	cmp	r2, r3
 8013df8:	d002      	beq.n	8013e00 <udp_sendto_if+0x74>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013dfa:	f06f 0303 	mvn.w	r3, #3
 8013dfe:	e00d      	b.n	8013e1c <udp_sendto_if+0x90>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013e04:	887a      	ldrh	r2, [r7, #2]
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	9301      	str	r3, [sp, #4]
 8013e0a:	6a3b      	ldr	r3, [r7, #32]
 8013e0c:	9300      	str	r3, [sp, #0]
 8013e0e:	4613      	mov	r3, r2
 8013e10:	687a      	ldr	r2, [r7, #4]
 8013e12:	68b9      	ldr	r1, [r7, #8]
 8013e14:	68f8      	ldr	r0, [r7, #12]
 8013e16:	f000 f805 	bl	8013e24 <udp_sendto_if_src>
 8013e1a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	3718      	adds	r7, #24
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b08c      	sub	sp, #48	@ 0x30
 8013e28:	af04      	add	r7, sp, #16
 8013e2a:	60f8      	str	r0, [r7, #12]
 8013e2c:	60b9      	str	r1, [r7, #8]
 8013e2e:	607a      	str	r2, [r7, #4]
 8013e30:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d102      	bne.n	8013e3e <udp_sendto_if_src+0x1a>
 8013e38:	f06f 030f 	mvn.w	r3, #15
 8013e3c:	e0a0      	b.n	8013f80 <udp_sendto_if_src+0x15c>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d102      	bne.n	8013e4a <udp_sendto_if_src+0x26>
 8013e44:	f06f 030f 	mvn.w	r3, #15
 8013e48:	e09a      	b.n	8013f80 <udp_sendto_if_src+0x15c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d102      	bne.n	8013e56 <udp_sendto_if_src+0x32>
 8013e50:	f06f 030f 	mvn.w	r3, #15
 8013e54:	e094      	b.n	8013f80 <udp_sendto_if_src+0x15c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d102      	bne.n	8013e62 <udp_sendto_if_src+0x3e>
 8013e5c:	f06f 030f 	mvn.w	r3, #15
 8013e60:	e08e      	b.n	8013f80 <udp_sendto_if_src+0x15c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d102      	bne.n	8013e6e <udp_sendto_if_src+0x4a>
 8013e68:	f06f 030f 	mvn.w	r3, #15
 8013e6c:	e088      	b.n	8013f80 <udp_sendto_if_src+0x15c>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	8a5b      	ldrh	r3, [r3, #18]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d10f      	bne.n	8013e96 <udp_sendto_if_src+0x72>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013e76:	68f9      	ldr	r1, [r7, #12]
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	8a5b      	ldrh	r3, [r3, #18]
 8013e7c:	461a      	mov	r2, r3
 8013e7e:	68f8      	ldr	r0, [r7, #12]
 8013e80:	f000 f888 	bl	8013f94 <udp_bind>
 8013e84:	4603      	mov	r3, r0
 8013e86:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013e88:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d002      	beq.n	8013e96 <udp_sendto_if_src+0x72>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013e90:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013e94:	e074      	b.n	8013f80 <udp_sendto_if_src+0x15c>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013e96:	68bb      	ldr	r3, [r7, #8]
 8013e98:	891b      	ldrh	r3, [r3, #8]
 8013e9a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013e9e:	4293      	cmp	r3, r2
 8013ea0:	d902      	bls.n	8013ea8 <udp_sendto_if_src+0x84>
    return ERR_MEM;
 8013ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8013ea6:	e06b      	b.n	8013f80 <udp_sendto_if_src+0x15c>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013ea8:	2108      	movs	r1, #8
 8013eaa:	68b8      	ldr	r0, [r7, #8]
 8013eac:	f7f9 fed0 	bl	800dc50 <pbuf_add_header>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d015      	beq.n	8013ee2 <udp_sendto_if_src+0xbe>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013eb6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013eba:	2108      	movs	r1, #8
 8013ebc:	2022      	movs	r0, #34	@ 0x22
 8013ebe:	f7f9 fc6d 	bl	800d79c <pbuf_alloc>
 8013ec2:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013ec4:	69fb      	ldr	r3, [r7, #28]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d102      	bne.n	8013ed0 <udp_sendto_if_src+0xac>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013eca:	f04f 33ff 	mov.w	r3, #4294967295
 8013ece:	e057      	b.n	8013f80 <udp_sendto_if_src+0x15c>
    }
    if (p->tot_len != 0) {
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	891b      	ldrh	r3, [r3, #8]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d006      	beq.n	8013ee6 <udp_sendto_if_src+0xc2>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013ed8:	68b9      	ldr	r1, [r7, #8]
 8013eda:	69f8      	ldr	r0, [r7, #28]
 8013edc:	f7fa f852 	bl	800df84 <pbuf_chain>
 8013ee0:	e001      	b.n	8013ee6 <udp_sendto_if_src+0xc2>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013ee6:	69fb      	ldr	r3, [r7, #28]
 8013ee8:	895b      	ldrh	r3, [r3, #10]
 8013eea:	2b07      	cmp	r3, #7
 8013eec:	d806      	bhi.n	8013efc <udp_sendto_if_src+0xd8>
 8013eee:	4b26      	ldr	r3, [pc, #152]	@ (8013f88 <udp_sendto_if_src+0x164>)
 8013ef0:	f240 320d 	movw	r2, #781	@ 0x30d
 8013ef4:	4925      	ldr	r1, [pc, #148]	@ (8013f8c <udp_sendto_if_src+0x168>)
 8013ef6:	4826      	ldr	r0, [pc, #152]	@ (8013f90 <udp_sendto_if_src+0x16c>)
 8013ef8:	f004 ff14 	bl	8018d24 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013efc:	69fb      	ldr	r3, [r7, #28]
 8013efe:	685b      	ldr	r3, [r3, #4]
 8013f00:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	8a5b      	ldrh	r3, [r3, #18]
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7f8 fbc2 	bl	800c690 <lwip_htons>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	461a      	mov	r2, r3
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013f14:	887b      	ldrh	r3, [r7, #2]
 8013f16:	4618      	mov	r0, r3
 8013f18:	f7f8 fbba 	bl	800c690 <lwip_htons>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	461a      	mov	r2, r3
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	2200      	movs	r2, #0
 8013f28:	719a      	strb	r2, [r3, #6]
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013f2e:	69fb      	ldr	r3, [r7, #28]
 8013f30:	891b      	ldrh	r3, [r3, #8]
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7f8 fbac 	bl	800c690 <lwip_htons>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	697b      	ldr	r3, [r7, #20]
 8013f3e:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013f40:	2311      	movs	r3, #17
 8013f42:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	7adb      	ldrb	r3, [r3, #11]
 8013f48:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	7a9b      	ldrb	r3, [r3, #10]
 8013f4e:	7cb9      	ldrb	r1, [r7, #18]
 8013f50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f52:	9202      	str	r2, [sp, #8]
 8013f54:	7cfa      	ldrb	r2, [r7, #19]
 8013f56:	9201      	str	r2, [sp, #4]
 8013f58:	9300      	str	r3, [sp, #0]
 8013f5a:	460b      	mov	r3, r1
 8013f5c:	687a      	ldr	r2, [r7, #4]
 8013f5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013f60:	69f8      	ldr	r0, [r7, #28]
 8013f62:	f003 fd55 	bl	8017a10 <ip4_output_if_src>
 8013f66:	4603      	mov	r3, r0
 8013f68:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013f6a:	69fa      	ldr	r2, [r7, #28]
 8013f6c:	68bb      	ldr	r3, [r7, #8]
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d004      	beq.n	8013f7c <udp_sendto_if_src+0x158>
    /* free the header pbuf */
    pbuf_free(q);
 8013f72:	69f8      	ldr	r0, [r7, #28]
 8013f74:	f7f9 fef8 	bl	800dd68 <pbuf_free>
    q = NULL;
 8013f78:	2300      	movs	r3, #0
 8013f7a:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013f7c:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	3720      	adds	r7, #32
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}
 8013f88:	0801c900 	.word	0x0801c900
 8013f8c:	0801c9d8 	.word	0x0801c9d8
 8013f90:	0801c938 	.word	0x0801c938

08013f94 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b086      	sub	sp, #24
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	60f8      	str	r0, [r7, #12]
 8013f9c:	60b9      	str	r1, [r7, #8]
 8013f9e:	4613      	mov	r3, r2
 8013fa0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d101      	bne.n	8013fac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013fa8:	4b36      	ldr	r3, [pc, #216]	@ (8014084 <udp_bind+0xf0>)
 8013faa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d102      	bne.n	8013fb8 <udp_bind+0x24>
 8013fb2:	f06f 030f 	mvn.w	r3, #15
 8013fb6:	e060      	b.n	801407a <udp_bind+0xe6>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013fb8:	2300      	movs	r3, #0
 8013fba:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013fbc:	4b32      	ldr	r3, [pc, #200]	@ (8014088 <udp_bind+0xf4>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	617b      	str	r3, [r7, #20]
 8013fc2:	e009      	b.n	8013fd8 <udp_bind+0x44>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013fc4:	68fa      	ldr	r2, [r7, #12]
 8013fc6:	697b      	ldr	r3, [r7, #20]
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d102      	bne.n	8013fd2 <udp_bind+0x3e>
      rebind = 1;
 8013fcc:	2301      	movs	r3, #1
 8013fce:	74fb      	strb	r3, [r7, #19]
      break;
 8013fd0:	e005      	b.n	8013fde <udp_bind+0x4a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013fd2:	697b      	ldr	r3, [r7, #20]
 8013fd4:	68db      	ldr	r3, [r3, #12]
 8013fd6:	617b      	str	r3, [r7, #20]
 8013fd8:	697b      	ldr	r3, [r7, #20]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d1f2      	bne.n	8013fc4 <udp_bind+0x30>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013fde:	88fb      	ldrh	r3, [r7, #6]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d109      	bne.n	8013ff8 <udp_bind+0x64>
    port = udp_new_port();
 8013fe4:	f7ff fcc8 	bl	8013978 <udp_new_port>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013fec:	88fb      	ldrh	r3, [r7, #6]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d12c      	bne.n	801404c <udp_bind+0xb8>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013ff2:	f06f 0307 	mvn.w	r3, #7
 8013ff6:	e040      	b.n	801407a <udp_bind+0xe6>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ff8:	4b23      	ldr	r3, [pc, #140]	@ (8014088 <udp_bind+0xf4>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	617b      	str	r3, [r7, #20]
 8013ffe:	e022      	b.n	8014046 <udp_bind+0xb2>
      if (pcb != ipcb) {
 8014000:	68fa      	ldr	r2, [r7, #12]
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	429a      	cmp	r2, r3
 8014006:	d01b      	beq.n	8014040 <udp_bind+0xac>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014008:	697b      	ldr	r3, [r7, #20]
 801400a:	8a5b      	ldrh	r3, [r3, #18]
 801400c:	88fa      	ldrh	r2, [r7, #6]
 801400e:	429a      	cmp	r2, r3
 8014010:	d116      	bne.n	8014040 <udp_bind+0xac>
              (((IP_GET_TYPE(&ipcb->local_ip) == IP_GET_TYPE(ipaddr)) &&
              /* IP address matches or any IP used? */
              (ip_addr_eq(&ipcb->local_ip, ipaddr) ||
 8014012:	697b      	ldr	r3, [r7, #20]
 8014014:	681a      	ldr	r2, [r3, #0]
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801401a:	429a      	cmp	r2, r3
 801401c:	d00d      	beq.n	801403a <udp_bind+0xa6>
              (ip_addr_eq(&ipcb->local_ip, ipaddr) ||
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d00a      	beq.n	801403a <udp_bind+0xa6>
              ip_addr_isany(ipaddr) ||
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d006      	beq.n	801403a <udp_bind+0xa6>
              ip_addr_isany(&ipcb->local_ip))) ||
 801402c:	697b      	ldr	r3, [r7, #20]
              (IP_GET_TYPE(&ipcb->local_ip) == IPADDR_TYPE_ANY) ||
 801402e:	2b00      	cmp	r3, #0
 8014030:	d003      	beq.n	801403a <udp_bind+0xa6>
              ip_addr_isany(&ipcb->local_ip))) ||
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d102      	bne.n	8014040 <udp_bind+0xac>
              (IP_GET_TYPE(ipaddr) == IPADDR_TYPE_ANY))) {
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801403a:	f06f 0307 	mvn.w	r3, #7
 801403e:	e01c      	b.n	801407a <udp_bind+0xe6>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	68db      	ldr	r3, [r3, #12]
 8014044:	617b      	str	r3, [r7, #20]
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d1d9      	bne.n	8014000 <udp_bind+0x6c>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801404c:	68bb      	ldr	r3, [r7, #8]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d002      	beq.n	8014058 <udp_bind+0xc4>
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	e000      	b.n	801405a <udp_bind+0xc6>
 8014058:	2300      	movs	r3, #0
 801405a:	68fa      	ldr	r2, [r7, #12]
 801405c:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	88fa      	ldrh	r2, [r7, #6]
 8014062:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014064:	7cfb      	ldrb	r3, [r7, #19]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d106      	bne.n	8014078 <udp_bind+0xe4>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801406a:	4b07      	ldr	r3, [pc, #28]	@ (8014088 <udp_bind+0xf4>)
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014072:	4a05      	ldr	r2, [pc, #20]	@ (8014088 <udp_bind+0xf4>)
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014078:	2300      	movs	r3, #0
}
 801407a:	4618      	mov	r0, r3
 801407c:	3718      	adds	r7, #24
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}
 8014082:	bf00      	nop
 8014084:	0801d41c 	.word	0x0801d41c
 8014088:	2000a360 	.word	0x2000a360

0801408c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b086      	sub	sp, #24
 8014090:	af00      	add	r7, sp, #0
 8014092:	60f8      	str	r0, [r7, #12]
 8014094:	60b9      	str	r1, [r7, #8]
 8014096:	4613      	mov	r3, r2
 8014098:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d102      	bne.n	80140a6 <udp_connect+0x1a>
 80140a0:	f06f 030f 	mvn.w	r3, #15
 80140a4:	e044      	b.n	8014130 <udp_connect+0xa4>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d102      	bne.n	80140b2 <udp_connect+0x26>
 80140ac:	f06f 030f 	mvn.w	r3, #15
 80140b0:	e03e      	b.n	8014130 <udp_connect+0xa4>

  if (pcb->local_port == 0) {
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	8a5b      	ldrh	r3, [r3, #18]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d10f      	bne.n	80140da <udp_connect+0x4e>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80140ba:	68f9      	ldr	r1, [r7, #12]
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	8a5b      	ldrh	r3, [r3, #18]
 80140c0:	461a      	mov	r2, r3
 80140c2:	68f8      	ldr	r0, [r7, #12]
 80140c4:	f7ff ff66 	bl	8013f94 <udp_bind>
 80140c8:	4603      	mov	r3, r0
 80140ca:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80140cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d002      	beq.n	80140da <udp_connect+0x4e>
      return err;
 80140d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140d8:	e02a      	b.n	8014130 <udp_connect+0xa4>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d002      	beq.n	80140e6 <udp_connect+0x5a>
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	e000      	b.n	80140e8 <udp_connect+0x5c>
 80140e6:	2300      	movs	r3, #0
 80140e8:	68fa      	ldr	r2, [r7, #12]
 80140ea:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	88fa      	ldrh	r2, [r7, #6]
 80140f0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	7c1b      	ldrb	r3, [r3, #16]
 80140f6:	f043 0304 	orr.w	r3, r3, #4
 80140fa:	b2da      	uxtb	r2, r3
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014100:	4b0d      	ldr	r3, [pc, #52]	@ (8014138 <udp_connect+0xac>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	617b      	str	r3, [r7, #20]
 8014106:	e008      	b.n	801411a <udp_connect+0x8e>
    if (pcb == ipcb) {
 8014108:	68fa      	ldr	r2, [r7, #12]
 801410a:	697b      	ldr	r3, [r7, #20]
 801410c:	429a      	cmp	r2, r3
 801410e:	d101      	bne.n	8014114 <udp_connect+0x88>
      /* already on the list, just return */
      return ERR_OK;
 8014110:	2300      	movs	r3, #0
 8014112:	e00d      	b.n	8014130 <udp_connect+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	68db      	ldr	r3, [r3, #12]
 8014118:	617b      	str	r3, [r7, #20]
 801411a:	697b      	ldr	r3, [r7, #20]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d1f3      	bne.n	8014108 <udp_connect+0x7c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014120:	4b05      	ldr	r3, [pc, #20]	@ (8014138 <udp_connect+0xac>)
 8014122:	681a      	ldr	r2, [r3, #0]
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014128:	4a03      	ldr	r2, [pc, #12]	@ (8014138 <udp_connect+0xac>)
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801412e:	2300      	movs	r3, #0
}
 8014130:	4618      	mov	r0, r3
 8014132:	3718      	adds	r7, #24
 8014134:	46bd      	mov	sp, r7
 8014136:	bd80      	pop	{r7, pc}
 8014138:	2000a360 	.word	0x2000a360

0801413c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801413c:	b480      	push	{r7}
 801413e:	b083      	sub	sp, #12
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d00f      	beq.n	801416a <udp_disconnect+0x2e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2200      	movs	r2, #0
 801414e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2200      	movs	r2, #0
 8014154:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2200      	movs	r2, #0
 801415a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	7c1b      	ldrb	r3, [r3, #16]
 8014160:	f023 0304 	bic.w	r3, r3, #4
 8014164:	b2da      	uxtb	r2, r3
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	741a      	strb	r2, [r3, #16]
}
 801416a:	370c      	adds	r7, #12
 801416c:	46bd      	mov	sp, r7
 801416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014172:	4770      	bx	lr

08014174 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014174:	b480      	push	{r7}
 8014176:	b085      	sub	sp, #20
 8014178:	af00      	add	r7, sp, #0
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d005      	beq.n	8014192 <udp_recv+0x1e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	68ba      	ldr	r2, [r7, #8]
 801418a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	687a      	ldr	r2, [r7, #4]
 8014190:	61da      	str	r2, [r3, #28]
}
 8014192:	3714      	adds	r7, #20
 8014194:	46bd      	mov	sp, r7
 8014196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419a:	4770      	bx	lr

0801419c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b084      	sub	sp, #16
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d026      	beq.n	80141f8 <udp_remove+0x5c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80141aa:	4b15      	ldr	r3, [pc, #84]	@ (8014200 <udp_remove+0x64>)
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	687a      	ldr	r2, [r7, #4]
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d105      	bne.n	80141c0 <udp_remove+0x24>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80141b4:	4b12      	ldr	r3, [pc, #72]	@ (8014200 <udp_remove+0x64>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	68db      	ldr	r3, [r3, #12]
 80141ba:	4a11      	ldr	r2, [pc, #68]	@ (8014200 <udp_remove+0x64>)
 80141bc:	6013      	str	r3, [r2, #0]
 80141be:	e017      	b.n	80141f0 <udp_remove+0x54>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80141c0:	4b0f      	ldr	r3, [pc, #60]	@ (8014200 <udp_remove+0x64>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	60fb      	str	r3, [r7, #12]
 80141c6:	e010      	b.n	80141ea <udp_remove+0x4e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d009      	beq.n	80141e4 <udp_remove+0x48>
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	68db      	ldr	r3, [r3, #12]
 80141d4:	687a      	ldr	r2, [r7, #4]
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d104      	bne.n	80141e4 <udp_remove+0x48>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	68da      	ldr	r2, [r3, #12]
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	60da      	str	r2, [r3, #12]
        break;
 80141e2:	e005      	b.n	80141f0 <udp_remove+0x54>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	60fb      	str	r3, [r7, #12]
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d1eb      	bne.n	80141c8 <udp_remove+0x2c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80141f0:	6879      	ldr	r1, [r7, #4]
 80141f2:	2000      	movs	r0, #0
 80141f4:	f7f8 ff94 	bl	800d120 <memp_free>
}
 80141f8:	3710      	adds	r7, #16
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}
 80141fe:	bf00      	nop
 8014200:	2000a360 	.word	0x2000a360

08014204 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801420a:	2000      	movs	r0, #0
 801420c:	f7f8 ff24 	bl	800d058 <memp_malloc>
 8014210:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d007      	beq.n	8014228 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014218:	2220      	movs	r2, #32
 801421a:	2100      	movs	r1, #0
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f004 ff29 	bl	8019074 <memset>
    pcb->ttl = UDP_TTL;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	22ff      	movs	r2, #255	@ 0xff
 8014226:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    pcb_tci_init(pcb);
  }
  return pcb;
 8014228:	687b      	ldr	r3, [r7, #4]
}
 801422a:	4618      	mov	r0, r3
 801422c:	3708      	adds	r7, #8
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}
	...

08014234 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014234:	b480      	push	{r7}
 8014236:	b085      	sub	sp, #20
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
 801423c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d01e      	beq.n	8014282 <udp_netif_ip_addr_changed+0x4e>
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d01a      	beq.n	8014282 <udp_netif_ip_addr_changed+0x4e>
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d017      	beq.n	8014282 <udp_netif_ip_addr_changed+0x4e>
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d013      	beq.n	8014282 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801425a:	4b0d      	ldr	r3, [pc, #52]	@ (8014290 <udp_netif_ip_addr_changed+0x5c>)
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	60fb      	str	r3, [r7, #12]
 8014260:	e00c      	b.n	801427c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_eq(&upcb->local_ip, old_addr)) {
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	681a      	ldr	r2, [r3, #0]
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	429a      	cmp	r2, r3
 801426c:	d103      	bne.n	8014276 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801426e:	683b      	ldr	r3, [r7, #0]
 8014270:	681a      	ldr	r2, [r3, #0]
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	60fb      	str	r3, [r7, #12]
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d1ef      	bne.n	8014262 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014282:	bf00      	nop
 8014284:	3714      	adds	r7, #20
 8014286:	46bd      	mov	sp, r7
 8014288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop
 8014290:	2000a360 	.word	0x2000a360

08014294 <acd_add>:
 *                              is available
 */
err_t
acd_add(struct netif *netif, struct acd *acd,
         acd_conflict_callback_t acd_conflict_callback)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b086      	sub	sp, #24
 8014298:	af00      	add	r7, sp, #0
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	607a      	str	r2, [r7, #4]
  struct acd *acd2;

  /* Set callback */
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("acd_conflict_callback != NULL", acd_conflict_callback != NULL);
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d105      	bne.n	80142b2 <acd_add+0x1e>
 80142a6:	4b12      	ldr	r3, [pc, #72]	@ (80142f0 <acd_add+0x5c>)
 80142a8:	227d      	movs	r2, #125	@ 0x7d
 80142aa:	4912      	ldr	r1, [pc, #72]	@ (80142f4 <acd_add+0x60>)
 80142ac:	4812      	ldr	r0, [pc, #72]	@ (80142f8 <acd_add+0x64>)
 80142ae:	f004 fd39 	bl	8018d24 <iprintf>
  acd->acd_conflict_callback = acd_conflict_callback;
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	687a      	ldr	r2, [r7, #4]
 80142b6:	611a      	str	r2, [r3, #16]

  /* Check if the acd struct is already added */
  for (acd2 = netif->acd_list; acd2 != NULL; acd2 = acd2->next) {
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80142bc:	617b      	str	r3, [r7, #20]
 80142be:	e008      	b.n	80142d2 <acd_add+0x3e>
    if (acd2 == acd) {
 80142c0:	697a      	ldr	r2, [r7, #20]
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	429a      	cmp	r2, r3
 80142c6:	d101      	bne.n	80142cc <acd_add+0x38>
      LWIP_DEBUGF(ACD_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                  ("acd_add(): acd already added to list\n"));
      return ERR_OK;
 80142c8:	2300      	movs	r3, #0
 80142ca:	e00d      	b.n	80142e8 <acd_add+0x54>
  for (acd2 = netif->acd_list; acd2 != NULL; acd2 = acd2->next) {
 80142cc:	697b      	ldr	r3, [r7, #20]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	617b      	str	r3, [r7, #20]
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d1f3      	bne.n	80142c0 <acd_add+0x2c>
    }
  }

  /* add acd struct to the list */
  acd->next = netif->acd_list;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80142dc:	68bb      	ldr	r3, [r7, #8]
 80142de:	601a      	str	r2, [r3, #0]
  netif->acd_list = acd;
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	68ba      	ldr	r2, [r7, #8]
 80142e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  return ERR_OK;
 80142e6:	2300      	movs	r3, #0
}
 80142e8:	4618      	mov	r0, r3
 80142ea:	3718      	adds	r7, #24
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}
 80142f0:	0801ca08 	.word	0x0801ca08
 80142f4:	0801ca20 	.word	0x0801ca20
 80142f8:	0801ca40 	.word	0x0801ca40

080142fc <acd_remove>:
 * @param netif network interface from which to remove the acd client
 * @param acd   acd module to be removed from the list
 */
void
acd_remove(struct netif *netif, struct acd *acd)
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b084      	sub	sp, #16
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
 8014304:	6039      	str	r1, [r7, #0]
  struct acd *acd2, *prev = NULL;
 8014306:	2300      	movs	r3, #0
 8014308:	60bb      	str	r3, [r7, #8]

  LWIP_ASSERT_CORE_LOCKED();

  for (acd2 = netif->acd_list; acd2 != NULL; acd2 = acd2->next) {
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801430e:	60fb      	str	r3, [r7, #12]
 8014310:	e015      	b.n	801433e <acd_remove+0x42>
    if (acd2 == acd) {
 8014312:	68fa      	ldr	r2, [r7, #12]
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	429a      	cmp	r2, r3
 8014318:	d10c      	bne.n	8014334 <acd_remove+0x38>
      if (prev) {
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d004      	beq.n	801432a <acd_remove+0x2e>
        prev->next = acd->next;
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	681a      	ldr	r2, [r3, #0]
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	601a      	str	r2, [r3, #0]
      } else {
        netif->acd_list = acd->next;
      }
      return;
 8014328:	e012      	b.n	8014350 <acd_remove+0x54>
        netif->acd_list = acd->next;
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	681a      	ldr	r2, [r3, #0]
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	63da      	str	r2, [r3, #60]	@ 0x3c
      return;
 8014332:	e00d      	b.n	8014350 <acd_remove+0x54>
    }
    prev = acd2;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	60bb      	str	r3, [r7, #8]
  for (acd2 = netif->acd_list; acd2 != NULL; acd2 = acd2->next) {
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	60fb      	str	r3, [r7, #12]
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d1e6      	bne.n	8014312 <acd_remove+0x16>
  }
  LWIP_ASSERT(("acd_remove(): acd not on list\n"), 0);
 8014344:	4b04      	ldr	r3, [pc, #16]	@ (8014358 <acd_remove+0x5c>)
 8014346:	22a9      	movs	r2, #169	@ 0xa9
 8014348:	4904      	ldr	r1, [pc, #16]	@ (801435c <acd_remove+0x60>)
 801434a:	4805      	ldr	r0, [pc, #20]	@ (8014360 <acd_remove+0x64>)
 801434c:	f004 fcea 	bl	8018d24 <iprintf>
}
 8014350:	3710      	adds	r7, #16
 8014352:	46bd      	mov	sp, r7
 8014354:	bd80      	pop	{r7, pc}
 8014356:	bf00      	nop
 8014358:	0801ca08 	.word	0x0801ca08
 801435c:	0801ca68 	.word	0x0801ca68
 8014360:	0801ca40 	.word	0x0801ca40

08014364 <acd_start>:
 * @param acd     acd module to start
 * @param ipaddr  ip address to perform acd on
 */
err_t
acd_start(struct netif *netif, struct acd *acd, ip4_addr_t ipaddr)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b086      	sub	sp, #24
 8014368:	af00      	add	r7, sp, #0
 801436a:	60f8      	str	r0, [r7, #12]
 801436c:	60b9      	str	r1, [r7, #8]
 801436e:	607a      	str	r2, [r7, #4]
  err_t result = ERR_OK;
 8014370:	2300      	movs	r3, #0
 8014372:	75fb      	strb	r3, [r7, #23]
              ("acd_start(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0],
               netif->name[1], (u16_t)netif->num));

  /* init probing state */
  acd->sent_num = 0;
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	2200      	movs	r2, #0
 8014378:	725a      	strb	r2, [r3, #9]
  acd->lastconflict = 0;
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	2200      	movs	r2, #0
 801437e:	731a      	strb	r2, [r3, #12]
  ip4_addr_copy(acd->ipaddr, ipaddr);
 8014380:	687a      	ldr	r2, [r7, #4]
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	605a      	str	r2, [r3, #4]
  acd->state = ACD_STATE_PROBE_WAIT;
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	2201      	movs	r2, #1
 801438a:	721a      	strb	r2, [r3, #8]

  acd->ttw = (u16_t)(ACD_RANDOM_PROBE_WAIT(netif, acd));
 801438c:	f004 fbca 	bl	8018b24 <rand>
 8014390:	4603      	mov	r3, r0
 8014392:	4619      	mov	r1, r3
 8014394:	4b08      	ldr	r3, [pc, #32]	@ (80143b8 <acd_start+0x54>)
 8014396:	fba3 2301 	umull	r2, r3, r3, r1
 801439a:	08da      	lsrs	r2, r3, #3
 801439c:	4613      	mov	r3, r2
 801439e:	009b      	lsls	r3, r3, #2
 80143a0:	4413      	add	r3, r2
 80143a2:	005b      	lsls	r3, r3, #1
 80143a4:	1aca      	subs	r2, r1, r3
 80143a6:	b292      	uxth	r2, r2
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	815a      	strh	r2, [r3, #10]

  return result;
 80143ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3718      	adds	r7, #24
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}
 80143b8:	cccccccd 	.word	0xcccccccd

080143bc <acd_stop>:
 *
 * @param acd   acd module to stop
 */
err_t
acd_stop(struct acd *acd)
{
 80143bc:	b480      	push	{r7}
 80143be:	b083      	sub	sp, #12
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(ACD_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("acd_stop\n"));

  if (acd != NULL) {
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d002      	beq.n	80143d0 <acd_stop+0x14>
    acd->state = ACD_STATE_OFF;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	2200      	movs	r2, #0
 80143ce:	721a      	strb	r2, [r3, #8]
  }
  return ERR_OK;
 80143d0:	2300      	movs	r3, #0
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	370c      	adds	r7, #12
 80143d6:	46bd      	mov	sp, r7
 80143d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143dc:	4770      	bx	lr

080143de <acd_network_changed_link_down>:
 *
 * @param netif network interface on which to inform the ACD clients
 */
void
acd_network_changed_link_down(struct netif *netif)
{
 80143de:	b580      	push	{r7, lr}
 80143e0:	b084      	sub	sp, #16
 80143e2:	af00      	add	r7, sp, #0
 80143e4:	6078      	str	r0, [r7, #4]
  struct acd *acd;
  /* loop over the acd's*/
  ACD_FOREACH(acd, netif->acd_list) {
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80143ea:	60fb      	str	r3, [r7, #12]
 80143ec:	e005      	b.n	80143fa <acd_network_changed_link_down+0x1c>
    acd_stop(acd);
 80143ee:	68f8      	ldr	r0, [r7, #12]
 80143f0:	f7ff ffe4 	bl	80143bc <acd_stop>
  ACD_FOREACH(acd, netif->acd_list) {
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	60fb      	str	r3, [r7, #12]
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d1f6      	bne.n	80143ee <acd_network_changed_link_down+0x10>
  }
}
 8014400:	bf00      	nop
 8014402:	bf00      	nop
 8014404:	3710      	adds	r7, #16
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}
	...

0801440c <acd_tmr>:
/**
 * Has to be called in loop every ACD_TMR_INTERVAL milliseconds
 */
void
acd_tmr(void)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b082      	sub	sp, #8
 8014410:	af00      	add	r7, sp, #0
  struct netif *netif;
  struct acd *acd;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014412:	4b5b      	ldr	r3, [pc, #364]	@ (8014580 <acd_tmr+0x174>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	607b      	str	r3, [r7, #4]
 8014418:	e0a8      	b.n	801456c <acd_tmr+0x160>
    ACD_FOREACH(acd, netif->acd_list) {
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801441e:	603b      	str	r3, [r7, #0]
 8014420:	e09d      	b.n	801455e <acd_tmr+0x152>
      if (acd->lastconflict > 0) {
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	7b1b      	ldrb	r3, [r3, #12]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d005      	beq.n	8014436 <acd_tmr+0x2a>
        acd->lastconflict--;
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	7b1b      	ldrb	r3, [r3, #12]
 801442e:	3b01      	subs	r3, #1
 8014430:	b2da      	uxtb	r2, r3
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	731a      	strb	r2, [r3, #12]

      LWIP_DEBUGF(ACD_DEBUG | LWIP_DBG_TRACE,
                  ("acd_tmr() ACD-State: %"U16_F", ttw=%"U16_F"\n",
                   (u16_t)(acd->state), acd->ttw));

      if (acd->ttw > 0) {
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	895b      	ldrh	r3, [r3, #10]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d005      	beq.n	801444a <acd_tmr+0x3e>
        acd->ttw--;
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	895b      	ldrh	r3, [r3, #10]
 8014442:	3b01      	subs	r3, #1
 8014444:	b29a      	uxth	r2, r3
 8014446:	683b      	ldr	r3, [r7, #0]
 8014448:	815a      	strh	r2, [r3, #10]
      }

      switch (acd->state) {
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	7a1b      	ldrb	r3, [r3, #8]
 801444e:	2b07      	cmp	r3, #7
 8014450:	d06e      	beq.n	8014530 <acd_tmr+0x124>
 8014452:	2b07      	cmp	r3, #7
 8014454:	dc79      	bgt.n	801454a <acd_tmr+0x13e>
 8014456:	2b02      	cmp	r3, #2
 8014458:	dc02      	bgt.n	8014460 <acd_tmr+0x54>
 801445a:	2b00      	cmp	r3, #0
 801445c:	dc04      	bgt.n	8014468 <acd_tmr+0x5c>
          }
          break;

        default:
          /* nothing to do in other states */
          break;
 801445e:	e074      	b.n	801454a <acd_tmr+0x13e>
 8014460:	3b03      	subs	r3, #3
      switch (acd->state) {
 8014462:	2b01      	cmp	r3, #1
 8014464:	d871      	bhi.n	801454a <acd_tmr+0x13e>
 8014466:	e033      	b.n	80144d0 <acd_tmr+0xc4>
          if (acd->ttw == 0) {
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	895b      	ldrh	r3, [r3, #10]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d16e      	bne.n	801454e <acd_tmr+0x142>
            acd->state = ACD_STATE_PROBING;
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	2202      	movs	r2, #2
 8014474:	721a      	strb	r2, [r3, #8]
            etharp_acd_probe(netif, &acd->ipaddr);
 8014476:	683b      	ldr	r3, [r7, #0]
 8014478:	3304      	adds	r3, #4
 801447a:	4619      	mov	r1, r3
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f002 fec7 	bl	8017210 <etharp_acd_probe>
            acd->sent_num++;
 8014482:	683b      	ldr	r3, [r7, #0]
 8014484:	7a5b      	ldrb	r3, [r3, #9]
 8014486:	3301      	adds	r3, #1
 8014488:	b2da      	uxtb	r2, r3
 801448a:	683b      	ldr	r3, [r7, #0]
 801448c:	725a      	strb	r2, [r3, #9]
            if (acd->sent_num >= PROBE_NUM) {
 801448e:	683b      	ldr	r3, [r7, #0]
 8014490:	7a5b      	ldrb	r3, [r3, #9]
 8014492:	2b02      	cmp	r3, #2
 8014494:	d909      	bls.n	80144aa <acd_tmr+0x9e>
              acd->state = ACD_STATE_ANNOUNCE_WAIT;
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	2203      	movs	r2, #3
 801449a:	721a      	strb	r2, [r3, #8]
              acd->sent_num = 0;
 801449c:	683b      	ldr	r3, [r7, #0]
 801449e:	2200      	movs	r2, #0
 80144a0:	725a      	strb	r2, [r3, #9]
              acd->ttw = (u16_t)(ANNOUNCE_WAIT * ACD_TICKS_PER_SECOND);
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	2214      	movs	r2, #20
 80144a6:	815a      	strh	r2, [r3, #10]
          break;
 80144a8:	e051      	b.n	801454e <acd_tmr+0x142>
              acd->ttw = (u16_t)(ACD_RANDOM_PROBE_INTERVAL(netif, acd));
 80144aa:	f004 fb3b 	bl	8018b24 <rand>
 80144ae:	4603      	mov	r3, r0
 80144b0:	4619      	mov	r1, r3
 80144b2:	4b34      	ldr	r3, [pc, #208]	@ (8014584 <acd_tmr+0x178>)
 80144b4:	fba3 2301 	umull	r2, r3, r3, r1
 80144b8:	08da      	lsrs	r2, r3, #3
 80144ba:	4613      	mov	r3, r2
 80144bc:	009b      	lsls	r3, r3, #2
 80144be:	4413      	add	r3, r2
 80144c0:	005b      	lsls	r3, r3, #1
 80144c2:	1aca      	subs	r2, r1, r3
 80144c4:	b293      	uxth	r3, r2
 80144c6:	330a      	adds	r3, #10
 80144c8:	b29a      	uxth	r2, r3
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	815a      	strh	r2, [r3, #10]
          break;
 80144ce:	e03e      	b.n	801454e <acd_tmr+0x142>
          if (acd->ttw == 0) {
 80144d0:	683b      	ldr	r3, [r7, #0]
 80144d2:	895b      	ldrh	r3, [r3, #10]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d13c      	bne.n	8014552 <acd_tmr+0x146>
            if (acd->sent_num == 0) {
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	7a5b      	ldrb	r3, [r3, #9]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d105      	bne.n	80144ec <acd_tmr+0xe0>
              acd->state = ACD_STATE_ANNOUNCING;
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	2204      	movs	r2, #4
 80144e4:	721a      	strb	r2, [r3, #8]
              acd->num_conflicts = 0;
 80144e6:	683b      	ldr	r3, [r7, #0]
 80144e8:	2200      	movs	r2, #0
 80144ea:	735a      	strb	r2, [r3, #13]
            etharp_acd_announce(netif, &acd->ipaddr);
 80144ec:	683b      	ldr	r3, [r7, #0]
 80144ee:	3304      	adds	r3, #4
 80144f0:	4619      	mov	r1, r3
 80144f2:	6878      	ldr	r0, [r7, #4]
 80144f4:	f002 feb0 	bl	8017258 <etharp_acd_announce>
            acd->ttw = ANNOUNCE_INTERVAL * ACD_TICKS_PER_SECOND;
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	2214      	movs	r2, #20
 80144fc:	815a      	strh	r2, [r3, #10]
            acd->sent_num++;
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	7a5b      	ldrb	r3, [r3, #9]
 8014502:	3301      	adds	r3, #1
 8014504:	b2da      	uxtb	r2, r3
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	725a      	strb	r2, [r3, #9]
            if (acd->sent_num >= ANNOUNCE_NUM) {
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	7a5b      	ldrb	r3, [r3, #9]
 801450e:	2b01      	cmp	r3, #1
 8014510:	d91f      	bls.n	8014552 <acd_tmr+0x146>
              acd->state = ACD_STATE_ONGOING;
 8014512:	683b      	ldr	r3, [r7, #0]
 8014514:	2205      	movs	r2, #5
 8014516:	721a      	strb	r2, [r3, #8]
              acd->sent_num = 0;
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	2200      	movs	r2, #0
 801451c:	725a      	strb	r2, [r3, #9]
              acd->ttw = 0;
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	2200      	movs	r2, #0
 8014522:	815a      	strh	r2, [r3, #10]
              acd->acd_conflict_callback(netif, ACD_IP_OK);
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	691b      	ldr	r3, [r3, #16]
 8014528:	2100      	movs	r1, #0
 801452a:	6878      	ldr	r0, [r7, #4]
 801452c:	4798      	blx	r3
          break;
 801452e:	e010      	b.n	8014552 <acd_tmr+0x146>
          if (acd->ttw == 0) {
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	895b      	ldrh	r3, [r3, #10]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d10e      	bne.n	8014556 <acd_tmr+0x14a>
            acd_stop(acd);
 8014538:	6838      	ldr	r0, [r7, #0]
 801453a:	f7ff ff3f 	bl	80143bc <acd_stop>
            acd->acd_conflict_callback(netif, ACD_RESTART_CLIENT);
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	691b      	ldr	r3, [r3, #16]
 8014542:	2101      	movs	r1, #1
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	4798      	blx	r3
          break;
 8014548:	e005      	b.n	8014556 <acd_tmr+0x14a>
          break;
 801454a:	bf00      	nop
 801454c:	e004      	b.n	8014558 <acd_tmr+0x14c>
          break;
 801454e:	bf00      	nop
 8014550:	e002      	b.n	8014558 <acd_tmr+0x14c>
          break;
 8014552:	bf00      	nop
 8014554:	e000      	b.n	8014558 <acd_tmr+0x14c>
          break;
 8014556:	bf00      	nop
    ACD_FOREACH(acd, netif->acd_list) {
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	603b      	str	r3, [r7, #0]
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	2b00      	cmp	r3, #0
 8014562:	f47f af5e 	bne.w	8014422 <acd_tmr+0x16>
  NETIF_FOREACH(netif) {
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	607b      	str	r3, [r7, #4]
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2b00      	cmp	r3, #0
 8014570:	f47f af53 	bne.w	801441a <acd_tmr+0xe>
      }
    }
  }
}
 8014574:	bf00      	nop
 8014576:	bf00      	nop
 8014578:	3708      	adds	r7, #8
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}
 801457e:	bf00      	nop
 8014580:	2000a2f8 	.word	0x2000a2f8
 8014584:	cccccccd 	.word	0xcccccccd

08014588 <acd_restart>:
 *
 * The number of conflicts is increased and the upper layer is informed.
 */
static void
acd_restart(struct netif *netif, struct acd *acd)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b082      	sub	sp, #8
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
 8014590:	6039      	str	r1, [r7, #0]
  /* increase conflict counter. */
  acd->num_conflicts++;
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	7b5b      	ldrb	r3, [r3, #13]
 8014596:	3301      	adds	r3, #1
 8014598:	b2da      	uxtb	r2, r3
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	735a      	strb	r2, [r3, #13]

  /* Decline the address */
  acd->acd_conflict_callback(netif, ACD_DECLINE);
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	691b      	ldr	r3, [r3, #16]
 80145a2:	2102      	movs	r1, #2
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	4798      	blx	r3

  /* if we tried more then MAX_CONFLICTS we must limit our rate for
   * acquiring and probing addresses. compliant to RFC 5227 Section 2.1.1 */
  if (acd->num_conflicts >= MAX_CONFLICTS) {
 80145a8:	683b      	ldr	r3, [r7, #0]
 80145aa:	7b5b      	ldrb	r3, [r3, #13]
 80145ac:	2b09      	cmp	r3, #9
 80145ae:	d907      	bls.n	80145c0 <acd_restart+0x38>
    acd->state = ACD_STATE_RATE_LIMIT;
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	2207      	movs	r2, #7
 80145b4:	721a      	strb	r2, [r3, #8]
    acd->ttw = (u16_t)(RATE_LIMIT_INTERVAL * ACD_TICKS_PER_SECOND);
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80145bc:	815a      	strh	r2, [r3, #10]
    acd_stop(acd);
    /* let the acd user know right away that their is a conflict detected.
     * So it can restart the address acquiring process. */
    acd->acd_conflict_callback(netif, ACD_RESTART_CLIENT);
  }
}
 80145be:	e007      	b.n	80145d0 <acd_restart+0x48>
    acd_stop(acd);
 80145c0:	6838      	ldr	r0, [r7, #0]
 80145c2:	f7ff fefb 	bl	80143bc <acd_stop>
    acd->acd_conflict_callback(netif, ACD_RESTART_CLIENT);
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	691b      	ldr	r3, [r3, #16]
 80145ca:	2101      	movs	r1, #1
 80145cc:	6878      	ldr	r0, [r7, #4]
 80145ce:	4798      	blx	r3
}
 80145d0:	bf00      	nop
 80145d2:	3708      	adds	r7, #8
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}

080145d8 <acd_arp_reply>:
 * @param netif network interface to use for acd processing
 * @param hdr   Incoming ARP packet
 */
void
acd_arp_reply(struct netif *netif, struct etharp_hdr *hdr)
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b088      	sub	sp, #32
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
 80145e0:	6039      	str	r1, [r7, #0]
  struct acd *acd;
  ip4_addr_t sipaddr, dipaddr;
  struct eth_addr netifaddr;
  SMEMCPY(netifaddr.addr, netif->hwaddr, ETH_HWADDR_LEN);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 80145e8:	f107 030c 	add.w	r3, r7, #12
 80145ec:	6810      	ldr	r0, [r2, #0]
 80145ee:	6018      	str	r0, [r3, #0]
 80145f0:	8892      	ldrh	r2, [r2, #4]
 80145f2:	809a      	strh	r2, [r3, #4]

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support
   * compilers without structure packing (not using structure copy which
   * breaks strict-aliasing rules).
   */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	330e      	adds	r3, #14
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	61bb      	str	r3, [r7, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	3318      	adds	r3, #24
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(ACD_DEBUG | LWIP_DBG_TRACE, ("acd_arp_reply()\n"));

  /* loop over the acd's*/
  ACD_FOREACH(acd, netif->acd_list) {
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014608:	61fb      	str	r3, [r7, #28]
 801460a:	e044      	b.n	8014696 <acd_arp_reply+0xbe>
    switch(acd->state) {
 801460c:	69fb      	ldr	r3, [r7, #28]
 801460e:	7a1b      	ldrb	r3, [r3, #8]
 8014610:	2b03      	cmp	r3, #3
 8014612:	dc02      	bgt.n	801461a <acd_arp_reply+0x42>
 8014614:	2b00      	cmp	r3, #0
 8014616:	dc04      	bgt.n	8014622 <acd_arp_reply+0x4a>
      case ACD_STATE_OFF:
      case ACD_STATE_RATE_LIMIT:
      default:
        /* do nothing */
        break;
 8014618:	e03a      	b.n	8014690 <acd_arp_reply+0xb8>
 801461a:	3b04      	subs	r3, #4
    switch(acd->state) {
 801461c:	2b02      	cmp	r3, #2
 801461e:	d91e      	bls.n	801465e <acd_arp_reply+0x86>
        break;
 8014620:	e036      	b.n	8014690 <acd_arp_reply+0xb8>
         * from beginning to after ANNOUNCE_WAIT seconds we have a conflict if
         * ip.src == ipaddr (someone is already using the address)
         * OR
         * ip.dst == ipaddr && hw.src != own hwaddr (someone else is probing it)
         */
        if ((ip4_addr_eq(&sipaddr, &acd->ipaddr)) ||
 8014622:	69ba      	ldr	r2, [r7, #24]
 8014624:	69fb      	ldr	r3, [r7, #28]
 8014626:	685b      	ldr	r3, [r3, #4]
 8014628:	429a      	cmp	r2, r3
 801462a:	d013      	beq.n	8014654 <acd_arp_reply+0x7c>
            (ip4_addr_isany_val(sipaddr) &&
 801462c:	69bb      	ldr	r3, [r7, #24]
        if ((ip4_addr_eq(&sipaddr, &acd->ipaddr)) ||
 801462e:	2b00      	cmp	r3, #0
 8014630:	d12b      	bne.n	801468a <acd_arp_reply+0xb2>
             ip4_addr_eq(&dipaddr, &acd->ipaddr) &&
 8014632:	697a      	ldr	r2, [r7, #20]
 8014634:	69fb      	ldr	r3, [r7, #28]
 8014636:	685b      	ldr	r3, [r3, #4]
            (ip4_addr_isany_val(sipaddr) &&
 8014638:	429a      	cmp	r2, r3
 801463a:	d126      	bne.n	801468a <acd_arp_reply+0xb2>
             !eth_addr_eq(&netifaddr, &hdr->shwaddr))) {
 801463c:	683b      	ldr	r3, [r7, #0]
 801463e:	f103 0108 	add.w	r1, r3, #8
 8014642:	f107 030c 	add.w	r3, r7, #12
 8014646:	2206      	movs	r2, #6
 8014648:	4618      	mov	r0, r3
 801464a:	f004 fce9 	bl	8019020 <memcmp>
 801464e:	4603      	mov	r3, r0
             ip4_addr_eq(&dipaddr, &acd->ipaddr) &&
 8014650:	2b00      	cmp	r3, #0
 8014652:	d01a      	beq.n	801468a <acd_arp_reply+0xb2>
          LWIP_DEBUGF(ACD_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                      ("acd_arp_reply(): Probe Conflict detected\n"));
          acd_restart(netif, acd);
 8014654:	69f9      	ldr	r1, [r7, #28]
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f7ff ff96 	bl	8014588 <acd_restart>
        }
        break;
 801465c:	e015      	b.n	801468a <acd_arp_reply+0xb2>
      case ACD_STATE_PASSIVE_ONGOING:
        /* RFC 5227 Section 2.4:
         * in any state we have a conflict if
         * ip.src == ipaddr && hw.src != own hwaddr (someone is using our address)
         */
        if (ip4_addr_eq(&sipaddr, &acd->ipaddr) &&
 801465e:	69ba      	ldr	r2, [r7, #24]
 8014660:	69fb      	ldr	r3, [r7, #28]
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	429a      	cmp	r2, r3
 8014666:	d112      	bne.n	801468e <acd_arp_reply+0xb6>
            !eth_addr_eq(&netifaddr, &hdr->shwaddr)) {
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	f103 0108 	add.w	r1, r3, #8
 801466e:	f107 030c 	add.w	r3, r7, #12
 8014672:	2206      	movs	r2, #6
 8014674:	4618      	mov	r0, r3
 8014676:	f004 fcd3 	bl	8019020 <memcmp>
 801467a:	4603      	mov	r3, r0
        if (ip4_addr_eq(&sipaddr, &acd->ipaddr) &&
 801467c:	2b00      	cmp	r3, #0
 801467e:	d006      	beq.n	801468e <acd_arp_reply+0xb6>
          LWIP_DEBUGF(ACD_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                      ("acd_arp_reply(): Conflicting ARP-Packet detected\n"));
          acd_handle_arp_conflict(netif, acd);
 8014680:	69f9      	ldr	r1, [r7, #28]
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f000 f80f 	bl	80146a6 <acd_handle_arp_conflict>
        }
        break;
 8014688:	e001      	b.n	801468e <acd_arp_reply+0xb6>
        break;
 801468a:	bf00      	nop
 801468c:	e000      	b.n	8014690 <acd_arp_reply+0xb8>
        break;
 801468e:	bf00      	nop
  ACD_FOREACH(acd, netif->acd_list) {
 8014690:	69fb      	ldr	r3, [r7, #28]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	61fb      	str	r3, [r7, #28]
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d1b7      	bne.n	801460c <acd_arp_reply+0x34>
    }
  }
}
 801469c:	bf00      	nop
 801469e:	bf00      	nop
 80146a0:	3720      	adds	r7, #32
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}

080146a6 <acd_handle_arp_conflict>:
/**
 * Handle a IP address conflict after an ARP conflict detection
 */
static void
acd_handle_arp_conflict(struct netif *netif, struct acd *acd)
{
 80146a6:	b580      	push	{r7, lr}
 80146a8:	b082      	sub	sp, #8
 80146aa:	af00      	add	r7, sp, #0
 80146ac:	6078      	str	r0, [r7, #4]
 80146ae:	6039      	str	r1, [r7, #0]
     We use option a) when the acd module does not represent the netif address,
     since we cannot have the acd module announcing or restarting. This
     situation occurs for the LL acd module when a routable address is used on
     the netif but the LL address is still open in the background. */

  if (acd->state == ACD_STATE_PASSIVE_ONGOING) {
 80146b0:	683b      	ldr	r3, [r7, #0]
 80146b2:	7a1b      	ldrb	r3, [r3, #8]
 80146b4:	2b06      	cmp	r3, #6
 80146b6:	d108      	bne.n	80146ca <acd_handle_arp_conflict+0x24>
    /* Immediately back off on a conflict. */
    LWIP_DEBUGF(ACD_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
      ("acd_handle_arp_conflict(): conflict when we are in passive mode -> back off\n"));
    acd_stop(acd);
 80146b8:	6838      	ldr	r0, [r7, #0]
 80146ba:	f7ff fe7f 	bl	80143bc <acd_stop>
    acd->acd_conflict_callback(netif, ACD_DECLINE);
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	691b      	ldr	r3, [r3, #16]
 80146c2:	2102      	movs	r1, #2
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	4798      	blx	r3
          ("acd_handle_arp_conflict(): we are defending, send ARP Announce\n"));
      etharp_acd_announce(netif, &acd->ipaddr);
      acd->lastconflict = DEFEND_INTERVAL * ACD_TICKS_PER_SECOND;
    }
  }
}
 80146c8:	e011      	b.n	80146ee <acd_handle_arp_conflict+0x48>
    if (acd->lastconflict > 0) {
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	7b1b      	ldrb	r3, [r3, #12]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d004      	beq.n	80146dc <acd_handle_arp_conflict+0x36>
       acd_restart(netif, acd);
 80146d2:	6839      	ldr	r1, [r7, #0]
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f7ff ff57 	bl	8014588 <acd_restart>
}
 80146da:	e008      	b.n	80146ee <acd_handle_arp_conflict+0x48>
      etharp_acd_announce(netif, &acd->ipaddr);
 80146dc:	683b      	ldr	r3, [r7, #0]
 80146de:	3304      	adds	r3, #4
 80146e0:	4619      	mov	r1, r3
 80146e2:	6878      	ldr	r0, [r7, #4]
 80146e4:	f002 fdb8 	bl	8017258 <etharp_acd_announce>
      acd->lastconflict = DEFEND_INTERVAL * ACD_TICKS_PER_SECOND;
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	2264      	movs	r2, #100	@ 0x64
 80146ec:	731a      	strb	r2, [r3, #12]
}
 80146ee:	bf00      	nop
 80146f0:	3708      	adds	r7, #8
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}

080146f6 <acd_put_in_passive_mode>:
/**
 * Put the acd module in passive ongoing conflict detection.
 */
static void
acd_put_in_passive_mode(struct netif *netif, struct acd *acd)
{
 80146f6:	b580      	push	{r7, lr}
 80146f8:	b082      	sub	sp, #8
 80146fa:	af00      	add	r7, sp, #0
 80146fc:	6078      	str	r0, [r7, #4]
 80146fe:	6039      	str	r1, [r7, #0]
  switch(acd->state) {
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	7a1b      	ldrb	r3, [r3, #8]
 8014704:	2b07      	cmp	r3, #7
 8014706:	d00a      	beq.n	801471e <acd_put_in_passive_mode+0x28>
 8014708:	2b07      	cmp	r3, #7
 801470a:	dc15      	bgt.n	8014738 <acd_put_in_passive_mode+0x42>
 801470c:	2b03      	cmp	r3, #3
 801470e:	dc02      	bgt.n	8014716 <acd_put_in_passive_mode+0x20>
 8014710:	2b00      	cmp	r3, #0
 8014712:	dc04      	bgt.n	801471e <acd_put_in_passive_mode+0x28>
    case ACD_STATE_OFF:
    case ACD_STATE_PASSIVE_ONGOING:
    default:
      /* do nothing */
      break;
 8014714:	e010      	b.n	8014738 <acd_put_in_passive_mode+0x42>
 8014716:	3b04      	subs	r3, #4
  switch(acd->state) {
 8014718:	2b01      	cmp	r3, #1
 801471a:	d909      	bls.n	8014730 <acd_put_in_passive_mode+0x3a>
      break;
 801471c:	e00c      	b.n	8014738 <acd_put_in_passive_mode+0x42>

    case ACD_STATE_PROBE_WAIT:
    case ACD_STATE_PROBING:
    case ACD_STATE_ANNOUNCE_WAIT:
    case ACD_STATE_RATE_LIMIT:
      acd_stop(acd);
 801471e:	6838      	ldr	r0, [r7, #0]
 8014720:	f7ff fe4c 	bl	80143bc <acd_stop>
      acd->acd_conflict_callback(netif, ACD_DECLINE);
 8014724:	683b      	ldr	r3, [r7, #0]
 8014726:	691b      	ldr	r3, [r3, #16]
 8014728:	2102      	movs	r1, #2
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	4798      	blx	r3
      break;
 801472e:	e004      	b.n	801473a <acd_put_in_passive_mode+0x44>

    case ACD_STATE_ANNOUNCING:
    case ACD_STATE_ONGOING:
      acd->state = ACD_STATE_PASSIVE_ONGOING;
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	2206      	movs	r2, #6
 8014734:	721a      	strb	r2, [r3, #8]
      LWIP_DEBUGF(ACD_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
        ("acd_put_in_passive_mode()\n"));
      break;
 8014736:	e000      	b.n	801473a <acd_put_in_passive_mode+0x44>
      break;
 8014738:	bf00      	nop
  }
}
 801473a:	bf00      	nop
 801473c:	3708      	adds	r7, #8
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}

08014742 <acd_netif_ip_addr_changed>:
 * @param new_addr  new ip address
 */
void
acd_netif_ip_addr_changed(struct netif *netif, const ip_addr_t *old_addr,
                          const ip_addr_t *new_addr)
{
 8014742:	b580      	push	{r7, lr}
 8014744:	b086      	sub	sp, #24
 8014746:	af00      	add	r7, sp, #0
 8014748:	60f8      	str	r0, [r7, #12]
 801474a:	60b9      	str	r1, [r7, #8]
 801474c:	607a      	str	r2, [r7, #4]
    ("acd_netif_ip_addr_changed(): old address = %s\n", ipaddr_ntoa(old_addr)));
  LWIP_DEBUGF(ACD_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
    ("acd_netif_ip_addr_changed(): new address = %s\n", ipaddr_ntoa(new_addr)));

  /* If we change from ANY to an IP or from an IP to ANY we do nothing */
  if (ip_addr_isany(old_addr) || ip_addr_isany(new_addr)) {
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d02d      	beq.n	80147b0 <acd_netif_ip_addr_changed+0x6e>
 8014754:	68bb      	ldr	r3, [r7, #8]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d029      	beq.n	80147b0 <acd_netif_ip_addr_changed+0x6e>
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d026      	beq.n	80147b0 <acd_netif_ip_addr_changed+0x6e>
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d022      	beq.n	80147b0 <acd_netif_ip_addr_changed+0x6e>
    return;
  }

  ACD_FOREACH(acd, netif->acd_list) {
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801476e:	617b      	str	r3, [r7, #20]
 8014770:	e01a      	b.n	80147a8 <acd_netif_ip_addr_changed+0x66>
    /* Find ACD module of old address */
    if(ip4_addr_eq(&acd->ipaddr, ip_2_ip4(old_addr))) {
 8014772:	697b      	ldr	r3, [r7, #20]
 8014774:	685a      	ldr	r2, [r3, #4]
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	429a      	cmp	r2, r3
 801477c:	d111      	bne.n	80147a2 <acd_netif_ip_addr_changed+0x60>
      /* Did we change from a LL address to a routable address? */
      if (ip_addr_islinklocal(old_addr) && !ip_addr_islinklocal(new_addr)) {
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	b29b      	uxth	r3, r3
 8014784:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014788:	4293      	cmp	r3, r2
 801478a:	d10a      	bne.n	80147a2 <acd_netif_ip_addr_changed+0x60>
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	b29b      	uxth	r3, r3
 8014792:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014796:	4293      	cmp	r3, r2
 8014798:	d003      	beq.n	80147a2 <acd_netif_ip_addr_changed+0x60>
        LWIP_DEBUGF(ACD_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
          ("acd_netif_ip_addr_changed(): changed from LL to routable address\n"));
        /* Put the module in passive conflict detection mode */
        acd_put_in_passive_mode(netif, acd);
 801479a:	6979      	ldr	r1, [r7, #20]
 801479c:	68f8      	ldr	r0, [r7, #12]
 801479e:	f7ff ffaa 	bl	80146f6 <acd_put_in_passive_mode>
  ACD_FOREACH(acd, netif->acd_list) {
 80147a2:	697b      	ldr	r3, [r7, #20]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	617b      	str	r3, [r7, #20]
 80147a8:	697b      	ldr	r3, [r7, #20]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d1e1      	bne.n	8014772 <acd_netif_ip_addr_changed+0x30>
 80147ae:	e000      	b.n	80147b2 <acd_netif_ip_addr_changed+0x70>
    return;
 80147b0:	bf00      	nop
      }
    }
  }
}
 80147b2:	3718      	adds	r7, #24
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}

080147b8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80147bc:	4b20      	ldr	r3, [pc, #128]	@ (8014840 <dhcp_inc_pcb_refcount+0x88>)
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d134      	bne.n	801482e <dhcp_inc_pcb_refcount+0x76>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80147c4:	4b1f      	ldr	r3, [pc, #124]	@ (8014844 <dhcp_inc_pcb_refcount+0x8c>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d006      	beq.n	80147da <dhcp_inc_pcb_refcount+0x22>
 80147cc:	4b1e      	ldr	r3, [pc, #120]	@ (8014848 <dhcp_inc_pcb_refcount+0x90>)
 80147ce:	f44f 728a 	mov.w	r2, #276	@ 0x114
 80147d2:	491e      	ldr	r1, [pc, #120]	@ (801484c <dhcp_inc_pcb_refcount+0x94>)
 80147d4:	481e      	ldr	r0, [pc, #120]	@ (8014850 <dhcp_inc_pcb_refcount+0x98>)
 80147d6:	f004 faa5 	bl	8018d24 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80147da:	f7ff fd13 	bl	8014204 <udp_new>
 80147de:	4603      	mov	r3, r0
 80147e0:	4a18      	ldr	r2, [pc, #96]	@ (8014844 <dhcp_inc_pcb_refcount+0x8c>)
 80147e2:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80147e4:	4b17      	ldr	r3, [pc, #92]	@ (8014844 <dhcp_inc_pcb_refcount+0x8c>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d102      	bne.n	80147f2 <dhcp_inc_pcb_refcount+0x3a>
      return ERR_MEM;
 80147ec:	f04f 33ff 	mov.w	r3, #4294967295
 80147f0:	e024      	b.n	801483c <dhcp_inc_pcb_refcount+0x84>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80147f2:	4b14      	ldr	r3, [pc, #80]	@ (8014844 <dhcp_inc_pcb_refcount+0x8c>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	7a5a      	ldrb	r2, [r3, #9]
 80147f8:	4b12      	ldr	r3, [pc, #72]	@ (8014844 <dhcp_inc_pcb_refcount+0x8c>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	f042 0220 	orr.w	r2, r2, #32
 8014800:	b2d2      	uxtb	r2, r2
 8014802:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014804:	4b0f      	ldr	r3, [pc, #60]	@ (8014844 <dhcp_inc_pcb_refcount+0x8c>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	2244      	movs	r2, #68	@ 0x44
 801480a:	4912      	ldr	r1, [pc, #72]	@ (8014854 <dhcp_inc_pcb_refcount+0x9c>)
 801480c:	4618      	mov	r0, r3
 801480e:	f7ff fbc1 	bl	8013f94 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014812:	4b0c      	ldr	r3, [pc, #48]	@ (8014844 <dhcp_inc_pcb_refcount+0x8c>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	2243      	movs	r2, #67	@ 0x43
 8014818:	490e      	ldr	r1, [pc, #56]	@ (8014854 <dhcp_inc_pcb_refcount+0x9c>)
 801481a:	4618      	mov	r0, r3
 801481c:	f7ff fc36 	bl	801408c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014820:	4b08      	ldr	r3, [pc, #32]	@ (8014844 <dhcp_inc_pcb_refcount+0x8c>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	2200      	movs	r2, #0
 8014826:	490c      	ldr	r1, [pc, #48]	@ (8014858 <dhcp_inc_pcb_refcount+0xa0>)
 8014828:	4618      	mov	r0, r3
 801482a:	f7ff fca3 	bl	8014174 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801482e:	4b04      	ldr	r3, [pc, #16]	@ (8014840 <dhcp_inc_pcb_refcount+0x88>)
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	3301      	adds	r3, #1
 8014834:	b2da      	uxtb	r2, r3
 8014836:	4b02      	ldr	r3, [pc, #8]	@ (8014840 <dhcp_inc_pcb_refcount+0x88>)
 8014838:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801483a:	2300      	movs	r3, #0
}
 801483c:	4618      	mov	r0, r3
 801483e:	bd80      	pop	{r7, pc}
 8014840:	2000a390 	.word	0x2000a390
 8014844:	2000a38c 	.word	0x2000a38c
 8014848:	0801ca88 	.word	0x0801ca88
 801484c:	0801caa0 	.word	0x0801caa0
 8014850:	0801cac8 	.word	0x0801cac8
 8014854:	0801d41c 	.word	0x0801d41c
 8014858:	08015f69 	.word	0x08015f69

0801485c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014860:	4b0f      	ldr	r3, [pc, #60]	@ (80148a0 <dhcp_dec_pcb_refcount+0x44>)
 8014862:	781b      	ldrb	r3, [r3, #0]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d106      	bne.n	8014876 <dhcp_dec_pcb_refcount+0x1a>
 8014868:	4b0e      	ldr	r3, [pc, #56]	@ (80148a4 <dhcp_dec_pcb_refcount+0x48>)
 801486a:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 801486e:	490e      	ldr	r1, [pc, #56]	@ (80148a8 <dhcp_dec_pcb_refcount+0x4c>)
 8014870:	480e      	ldr	r0, [pc, #56]	@ (80148ac <dhcp_dec_pcb_refcount+0x50>)
 8014872:	f004 fa57 	bl	8018d24 <iprintf>
  dhcp_pcb_refcount--;
 8014876:	4b0a      	ldr	r3, [pc, #40]	@ (80148a0 <dhcp_dec_pcb_refcount+0x44>)
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	3b01      	subs	r3, #1
 801487c:	b2da      	uxtb	r2, r3
 801487e:	4b08      	ldr	r3, [pc, #32]	@ (80148a0 <dhcp_dec_pcb_refcount+0x44>)
 8014880:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014882:	4b07      	ldr	r3, [pc, #28]	@ (80148a0 <dhcp_dec_pcb_refcount+0x44>)
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d107      	bne.n	801489a <dhcp_dec_pcb_refcount+0x3e>
    udp_remove(dhcp_pcb);
 801488a:	4b09      	ldr	r3, [pc, #36]	@ (80148b0 <dhcp_dec_pcb_refcount+0x54>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	4618      	mov	r0, r3
 8014890:	f7ff fc84 	bl	801419c <udp_remove>
    dhcp_pcb = NULL;
 8014894:	4b06      	ldr	r3, [pc, #24]	@ (80148b0 <dhcp_dec_pcb_refcount+0x54>)
 8014896:	2200      	movs	r2, #0
 8014898:	601a      	str	r2, [r3, #0]
  }
}
 801489a:	bf00      	nop
 801489c:	bd80      	pop	{r7, pc}
 801489e:	bf00      	nop
 80148a0:	2000a390 	.word	0x2000a390
 80148a4:	0801ca88 	.word	0x0801ca88
 80148a8:	0801caf0 	.word	0x0801caf0
 80148ac:	0801cac8 	.word	0x0801cac8
 80148b0:	2000a38c 	.word	0x2000a38c

080148b4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b084      	sub	sp, #16
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148c0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80148c2:	210c      	movs	r1, #12
 80148c4:	68f8      	ldr	r0, [r7, #12]
 80148c6:	f000 fff7 	bl	80158b8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80148ca:	4b06      	ldr	r3, [pc, #24]	@ (80148e4 <dhcp_handle_nak+0x30>)
 80148cc:	4a05      	ldr	r2, [pc, #20]	@ (80148e4 <dhcp_handle_nak+0x30>)
 80148ce:	4905      	ldr	r1, [pc, #20]	@ (80148e4 <dhcp_handle_nak+0x30>)
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f7f8 fdaf 	bl	800d434 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f000 fc0c 	bl	80150f4 <dhcp_discover>
}
 80148dc:	bf00      	nop
 80148de:	3710      	adds	r7, #16
 80148e0:	46bd      	mov	sp, r7
 80148e2:	bd80      	pop	{r7, pc}
 80148e4:	0801d41c 	.word	0x0801d41c

080148e8 <dhcp_conflict_callback>:
* @param netif   network interface to handle conflict information on
* @param state   acd_callback_enum_t
 */
static void
dhcp_conflict_callback(struct netif *netif, acd_callback_enum_t state)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b084      	sub	sp, #16
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
 80148f0:	460b      	mov	r3, r1
 80148f2:	70fb      	strb	r3, [r7, #3]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148f8:	60fb      	str	r3, [r7, #12]
  u16_t msecs;

  LWIP_ASSERT("DHCP should be enabled at this point, but it is not!",
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d003      	beq.n	8014908 <dhcp_conflict_callback+0x20>
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	795b      	ldrb	r3, [r3, #5]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d106      	bne.n	8014916 <dhcp_conflict_callback+0x2e>
 8014908:	4b1b      	ldr	r3, [pc, #108]	@ (8014978 <dhcp_conflict_callback+0x90>)
 801490a:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 801490e:	491b      	ldr	r1, [pc, #108]	@ (801497c <dhcp_conflict_callback+0x94>)
 8014910:	481b      	ldr	r0, [pc, #108]	@ (8014980 <dhcp_conflict_callback+0x98>)
 8014912:	f004 fa07 	bl	8018d24 <iprintf>
              (dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF));

  switch (state) {
 8014916:	78fb      	ldrb	r3, [r7, #3]
 8014918:	2b02      	cmp	r3, #2
 801491a:	d01e      	beq.n	801495a <dhcp_conflict_callback+0x72>
 801491c:	2b02      	cmp	r3, #2
 801491e:	dc26      	bgt.n	801496e <dhcp_conflict_callback+0x86>
 8014920:	2b00      	cmp	r3, #0
 8014922:	d002      	beq.n	801492a <dhcp_conflict_callback+0x42>
 8014924:	2b01      	cmp	r3, #1
 8014926:	d004      	beq.n	8014932 <dhcp_conflict_callback+0x4a>
      netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
      /* Let the DHCP server know we will not use the address */
      dhcp_decline(netif);
      break;
    default:
      break;
 8014928:	e021      	b.n	801496e <dhcp_conflict_callback+0x86>
      dhcp_bind(netif);
 801492a:	6878      	ldr	r0, [r7, #4]
 801492c:	f000 fc84 	bl	8015238 <dhcp_bind>
      break;
 8014930:	e01e      	b.n	8014970 <dhcp_conflict_callback+0x88>
       dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014932:	210c      	movs	r1, #12
 8014934:	68f8      	ldr	r0, [r7, #12]
 8014936:	f000 ffbf 	bl	80158b8 <dhcp_set_state>
       msecs = 10 * 1000;
 801493a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801493e:	817b      	strh	r3, [r7, #10]
       dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014940:	897b      	ldrh	r3, [r7, #10]
 8014942:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014946:	4a0f      	ldr	r2, [pc, #60]	@ (8014984 <dhcp_conflict_callback+0x9c>)
 8014948:	fb82 1203 	smull	r1, r2, r2, r3
 801494c:	1152      	asrs	r2, r2, #5
 801494e:	17db      	asrs	r3, r3, #31
 8014950:	1ad3      	subs	r3, r2, r3
 8014952:	b29a      	uxth	r2, r3
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	811a      	strh	r2, [r3, #8]
      break;
 8014958:	e00a      	b.n	8014970 <dhcp_conflict_callback+0x88>
      netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801495a:	4b0b      	ldr	r3, [pc, #44]	@ (8014988 <dhcp_conflict_callback+0xa0>)
 801495c:	4a0a      	ldr	r2, [pc, #40]	@ (8014988 <dhcp_conflict_callback+0xa0>)
 801495e:	490a      	ldr	r1, [pc, #40]	@ (8014988 <dhcp_conflict_callback+0xa0>)
 8014960:	6878      	ldr	r0, [r7, #4]
 8014962:	f7f8 fd67 	bl	800d434 <netif_set_addr>
      dhcp_decline(netif);
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f000 fb6a 	bl	8015040 <dhcp_decline>
      break;
 801496c:	e000      	b.n	8014970 <dhcp_conflict_callback+0x88>
      break;
 801496e:	bf00      	nop
  }
}
 8014970:	bf00      	nop
 8014972:	3710      	adds	r7, #16
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	0801ca88 	.word	0x0801ca88
 801497c:	0801cb14 	.word	0x0801cb14
 8014980:	0801cac8 	.word	0x0801cac8
 8014984:	10624dd3 	.word	0x10624dd3
 8014988:	0801d41c 	.word	0x0801d41c

0801498c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b084      	sub	sp, #16
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014998:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801499a:	2108      	movs	r1, #8
 801499c:	68f8      	ldr	r0, [r7, #12]
 801499e:	f000 ff8b 	bl	80158b8 <dhcp_set_state>

  /* start ACD module */
  acd_start(netif, &dhcp->acd, dhcp->offered_ip_addr);
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	69da      	ldr	r2, [r3, #28]
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f7ff fcd9 	bl	8014364 <acd_start>
}
 80149b2:	bf00      	nop
 80149b4:	3710      	adds	r7, #16
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
	...

080149bc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b084      	sub	sp, #16
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80149cc:	4b0c      	ldr	r3, [pc, #48]	@ (8014a00 <dhcp_handle_offer+0x44>)
 80149ce:	789b      	ldrb	r3, [r3, #2]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d011      	beq.n	80149f8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	2200      	movs	r2, #0
 80149d8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80149da:	4b0a      	ldr	r3, [pc, #40]	@ (8014a04 <dhcp_handle_offer+0x48>)
 80149dc:	689b      	ldr	r3, [r3, #8]
 80149de:	4618      	mov	r0, r3
 80149e0:	f7f7 fe6c 	bl	800c6bc <lwip_htonl>
 80149e4:	4602      	mov	r2, r0
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	691a      	ldr	r2, [r3, #16]
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f000 f808 	bl	8014a08 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80149f8:	bf00      	nop
 80149fa:	3710      	adds	r7, #16
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd80      	pop	{r7, pc}
 8014a00:	2000a384 	.word	0x2000a384
 8014a04:	2000a364 	.word	0x2000a364

08014a08 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014a08:	b5b0      	push	{r4, r5, r7, lr}
 8014a0a:	b08a      	sub	sp, #40	@ 0x28
 8014a0c:	af02      	add	r7, sp, #8
 8014a0e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d102      	bne.n	8014a1c <dhcp_select+0x14>
 8014a16:	f06f 030f 	mvn.w	r3, #15
 8014a1a:	e0cc      	b.n	8014bb6 <dhcp_select+0x1ae>
  dhcp = netif_dhcp_data(netif);
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a20:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014a22:	69bb      	ldr	r3, [r7, #24]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d102      	bne.n	8014a2e <dhcp_select+0x26>
 8014a28:	f06f 0305 	mvn.w	r3, #5
 8014a2c:	e0c3      	b.n	8014bb6 <dhcp_select+0x1ae>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014a2e:	2101      	movs	r1, #1
 8014a30:	69b8      	ldr	r0, [r7, #24]
 8014a32:	f000 ff41 	bl	80158b8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014a36:	f107 030c 	add.w	r3, r7, #12
 8014a3a:	2203      	movs	r2, #3
 8014a3c:	69b9      	ldr	r1, [r7, #24]
 8014a3e:	6878      	ldr	r0, [r7, #4]
 8014a40:	f001 fb60 	bl	8016104 <dhcp_create_msg>
 8014a44:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014a46:	697b      	ldr	r3, [r7, #20]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	f000 8085 	beq.w	8014b58 <dhcp_select+0x150>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	685b      	ldr	r3, [r3, #4]
 8014a52:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014a54:	89b8      	ldrh	r0, [r7, #12]
 8014a56:	693b      	ldr	r3, [r7, #16]
 8014a58:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014a5c:	2302      	movs	r3, #2
 8014a5e:	2239      	movs	r2, #57	@ 0x39
 8014a60:	f000 ff44 	bl	80158ec <dhcp_option>
 8014a64:	4603      	mov	r3, r0
 8014a66:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014a68:	89b8      	ldrh	r0, [r7, #12]
 8014a6a:	693b      	ldr	r3, [r7, #16]
 8014a6c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014a74:	461a      	mov	r2, r3
 8014a76:	f000 ff93 	bl	80159a0 <dhcp_option_short>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014a7e:	89b8      	ldrh	r0, [r7, #12]
 8014a80:	693b      	ldr	r3, [r7, #16]
 8014a82:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014a86:	2304      	movs	r3, #4
 8014a88:	2232      	movs	r2, #50	@ 0x32
 8014a8a:	f000 ff2f 	bl	80158ec <dhcp_option>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014a92:	89bc      	ldrh	r4, [r7, #12]
 8014a94:	693b      	ldr	r3, [r7, #16]
 8014a96:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014a9a:	69bb      	ldr	r3, [r7, #24]
 8014a9c:	69db      	ldr	r3, [r3, #28]
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f7f7 fe0c 	bl	800c6bc <lwip_htonl>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	461a      	mov	r2, r3
 8014aa8:	4629      	mov	r1, r5
 8014aaa:	4620      	mov	r0, r4
 8014aac:	f000 ffaa 	bl	8015a04 <dhcp_option_long>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014ab4:	89b8      	ldrh	r0, [r7, #12]
 8014ab6:	693b      	ldr	r3, [r7, #16]
 8014ab8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014abc:	2304      	movs	r3, #4
 8014abe:	2236      	movs	r2, #54	@ 0x36
 8014ac0:	f000 ff14 	bl	80158ec <dhcp_option>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014ac8:	89bc      	ldrh	r4, [r7, #12]
 8014aca:	693b      	ldr	r3, [r7, #16]
 8014acc:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8014ad0:	69bb      	ldr	r3, [r7, #24]
 8014ad2:	699b      	ldr	r3, [r3, #24]
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7f7 fdf1 	bl	800c6bc <lwip_htonl>
 8014ada:	4603      	mov	r3, r0
 8014adc:	461a      	mov	r2, r3
 8014ade:	4629      	mov	r1, r5
 8014ae0:	4620      	mov	r0, r4
 8014ae2:	f000 ff8f 	bl	8015a04 <dhcp_option_long>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014aea:	89b8      	ldrh	r0, [r7, #12]
 8014aec:	693b      	ldr	r3, [r7, #16]
 8014aee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014af2:	2303      	movs	r3, #3
 8014af4:	2237      	movs	r2, #55	@ 0x37
 8014af6:	f000 fef9 	bl	80158ec <dhcp_option>
 8014afa:	4603      	mov	r3, r0
 8014afc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014afe:	2300      	movs	r3, #0
 8014b00:	77bb      	strb	r3, [r7, #30]
 8014b02:	e00e      	b.n	8014b22 <dhcp_select+0x11a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014b04:	89b8      	ldrh	r0, [r7, #12]
 8014b06:	693b      	ldr	r3, [r7, #16]
 8014b08:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014b0c:	7fbb      	ldrb	r3, [r7, #30]
 8014b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8014bc0 <dhcp_select+0x1b8>)
 8014b10:	5cd3      	ldrb	r3, [r2, r3]
 8014b12:	461a      	mov	r2, r3
 8014b14:	f000 ff1e 	bl	8015954 <dhcp_option_byte>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014b1c:	7fbb      	ldrb	r3, [r7, #30]
 8014b1e:	3301      	adds	r3, #1
 8014b20:	77bb      	strb	r3, [r7, #30]
 8014b22:	7fbb      	ldrb	r3, [r7, #30]
 8014b24:	2b02      	cmp	r3, #2
 8014b26:	d9ed      	bls.n	8014b04 <dhcp_select+0xfc>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014b28:	89b8      	ldrh	r0, [r7, #12]
 8014b2a:	693b      	ldr	r3, [r7, #16]
 8014b2c:	33f0      	adds	r3, #240	@ 0xf0
 8014b2e:	697a      	ldr	r2, [r7, #20]
 8014b30:	4619      	mov	r1, r3
 8014b32:	f001 fbab 	bl	801628c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014b36:	4b23      	ldr	r3, [pc, #140]	@ (8014bc4 <dhcp_select+0x1bc>)
 8014b38:	6818      	ldr	r0, [r3, #0]
 8014b3a:	4b23      	ldr	r3, [pc, #140]	@ (8014bc8 <dhcp_select+0x1c0>)
 8014b3c:	9301      	str	r3, [sp, #4]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	9300      	str	r3, [sp, #0]
 8014b42:	2343      	movs	r3, #67	@ 0x43
 8014b44:	4a21      	ldr	r2, [pc, #132]	@ (8014bcc <dhcp_select+0x1c4>)
 8014b46:	6979      	ldr	r1, [r7, #20]
 8014b48:	f7ff f96c 	bl	8013e24 <udp_sendto_if_src>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014b50:	6978      	ldr	r0, [r7, #20]
 8014b52:	f7f9 f909 	bl	800dd68 <pbuf_free>
 8014b56:	e001      	b.n	8014b5c <dhcp_select+0x154>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014b58:	23ff      	movs	r3, #255	@ 0xff
 8014b5a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014b5c:	69bb      	ldr	r3, [r7, #24]
 8014b5e:	799b      	ldrb	r3, [r3, #6]
 8014b60:	2bff      	cmp	r3, #255	@ 0xff
 8014b62:	d005      	beq.n	8014b70 <dhcp_select+0x168>
    dhcp->tries++;
 8014b64:	69bb      	ldr	r3, [r7, #24]
 8014b66:	799b      	ldrb	r3, [r3, #6]
 8014b68:	3301      	adds	r3, #1
 8014b6a:	b2da      	uxtb	r2, r3
 8014b6c:	69bb      	ldr	r3, [r7, #24]
 8014b6e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014b70:	69bb      	ldr	r3, [r7, #24]
 8014b72:	799b      	ldrb	r3, [r3, #6]
 8014b74:	2b05      	cmp	r3, #5
 8014b76:	d80d      	bhi.n	8014b94 <dhcp_select+0x18c>
 8014b78:	69bb      	ldr	r3, [r7, #24]
 8014b7a:	799b      	ldrb	r3, [r3, #6]
 8014b7c:	461a      	mov	r2, r3
 8014b7e:	2301      	movs	r3, #1
 8014b80:	4093      	lsls	r3, r2
 8014b82:	b29b      	uxth	r3, r3
 8014b84:	461a      	mov	r2, r3
 8014b86:	0152      	lsls	r2, r2, #5
 8014b88:	1ad2      	subs	r2, r2, r3
 8014b8a:	0092      	lsls	r2, r2, #2
 8014b8c:	4413      	add	r3, r2
 8014b8e:	00db      	lsls	r3, r3, #3
 8014b90:	b29b      	uxth	r3, r3
 8014b92:	e001      	b.n	8014b98 <dhcp_select+0x190>
 8014b94:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8014b98:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014b9a:	89fb      	ldrh	r3, [r7, #14]
 8014b9c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8014bd0 <dhcp_select+0x1c8>)
 8014ba2:	fb82 1203 	smull	r1, r2, r2, r3
 8014ba6:	1152      	asrs	r2, r2, #5
 8014ba8:	17db      	asrs	r3, r3, #31
 8014baa:	1ad3      	subs	r3, r2, r3
 8014bac:	b29a      	uxth	r2, r3
 8014bae:	69bb      	ldr	r3, [r7, #24]
 8014bb0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014bb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3720      	adds	r7, #32
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8014bbe:	bf00      	nop
 8014bc0:	20000030 	.word	0x20000030
 8014bc4:	2000a38c 	.word	0x2000a38c
 8014bc8:	0801d41c 	.word	0x0801d41c
 8014bcc:	0801d420 	.word	0x0801d420
 8014bd0:	10624dd3 	.word	0x10624dd3

08014bd4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b082      	sub	sp, #8
 8014bd8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014bda:	4b27      	ldr	r3, [pc, #156]	@ (8014c78 <dhcp_coarse_tmr+0xa4>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	607b      	str	r3, [r7, #4]
 8014be0:	e042      	b.n	8014c68 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014be6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d039      	beq.n	8014c62 <dhcp_coarse_tmr+0x8e>
 8014bee:	683b      	ldr	r3, [r7, #0]
 8014bf0:	795b      	ldrb	r3, [r3, #5]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d035      	beq.n	8014c62 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	8a9b      	ldrh	r3, [r3, #20]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d012      	beq.n	8014c24 <dhcp_coarse_tmr+0x50>
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	8a5b      	ldrh	r3, [r3, #18]
 8014c02:	3301      	adds	r3, #1
 8014c04:	b29a      	uxth	r2, r3
 8014c06:	683b      	ldr	r3, [r7, #0]
 8014c08:	825a      	strh	r2, [r3, #18]
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	8a5a      	ldrh	r2, [r3, #18]
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	8a9b      	ldrh	r3, [r3, #20]
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d106      	bne.n	8014c24 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f000 fdaa 	bl	8015770 <dhcp_release_and_stop>
        dhcp_start(netif);
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f000 f961 	bl	8014ee4 <dhcp_start>
 8014c22:	e01e      	b.n	8014c62 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	8a1b      	ldrh	r3, [r3, #16]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d00b      	beq.n	8014c44 <dhcp_coarse_tmr+0x70>
 8014c2c:	683b      	ldr	r3, [r7, #0]
 8014c2e:	8a1b      	ldrh	r3, [r3, #16]
 8014c30:	1e5a      	subs	r2, r3, #1
 8014c32:	b291      	uxth	r1, r2
 8014c34:	683a      	ldr	r2, [r7, #0]
 8014c36:	8211      	strh	r1, [r2, #16]
 8014c38:	2b01      	cmp	r3, #1
 8014c3a:	d103      	bne.n	8014c44 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f000 f8b6 	bl	8014dae <dhcp_t2_timeout>
 8014c42:	e00e      	b.n	8014c62 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014c44:	683b      	ldr	r3, [r7, #0]
 8014c46:	89db      	ldrh	r3, [r3, #14]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d00a      	beq.n	8014c62 <dhcp_coarse_tmr+0x8e>
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	89db      	ldrh	r3, [r3, #14]
 8014c50:	1e5a      	subs	r2, r3, #1
 8014c52:	b291      	uxth	r1, r2
 8014c54:	683a      	ldr	r2, [r7, #0]
 8014c56:	81d1      	strh	r1, [r2, #14]
 8014c58:	2b01      	cmp	r3, #1
 8014c5a:	d102      	bne.n	8014c62 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014c5c:	6878      	ldr	r0, [r7, #4]
 8014c5e:	f000 f878 	bl	8014d52 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	607b      	str	r3, [r7, #4]
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d1b9      	bne.n	8014be2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014c6e:	bf00      	nop
 8014c70:	bf00      	nop
 8014c72:	3708      	adds	r7, #8
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}
 8014c78:	2000a2f8 	.word	0x2000a2f8

08014c7c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b082      	sub	sp, #8
 8014c80:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014c82:	4b16      	ldr	r3, [pc, #88]	@ (8014cdc <dhcp_fine_tmr+0x60>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	607b      	str	r3, [r7, #4]
 8014c88:	e020      	b.n	8014ccc <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c8e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d017      	beq.n	8014cc6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014c96:	683b      	ldr	r3, [r7, #0]
 8014c98:	891b      	ldrh	r3, [r3, #8]
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d906      	bls.n	8014cac <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014c9e:	683b      	ldr	r3, [r7, #0]
 8014ca0:	891b      	ldrh	r3, [r3, #8]
 8014ca2:	3b01      	subs	r3, #1
 8014ca4:	b29a      	uxth	r2, r3
 8014ca6:	683b      	ldr	r3, [r7, #0]
 8014ca8:	811a      	strh	r2, [r3, #8]
 8014caa:	e00c      	b.n	8014cc6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014cac:	683b      	ldr	r3, [r7, #0]
 8014cae:	891b      	ldrh	r3, [r3, #8]
 8014cb0:	2b01      	cmp	r3, #1
 8014cb2:	d108      	bne.n	8014cc6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	891b      	ldrh	r3, [r3, #8]
 8014cb8:	3b01      	subs	r3, #1
 8014cba:	b29a      	uxth	r2, r3
 8014cbc:	683b      	ldr	r3, [r7, #0]
 8014cbe:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	f000 f80d 	bl	8014ce0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	607b      	str	r3, [r7, #4]
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d1db      	bne.n	8014c8a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014cd2:	bf00      	nop
 8014cd4:	bf00      	nop
 8014cd6:	3708      	adds	r7, #8
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd80      	pop	{r7, pc}
 8014cdc:	2000a2f8 	.word	0x2000a2f8

08014ce0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b084      	sub	sp, #16
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cec:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	795b      	ldrb	r3, [r3, #5]
 8014cf2:	2b0c      	cmp	r3, #12
 8014cf4:	d003      	beq.n	8014cfe <dhcp_timeout+0x1e>
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	795b      	ldrb	r3, [r3, #5]
 8014cfa:	2b06      	cmp	r3, #6
 8014cfc:	d103      	bne.n	8014d06 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f000 f9f8 	bl	80150f4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014d04:	e021      	b.n	8014d4a <dhcp_timeout+0x6a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	795b      	ldrb	r3, [r3, #5]
 8014d0a:	2b01      	cmp	r3, #1
 8014d0c:	d10e      	bne.n	8014d2c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	799b      	ldrb	r3, [r3, #6]
 8014d12:	2b05      	cmp	r3, #5
 8014d14:	d803      	bhi.n	8014d1e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f7ff fe76 	bl	8014a08 <dhcp_select>
}
 8014d1c:	e015      	b.n	8014d4a <dhcp_timeout+0x6a>
      dhcp_release_and_stop(netif);
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f000 fd26 	bl	8015770 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f000 f8dd 	bl	8014ee4 <dhcp_start>
}
 8014d2a:	e00e      	b.n	8014d4a <dhcp_timeout+0x6a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	795b      	ldrb	r3, [r3, #5]
 8014d30:	2b03      	cmp	r3, #3
 8014d32:	d10a      	bne.n	8014d4a <dhcp_timeout+0x6a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	799b      	ldrb	r3, [r3, #6]
 8014d38:	2b01      	cmp	r3, #1
 8014d3a:	d803      	bhi.n	8014d44 <dhcp_timeout+0x64>
      dhcp_reboot(netif);
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f000 fc63 	bl	8015608 <dhcp_reboot>
}
 8014d42:	e002      	b.n	8014d4a <dhcp_timeout+0x6a>
      dhcp_discover(netif);
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f000 f9d5 	bl	80150f4 <dhcp_discover>
}
 8014d4a:	bf00      	nop
 8014d4c:	3710      	adds	r7, #16
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}

08014d52 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014d52:	b580      	push	{r7, lr}
 8014d54:	b084      	sub	sp, #16
 8014d56:	af00      	add	r7, sp, #0
 8014d58:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d5e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	795b      	ldrb	r3, [r3, #5]
 8014d64:	2b01      	cmp	r3, #1
 8014d66:	d007      	beq.n	8014d78 <dhcp_t1_timeout+0x26>
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	795b      	ldrb	r3, [r3, #5]
 8014d6c:	2b0a      	cmp	r3, #10
 8014d6e:	d003      	beq.n	8014d78 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014d74:	2b05      	cmp	r3, #5
 8014d76:	d116      	bne.n	8014da6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014d78:	6878      	ldr	r0, [r7, #4]
 8014d7a:	f000 fb11 	bl	80153a0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= DHCP_NEXT_TIMEOUT_THRESHOLD) {
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	899b      	ldrh	r3, [r3, #12]
 8014d82:	461a      	mov	r2, r3
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	8a5b      	ldrh	r3, [r3, #18]
 8014d88:	1ad3      	subs	r3, r2, r3
 8014d8a:	2b01      	cmp	r3, #1
 8014d8c:	dd0b      	ble.n	8014da6 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (dhcp_timeout_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	899b      	ldrh	r3, [r3, #12]
 8014d92:	461a      	mov	r2, r3
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	8a5b      	ldrh	r3, [r3, #18]
 8014d98:	1ad3      	subs	r3, r2, r3
 8014d9a:	0fda      	lsrs	r2, r3, #31
 8014d9c:	4413      	add	r3, r2
 8014d9e:	105b      	asrs	r3, r3, #1
 8014da0:	b29a      	uxth	r2, r3
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014da6:	bf00      	nop
 8014da8:	3710      	adds	r7, #16
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}

08014dae <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014dae:	b580      	push	{r7, lr}
 8014db0:	b084      	sub	sp, #16
 8014db2:	af00      	add	r7, sp, #0
 8014db4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	795b      	ldrb	r3, [r3, #5]
 8014dc0:	2b01      	cmp	r3, #1
 8014dc2:	d00b      	beq.n	8014ddc <dhcp_t2_timeout+0x2e>
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	795b      	ldrb	r3, [r3, #5]
 8014dc8:	2b0a      	cmp	r3, #10
 8014dca:	d007      	beq.n	8014ddc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014dd0:	2b05      	cmp	r3, #5
 8014dd2:	d003      	beq.n	8014ddc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	795b      	ldrb	r3, [r3, #5]
 8014dd8:	2b04      	cmp	r3, #4
 8014dda:	d116      	bne.n	8014e0a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014ddc:	6878      	ldr	r0, [r7, #4]
 8014dde:	f000 fb79 	bl	80154d4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= DHCP_NEXT_TIMEOUT_THRESHOLD) {
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	8a9b      	ldrh	r3, [r3, #20]
 8014de6:	461a      	mov	r2, r3
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	8a5b      	ldrh	r3, [r3, #18]
 8014dec:	1ad3      	subs	r3, r2, r3
 8014dee:	2b01      	cmp	r3, #1
 8014df0:	dd0b      	ble.n	8014e0a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (dhcp_timeout_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	8a9b      	ldrh	r3, [r3, #20]
 8014df6:	461a      	mov	r2, r3
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	8a5b      	ldrh	r3, [r3, #18]
 8014dfc:	1ad3      	subs	r3, r2, r3
 8014dfe:	0fda      	lsrs	r2, r3, #31
 8014e00:	4413      	add	r3, r2
 8014e02:	105b      	asrs	r3, r3, #1
 8014e04:	b29a      	uxth	r2, r3
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014e0a:	bf00      	nop
 8014e0c:	3710      	adds	r7, #16
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}
	...

08014e14 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b084      	sub	sp, #16
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e22:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	2200      	movs	r2, #0
 8014e28:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014e30:	4b2a      	ldr	r3, [pc, #168]	@ (8014edc <dhcp_handle_ack+0xc8>)
 8014e32:	78db      	ldrb	r3, [r3, #3]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d003      	beq.n	8014e40 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014e38:	4b29      	ldr	r3, [pc, #164]	@ (8014ee0 <dhcp_handle_ack+0xcc>)
 8014e3a:	68da      	ldr	r2, [r3, #12]
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014e40:	4b26      	ldr	r3, [pc, #152]	@ (8014edc <dhcp_handle_ack+0xc8>)
 8014e42:	791b      	ldrb	r3, [r3, #4]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d004      	beq.n	8014e52 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014e48:	4b25      	ldr	r3, [pc, #148]	@ (8014ee0 <dhcp_handle_ack+0xcc>)
 8014e4a:	691a      	ldr	r2, [r3, #16]
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8014e50:	e004      	b.n	8014e5c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e56:	085a      	lsrs	r2, r3, #1
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8014edc <dhcp_handle_ack+0xc8>)
 8014e5e:	795b      	ldrb	r3, [r3, #5]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d004      	beq.n	8014e6e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014e64:	4b1e      	ldr	r3, [pc, #120]	@ (8014ee0 <dhcp_handle_ack+0xcc>)
 8014e66:	695a      	ldr	r2, [r3, #20]
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8014e6c:	e007      	b.n	8014e7e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014e72:	4613      	mov	r3, r2
 8014e74:	00db      	lsls	r3, r3, #3
 8014e76:	1a9b      	subs	r3, r3, r2
 8014e78:	08da      	lsrs	r2, r3, #3
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	691a      	ldr	r2, [r3, #16]
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014e86:	4b15      	ldr	r3, [pc, #84]	@ (8014edc <dhcp_handle_ack+0xc8>)
 8014e88:	799b      	ldrb	r3, [r3, #6]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d00f      	beq.n	8014eae <dhcp_handle_ack+0x9a>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014e8e:	4b14      	ldr	r3, [pc, #80]	@ (8014ee0 <dhcp_handle_ack+0xcc>)
 8014e90:	699b      	ldr	r3, [r3, #24]
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7f7 fc12 	bl	800c6bc <lwip_htonl>
 8014e98:	4602      	mov	r2, r0
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	621a      	str	r2, [r3, #32]
    dhcp->flags |= DHCP_FLAG_SUBNET_MASK_GIVEN;
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	79db      	ldrb	r3, [r3, #7]
 8014ea2:	f043 0301 	orr.w	r3, r3, #1
 8014ea6:	b2da      	uxtb	r2, r3
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	71da      	strb	r2, [r3, #7]
 8014eac:	e006      	b.n	8014ebc <dhcp_handle_ack+0xa8>
  } else {
    dhcp->flags &= ~DHCP_FLAG_SUBNET_MASK_GIVEN;
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	79db      	ldrb	r3, [r3, #7]
 8014eb2:	f023 0301 	bic.w	r3, r3, #1
 8014eb6:	b2da      	uxtb	r2, r3
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014ebc:	4b07      	ldr	r3, [pc, #28]	@ (8014edc <dhcp_handle_ack+0xc8>)
 8014ebe:	79db      	ldrb	r3, [r3, #7]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d007      	beq.n	8014ed4 <dhcp_handle_ack+0xc0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014ec4:	4b06      	ldr	r3, [pc, #24]	@ (8014ee0 <dhcp_handle_ack+0xcc>)
 8014ec6:	69db      	ldr	r3, [r3, #28]
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f7f7 fbf7 	bl	800c6bc <lwip_htonl>
 8014ece:	4602      	mov	r2, r0
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014ed4:	bf00      	nop
 8014ed6:	3710      	adds	r7, #16
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bd80      	pop	{r7, pc}
 8014edc:	2000a384 	.word	0x2000a384
 8014ee0:	2000a364 	.word	0x2000a364

08014ee4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b084      	sub	sp, #16
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d102      	bne.n	8014ef8 <dhcp_start+0x14>
 8014ef2:	f06f 030f 	mvn.w	r3, #15
 8014ef6:	e060      	b.n	8014fba <dhcp_start+0xd6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014efe:	f003 0301 	and.w	r3, r3, #1
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d102      	bne.n	8014f0c <dhcp_start+0x28>
 8014f06:	f06f 030f 	mvn.w	r3, #15
 8014f0a:	e056      	b.n	8014fba <dhcp_start+0xd6>
  dhcp = netif_dhcp_data(netif);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f10:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014f16:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8014f1a:	d202      	bcs.n	8014f22 <dhcp_start+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f20:	e04b      	b.n	8014fba <dhcp_start+0xd6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d10d      	bne.n	8014f44 <dhcp_start+0x60>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014f28:	2048      	movs	r0, #72	@ 0x48
 8014f2a:	f7f7 ff05 	bl	800cd38 <mem_malloc>
 8014f2e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d102      	bne.n	8014f3c <dhcp_start+0x58>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014f36:	f04f 33ff 	mov.w	r3, #4294967295
 8014f3a:	e03e      	b.n	8014fba <dhcp_start+0xd6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	68fa      	ldr	r2, [r7, #12]
 8014f40:	625a      	str	r2, [r3, #36]	@ 0x24
 8014f42:	e005      	b.n	8014f50 <dhcp_start+0x6c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp\n"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	791b      	ldrb	r3, [r3, #4]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d001      	beq.n	8014f50 <dhcp_start+0x6c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014f4c:	f7ff fc86 	bl	801485c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014f50:	2248      	movs	r2, #72	@ 0x48
 8014f52:	2100      	movs	r1, #0
 8014f54:	68f8      	ldr	r0, [r7, #12]
 8014f56:	f004 f88d 	bl	8019074 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */


#if LWIP_DHCP_DOES_ACD_CHECK
  /* add acd struct to list*/
  acd_add(netif, &dhcp->acd, dhcp_conflict_callback);
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	3334      	adds	r3, #52	@ 0x34
 8014f5e:	4a19      	ldr	r2, [pc, #100]	@ (8014fc4 <dhcp_start+0xe0>)
 8014f60:	4619      	mov	r1, r3
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f7ff f996 	bl	8014294 <acd_add>
#endif /* LWIP_DHCP_DOES_ACD_CHECK */


  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014f68:	f7ff fc26 	bl	80147b8 <dhcp_inc_pcb_refcount>
 8014f6c:	4603      	mov	r3, r0
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d002      	beq.n	8014f78 <dhcp_start+0x94>
    return ERR_MEM;
 8014f72:	f04f 33ff 	mov.w	r3, #4294967295
 8014f76:	e020      	b.n	8014fba <dhcp_start+0xd6>
  }
  dhcp->pcb_allocated = 1;
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	2201      	movs	r2, #1
 8014f7c:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014f84:	f003 0304 	and.w	r3, r3, #4
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d105      	bne.n	8014f98 <dhcp_start+0xb4>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014f8c:	2102      	movs	r1, #2
 8014f8e:	68f8      	ldr	r0, [r7, #12]
 8014f90:	f000 fc92 	bl	80158b8 <dhcp_set_state>
    return ERR_OK;
 8014f94:	2300      	movs	r3, #0
 8014f96:	e010      	b.n	8014fba <dhcp_start+0xd6>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014f98:	6878      	ldr	r0, [r7, #4]
 8014f9a:	f000 f8ab 	bl	80150f4 <dhcp_discover>
 8014f9e:	4603      	mov	r3, r0
 8014fa0:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014fa2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d005      	beq.n	8014fb6 <dhcp_start+0xd2>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014faa:	6878      	ldr	r0, [r7, #4]
 8014fac:	f000 fbe0 	bl	8015770 <dhcp_release_and_stop>
    return ERR_MEM;
 8014fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8014fb4:	e001      	b.n	8014fba <dhcp_start+0xd6>
  }
  return result;
 8014fb6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3710      	adds	r7, #16
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}
 8014fc2:	bf00      	nop
 8014fc4:	080148e9 	.word	0x080148e9

08014fc8 <dhcp_network_changed_link_up>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed_link_up(struct netif *netif)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b084      	sub	sp, #16
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014fd4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d025      	beq.n	8015028 <dhcp_network_changed_link_up+0x60>
    return;
  }
  switch (dhcp->state) {
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	795b      	ldrb	r3, [r3, #5]
 8014fe0:	2b0a      	cmp	r3, #10
 8014fe2:	d008      	beq.n	8014ff6 <dhcp_network_changed_link_up+0x2e>
 8014fe4:	2b0a      	cmp	r3, #10
 8014fe6:	dc0d      	bgt.n	8015004 <dhcp_network_changed_link_up+0x3c>
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d01f      	beq.n	801502c <dhcp_network_changed_link_up+0x64>
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	db09      	blt.n	8015004 <dhcp_network_changed_link_up+0x3c>
 8014ff0:	3b03      	subs	r3, #3
 8014ff2:	2b02      	cmp	r3, #2
 8014ff4:	d806      	bhi.n	8015004 <dhcp_network_changed_link_up+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f000 fb03 	bl	8015608 <dhcp_reboot>
      break;
 8015002:	e014      	b.n	801502e <dhcp_network_changed_link_up+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	795b      	ldrb	r3, [r3, #5]
 8015008:	2b0c      	cmp	r3, #12
 801500a:	d906      	bls.n	801501a <dhcp_network_changed_link_up+0x52>
 801500c:	4b09      	ldr	r3, [pc, #36]	@ (8015034 <dhcp_network_changed_link_up+0x6c>)
 801500e:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8015012:	4909      	ldr	r1, [pc, #36]	@ (8015038 <dhcp_network_changed_link_up+0x70>)
 8015014:	4809      	ldr	r0, [pc, #36]	@ (801503c <dhcp_network_changed_link_up+0x74>)
 8015016:	f003 fe85 	bl	8018d24 <iprintf>
      /* INIT/REQUESTING/CHECKING/BACKING_OFF restart with new 'rid' because the
         state changes, SELECTING: continue with current 'rid' as we stay in the
         same state */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	2200      	movs	r2, #0
 801501e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f000 f867 	bl	80150f4 <dhcp_discover>
      break;
 8015026:	e002      	b.n	801502e <dhcp_network_changed_link_up+0x66>
    return;
 8015028:	bf00      	nop
 801502a:	e000      	b.n	801502e <dhcp_network_changed_link_up+0x66>
      break;
 801502c:	bf00      	nop
  }
}
 801502e:	3710      	adds	r7, #16
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}
 8015034:	0801ca88 	.word	0x0801ca88
 8015038:	0801cb90 	.word	0x0801cb90
 801503c:	0801cac8 	.word	0x0801cac8

08015040 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015040:	b5b0      	push	{r4, r5, r7, lr}
 8015042:	b08a      	sub	sp, #40	@ 0x28
 8015044:	af02      	add	r7, sp, #8
 8015046:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801504c:	61bb      	str	r3, [r7, #24]
  err_t result;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801504e:	210c      	movs	r1, #12
 8015050:	69b8      	ldr	r0, [r7, #24]
 8015052:	f000 fc31 	bl	80158b8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8015056:	f107 030e 	add.w	r3, r7, #14
 801505a:	2204      	movs	r2, #4
 801505c:	69b9      	ldr	r1, [r7, #24]
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	f001 f850 	bl	8016104 <dhcp_create_msg>
 8015064:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d035      	beq.n	80150d8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	685b      	ldr	r3, [r3, #4]
 8015070:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015072:	89f8      	ldrh	r0, [r7, #14]
 8015074:	693b      	ldr	r3, [r7, #16]
 8015076:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801507a:	2304      	movs	r3, #4
 801507c:	2232      	movs	r2, #50	@ 0x32
 801507e:	f000 fc35 	bl	80158ec <dhcp_option>
 8015082:	4603      	mov	r3, r0
 8015084:	81fb      	strh	r3, [r7, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015086:	89fc      	ldrh	r4, [r7, #14]
 8015088:	693b      	ldr	r3, [r7, #16]
 801508a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801508e:	69bb      	ldr	r3, [r7, #24]
 8015090:	69db      	ldr	r3, [r3, #28]
 8015092:	4618      	mov	r0, r3
 8015094:	f7f7 fb12 	bl	800c6bc <lwip_htonl>
 8015098:	4603      	mov	r3, r0
 801509a:	461a      	mov	r2, r3
 801509c:	4629      	mov	r1, r5
 801509e:	4620      	mov	r0, r4
 80150a0:	f000 fcb0 	bl	8015a04 <dhcp_option_long>
 80150a4:	4603      	mov	r3, r0
 80150a6:	81fb      	strh	r3, [r7, #14]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80150a8:	89f8      	ldrh	r0, [r7, #14]
 80150aa:	693b      	ldr	r3, [r7, #16]
 80150ac:	33f0      	adds	r3, #240	@ 0xf0
 80150ae:	697a      	ldr	r2, [r7, #20]
 80150b0:	4619      	mov	r1, r3
 80150b2:	f001 f8eb 	bl	801628c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80150b6:	4b0c      	ldr	r3, [pc, #48]	@ (80150e8 <dhcp_decline+0xa8>)
 80150b8:	6818      	ldr	r0, [r3, #0]
 80150ba:	4b0c      	ldr	r3, [pc, #48]	@ (80150ec <dhcp_decline+0xac>)
 80150bc:	9301      	str	r3, [sp, #4]
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	9300      	str	r3, [sp, #0]
 80150c2:	2343      	movs	r3, #67	@ 0x43
 80150c4:	4a0a      	ldr	r2, [pc, #40]	@ (80150f0 <dhcp_decline+0xb0>)
 80150c6:	6979      	ldr	r1, [r7, #20]
 80150c8:	f7fe feac 	bl	8013e24 <udp_sendto_if_src>
 80150cc:	4603      	mov	r3, r0
 80150ce:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80150d0:	6978      	ldr	r0, [r7, #20]
 80150d2:	f7f8 fe49 	bl	800dd68 <pbuf_free>
 80150d6:	e001      	b.n	80150dc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80150d8:	23ff      	movs	r3, #255	@ 0xff
 80150da:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 80150dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3720      	adds	r7, #32
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bdb0      	pop	{r4, r5, r7, pc}
 80150e8:	2000a38c 	.word	0x2000a38c
 80150ec:	0801d41c 	.word	0x0801d41c
 80150f0:	0801d420 	.word	0x0801d420

080150f4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b08a      	sub	sp, #40	@ 0x28
 80150f8:	af02      	add	r7, sp, #8
 80150fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015100:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8015102:	2300      	movs	r3, #0
 8015104:	75fb      	strb	r3, [r7, #23]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES) {
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8015106:	69bb      	ldr	r3, [r7, #24]
 8015108:	2200      	movs	r2, #0
 801510a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801510c:	2106      	movs	r1, #6
 801510e:	69b8      	ldr	r0, [r7, #24]
 8015110:	f000 fbd2 	bl	80158b8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8015114:	f107 0308 	add.w	r3, r7, #8
 8015118:	2201      	movs	r2, #1
 801511a:	69b9      	ldr	r1, [r7, #24]
 801511c:	6878      	ldr	r0, [r7, #4]
 801511e:	f000 fff1 	bl	8016104 <dhcp_create_msg>
 8015122:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d04b      	beq.n	80151c2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801512a:	693b      	ldr	r3, [r7, #16]
 801512c:	685b      	ldr	r3, [r3, #4]
 801512e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015130:	8938      	ldrh	r0, [r7, #8]
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015138:	2302      	movs	r3, #2
 801513a:	2239      	movs	r2, #57	@ 0x39
 801513c:	f000 fbd6 	bl	80158ec <dhcp_option>
 8015140:	4603      	mov	r3, r0
 8015142:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015144:	8938      	ldrh	r0, [r7, #8]
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8015150:	461a      	mov	r2, r3
 8015152:	f000 fc25 	bl	80159a0 <dhcp_option_short>
 8015156:	4603      	mov	r3, r0
 8015158:	813b      	strh	r3, [r7, #8]

#if LWIP_NETIF_HOSTNAME && LWIP_DHCP_DISCOVER_ADD_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP NETIF HOSTNAME && LWIP_DHCP_DISCOVER_ADD_HOSTNAME */

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801515a:	8938      	ldrh	r0, [r7, #8]
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015162:	2303      	movs	r3, #3
 8015164:	2237      	movs	r2, #55	@ 0x37
 8015166:	f000 fbc1 	bl	80158ec <dhcp_option>
 801516a:	4603      	mov	r3, r0
 801516c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801516e:	2300      	movs	r3, #0
 8015170:	77fb      	strb	r3, [r7, #31]
 8015172:	e00e      	b.n	8015192 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015174:	8938      	ldrh	r0, [r7, #8]
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801517c:	7ffb      	ldrb	r3, [r7, #31]
 801517e:	4a29      	ldr	r2, [pc, #164]	@ (8015224 <dhcp_discover+0x130>)
 8015180:	5cd3      	ldrb	r3, [r2, r3]
 8015182:	461a      	mov	r2, r3
 8015184:	f000 fbe6 	bl	8015954 <dhcp_option_byte>
 8015188:	4603      	mov	r3, r0
 801518a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801518c:	7ffb      	ldrb	r3, [r7, #31]
 801518e:	3301      	adds	r3, #1
 8015190:	77fb      	strb	r3, [r7, #31]
 8015192:	7ffb      	ldrb	r3, [r7, #31]
 8015194:	2b02      	cmp	r3, #2
 8015196:	d9ed      	bls.n	8015174 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015198:	8938      	ldrh	r0, [r7, #8]
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	33f0      	adds	r3, #240	@ 0xf0
 801519e:	693a      	ldr	r2, [r7, #16]
 80151a0:	4619      	mov	r1, r3
 80151a2:	f001 f873 	bl	801628c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80151a6:	4b20      	ldr	r3, [pc, #128]	@ (8015228 <dhcp_discover+0x134>)
 80151a8:	6818      	ldr	r0, [r3, #0]
 80151aa:	4b20      	ldr	r3, [pc, #128]	@ (801522c <dhcp_discover+0x138>)
 80151ac:	9301      	str	r3, [sp, #4]
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	9300      	str	r3, [sp, #0]
 80151b2:	2343      	movs	r3, #67	@ 0x43
 80151b4:	4a1e      	ldr	r2, [pc, #120]	@ (8015230 <dhcp_discover+0x13c>)
 80151b6:	6939      	ldr	r1, [r7, #16]
 80151b8:	f7fe fe34 	bl	8013e24 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()\n"));
    pbuf_free(p_out);
 80151bc:	6938      	ldr	r0, [r7, #16]
 80151be:	f7f8 fdd3 	bl	800dd68 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }

  if (dhcp->tries < 255) {
 80151c2:	69bb      	ldr	r3, [r7, #24]
 80151c4:	799b      	ldrb	r3, [r3, #6]
 80151c6:	2bff      	cmp	r3, #255	@ 0xff
 80151c8:	d005      	beq.n	80151d6 <dhcp_discover+0xe2>
    dhcp->tries++;
 80151ca:	69bb      	ldr	r3, [r7, #24]
 80151cc:	799b      	ldrb	r3, [r3, #6]
 80151ce:	3301      	adds	r3, #1
 80151d0:	b2da      	uxtb	r2, r3
 80151d2:	69bb      	ldr	r3, [r7, #24]
 80151d4:	719a      	strb	r2, [r3, #6]
  }
  msecs = DHCP_REQUEST_BACKOFF_SEQUENCE(dhcp->tries);
 80151d6:	69bb      	ldr	r3, [r7, #24]
 80151d8:	799b      	ldrb	r3, [r3, #6]
 80151da:	2b05      	cmp	r3, #5
 80151dc:	d80d      	bhi.n	80151fa <dhcp_discover+0x106>
 80151de:	69bb      	ldr	r3, [r7, #24]
 80151e0:	799b      	ldrb	r3, [r3, #6]
 80151e2:	461a      	mov	r2, r3
 80151e4:	2301      	movs	r3, #1
 80151e6:	4093      	lsls	r3, r2
 80151e8:	b29b      	uxth	r3, r3
 80151ea:	461a      	mov	r2, r3
 80151ec:	0152      	lsls	r2, r2, #5
 80151ee:	1ad2      	subs	r2, r2, r3
 80151f0:	0092      	lsls	r2, r2, #2
 80151f2:	4413      	add	r3, r2
 80151f4:	00db      	lsls	r3, r3, #3
 80151f6:	b29b      	uxth	r3, r3
 80151f8:	e001      	b.n	80151fe <dhcp_discover+0x10a>
 80151fa:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80151fe:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015200:	897b      	ldrh	r3, [r7, #10]
 8015202:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8015206:	4a0b      	ldr	r2, [pc, #44]	@ (8015234 <dhcp_discover+0x140>)
 8015208:	fb82 1203 	smull	r1, r2, r2, r3
 801520c:	1152      	asrs	r2, r2, #5
 801520e:	17db      	asrs	r3, r3, #31
 8015210:	1ad3      	subs	r3, r2, r3
 8015212:	b29a      	uxth	r2, r3
 8015214:	69bb      	ldr	r3, [r7, #24]
 8015216:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015218:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801521c:	4618      	mov	r0, r3
 801521e:	3720      	adds	r7, #32
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}
 8015224:	20000030 	.word	0x20000030
 8015228:	2000a38c 	.word	0x2000a38c
 801522c:	0801d41c 	.word	0x0801d41c
 8015230:	0801d420 	.word	0x0801d420
 8015234:	10624dd3 	.word	0x10624dd3

08015238 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b08a      	sub	sp, #40	@ 0x28
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2b00      	cmp	r3, #0
 8015244:	f000 80a6 	beq.w	8015394 <dhcp_bind+0x15c>
  dhcp = netif_dhcp_data(netif);
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801524c:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801524e:	69bb      	ldr	r3, [r7, #24]
 8015250:	2b00      	cmp	r3, #0
 8015252:	f000 809f 	beq.w	8015394 <dhcp_bind+0x15c>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8015256:	69bb      	ldr	r3, [r7, #24]
 8015258:	2200      	movs	r2, #0
 801525a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801525c:	69bb      	ldr	r3, [r7, #24]
 801525e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015264:	d017      	beq.n	8015296 <dhcp_bind+0x5e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    DHCP_SET_TIMEOUT_FROM_OFFERED_T0_LEASE(dhcp->t0_timeout, dhcp);
 8015266:	69bb      	ldr	r3, [r7, #24]
 8015268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801526a:	331e      	adds	r3, #30
 801526c:	4a4b      	ldr	r2, [pc, #300]	@ (801539c <dhcp_bind+0x164>)
 801526e:	fba2 2303 	umull	r2, r3, r2, r3
 8015272:	095b      	lsrs	r3, r3, #5
 8015274:	627b      	str	r3, [r7, #36]	@ 0x24
 8015276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801527c:	d302      	bcc.n	8015284 <dhcp_bind+0x4c>
 801527e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015282:	627b      	str	r3, [r7, #36]	@ 0x24
 8015284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015286:	2b00      	cmp	r3, #0
 8015288:	d101      	bne.n	801528e <dhcp_bind+0x56>
 801528a:	2301      	movs	r3, #1
 801528c:	627b      	str	r3, [r7, #36]	@ 0x24
 801528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015290:	b29a      	uxth	r2, r3
 8015292:	69bb      	ldr	r3, [r7, #24]
 8015294:	829a      	strh	r2, [r3, #20]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8015296:	69bb      	ldr	r3, [r7, #24]
 8015298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801529a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801529e:	d01b      	beq.n	80152d8 <dhcp_bind+0xa0>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    DHCP_SET_TIMEOUT_FROM_OFFERED_T1_RENEW(dhcp->t1_timeout, dhcp);
 80152a0:	69bb      	ldr	r3, [r7, #24]
 80152a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152a4:	331e      	adds	r3, #30
 80152a6:	4a3d      	ldr	r2, [pc, #244]	@ (801539c <dhcp_bind+0x164>)
 80152a8:	fba2 2303 	umull	r2, r3, r2, r3
 80152ac:	095b      	lsrs	r3, r3, #5
 80152ae:	623b      	str	r3, [r7, #32]
 80152b0:	6a3b      	ldr	r3, [r7, #32]
 80152b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80152b6:	d302      	bcc.n	80152be <dhcp_bind+0x86>
 80152b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80152bc:	623b      	str	r3, [r7, #32]
 80152be:	6a3b      	ldr	r3, [r7, #32]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d101      	bne.n	80152c8 <dhcp_bind+0x90>
 80152c4:	2301      	movs	r3, #1
 80152c6:	623b      	str	r3, [r7, #32]
 80152c8:	6a3b      	ldr	r3, [r7, #32]
 80152ca:	b29a      	uxth	r2, r3
 80152cc:	69bb      	ldr	r3, [r7, #24]
 80152ce:	815a      	strh	r2, [r3, #10]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80152d0:	69bb      	ldr	r3, [r7, #24]
 80152d2:	895a      	ldrh	r2, [r3, #10]
 80152d4:	69bb      	ldr	r3, [r7, #24]
 80152d6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80152d8:	69bb      	ldr	r3, [r7, #24]
 80152da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152e0:	d01b      	beq.n	801531a <dhcp_bind+0xe2>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    DHCP_SET_TIMEOUT_FROM_OFFERED_T2_REBIND(dhcp->t2_timeout, dhcp);
 80152e2:	69bb      	ldr	r3, [r7, #24]
 80152e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152e6:	331e      	adds	r3, #30
 80152e8:	4a2c      	ldr	r2, [pc, #176]	@ (801539c <dhcp_bind+0x164>)
 80152ea:	fba2 2303 	umull	r2, r3, r2, r3
 80152ee:	095b      	lsrs	r3, r3, #5
 80152f0:	61fb      	str	r3, [r7, #28]
 80152f2:	69fb      	ldr	r3, [r7, #28]
 80152f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80152f8:	d302      	bcc.n	8015300 <dhcp_bind+0xc8>
 80152fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80152fe:	61fb      	str	r3, [r7, #28]
 8015300:	69fb      	ldr	r3, [r7, #28]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d101      	bne.n	801530a <dhcp_bind+0xd2>
 8015306:	2301      	movs	r3, #1
 8015308:	61fb      	str	r3, [r7, #28]
 801530a:	69fb      	ldr	r3, [r7, #28]
 801530c:	b29a      	uxth	r2, r3
 801530e:	69bb      	ldr	r3, [r7, #24]
 8015310:	819a      	strh	r2, [r3, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8015312:	69bb      	ldr	r3, [r7, #24]
 8015314:	899a      	ldrh	r2, [r3, #12]
 8015316:	69bb      	ldr	r3, [r7, #24]
 8015318:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801531a:	69bb      	ldr	r3, [r7, #24]
 801531c:	895a      	ldrh	r2, [r3, #10]
 801531e:	69bb      	ldr	r3, [r7, #24]
 8015320:	899b      	ldrh	r3, [r3, #12]
 8015322:	429a      	cmp	r2, r3
 8015324:	d306      	bcc.n	8015334 <dhcp_bind+0xfc>
 8015326:	69bb      	ldr	r3, [r7, #24]
 8015328:	899b      	ldrh	r3, [r3, #12]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d002      	beq.n	8015334 <dhcp_bind+0xfc>
    dhcp->t1_timeout = 0;
 801532e:	69bb      	ldr	r3, [r7, #24]
 8015330:	2200      	movs	r2, #0
 8015332:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->flags & DHCP_FLAG_SUBNET_MASK_GIVEN) {
 8015334:	69bb      	ldr	r3, [r7, #24]
 8015336:	79db      	ldrb	r3, [r3, #7]
 8015338:	f003 0301 	and.w	r3, r3, #1
 801533c:	2b00      	cmp	r3, #0
 801533e:	d003      	beq.n	8015348 <dhcp_bind+0x110>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015340:	69bb      	ldr	r3, [r7, #24]
 8015342:	6a1b      	ldr	r3, [r3, #32]
 8015344:	613b      	str	r3, [r7, #16]
 8015346:	e014      	b.n	8015372 <dhcp_bind+0x13a>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015348:	69bb      	ldr	r3, [r7, #24]
 801534a:	331c      	adds	r3, #28
 801534c:	781b      	ldrb	r3, [r3, #0]
 801534e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015354:	2b00      	cmp	r3, #0
 8015356:	db02      	blt.n	801535e <dhcp_bind+0x126>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015358:	23ff      	movs	r3, #255	@ 0xff
 801535a:	613b      	str	r3, [r7, #16]
 801535c:	e009      	b.n	8015372 <dhcp_bind+0x13a>
    } else if (first_octet >= 192) {
 801535e:	7dfb      	ldrb	r3, [r7, #23]
 8015360:	2bbf      	cmp	r3, #191	@ 0xbf
 8015362:	d903      	bls.n	801536c <dhcp_bind+0x134>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015364:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8015368:	613b      	str	r3, [r7, #16]
 801536a:	e002      	b.n	8015372 <dhcp_bind+0x13a>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801536c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015370:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015372:	69bb      	ldr	r3, [r7, #24]
 8015374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015376:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015378:	210a      	movs	r1, #10
 801537a:	69b8      	ldr	r0, [r7, #24]
 801537c:	f000 fa9c 	bl	80158b8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015380:	69bb      	ldr	r3, [r7, #24]
 8015382:	f103 011c 	add.w	r1, r3, #28
 8015386:	f107 030c 	add.w	r3, r7, #12
 801538a:	f107 0210 	add.w	r2, r7, #16
 801538e:	6878      	ldr	r0, [r7, #4]
 8015390:	f7f8 f850 	bl	800d434 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015394:	3728      	adds	r7, #40	@ 0x28
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}
 801539a:	bf00      	nop
 801539c:	88888889 	.word	0x88888889

080153a0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b08a      	sub	sp, #40	@ 0x28
 80153a4:	af02      	add	r7, sp, #8
 80153a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153ac:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80153ae:	2105      	movs	r1, #5
 80153b0:	69b8      	ldr	r0, [r7, #24]
 80153b2:	f000 fa81 	bl	80158b8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80153b6:	f107 030c 	add.w	r3, r7, #12
 80153ba:	2203      	movs	r2, #3
 80153bc:	69b9      	ldr	r1, [r7, #24]
 80153be:	6878      	ldr	r0, [r7, #4]
 80153c0:	f000 fea0 	bl	8016104 <dhcp_create_msg>
 80153c4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80153c6:	697b      	ldr	r3, [r7, #20]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d04e      	beq.n	801546a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80153cc:	697b      	ldr	r3, [r7, #20]
 80153ce:	685b      	ldr	r3, [r3, #4]
 80153d0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80153d2:	89b8      	ldrh	r0, [r7, #12]
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80153da:	2302      	movs	r3, #2
 80153dc:	2239      	movs	r2, #57	@ 0x39
 80153de:	f000 fa85 	bl	80158ec <dhcp_option>
 80153e2:	4603      	mov	r3, r0
 80153e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80153e6:	89b8      	ldrh	r0, [r7, #12]
 80153e8:	693b      	ldr	r3, [r7, #16]
 80153ea:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80153f2:	461a      	mov	r2, r3
 80153f4:	f000 fad4 	bl	80159a0 <dhcp_option_short>
 80153f8:	4603      	mov	r3, r0
 80153fa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80153fc:	89b8      	ldrh	r0, [r7, #12]
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015404:	2303      	movs	r3, #3
 8015406:	2237      	movs	r2, #55	@ 0x37
 8015408:	f000 fa70 	bl	80158ec <dhcp_option>
 801540c:	4603      	mov	r3, r0
 801540e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015410:	2300      	movs	r3, #0
 8015412:	77bb      	strb	r3, [r7, #30]
 8015414:	e00e      	b.n	8015434 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015416:	89b8      	ldrh	r0, [r7, #12]
 8015418:	693b      	ldr	r3, [r7, #16]
 801541a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801541e:	7fbb      	ldrb	r3, [r7, #30]
 8015420:	4a29      	ldr	r2, [pc, #164]	@ (80154c8 <dhcp_renew+0x128>)
 8015422:	5cd3      	ldrb	r3, [r2, r3]
 8015424:	461a      	mov	r2, r3
 8015426:	f000 fa95 	bl	8015954 <dhcp_option_byte>
 801542a:	4603      	mov	r3, r0
 801542c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801542e:	7fbb      	ldrb	r3, [r7, #30]
 8015430:	3301      	adds	r3, #1
 8015432:	77bb      	strb	r3, [r7, #30]
 8015434:	7fbb      	ldrb	r3, [r7, #30]
 8015436:	2b02      	cmp	r3, #2
 8015438:	d9ed      	bls.n	8015416 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801543a:	89b8      	ldrh	r0, [r7, #12]
 801543c:	693b      	ldr	r3, [r7, #16]
 801543e:	33f0      	adds	r3, #240	@ 0xf0
 8015440:	697a      	ldr	r2, [r7, #20]
 8015442:	4619      	mov	r1, r3
 8015444:	f000 ff22 	bl	801628c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015448:	4b20      	ldr	r3, [pc, #128]	@ (80154cc <dhcp_renew+0x12c>)
 801544a:	6818      	ldr	r0, [r3, #0]
 801544c:	69bb      	ldr	r3, [r7, #24]
 801544e:	f103 0218 	add.w	r2, r3, #24
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	9300      	str	r3, [sp, #0]
 8015456:	2343      	movs	r3, #67	@ 0x43
 8015458:	6979      	ldr	r1, [r7, #20]
 801545a:	f7fe fc97 	bl	8013d8c <udp_sendto_if>
 801545e:	4603      	mov	r3, r0
 8015460:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015462:	6978      	ldr	r0, [r7, #20]
 8015464:	f7f8 fc80 	bl	800dd68 <pbuf_free>
 8015468:	e001      	b.n	801546e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801546a:	23ff      	movs	r3, #255	@ 0xff
 801546c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801546e:	69bb      	ldr	r3, [r7, #24]
 8015470:	799b      	ldrb	r3, [r3, #6]
 8015472:	2bff      	cmp	r3, #255	@ 0xff
 8015474:	d005      	beq.n	8015482 <dhcp_renew+0xe2>
    dhcp->tries++;
 8015476:	69bb      	ldr	r3, [r7, #24]
 8015478:	799b      	ldrb	r3, [r3, #6]
 801547a:	3301      	adds	r3, #1
 801547c:	b2da      	uxtb	r2, r3
 801547e:	69bb      	ldr	r3, [r7, #24]
 8015480:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015482:	69bb      	ldr	r3, [r7, #24]
 8015484:	799b      	ldrb	r3, [r3, #6]
 8015486:	2b09      	cmp	r3, #9
 8015488:	d809      	bhi.n	801549e <dhcp_renew+0xfe>
 801548a:	69bb      	ldr	r3, [r7, #24]
 801548c:	799b      	ldrb	r3, [r3, #6]
 801548e:	461a      	mov	r2, r3
 8015490:	0152      	lsls	r2, r2, #5
 8015492:	1ad2      	subs	r2, r2, r3
 8015494:	0092      	lsls	r2, r2, #2
 8015496:	4413      	add	r3, r2
 8015498:	011b      	lsls	r3, r3, #4
 801549a:	b29b      	uxth	r3, r3
 801549c:	e001      	b.n	80154a2 <dhcp_renew+0x102>
 801549e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80154a2:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80154a4:	89fb      	ldrh	r3, [r7, #14]
 80154a6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80154aa:	4a09      	ldr	r2, [pc, #36]	@ (80154d0 <dhcp_renew+0x130>)
 80154ac:	fb82 1203 	smull	r1, r2, r2, r3
 80154b0:	1152      	asrs	r2, r2, #5
 80154b2:	17db      	asrs	r3, r3, #31
 80154b4:	1ad3      	subs	r3, r2, r3
 80154b6:	b29a      	uxth	r2, r3
 80154b8:	69bb      	ldr	r3, [r7, #24]
 80154ba:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80154bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80154c0:	4618      	mov	r0, r3
 80154c2:	3720      	adds	r7, #32
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}
 80154c8:	20000030 	.word	0x20000030
 80154cc:	2000a38c 	.word	0x2000a38c
 80154d0:	10624dd3 	.word	0x10624dd3

080154d4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b08a      	sub	sp, #40	@ 0x28
 80154d8:	af02      	add	r7, sp, #8
 80154da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154e0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80154e2:	2104      	movs	r1, #4
 80154e4:	69b8      	ldr	r0, [r7, #24]
 80154e6:	f000 f9e7 	bl	80158b8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80154ea:	f107 030c 	add.w	r3, r7, #12
 80154ee:	2203      	movs	r2, #3
 80154f0:	69b9      	ldr	r1, [r7, #24]
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	f000 fe06 	bl	8016104 <dhcp_create_msg>
 80154f8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80154fa:	697b      	ldr	r3, [r7, #20]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d04c      	beq.n	801559a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015500:	697b      	ldr	r3, [r7, #20]
 8015502:	685b      	ldr	r3, [r3, #4]
 8015504:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015506:	89b8      	ldrh	r0, [r7, #12]
 8015508:	693b      	ldr	r3, [r7, #16]
 801550a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801550e:	2302      	movs	r3, #2
 8015510:	2239      	movs	r2, #57	@ 0x39
 8015512:	f000 f9eb 	bl	80158ec <dhcp_option>
 8015516:	4603      	mov	r3, r0
 8015518:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801551a:	89b8      	ldrh	r0, [r7, #12]
 801551c:	693b      	ldr	r3, [r7, #16]
 801551e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8015526:	461a      	mov	r2, r3
 8015528:	f000 fa3a 	bl	80159a0 <dhcp_option_short>
 801552c:	4603      	mov	r3, r0
 801552e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015530:	89b8      	ldrh	r0, [r7, #12]
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015538:	2303      	movs	r3, #3
 801553a:	2237      	movs	r2, #55	@ 0x37
 801553c:	f000 f9d6 	bl	80158ec <dhcp_option>
 8015540:	4603      	mov	r3, r0
 8015542:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015544:	2300      	movs	r3, #0
 8015546:	77bb      	strb	r3, [r7, #30]
 8015548:	e00e      	b.n	8015568 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801554a:	89b8      	ldrh	r0, [r7, #12]
 801554c:	693b      	ldr	r3, [r7, #16]
 801554e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015552:	7fbb      	ldrb	r3, [r7, #30]
 8015554:	4a28      	ldr	r2, [pc, #160]	@ (80155f8 <dhcp_rebind+0x124>)
 8015556:	5cd3      	ldrb	r3, [r2, r3]
 8015558:	461a      	mov	r2, r3
 801555a:	f000 f9fb 	bl	8015954 <dhcp_option_byte>
 801555e:	4603      	mov	r3, r0
 8015560:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015562:	7fbb      	ldrb	r3, [r7, #30]
 8015564:	3301      	adds	r3, #1
 8015566:	77bb      	strb	r3, [r7, #30]
 8015568:	7fbb      	ldrb	r3, [r7, #30]
 801556a:	2b02      	cmp	r3, #2
 801556c:	d9ed      	bls.n	801554a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801556e:	89b8      	ldrh	r0, [r7, #12]
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	33f0      	adds	r3, #240	@ 0xf0
 8015574:	697a      	ldr	r2, [r7, #20]
 8015576:	4619      	mov	r1, r3
 8015578:	f000 fe88 	bl	801628c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801557c:	4b1f      	ldr	r3, [pc, #124]	@ (80155fc <dhcp_rebind+0x128>)
 801557e:	6818      	ldr	r0, [r3, #0]
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	9300      	str	r3, [sp, #0]
 8015584:	2343      	movs	r3, #67	@ 0x43
 8015586:	4a1e      	ldr	r2, [pc, #120]	@ (8015600 <dhcp_rebind+0x12c>)
 8015588:	6979      	ldr	r1, [r7, #20]
 801558a:	f7fe fbff 	bl	8013d8c <udp_sendto_if>
 801558e:	4603      	mov	r3, r0
 8015590:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015592:	6978      	ldr	r0, [r7, #20]
 8015594:	f7f8 fbe8 	bl	800dd68 <pbuf_free>
 8015598:	e001      	b.n	801559e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801559a:	23ff      	movs	r3, #255	@ 0xff
 801559c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801559e:	69bb      	ldr	r3, [r7, #24]
 80155a0:	799b      	ldrb	r3, [r3, #6]
 80155a2:	2bff      	cmp	r3, #255	@ 0xff
 80155a4:	d005      	beq.n	80155b2 <dhcp_rebind+0xde>
    dhcp->tries++;
 80155a6:	69bb      	ldr	r3, [r7, #24]
 80155a8:	799b      	ldrb	r3, [r3, #6]
 80155aa:	3301      	adds	r3, #1
 80155ac:	b2da      	uxtb	r2, r3
 80155ae:	69bb      	ldr	r3, [r7, #24]
 80155b0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80155b2:	69bb      	ldr	r3, [r7, #24]
 80155b4:	799b      	ldrb	r3, [r3, #6]
 80155b6:	2b09      	cmp	r3, #9
 80155b8:	d809      	bhi.n	80155ce <dhcp_rebind+0xfa>
 80155ba:	69bb      	ldr	r3, [r7, #24]
 80155bc:	799b      	ldrb	r3, [r3, #6]
 80155be:	461a      	mov	r2, r3
 80155c0:	0152      	lsls	r2, r2, #5
 80155c2:	1ad2      	subs	r2, r2, r3
 80155c4:	0092      	lsls	r2, r2, #2
 80155c6:	4413      	add	r3, r2
 80155c8:	00db      	lsls	r3, r3, #3
 80155ca:	b29b      	uxth	r3, r3
 80155cc:	e001      	b.n	80155d2 <dhcp_rebind+0xfe>
 80155ce:	f242 7310 	movw	r3, #10000	@ 0x2710
 80155d2:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80155d4:	89fb      	ldrh	r3, [r7, #14]
 80155d6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80155da:	4a0a      	ldr	r2, [pc, #40]	@ (8015604 <dhcp_rebind+0x130>)
 80155dc:	fb82 1203 	smull	r1, r2, r2, r3
 80155e0:	1152      	asrs	r2, r2, #5
 80155e2:	17db      	asrs	r3, r3, #31
 80155e4:	1ad3      	subs	r3, r2, r3
 80155e6:	b29a      	uxth	r2, r3
 80155e8:	69bb      	ldr	r3, [r7, #24]
 80155ea:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80155ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3720      	adds	r7, #32
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}
 80155f8:	20000030 	.word	0x20000030
 80155fc:	2000a38c 	.word	0x2000a38c
 8015600:	0801d420 	.word	0x0801d420
 8015604:	10624dd3 	.word	0x10624dd3

08015608 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015608:	b5b0      	push	{r4, r5, r7, lr}
 801560a:	b08a      	sub	sp, #40	@ 0x28
 801560c:	af02      	add	r7, sp, #8
 801560e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015614:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8015616:	2103      	movs	r1, #3
 8015618:	69b8      	ldr	r0, [r7, #24]
 801561a:	f000 f94d 	bl	80158b8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801561e:	f107 030c 	add.w	r3, r7, #12
 8015622:	2203      	movs	r2, #3
 8015624:	69b9      	ldr	r1, [r7, #24]
 8015626:	6878      	ldr	r0, [r7, #4]
 8015628:	f000 fd6c 	bl	8016104 <dhcp_create_msg>
 801562c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801562e:	697b      	ldr	r3, [r7, #20]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d066      	beq.n	8015702 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	685b      	ldr	r3, [r3, #4]
 8015638:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801563a:	89b8      	ldrh	r0, [r7, #12]
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015642:	2302      	movs	r3, #2
 8015644:	2239      	movs	r2, #57	@ 0x39
 8015646:	f000 f951 	bl	80158ec <dhcp_option>
 801564a:	4603      	mov	r3, r0
 801564c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801564e:	89b8      	ldrh	r0, [r7, #12]
 8015650:	693b      	ldr	r3, [r7, #16]
 8015652:	33f0      	adds	r3, #240	@ 0xf0
 8015654:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8015658:	4619      	mov	r1, r3
 801565a:	f000 f9a1 	bl	80159a0 <dhcp_option_short>
 801565e:	4603      	mov	r3, r0
 8015660:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015662:	89b8      	ldrh	r0, [r7, #12]
 8015664:	693b      	ldr	r3, [r7, #16]
 8015666:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801566a:	2304      	movs	r3, #4
 801566c:	2232      	movs	r2, #50	@ 0x32
 801566e:	f000 f93d 	bl	80158ec <dhcp_option>
 8015672:	4603      	mov	r3, r0
 8015674:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015676:	89bc      	ldrh	r4, [r7, #12]
 8015678:	693b      	ldr	r3, [r7, #16]
 801567a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801567e:	69bb      	ldr	r3, [r7, #24]
 8015680:	69db      	ldr	r3, [r3, #28]
 8015682:	4618      	mov	r0, r3
 8015684:	f7f7 f81a 	bl	800c6bc <lwip_htonl>
 8015688:	4603      	mov	r3, r0
 801568a:	461a      	mov	r2, r3
 801568c:	4629      	mov	r1, r5
 801568e:	4620      	mov	r0, r4
 8015690:	f000 f9b8 	bl	8015a04 <dhcp_option_long>
 8015694:	4603      	mov	r3, r0
 8015696:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015698:	89b8      	ldrh	r0, [r7, #12]
 801569a:	693b      	ldr	r3, [r7, #16]
 801569c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80156a0:	2303      	movs	r3, #3
 80156a2:	2237      	movs	r2, #55	@ 0x37
 80156a4:	f000 f922 	bl	80158ec <dhcp_option>
 80156a8:	4603      	mov	r3, r0
 80156aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80156ac:	2300      	movs	r3, #0
 80156ae:	77bb      	strb	r3, [r7, #30]
 80156b0:	e00e      	b.n	80156d0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80156b2:	89b8      	ldrh	r0, [r7, #12]
 80156b4:	693b      	ldr	r3, [r7, #16]
 80156b6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80156ba:	7fbb      	ldrb	r3, [r7, #30]
 80156bc:	4a28      	ldr	r2, [pc, #160]	@ (8015760 <dhcp_reboot+0x158>)
 80156be:	5cd3      	ldrb	r3, [r2, r3]
 80156c0:	461a      	mov	r2, r3
 80156c2:	f000 f947 	bl	8015954 <dhcp_option_byte>
 80156c6:	4603      	mov	r3, r0
 80156c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80156ca:	7fbb      	ldrb	r3, [r7, #30]
 80156cc:	3301      	adds	r3, #1
 80156ce:	77bb      	strb	r3, [r7, #30]
 80156d0:	7fbb      	ldrb	r3, [r7, #30]
 80156d2:	2b02      	cmp	r3, #2
 80156d4:	d9ed      	bls.n	80156b2 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80156d6:	89b8      	ldrh	r0, [r7, #12]
 80156d8:	693b      	ldr	r3, [r7, #16]
 80156da:	33f0      	adds	r3, #240	@ 0xf0
 80156dc:	697a      	ldr	r2, [r7, #20]
 80156de:	4619      	mov	r1, r3
 80156e0:	f000 fdd4 	bl	801628c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80156e4:	4b1f      	ldr	r3, [pc, #124]	@ (8015764 <dhcp_reboot+0x15c>)
 80156e6:	6818      	ldr	r0, [r3, #0]
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	9300      	str	r3, [sp, #0]
 80156ec:	2343      	movs	r3, #67	@ 0x43
 80156ee:	4a1e      	ldr	r2, [pc, #120]	@ (8015768 <dhcp_reboot+0x160>)
 80156f0:	6979      	ldr	r1, [r7, #20]
 80156f2:	f7fe fb4b 	bl	8013d8c <udp_sendto_if>
 80156f6:	4603      	mov	r3, r0
 80156f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80156fa:	6978      	ldr	r0, [r7, #20]
 80156fc:	f7f8 fb34 	bl	800dd68 <pbuf_free>
 8015700:	e001      	b.n	8015706 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015702:	23ff      	movs	r3, #255	@ 0xff
 8015704:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015706:	69bb      	ldr	r3, [r7, #24]
 8015708:	799b      	ldrb	r3, [r3, #6]
 801570a:	2bff      	cmp	r3, #255	@ 0xff
 801570c:	d005      	beq.n	801571a <dhcp_reboot+0x112>
    dhcp->tries++;
 801570e:	69bb      	ldr	r3, [r7, #24]
 8015710:	799b      	ldrb	r3, [r3, #6]
 8015712:	3301      	adds	r3, #1
 8015714:	b2da      	uxtb	r2, r3
 8015716:	69bb      	ldr	r3, [r7, #24]
 8015718:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801571a:	69bb      	ldr	r3, [r7, #24]
 801571c:	799b      	ldrb	r3, [r3, #6]
 801571e:	2b09      	cmp	r3, #9
 8015720:	d809      	bhi.n	8015736 <dhcp_reboot+0x12e>
 8015722:	69bb      	ldr	r3, [r7, #24]
 8015724:	799b      	ldrb	r3, [r3, #6]
 8015726:	461a      	mov	r2, r3
 8015728:	0152      	lsls	r2, r2, #5
 801572a:	1ad2      	subs	r2, r2, r3
 801572c:	0092      	lsls	r2, r2, #2
 801572e:	4413      	add	r3, r2
 8015730:	00db      	lsls	r3, r3, #3
 8015732:	b29b      	uxth	r3, r3
 8015734:	e001      	b.n	801573a <dhcp_reboot+0x132>
 8015736:	f242 7310 	movw	r3, #10000	@ 0x2710
 801573a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801573c:	89fb      	ldrh	r3, [r7, #14]
 801573e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8015742:	4a0a      	ldr	r2, [pc, #40]	@ (801576c <dhcp_reboot+0x164>)
 8015744:	fb82 1203 	smull	r1, r2, r2, r3
 8015748:	1152      	asrs	r2, r2, #5
 801574a:	17db      	asrs	r3, r3, #31
 801574c:	1ad3      	subs	r3, r2, r3
 801574e:	b29a      	uxth	r2, r3
 8015750:	69bb      	ldr	r3, [r7, #24]
 8015752:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015754:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015758:	4618      	mov	r0, r3
 801575a:	3720      	adds	r7, #32
 801575c:	46bd      	mov	sp, r7
 801575e:	bdb0      	pop	{r4, r5, r7, pc}
 8015760:	20000030 	.word	0x20000030
 8015764:	2000a38c 	.word	0x2000a38c
 8015768:	0801d420 	.word	0x0801d420
 801576c:	10624dd3 	.word	0x10624dd3

08015770 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015770:	b5b0      	push	{r4, r5, r7, lr}
 8015772:	b08a      	sub	sp, #40	@ 0x28
 8015774:	af02      	add	r7, sp, #8
 8015776:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801577c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801577e:	69fb      	ldr	r3, [r7, #28]
 8015780:	2b00      	cmp	r3, #0
 8015782:	f000 808f 	beq.w	80158a4 <dhcp_release_and_stop+0x134>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015786:	69fb      	ldr	r3, [r7, #28]
 8015788:	795b      	ldrb	r3, [r3, #5]
 801578a:	2b00      	cmp	r3, #0
 801578c:	f000 808c 	beq.w	80158a8 <dhcp_release_and_stop+0x138>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015790:	69fb      	ldr	r3, [r7, #28]
 8015792:	699b      	ldr	r3, [r3, #24]
 8015794:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015796:	69fb      	ldr	r3, [r7, #28]
 8015798:	2200      	movs	r2, #0
 801579a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801579c:	69fb      	ldr	r3, [r7, #28]
 801579e:	2200      	movs	r2, #0
 80157a0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80157a2:	69fb      	ldr	r3, [r7, #28]
 80157a4:	2200      	movs	r2, #0
 80157a6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80157a8:	69fb      	ldr	r3, [r7, #28]
 80157aa:	2200      	movs	r2, #0
 80157ac:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80157ae:	69fb      	ldr	r3, [r7, #28]
 80157b0:	2200      	movs	r2, #0
 80157b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80157b4:	69fb      	ldr	r3, [r7, #28]
 80157b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80157b8:	69fb      	ldr	r3, [r7, #28]
 80157ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80157bc:	69fb      	ldr	r3, [r7, #28]
 80157be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80157c0:	69fb      	ldr	r3, [r7, #28]
 80157c2:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80157c4:	69fb      	ldr	r3, [r7, #28]
 80157c6:	2200      	movs	r2, #0
 80157c8:	829a      	strh	r2, [r3, #20]
 80157ca:	69fb      	ldr	r3, [r7, #28]
 80157cc:	8a9a      	ldrh	r2, [r3, #20]
 80157ce:	69fb      	ldr	r3, [r7, #28]
 80157d0:	825a      	strh	r2, [r3, #18]
 80157d2:	69fb      	ldr	r3, [r7, #28]
 80157d4:	8a5a      	ldrh	r2, [r3, #18]
 80157d6:	69fb      	ldr	r3, [r7, #28]
 80157d8:	821a      	strh	r2, [r3, #16]
 80157da:	69fb      	ldr	r3, [r7, #28]
 80157dc:	8a1a      	ldrh	r2, [r3, #16]
 80157de:	69fb      	ldr	r3, [r7, #28]
 80157e0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f000 fd80 	bl	80162e8 <dhcp_supplied_address>
 80157e8:	4603      	mov	r3, r0
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d046      	beq.n	801587c <dhcp_release_and_stop+0x10c>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80157ee:	2100      	movs	r1, #0
 80157f0:	69f8      	ldr	r0, [r7, #28]
 80157f2:	f000 f861 	bl	80158b8 <dhcp_set_state>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80157f6:	f107 030e 	add.w	r3, r7, #14
 80157fa:	2207      	movs	r2, #7
 80157fc:	69f9      	ldr	r1, [r7, #28]
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	f000 fc80 	bl	8016104 <dhcp_create_msg>
 8015804:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015806:	69bb      	ldr	r3, [r7, #24]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d030      	beq.n	801586e <dhcp_release_and_stop+0xfe>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801580c:	69bb      	ldr	r3, [r7, #24]
 801580e:	685b      	ldr	r3, [r3, #4]
 8015810:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015812:	89f8      	ldrh	r0, [r7, #14]
 8015814:	697b      	ldr	r3, [r7, #20]
 8015816:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801581a:	2304      	movs	r3, #4
 801581c:	2236      	movs	r2, #54	@ 0x36
 801581e:	f000 f865 	bl	80158ec <dhcp_option>
 8015822:	4603      	mov	r3, r0
 8015824:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015826:	89fc      	ldrh	r4, [r7, #14]
 8015828:	697b      	ldr	r3, [r7, #20]
 801582a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801582e:	693b      	ldr	r3, [r7, #16]
 8015830:	4618      	mov	r0, r3
 8015832:	f7f6 ff43 	bl	800c6bc <lwip_htonl>
 8015836:	4603      	mov	r3, r0
 8015838:	461a      	mov	r2, r3
 801583a:	4629      	mov	r1, r5
 801583c:	4620      	mov	r0, r4
 801583e:	f000 f8e1 	bl	8015a04 <dhcp_option_long>
 8015842:	4603      	mov	r3, r0
 8015844:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015846:	89f8      	ldrh	r0, [r7, #14]
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	33f0      	adds	r3, #240	@ 0xf0
 801584c:	69ba      	ldr	r2, [r7, #24]
 801584e:	4619      	mov	r1, r3
 8015850:	f000 fd1c 	bl	801628c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015854:	4b16      	ldr	r3, [pc, #88]	@ (80158b0 <dhcp_release_and_stop+0x140>)
 8015856:	6818      	ldr	r0, [r3, #0]
 8015858:	f107 0210 	add.w	r2, r7, #16
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	9300      	str	r3, [sp, #0]
 8015860:	2343      	movs	r3, #67	@ 0x43
 8015862:	69b9      	ldr	r1, [r7, #24]
 8015864:	f7fe fa92 	bl	8013d8c <udp_sendto_if>
      pbuf_free(p_out);
 8015868:	69b8      	ldr	r0, [r7, #24]
 801586a:	f7f8 fa7d 	bl	800dd68 <pbuf_free>
      /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }

    /* remove IP address from interface (prevents routing from selecting this interface) */
    netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801586e:	4b11      	ldr	r3, [pc, #68]	@ (80158b4 <dhcp_release_and_stop+0x144>)
 8015870:	4a10      	ldr	r2, [pc, #64]	@ (80158b4 <dhcp_release_and_stop+0x144>)
 8015872:	4910      	ldr	r1, [pc, #64]	@ (80158b4 <dhcp_release_and_stop+0x144>)
 8015874:	6878      	ldr	r0, [r7, #4]
 8015876:	f7f7 fddd 	bl	800d434 <netif_set_addr>
 801587a:	e003      	b.n	8015884 <dhcp_release_and_stop+0x114>
  } else {
     dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801587c:	2100      	movs	r1, #0
 801587e:	69f8      	ldr	r0, [r7, #28]
 8015880:	f000 f81a 	bl	80158b8 <dhcp_set_state>
  }

#if LWIP_DHCP_DOES_ACD_CHECK
  /* stop acd because we may be in checking state and the callback would trigger a bind */
  acd_remove(netif, &dhcp->acd);
 8015884:	69fb      	ldr	r3, [r7, #28]
 8015886:	3334      	adds	r3, #52	@ 0x34
 8015888:	4619      	mov	r1, r3
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	f7fe fd36 	bl	80142fc <acd_remove>
#endif

  if (dhcp->pcb_allocated != 0) {
 8015890:	69fb      	ldr	r3, [r7, #28]
 8015892:	791b      	ldrb	r3, [r3, #4]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d008      	beq.n	80158aa <dhcp_release_and_stop+0x13a>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015898:	f7fe ffe0 	bl	801485c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801589c:	69fb      	ldr	r3, [r7, #28]
 801589e:	2200      	movs	r2, #0
 80158a0:	711a      	strb	r2, [r3, #4]
 80158a2:	e002      	b.n	80158aa <dhcp_release_and_stop+0x13a>
    return;
 80158a4:	bf00      	nop
 80158a6:	e000      	b.n	80158aa <dhcp_release_and_stop+0x13a>
    return;
 80158a8:	bf00      	nop
  }
}
 80158aa:	3720      	adds	r7, #32
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bdb0      	pop	{r4, r5, r7, pc}
 80158b0:	2000a38c 	.word	0x2000a38c
 80158b4:	0801d41c 	.word	0x0801d41c

080158b8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80158b8:	b480      	push	{r7}
 80158ba:	b083      	sub	sp, #12
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	460b      	mov	r3, r1
 80158c2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	795b      	ldrb	r3, [r3, #5]
 80158c8:	78fa      	ldrb	r2, [r7, #3]
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d008      	beq.n	80158e0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	78fa      	ldrb	r2, [r7, #3]
 80158d2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	2200      	movs	r2, #0
 80158d8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	2200      	movs	r2, #0
 80158de:	811a      	strh	r2, [r3, #8]
  }
}
 80158e0:	bf00      	nop
 80158e2:	370c      	adds	r7, #12
 80158e4:	46bd      	mov	sp, r7
 80158e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ea:	4770      	bx	lr

080158ec <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b082      	sub	sp, #8
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6039      	str	r1, [r7, #0]
 80158f4:	4611      	mov	r1, r2
 80158f6:	461a      	mov	r2, r3
 80158f8:	4603      	mov	r3, r0
 80158fa:	80fb      	strh	r3, [r7, #6]
 80158fc:	460b      	mov	r3, r1
 80158fe:	717b      	strb	r3, [r7, #5]
 8015900:	4613      	mov	r3, r2
 8015902:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015904:	88fa      	ldrh	r2, [r7, #6]
 8015906:	793b      	ldrb	r3, [r7, #4]
 8015908:	4413      	add	r3, r2
 801590a:	3302      	adds	r3, #2
 801590c:	2b44      	cmp	r3, #68	@ 0x44
 801590e:	d906      	bls.n	801591e <dhcp_option+0x32>
 8015910:	4b0d      	ldr	r3, [pc, #52]	@ (8015948 <dhcp_option+0x5c>)
 8015912:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8015916:	490d      	ldr	r1, [pc, #52]	@ (801594c <dhcp_option+0x60>)
 8015918:	480d      	ldr	r0, [pc, #52]	@ (8015950 <dhcp_option+0x64>)
 801591a:	f003 fa03 	bl	8018d24 <iprintf>
  options[options_out_len++] = option_type;
 801591e:	88fb      	ldrh	r3, [r7, #6]
 8015920:	1c5a      	adds	r2, r3, #1
 8015922:	80fa      	strh	r2, [r7, #6]
 8015924:	461a      	mov	r2, r3
 8015926:	683b      	ldr	r3, [r7, #0]
 8015928:	4413      	add	r3, r2
 801592a:	797a      	ldrb	r2, [r7, #5]
 801592c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801592e:	88fb      	ldrh	r3, [r7, #6]
 8015930:	1c5a      	adds	r2, r3, #1
 8015932:	80fa      	strh	r2, [r7, #6]
 8015934:	461a      	mov	r2, r3
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	4413      	add	r3, r2
 801593a:	793a      	ldrb	r2, [r7, #4]
 801593c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801593e:	88fb      	ldrh	r3, [r7, #6]
}
 8015940:	4618      	mov	r0, r3
 8015942:	3708      	adds	r7, #8
 8015944:	46bd      	mov	sp, r7
 8015946:	bd80      	pop	{r7, pc}
 8015948:	0801ca88 	.word	0x0801ca88
 801594c:	0801cba4 	.word	0x0801cba4
 8015950:	0801cac8 	.word	0x0801cac8

08015954 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b082      	sub	sp, #8
 8015958:	af00      	add	r7, sp, #0
 801595a:	4603      	mov	r3, r0
 801595c:	6039      	str	r1, [r7, #0]
 801595e:	80fb      	strh	r3, [r7, #6]
 8015960:	4613      	mov	r3, r2
 8015962:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015964:	88fb      	ldrh	r3, [r7, #6]
 8015966:	2b43      	cmp	r3, #67	@ 0x43
 8015968:	d906      	bls.n	8015978 <dhcp_option_byte+0x24>
 801596a:	4b0a      	ldr	r3, [pc, #40]	@ (8015994 <dhcp_option_byte+0x40>)
 801596c:	f240 52ac 	movw	r2, #1452	@ 0x5ac
 8015970:	4909      	ldr	r1, [pc, #36]	@ (8015998 <dhcp_option_byte+0x44>)
 8015972:	480a      	ldr	r0, [pc, #40]	@ (801599c <dhcp_option_byte+0x48>)
 8015974:	f003 f9d6 	bl	8018d24 <iprintf>
  options[options_out_len++] = value;
 8015978:	88fb      	ldrh	r3, [r7, #6]
 801597a:	1c5a      	adds	r2, r3, #1
 801597c:	80fa      	strh	r2, [r7, #6]
 801597e:	461a      	mov	r2, r3
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	4413      	add	r3, r2
 8015984:	797a      	ldrb	r2, [r7, #5]
 8015986:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015988:	88fb      	ldrh	r3, [r7, #6]
}
 801598a:	4618      	mov	r0, r3
 801598c:	3708      	adds	r7, #8
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}
 8015992:	bf00      	nop
 8015994:	0801ca88 	.word	0x0801ca88
 8015998:	0801cbe8 	.word	0x0801cbe8
 801599c:	0801cac8 	.word	0x0801cac8

080159a0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b082      	sub	sp, #8
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	4603      	mov	r3, r0
 80159a8:	6039      	str	r1, [r7, #0]
 80159aa:	80fb      	strh	r3, [r7, #6]
 80159ac:	4613      	mov	r3, r2
 80159ae:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80159b0:	88fb      	ldrh	r3, [r7, #6]
 80159b2:	3302      	adds	r3, #2
 80159b4:	2b44      	cmp	r3, #68	@ 0x44
 80159b6:	d906      	bls.n	80159c6 <dhcp_option_short+0x26>
 80159b8:	4b0f      	ldr	r3, [pc, #60]	@ (80159f8 <dhcp_option_short+0x58>)
 80159ba:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80159be:	490f      	ldr	r1, [pc, #60]	@ (80159fc <dhcp_option_short+0x5c>)
 80159c0:	480f      	ldr	r0, [pc, #60]	@ (8015a00 <dhcp_option_short+0x60>)
 80159c2:	f003 f9af 	bl	8018d24 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80159c6:	88bb      	ldrh	r3, [r7, #4]
 80159c8:	0a1b      	lsrs	r3, r3, #8
 80159ca:	b29a      	uxth	r2, r3
 80159cc:	88fb      	ldrh	r3, [r7, #6]
 80159ce:	1c59      	adds	r1, r3, #1
 80159d0:	80f9      	strh	r1, [r7, #6]
 80159d2:	4619      	mov	r1, r3
 80159d4:	683b      	ldr	r3, [r7, #0]
 80159d6:	440b      	add	r3, r1
 80159d8:	b2d2      	uxtb	r2, r2
 80159da:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80159dc:	88fb      	ldrh	r3, [r7, #6]
 80159de:	1c5a      	adds	r2, r3, #1
 80159e0:	80fa      	strh	r2, [r7, #6]
 80159e2:	461a      	mov	r2, r3
 80159e4:	683b      	ldr	r3, [r7, #0]
 80159e6:	4413      	add	r3, r2
 80159e8:	88ba      	ldrh	r2, [r7, #4]
 80159ea:	b2d2      	uxtb	r2, r2
 80159ec:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80159ee:	88fb      	ldrh	r3, [r7, #6]
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	3708      	adds	r7, #8
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd80      	pop	{r7, pc}
 80159f8:	0801ca88 	.word	0x0801ca88
 80159fc:	0801cc20 	.word	0x0801cc20
 8015a00:	0801cac8 	.word	0x0801cac8

08015a04 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b084      	sub	sp, #16
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	60b9      	str	r1, [r7, #8]
 8015a0e:	607a      	str	r2, [r7, #4]
 8015a10:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015a12:	89fb      	ldrh	r3, [r7, #14]
 8015a14:	3304      	adds	r3, #4
 8015a16:	2b44      	cmp	r3, #68	@ 0x44
 8015a18:	d906      	bls.n	8015a28 <dhcp_option_long+0x24>
 8015a1a:	4b19      	ldr	r3, [pc, #100]	@ (8015a80 <dhcp_option_long+0x7c>)
 8015a1c:	f240 52bd 	movw	r2, #1469	@ 0x5bd
 8015a20:	4918      	ldr	r1, [pc, #96]	@ (8015a84 <dhcp_option_long+0x80>)
 8015a22:	4819      	ldr	r0, [pc, #100]	@ (8015a88 <dhcp_option_long+0x84>)
 8015a24:	f003 f97e 	bl	8018d24 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	0e1a      	lsrs	r2, r3, #24
 8015a2c:	89fb      	ldrh	r3, [r7, #14]
 8015a2e:	1c59      	adds	r1, r3, #1
 8015a30:	81f9      	strh	r1, [r7, #14]
 8015a32:	4619      	mov	r1, r3
 8015a34:	68bb      	ldr	r3, [r7, #8]
 8015a36:	440b      	add	r3, r1
 8015a38:	b2d2      	uxtb	r2, r2
 8015a3a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	0c1a      	lsrs	r2, r3, #16
 8015a40:	89fb      	ldrh	r3, [r7, #14]
 8015a42:	1c59      	adds	r1, r3, #1
 8015a44:	81f9      	strh	r1, [r7, #14]
 8015a46:	4619      	mov	r1, r3
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	440b      	add	r3, r1
 8015a4c:	b2d2      	uxtb	r2, r2
 8015a4e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	0a1a      	lsrs	r2, r3, #8
 8015a54:	89fb      	ldrh	r3, [r7, #14]
 8015a56:	1c59      	adds	r1, r3, #1
 8015a58:	81f9      	strh	r1, [r7, #14]
 8015a5a:	4619      	mov	r1, r3
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	440b      	add	r3, r1
 8015a60:	b2d2      	uxtb	r2, r2
 8015a62:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015a64:	89fb      	ldrh	r3, [r7, #14]
 8015a66:	1c5a      	adds	r2, r3, #1
 8015a68:	81fa      	strh	r2, [r7, #14]
 8015a6a:	461a      	mov	r2, r3
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	4413      	add	r3, r2
 8015a70:	687a      	ldr	r2, [r7, #4]
 8015a72:	b2d2      	uxtb	r2, r2
 8015a74:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015a76:	89fb      	ldrh	r3, [r7, #14]
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3710      	adds	r7, #16
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}
 8015a80:	0801ca88 	.word	0x0801ca88
 8015a84:	0801cc5c 	.word	0x0801cc5c
 8015a88:	0801cac8 	.word	0x0801cac8

08015a8c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b090      	sub	sp, #64	@ 0x40
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
 8015a94:	6039      	str	r1, [r7, #0]
  u16_t offset_max;
  u16_t options_offset;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015a96:	2300      	movs	r3, #0
 8015a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015a9e:	2208      	movs	r2, #8
 8015aa0:	2100      	movs	r1, #0
 8015aa2:	48b3      	ldr	r0, [pc, #716]	@ (8015d70 <dhcp_parse_reply+0x2e4>)
 8015aa4:	f003 fae6 	bl	8019074 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	895b      	ldrh	r3, [r3, #10]
 8015aac:	2b2b      	cmp	r3, #43	@ 0x2b
 8015aae:	d802      	bhi.n	8015ab6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015ab0:	f06f 0301 	mvn.w	r3, #1
 8015ab4:	e249      	b.n	8015f4a <dhcp_parse_reply+0x4be>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	685b      	ldr	r3, [r3, #4]
 8015aba:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015abc:	23f0      	movs	r3, #240	@ 0xf0
 8015abe:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	891b      	ldrh	r3, [r3, #8]
 8015ac4:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  options_offset = options_idx;
 8015aca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015acc:	82fb      	strh	r3, [r7, #22]
  while ((q != NULL) && (options_idx >= q->len)) {
 8015ace:	e00c      	b.n	8015aea <dhcp_parse_reply+0x5e>
    options_idx = (u16_t)(options_idx - q->len);
 8015ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ad2:	895b      	ldrh	r3, [r3, #10]
 8015ad4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015ad6:	1ad3      	subs	r3, r2, r3
 8015ad8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015adc:	895b      	ldrh	r3, [r3, #10]
 8015ade:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8015ae0:	1ad3      	subs	r3, r2, r3
 8015ae2:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8015ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d004      	beq.n	8015afa <dhcp_parse_reply+0x6e>
 8015af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015af2:	895b      	ldrh	r3, [r3, #10]
 8015af4:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8015af6:	429a      	cmp	r2, r3
 8015af8:	d2ea      	bcs.n	8015ad0 <dhcp_parse_reply+0x44>
  }
  if (q == NULL) {
 8015afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d102      	bne.n	8015b06 <dhcp_parse_reply+0x7a>
    return ERR_BUF;
 8015b00:	f06f 0301 	mvn.w	r3, #1
 8015b04:	e221      	b.n	8015f4a <dhcp_parse_reply+0x4be>
  }
  offset = options_idx;
 8015b06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015b08:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8015b0a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015b0c:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8015b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b10:	685b      	ldr	r3, [r3, #4]
 8015b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015b14:	e1d9      	b.n	8015eca <dhcp_parse_reply+0x43e>
    u8_t op = options[offset];
 8015b16:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015b1a:	4413      	add	r3, r2
 8015b1c:	781b      	ldrb	r3, [r3, #0]
 8015b1e:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 8015b20:	2300      	movs	r3, #0
 8015b22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8015b26:	f04f 33ff 	mov.w	r3, #4294967295
 8015b2a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015b2c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b2e:	3302      	adds	r3, #2
 8015b30:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015b32:	8bfa      	ldrh	r2, [r7, #30]
 8015b34:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b36:	429a      	cmp	r2, r3
 8015b38:	d202      	bcs.n	8015b40 <dhcp_parse_reply+0xb4>
      /* overflow */
      return ERR_BUF;
 8015b3a:	f06f 0301 	mvn.w	r3, #1
 8015b3e:	e204      	b.n	8015f4a <dhcp_parse_reply+0x4be>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015b40:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b42:	3301      	adds	r3, #1
 8015b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b46:	8952      	ldrh	r2, [r2, #10]
 8015b48:	4293      	cmp	r3, r2
 8015b4a:	da07      	bge.n	8015b5c <dhcp_parse_reply+0xd0>
      len = options[offset + 1];
 8015b4c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b4e:	3301      	adds	r3, #1
 8015b50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015b52:	4413      	add	r3, r2
 8015b54:	781b      	ldrb	r3, [r3, #0]
 8015b56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015b5a:	e00b      	b.n	8015b74 <dhcp_parse_reply+0xe8>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d004      	beq.n	8015b6e <dhcp_parse_reply+0xe2>
 8015b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	685b      	ldr	r3, [r3, #4]
 8015b6a:	781b      	ldrb	r3, [r3, #0]
 8015b6c:	e000      	b.n	8015b70 <dhcp_parse_reply+0xe4>
 8015b6e:	2300      	movs	r3, #0
 8015b70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F"\n", msg_offset, q->len)); */
    decode_len = len;
 8015b74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8015b7c:	7d7b      	ldrb	r3, [r7, #21]
 8015b7e:	2b3b      	cmp	r3, #59	@ 0x3b
 8015b80:	f200 80df 	bhi.w	8015d42 <dhcp_parse_reply+0x2b6>
 8015b84:	a201      	add	r2, pc, #4	@ (adr r2, 8015b8c <dhcp_parse_reply+0x100>)
 8015b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b8a:	bf00      	nop
 8015b8c:	08015c7d 	.word	0x08015c7d
 8015b90:	08015c8d 	.word	0x08015c8d
 8015b94:	08015d43 	.word	0x08015d43
 8015b98:	08015ca1 	.word	0x08015ca1
 8015b9c:	08015d43 	.word	0x08015d43
 8015ba0:	08015d43 	.word	0x08015d43
 8015ba4:	08015d43 	.word	0x08015d43
 8015ba8:	08015d43 	.word	0x08015d43
 8015bac:	08015d43 	.word	0x08015d43
 8015bb0:	08015d43 	.word	0x08015d43
 8015bb4:	08015d43 	.word	0x08015d43
 8015bb8:	08015d43 	.word	0x08015d43
 8015bbc:	08015d43 	.word	0x08015d43
 8015bc0:	08015d43 	.word	0x08015d43
 8015bc4:	08015d43 	.word	0x08015d43
 8015bc8:	08015d43 	.word	0x08015d43
 8015bcc:	08015d43 	.word	0x08015d43
 8015bd0:	08015d43 	.word	0x08015d43
 8015bd4:	08015d43 	.word	0x08015d43
 8015bd8:	08015d43 	.word	0x08015d43
 8015bdc:	08015d43 	.word	0x08015d43
 8015be0:	08015d43 	.word	0x08015d43
 8015be4:	08015d43 	.word	0x08015d43
 8015be8:	08015d43 	.word	0x08015d43
 8015bec:	08015d43 	.word	0x08015d43
 8015bf0:	08015d43 	.word	0x08015d43
 8015bf4:	08015d43 	.word	0x08015d43
 8015bf8:	08015d43 	.word	0x08015d43
 8015bfc:	08015d43 	.word	0x08015d43
 8015c00:	08015d43 	.word	0x08015d43
 8015c04:	08015d43 	.word	0x08015d43
 8015c08:	08015d43 	.word	0x08015d43
 8015c0c:	08015d43 	.word	0x08015d43
 8015c10:	08015d43 	.word	0x08015d43
 8015c14:	08015d43 	.word	0x08015d43
 8015c18:	08015d43 	.word	0x08015d43
 8015c1c:	08015d43 	.word	0x08015d43
 8015c20:	08015d43 	.word	0x08015d43
 8015c24:	08015d43 	.word	0x08015d43
 8015c28:	08015d43 	.word	0x08015d43
 8015c2c:	08015d43 	.word	0x08015d43
 8015c30:	08015d43 	.word	0x08015d43
 8015c34:	08015d43 	.word	0x08015d43
 8015c38:	08015d43 	.word	0x08015d43
 8015c3c:	08015d43 	.word	0x08015d43
 8015c40:	08015d43 	.word	0x08015d43
 8015c44:	08015d43 	.word	0x08015d43
 8015c48:	08015d43 	.word	0x08015d43
 8015c4c:	08015d43 	.word	0x08015d43
 8015c50:	08015d43 	.word	0x08015d43
 8015c54:	08015d43 	.word	0x08015d43
 8015c58:	08015cbf 	.word	0x08015cbf
 8015c5c:	08015cd3 	.word	0x08015cd3
 8015c60:	08015cf3 	.word	0x08015cf3
 8015c64:	08015d07 	.word	0x08015d07
 8015c68:	08015d43 	.word	0x08015d43
 8015c6c:	08015d43 	.word	0x08015d43
 8015c70:	08015d43 	.word	0x08015d43
 8015c74:	08015d1b 	.word	0x08015d1b
 8015c78:	08015d2f 	.word	0x08015d2f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015c82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c86:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8015c8a:	e05e      	b.n	8015d4a <dhcp_parse_reply+0x2be>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c90:	2b04      	cmp	r3, #4
 8015c92:	d002      	beq.n	8015c9a <dhcp_parse_reply+0x20e>
 8015c94:	f06f 0305 	mvn.w	r3, #5
 8015c98:	e157      	b.n	8015f4a <dhcp_parse_reply+0x4be>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015c9a:	2306      	movs	r3, #6
 8015c9c:	623b      	str	r3, [r7, #32]
        break;
 8015c9e:	e054      	b.n	8015d4a <dhcp_parse_reply+0x2be>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015ca0:	2304      	movs	r3, #4
 8015ca2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DHCP_INPUT_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015ca6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015caa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015cae:	429a      	cmp	r2, r3
 8015cb0:	d202      	bcs.n	8015cb8 <dhcp_parse_reply+0x22c>
 8015cb2:	f06f 0305 	mvn.w	r3, #5
 8015cb6:	e148      	b.n	8015f4a <dhcp_parse_reply+0x4be>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015cb8:	2307      	movs	r3, #7
 8015cba:	623b      	str	r3, [r7, #32]
        break;
 8015cbc:	e045      	b.n	8015d4a <dhcp_parse_reply+0x2be>
        LWIP_DHCP_INPUT_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015cc2:	2b04      	cmp	r3, #4
 8015cc4:	d002      	beq.n	8015ccc <dhcp_parse_reply+0x240>
 8015cc6:	f06f 0305 	mvn.w	r3, #5
 8015cca:	e13e      	b.n	8015f4a <dhcp_parse_reply+0x4be>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015ccc:	2303      	movs	r3, #3
 8015cce:	623b      	str	r3, [r7, #32]
        break;
 8015cd0:	e03b      	b.n	8015d4a <dhcp_parse_reply+0x2be>
        LWIP_DHCP_INPUT_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_DHCP_INPUT_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015cd6:	2b01      	cmp	r3, #1
 8015cd8:	d002      	beq.n	8015ce0 <dhcp_parse_reply+0x254>
 8015cda:	f06f 0305 	mvn.w	r3, #5
 8015cde:	e134      	b.n	8015f4a <dhcp_parse_reply+0x4be>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_DHCP_INPUT_ERROR("overload in file/sname", options_offset == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015ce0:	8afb      	ldrh	r3, [r7, #22]
 8015ce2:	2bf0      	cmp	r3, #240	@ 0xf0
 8015ce4:	d002      	beq.n	8015cec <dhcp_parse_reply+0x260>
 8015ce6:	f06f 0305 	mvn.w	r3, #5
 8015cea:	e12e      	b.n	8015f4a <dhcp_parse_reply+0x4be>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015cec:	2300      	movs	r3, #0
 8015cee:	623b      	str	r3, [r7, #32]
        break;
 8015cf0:	e02b      	b.n	8015d4a <dhcp_parse_reply+0x2be>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_DHCP_INPUT_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015cf6:	2b01      	cmp	r3, #1
 8015cf8:	d002      	beq.n	8015d00 <dhcp_parse_reply+0x274>
 8015cfa:	f06f 0305 	mvn.w	r3, #5
 8015cfe:	e124      	b.n	8015f4a <dhcp_parse_reply+0x4be>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015d00:	2301      	movs	r3, #1
 8015d02:	623b      	str	r3, [r7, #32]
        break;
 8015d04:	e021      	b.n	8015d4a <dhcp_parse_reply+0x2be>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015d06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d0a:	2b04      	cmp	r3, #4
 8015d0c:	d002      	beq.n	8015d14 <dhcp_parse_reply+0x288>
 8015d0e:	f06f 0305 	mvn.w	r3, #5
 8015d12:	e11a      	b.n	8015f4a <dhcp_parse_reply+0x4be>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015d14:	2302      	movs	r3, #2
 8015d16:	623b      	str	r3, [r7, #32]
        break;
 8015d18:	e017      	b.n	8015d4a <dhcp_parse_reply+0x2be>
      case (DHCP_OPTION_T1):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d1e:	2b04      	cmp	r3, #4
 8015d20:	d002      	beq.n	8015d28 <dhcp_parse_reply+0x29c>
 8015d22:	f06f 0305 	mvn.w	r3, #5
 8015d26:	e110      	b.n	8015f4a <dhcp_parse_reply+0x4be>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015d28:	2304      	movs	r3, #4
 8015d2a:	623b      	str	r3, [r7, #32]
        break;
 8015d2c:	e00d      	b.n	8015d4a <dhcp_parse_reply+0x2be>
      case (DHCP_OPTION_T2):
        LWIP_DHCP_INPUT_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d32:	2b04      	cmp	r3, #4
 8015d34:	d002      	beq.n	8015d3c <dhcp_parse_reply+0x2b0>
 8015d36:	f06f 0305 	mvn.w	r3, #5
 8015d3a:	e106      	b.n	8015f4a <dhcp_parse_reply+0x4be>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015d3c:	2305      	movs	r3, #5
 8015d3e:	623b      	str	r3, [r7, #32]
        break;
 8015d40:	e003      	b.n	8015d4a <dhcp_parse_reply+0x2be>
      default:
        decode_len = 0;
 8015d42:	2300      	movs	r3, #0
 8015d44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015d48:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015d4a:	7d7b      	ldrb	r3, [r7, #21]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d103      	bne.n	8015d58 <dhcp_parse_reply+0x2cc>
      offset++;
 8015d50:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015d52:	3301      	adds	r3, #1
 8015d54:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015d56:	e095      	b.n	8015e84 <dhcp_parse_reply+0x3f8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015d58:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d5e:	4413      	add	r3, r2
 8015d60:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8015d64:	4293      	cmp	r3, r2
 8015d66:	dd05      	ble.n	8015d74 <dhcp_parse_reply+0x2e8>
        /* overflow */
        return ERR_BUF;
 8015d68:	f06f 0301 	mvn.w	r3, #1
 8015d6c:	e0ed      	b.n	8015f4a <dhcp_parse_reply+0x4be>
 8015d6e:	bf00      	nop
 8015d70:	2000a384 	.word	0x2000a384
      }
      offset = (u16_t)(offset + len + 2);
 8015d74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d78:	b29a      	uxth	r2, r3
 8015d7a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015d7c:	4413      	add	r3, r2
 8015d7e:	b29b      	uxth	r3, r3
 8015d80:	3302      	adds	r3, #2
 8015d82:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8015d84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d07b      	beq.n	8015e84 <dhcp_parse_reply+0x3f8>
        u32_t value = 0;
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015d90:	6a3b      	ldr	r3, [r7, #32]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	db02      	blt.n	8015d9c <dhcp_parse_reply+0x310>
 8015d96:	6a3b      	ldr	r3, [r7, #32]
 8015d98:	2b07      	cmp	r3, #7
 8015d9a:	dd06      	ble.n	8015daa <dhcp_parse_reply+0x31e>
 8015d9c:	4b6d      	ldr	r3, [pc, #436]	@ (8015f54 <dhcp_parse_reply+0x4c8>)
 8015d9e:	f44f 62d0 	mov.w	r2, #1664	@ 0x680
 8015da2:	496d      	ldr	r1, [pc, #436]	@ (8015f58 <dhcp_parse_reply+0x4cc>)
 8015da4:	486d      	ldr	r0, [pc, #436]	@ (8015f5c <dhcp_parse_reply+0x4d0>)
 8015da6:	f002 ffbd 	bl	8018d24 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015daa:	4a6d      	ldr	r2, [pc, #436]	@ (8015f60 <dhcp_parse_reply+0x4d4>)
 8015dac:	6a3b      	ldr	r3, [r7, #32]
 8015dae:	4413      	add	r3, r2
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d166      	bne.n	8015e84 <dhcp_parse_reply+0x3f8>
          copy_len = LWIP_MIN(decode_len, 4);
 8015db6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015dba:	2b04      	cmp	r3, #4
 8015dbc:	bf28      	it	cs
 8015dbe:	2304      	movcs	r3, #4
 8015dc0:	b2db      	uxtb	r3, r3
 8015dc2:	827b      	strh	r3, [r7, #18]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015dc4:	8bfb      	ldrh	r3, [r7, #30]
 8015dc6:	8a7a      	ldrh	r2, [r7, #18]
 8015dc8:	f107 0108 	add.w	r1, r7, #8
 8015dcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015dce:	f7f8 f9d5 	bl	800e17c <pbuf_copy_partial>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	461a      	mov	r2, r3
 8015dd6:	8a7b      	ldrh	r3, [r7, #18]
 8015dd8:	4293      	cmp	r3, r2
 8015dda:	d002      	beq.n	8015de2 <dhcp_parse_reply+0x356>
            return ERR_BUF;
 8015ddc:	f06f 0301 	mvn.w	r3, #1
 8015de0:	e0b3      	b.n	8015f4a <dhcp_parse_reply+0x4be>
          }
          if (decode_len > 4) {
 8015de2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015de6:	2b04      	cmp	r3, #4
 8015de8:	d92c      	bls.n	8015e44 <dhcp_parse_reply+0x3b8>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_DHCP_INPUT_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015dea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015dee:	f003 0303 	and.w	r3, r3, #3
 8015df2:	b2db      	uxtb	r3, r3
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d002      	beq.n	8015dfe <dhcp_parse_reply+0x372>
 8015df8:	f06f 0305 	mvn.w	r3, #5
 8015dfc:	e0a5      	b.n	8015f4a <dhcp_parse_reply+0x4be>
            dhcp_got_option(dhcp, decode_idx);
 8015dfe:	4a58      	ldr	r2, [pc, #352]	@ (8015f60 <dhcp_parse_reply+0x4d4>)
 8015e00:	6a3b      	ldr	r3, [r7, #32]
 8015e02:	4413      	add	r3, r2
 8015e04:	2201      	movs	r2, #1
 8015e06:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015e08:	68bb      	ldr	r3, [r7, #8]
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f7f6 fc56 	bl	800c6bc <lwip_htonl>
 8015e10:	4602      	mov	r2, r0
 8015e12:	4954      	ldr	r1, [pc, #336]	@ (8015f64 <dhcp_parse_reply+0x4d8>)
 8015e14:	6a3b      	ldr	r3, [r7, #32]
 8015e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015e1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015e1e:	3b04      	subs	r3, #4
 8015e20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015e24:	8bfb      	ldrh	r3, [r7, #30]
 8015e26:	3304      	adds	r3, #4
 8015e28:	823b      	strh	r3, [r7, #16]
            if (next_val_offset < val_offset) {
 8015e2a:	8a3a      	ldrh	r2, [r7, #16]
 8015e2c:	8bfb      	ldrh	r3, [r7, #30]
 8015e2e:	429a      	cmp	r2, r3
 8015e30:	d202      	bcs.n	8015e38 <dhcp_parse_reply+0x3ac>
              /* overflow */
              return ERR_BUF;
 8015e32:	f06f 0301 	mvn.w	r3, #1
 8015e36:	e088      	b.n	8015f4a <dhcp_parse_reply+0x4be>
            }
            val_offset = next_val_offset;
 8015e38:	8a3b      	ldrh	r3, [r7, #16]
 8015e3a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015e3c:	6a3b      	ldr	r3, [r7, #32]
 8015e3e:	3301      	adds	r3, #1
 8015e40:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015e42:	e7a5      	b.n	8015d90 <dhcp_parse_reply+0x304>
          } else if (decode_len == 4) {
 8015e44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015e48:	2b04      	cmp	r3, #4
 8015e4a:	d106      	bne.n	8015e5a <dhcp_parse_reply+0x3ce>
            value = lwip_ntohl(value);
 8015e4c:	68bb      	ldr	r3, [r7, #8]
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7f6 fc34 	bl	800c6bc <lwip_htonl>
 8015e54:	4603      	mov	r3, r0
 8015e56:	60bb      	str	r3, [r7, #8]
 8015e58:	e00a      	b.n	8015e70 <dhcp_parse_reply+0x3e4>
          } else {
            LWIP_DHCP_INPUT_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015e5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015e5e:	2b01      	cmp	r3, #1
 8015e60:	d002      	beq.n	8015e68 <dhcp_parse_reply+0x3dc>
 8015e62:	f06f 0305 	mvn.w	r3, #5
 8015e66:	e070      	b.n	8015f4a <dhcp_parse_reply+0x4be>
            value = ((u8_t *)&value)[0];
 8015e68:	f107 0308 	add.w	r3, r7, #8
 8015e6c:	781b      	ldrb	r3, [r3, #0]
 8015e6e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015e70:	4a3b      	ldr	r2, [pc, #236]	@ (8015f60 <dhcp_parse_reply+0x4d4>)
 8015e72:	6a3b      	ldr	r3, [r7, #32]
 8015e74:	4413      	add	r3, r2
 8015e76:	2201      	movs	r2, #1
 8015e78:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015e7a:	68ba      	ldr	r2, [r7, #8]
 8015e7c:	4939      	ldr	r1, [pc, #228]	@ (8015f64 <dhcp_parse_reply+0x4d8>)
 8015e7e:	6a3b      	ldr	r3, [r7, #32]
 8015e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e86:	895b      	ldrh	r3, [r3, #10]
 8015e88:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015e8a:	429a      	cmp	r2, r3
 8015e8c:	d31d      	bcc.n	8015eca <dhcp_parse_reply+0x43e>
      offset = (u16_t)(offset - q->len);
 8015e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e90:	895b      	ldrh	r3, [r3, #10]
 8015e92:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015e94:	1ad3      	subs	r3, r2, r3
 8015e96:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e9a:	895b      	ldrh	r3, [r3, #10]
 8015e9c:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8015e9e:	1ad3      	subs	r3, r2, r3
 8015ea0:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8015ea2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015ea4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015ea6:	429a      	cmp	r2, r3
 8015ea8:	d20c      	bcs.n	8015ec4 <dhcp_parse_reply+0x438>
        q = q->next;
 8015eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_DHCP_INPUT_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d102      	bne.n	8015ebc <dhcp_parse_reply+0x430>
 8015eb6:	f06f 0305 	mvn.w	r3, #5
 8015eba:	e046      	b.n	8015f4a <dhcp_parse_reply+0x4be>
        options = (u8_t *)q->payload;
 8015ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ebe:	685b      	ldr	r3, [r3, #4]
 8015ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015ec2:	e002      	b.n	8015eca <dhcp_parse_reply+0x43e>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015ec4:	f06f 0301 	mvn.w	r3, #1
 8015ec8:	e03f      	b.n	8015f4a <dhcp_parse_reply+0x4be>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d00a      	beq.n	8015ee6 <dhcp_parse_reply+0x45a>
 8015ed0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015ed2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d206      	bcs.n	8015ee6 <dhcp_parse_reply+0x45a>
 8015ed8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015eda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015edc:	4413      	add	r3, r2
 8015ede:	781b      	ldrb	r3, [r3, #0]
 8015ee0:	2bff      	cmp	r3, #255	@ 0xff
 8015ee2:	f47f ae18 	bne.w	8015b16 <dhcp_parse_reply+0x8a>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8015f60 <dhcp_parse_reply+0x4d4>)
 8015ee8:	781b      	ldrb	r3, [r3, #0]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d018      	beq.n	8015f20 <dhcp_parse_reply+0x494>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015eee:	4b1d      	ldr	r3, [pc, #116]	@ (8015f64 <dhcp_parse_reply+0x4d8>)
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8015f60 <dhcp_parse_reply+0x4d4>)
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	2b01      	cmp	r3, #1
 8015efe:	d102      	bne.n	8015f06 <dhcp_parse_reply+0x47a>
      parse_file_as_options = 1;
 8015f00:	2301      	movs	r3, #1
 8015f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015f04:	e00c      	b.n	8015f20 <dhcp_parse_reply+0x494>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	2b02      	cmp	r3, #2
 8015f0a:	d102      	bne.n	8015f12 <dhcp_parse_reply+0x486>
      parse_sname_as_options = 1;
 8015f0c:	2301      	movs	r3, #1
 8015f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015f10:	e006      	b.n	8015f20 <dhcp_parse_reply+0x494>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	2b03      	cmp	r3, #3
 8015f16:	d103      	bne.n	8015f20 <dhcp_parse_reply+0x494>
      parse_sname_as_options = 1;
 8015f18:	2301      	movs	r3, #1
 8015f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8015f1c:	2301      	movs	r3, #1
 8015f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d006      	beq.n	8015f34 <dhcp_parse_reply+0x4a8>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015f26:	2300      	movs	r3, #0
 8015f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8015f2a:	236c      	movs	r3, #108	@ 0x6c
 8015f2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015f2e:	23ec      	movs	r3, #236	@ 0xec
 8015f30:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015f32:	e5c8      	b.n	8015ac6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d006      	beq.n	8015f48 <dhcp_parse_reply+0x4bc>
    parse_sname_as_options = 0;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8015f3e:	232c      	movs	r3, #44	@ 0x2c
 8015f40:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015f42:	236c      	movs	r3, #108	@ 0x6c
 8015f44:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8015f46:	e5be      	b.n	8015ac6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */
  return ERR_OK;
 8015f48:	2300      	movs	r3, #0
}
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	3740      	adds	r7, #64	@ 0x40
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}
 8015f52:	bf00      	nop
 8015f54:	0801ca88 	.word	0x0801ca88
 8015f58:	0801cc98 	.word	0x0801cc98
 8015f5c:	0801cac8 	.word	0x0801cac8
 8015f60:	2000a384 	.word	0x2000a384
 8015f64:	2000a364 	.word	0x2000a364

08015f68 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b08a      	sub	sp, #40	@ 0x28
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	60b9      	str	r1, [r7, #8]
 8015f72:	607a      	str	r2, [r7, #4]
 8015f74:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015f76:	4b60      	ldr	r3, [pc, #384]	@ (80160f8 <dhcp_recv+0x190>)
 8015f78:	685b      	ldr	r3, [r3, #4]
 8015f7a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f7c:	6a3b      	ldr	r3, [r7, #32]
 8015f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f80:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	685b      	ldr	r3, [r3, #4]
 8015f86:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015f88:	69fb      	ldr	r3, [r7, #28]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	f000 809d 	beq.w	80160ca <dhcp_recv+0x162>
 8015f90:	69fb      	ldr	r3, [r7, #28]
 8015f92:	791b      	ldrb	r3, [r3, #4]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	f000 8098 	beq.w	80160ca <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	895b      	ldrh	r3, [r3, #10]
 8015f9e:	2b2b      	cmp	r3, #43	@ 0x2b
 8015fa0:	f240 8095 	bls.w	80160ce <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015fa4:	69bb      	ldr	r3, [r7, #24]
 8015fa6:	781b      	ldrb	r3, [r3, #0]
 8015fa8:	2b02      	cmp	r3, #2
 8015faa:	f040 8092 	bne.w	80160d2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015fae:	2300      	movs	r3, #0
 8015fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015fb4:	e012      	b.n	8015fdc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015fba:	6a3a      	ldr	r2, [r7, #32]
 8015fbc:	4413      	add	r3, r2
 8015fbe:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8015fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015fc6:	69b9      	ldr	r1, [r7, #24]
 8015fc8:	440b      	add	r3, r1
 8015fca:	7f1b      	ldrb	r3, [r3, #28]
 8015fcc:	429a      	cmp	r2, r3
 8015fce:	f040 8082 	bne.w	80160d6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015fd6:	3301      	adds	r3, #1
 8015fd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015fdc:	6a3b      	ldr	r3, [r7, #32]
 8015fde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015fe2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d203      	bcs.n	8015ff2 <dhcp_recv+0x8a>
 8015fea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015fee:	2b05      	cmp	r3, #5
 8015ff0:	d9e1      	bls.n	8015fb6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015ff2:	69bb      	ldr	r3, [r7, #24]
 8015ff4:	685b      	ldr	r3, [r3, #4]
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	f7f6 fb60 	bl	800c6bc <lwip_htonl>
 8015ffc:	4602      	mov	r2, r0
 8015ffe:	69fb      	ldr	r3, [r7, #28]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	429a      	cmp	r2, r3
 8016004:	d169      	bne.n	80160da <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8016006:	69f9      	ldr	r1, [r7, #28]
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f7ff fd3f 	bl	8015a8c <dhcp_parse_reply>
 801600e:	4603      	mov	r3, r0
 8016010:	2b00      	cmp	r3, #0
 8016012:	d164      	bne.n	80160de <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016014:	4b39      	ldr	r3, [pc, #228]	@ (80160fc <dhcp_recv+0x194>)
 8016016:	785b      	ldrb	r3, [r3, #1]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d062      	beq.n	80160e2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	685b      	ldr	r3, [r3, #4]
 8016020:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8016022:	4b37      	ldr	r3, [pc, #220]	@ (8016100 <dhcp_recv+0x198>)
 8016024:	685b      	ldr	r3, [r3, #4]
 8016026:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8016028:	7cfb      	ldrb	r3, [r7, #19]
 801602a:	2b05      	cmp	r3, #5
 801602c:	d12a      	bne.n	8016084 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state or just reconnected to the network? */
    if ((dhcp->state == DHCP_STATE_REQUESTING) ||
 801602e:	69fb      	ldr	r3, [r7, #28]
 8016030:	795b      	ldrb	r3, [r3, #5]
 8016032:	2b01      	cmp	r3, #1
 8016034:	d003      	beq.n	801603e <dhcp_recv+0xd6>
        (dhcp->state == DHCP_STATE_REBOOTING)) {
 8016036:	69fb      	ldr	r3, [r7, #28]
 8016038:	795b      	ldrb	r3, [r3, #5]
    if ((dhcp->state == DHCP_STATE_REQUESTING) ||
 801603a:	2b03      	cmp	r3, #3
 801603c:	d112      	bne.n	8016064 <dhcp_recv+0xfc>
      dhcp_handle_ack(netif, msg_in);
 801603e:	6979      	ldr	r1, [r7, #20]
 8016040:	6a38      	ldr	r0, [r7, #32]
 8016042:	f7fe fee7 	bl	8014e14 <dhcp_handle_ack>
#if LWIP_DHCP_DOES_ACD_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8016046:	6a3b      	ldr	r3, [r7, #32]
 8016048:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801604c:	f003 0308 	and.w	r3, r3, #8
 8016050:	2b00      	cmp	r3, #0
 8016052:	d003      	beq.n	801605c <dhcp_recv+0xf4>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016054:	6a38      	ldr	r0, [r7, #32]
 8016056:	f7fe fc99 	bl	801498c <dhcp_check>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801605a:	e045      	b.n	80160e8 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801605c:	6a38      	ldr	r0, [r7, #32]
 801605e:	f7ff f8eb 	bl	8015238 <dhcp_bind>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8016062:	e041      	b.n	80160e8 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address and using it? */
    else if ((dhcp->state == DHCP_STATE_REBINDING) ||
 8016064:	69fb      	ldr	r3, [r7, #28]
 8016066:	795b      	ldrb	r3, [r3, #5]
 8016068:	2b04      	cmp	r3, #4
 801606a:	d003      	beq.n	8016074 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801606c:	69fb      	ldr	r3, [r7, #28]
 801606e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBINDING) ||
 8016070:	2b05      	cmp	r3, #5
 8016072:	d139      	bne.n	80160e8 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8016074:	6979      	ldr	r1, [r7, #20]
 8016076:	6a38      	ldr	r0, [r7, #32]
 8016078:	f7fe fecc 	bl	8014e14 <dhcp_handle_ack>
      dhcp_bind(netif);
 801607c:	6a38      	ldr	r0, [r7, #32]
 801607e:	f7ff f8db 	bl	8015238 <dhcp_bind>
 8016082:	e031      	b.n	80160e8 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8016084:	7cfb      	ldrb	r3, [r7, #19]
 8016086:	2b06      	cmp	r3, #6
 8016088:	d113      	bne.n	80160b2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801608a:	69fb      	ldr	r3, [r7, #28]
 801608c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801608e:	2b03      	cmp	r3, #3
 8016090:	d00b      	beq.n	80160aa <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016092:	69fb      	ldr	r3, [r7, #28]
 8016094:	795b      	ldrb	r3, [r3, #5]
 8016096:	2b01      	cmp	r3, #1
 8016098:	d007      	beq.n	80160aa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801609a:	69fb      	ldr	r3, [r7, #28]
 801609c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801609e:	2b04      	cmp	r3, #4
 80160a0:	d003      	beq.n	80160aa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80160a2:	69fb      	ldr	r3, [r7, #28]
 80160a4:	795b      	ldrb	r3, [r3, #5]
 80160a6:	2b05      	cmp	r3, #5
 80160a8:	d103      	bne.n	80160b2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80160aa:	6a38      	ldr	r0, [r7, #32]
 80160ac:	f7fe fc02 	bl	80148b4 <dhcp_handle_nak>
 80160b0:	e01a      	b.n	80160e8 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80160b2:	7cfb      	ldrb	r3, [r7, #19]
 80160b4:	2b02      	cmp	r3, #2
 80160b6:	d116      	bne.n	80160e6 <dhcp_recv+0x17e>
 80160b8:	69fb      	ldr	r3, [r7, #28]
 80160ba:	795b      	ldrb	r3, [r3, #5]
 80160bc:	2b06      	cmp	r3, #6
 80160be:	d112      	bne.n	80160e6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80160c0:	6979      	ldr	r1, [r7, #20]
 80160c2:	6a38      	ldr	r0, [r7, #32]
 80160c4:	f7fe fc7a 	bl	80149bc <dhcp_handle_offer>
 80160c8:	e00e      	b.n	80160e8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80160ca:	bf00      	nop
 80160cc:	e00c      	b.n	80160e8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80160ce:	bf00      	nop
 80160d0:	e00a      	b.n	80160e8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80160d2:	bf00      	nop
 80160d4:	e008      	b.n	80160e8 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80160d6:	bf00      	nop
 80160d8:	e006      	b.n	80160e8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80160da:	bf00      	nop
 80160dc:	e004      	b.n	80160e8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80160de:	bf00      	nop
 80160e0:	e002      	b.n	80160e8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80160e2:	bf00      	nop
 80160e4:	e000      	b.n	80160e8 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80160e6:	bf00      	nop
  pbuf_free(p);
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f7f7 fe3d 	bl	800dd68 <pbuf_free>
}
 80160ee:	bf00      	nop
 80160f0:	3728      	adds	r7, #40	@ 0x28
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd80      	pop	{r7, pc}
 80160f6:	bf00      	nop
 80160f8:	200035ac 	.word	0x200035ac
 80160fc:	2000a384 	.word	0x2000a384
 8016100:	2000a364 	.word	0x2000a364

08016104 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b088      	sub	sp, #32
 8016108:	af00      	add	r7, sp, #0
 801610a:	60f8      	str	r0, [r7, #12]
 801610c:	60b9      	str	r1, [r7, #8]
 801610e:	603b      	str	r3, [r7, #0]
 8016110:	4613      	mov	r3, r2
 8016112:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d101      	bne.n	801611e <dhcp_create_msg+0x1a>
 801611a:	2300      	movs	r3, #0
 801611c:	e0aa      	b.n	8016274 <dhcp_create_msg+0x170>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d101      	bne.n	8016128 <dhcp_create_msg+0x24>
 8016124:	2300      	movs	r3, #0
 8016126:	e0a5      	b.n	8016274 <dhcp_create_msg+0x170>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016128:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801612c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8016130:	2036      	movs	r0, #54	@ 0x36
 8016132:	f7f7 fb33 	bl	800d79c <pbuf_alloc>
 8016136:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016138:	69bb      	ldr	r3, [r7, #24]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d101      	bne.n	8016142 <dhcp_create_msg+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801613e:	2300      	movs	r3, #0
 8016140:	e098      	b.n	8016274 <dhcp_create_msg+0x170>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8016142:	69bb      	ldr	r3, [r7, #24]
 8016144:	895b      	ldrh	r3, [r3, #10]
 8016146:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801614a:	d206      	bcs.n	801615a <dhcp_create_msg+0x56>
 801614c:	4b4b      	ldr	r3, [pc, #300]	@ (801627c <dhcp_create_msg+0x178>)
 801614e:	f240 727a 	movw	r2, #1914	@ 0x77a
 8016152:	494b      	ldr	r1, [pc, #300]	@ (8016280 <dhcp_create_msg+0x17c>)
 8016154:	484b      	ldr	r0, [pc, #300]	@ (8016284 <dhcp_create_msg+0x180>)
 8016156:	f002 fde5 	bl	8018d24 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801615a:	79fb      	ldrb	r3, [r7, #7]
 801615c:	2b03      	cmp	r3, #3
 801615e:	d103      	bne.n	8016168 <dhcp_create_msg+0x64>
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	795b      	ldrb	r3, [r3, #5]
 8016164:	2b03      	cmp	r3, #3
 8016166:	d10d      	bne.n	8016184 <dhcp_create_msg+0x80>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	799b      	ldrb	r3, [r3, #6]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d105      	bne.n	801617c <dhcp_create_msg+0x78>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016170:	f002 fcd8 	bl	8018b24 <rand>
 8016174:	4603      	mov	r3, r0
 8016176:	461a      	mov	r2, r3
 8016178:	4b43      	ldr	r3, [pc, #268]	@ (8016288 <dhcp_create_msg+0x184>)
 801617a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801617c:	4b42      	ldr	r3, [pc, #264]	@ (8016288 <dhcp_create_msg+0x184>)
 801617e:	681a      	ldr	r2, [r3, #0]
 8016180:	68bb      	ldr	r3, [r7, #8]
 8016182:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016184:	69bb      	ldr	r3, [r7, #24]
 8016186:	685b      	ldr	r3, [r3, #4]
 8016188:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801618a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801618e:	2100      	movs	r1, #0
 8016190:	6978      	ldr	r0, [r7, #20]
 8016192:	f002 ff6f 	bl	8019074 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016196:	697b      	ldr	r3, [r7, #20]
 8016198:	2201      	movs	r2, #1
 801619a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801619c:	697b      	ldr	r3, [r7, #20]
 801619e:	2201      	movs	r2, #1
 80161a0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80161a8:	697b      	ldr	r3, [r7, #20]
 80161aa:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80161ac:	68bb      	ldr	r3, [r7, #8]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	4618      	mov	r0, r3
 80161b2:	f7f6 fa83 	bl	800c6bc <lwip_htonl>
 80161b6:	4602      	mov	r2, r0
 80161b8:	697b      	ldr	r3, [r7, #20]
 80161ba:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80161bc:	79fb      	ldrb	r3, [r7, #7]
 80161be:	2b08      	cmp	r3, #8
 80161c0:	d010      	beq.n	80161e4 <dhcp_create_msg+0xe0>
 80161c2:	79fb      	ldrb	r3, [r7, #7]
 80161c4:	2b04      	cmp	r3, #4
 80161c6:	d00d      	beq.n	80161e4 <dhcp_create_msg+0xe0>
 80161c8:	79fb      	ldrb	r3, [r7, #7]
 80161ca:	2b07      	cmp	r3, #7
 80161cc:	d00a      	beq.n	80161e4 <dhcp_create_msg+0xe0>
 80161ce:	79fb      	ldrb	r3, [r7, #7]
 80161d0:	2b03      	cmp	r3, #3
 80161d2:	d10c      	bne.n	80161ee <dhcp_create_msg+0xea>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80161d8:	2b05      	cmp	r3, #5
 80161da:	d003      	beq.n	80161e4 <dhcp_create_msg+0xe0>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80161dc:	68bb      	ldr	r3, [r7, #8]
 80161de:	795b      	ldrb	r3, [r3, #5]
 80161e0:	2b04      	cmp	r3, #4
 80161e2:	d104      	bne.n	80161ee <dhcp_create_msg+0xea>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	3304      	adds	r3, #4
 80161e8:	681a      	ldr	r2, [r3, #0]
 80161ea:	697b      	ldr	r3, [r7, #20]
 80161ec:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80161ee:	2300      	movs	r3, #0
 80161f0:	83fb      	strh	r3, [r7, #30]
 80161f2:	e00c      	b.n	801620e <dhcp_create_msg+0x10a>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80161f4:	8bfa      	ldrh	r2, [r7, #30]
 80161f6:	8bfb      	ldrh	r3, [r7, #30]
 80161f8:	68f9      	ldr	r1, [r7, #12]
 80161fa:	440a      	add	r2, r1
 80161fc:	f892 102e 	ldrb.w	r1, [r2, #46]	@ 0x2e
 8016200:	697a      	ldr	r2, [r7, #20]
 8016202:	4413      	add	r3, r2
 8016204:	460a      	mov	r2, r1
 8016206:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016208:	8bfb      	ldrh	r3, [r7, #30]
 801620a:	3301      	adds	r3, #1
 801620c:	83fb      	strh	r3, [r7, #30]
 801620e:	8bfb      	ldrh	r3, [r7, #30]
 8016210:	2b05      	cmp	r3, #5
 8016212:	d9ef      	bls.n	80161f4 <dhcp_create_msg+0xf0>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	2200      	movs	r2, #0
 8016218:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801621c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8016220:	2200      	movs	r2, #0
 8016222:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8016226:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801622a:	2200      	movs	r2, #0
 801622c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8016230:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8016234:	2200      	movs	r2, #0
 8016236:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801623a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801623e:	697b      	ldr	r3, [r7, #20]
 8016240:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016244:	2301      	movs	r3, #1
 8016246:	2235      	movs	r2, #53	@ 0x35
 8016248:	2000      	movs	r0, #0
 801624a:	f7ff fb4f 	bl	80158ec <dhcp_option>
 801624e:	4603      	mov	r3, r0
 8016250:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016258:	79fa      	ldrb	r2, [r7, #7]
 801625a:	8a7b      	ldrh	r3, [r7, #18]
 801625c:	4618      	mov	r0, r3
 801625e:	f7ff fb79 	bl	8015954 <dhcp_option_byte>
 8016262:	4603      	mov	r3, r0
 8016264:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016266:	683b      	ldr	r3, [r7, #0]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d002      	beq.n	8016272 <dhcp_create_msg+0x16e>
    *options_out_len = options_out_len_loc;
 801626c:	683b      	ldr	r3, [r7, #0]
 801626e:	8a7a      	ldrh	r2, [r7, #18]
 8016270:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016272:	69bb      	ldr	r3, [r7, #24]
}
 8016274:	4618      	mov	r0, r3
 8016276:	3720      	adds	r7, #32
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}
 801627c:	0801ca88 	.word	0x0801ca88
 8016280:	0801ccac 	.word	0x0801ccac
 8016284:	0801cac8 	.word	0x0801cac8
 8016288:	2000a394 	.word	0x2000a394

0801628c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b084      	sub	sp, #16
 8016290:	af00      	add	r7, sp, #0
 8016292:	4603      	mov	r3, r0
 8016294:	60b9      	str	r1, [r7, #8]
 8016296:	607a      	str	r2, [r7, #4]
 8016298:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801629a:	89fb      	ldrh	r3, [r7, #14]
 801629c:	1c5a      	adds	r2, r3, #1
 801629e:	81fa      	strh	r2, [r7, #14]
 80162a0:	461a      	mov	r2, r3
 80162a2:	68bb      	ldr	r3, [r7, #8]
 80162a4:	4413      	add	r3, r2
 80162a6:	22ff      	movs	r2, #255	@ 0xff
 80162a8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80162aa:	e007      	b.n	80162bc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80162ac:	89fb      	ldrh	r3, [r7, #14]
 80162ae:	1c5a      	adds	r2, r3, #1
 80162b0:	81fa      	strh	r2, [r7, #14]
 80162b2:	461a      	mov	r2, r3
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	4413      	add	r3, r2
 80162b8:	2200      	movs	r2, #0
 80162ba:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80162bc:	89fb      	ldrh	r3, [r7, #14]
 80162be:	2b43      	cmp	r3, #67	@ 0x43
 80162c0:	d904      	bls.n	80162cc <dhcp_option_trailer+0x40>
 80162c2:	89fb      	ldrh	r3, [r7, #14]
 80162c4:	f003 0303 	and.w	r3, r3, #3
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d002      	beq.n	80162d2 <dhcp_option_trailer+0x46>
 80162cc:	89fb      	ldrh	r3, [r7, #14]
 80162ce:	2b43      	cmp	r3, #67	@ 0x43
 80162d0:	d9ec      	bls.n	80162ac <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80162d2:	89fb      	ldrh	r3, [r7, #14]
 80162d4:	33f0      	adds	r3, #240	@ 0xf0
 80162d6:	b29b      	uxth	r3, r3
 80162d8:	4619      	mov	r1, r3
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f7f7 fbbc 	bl	800da58 <pbuf_realloc>
}
 80162e0:	bf00      	nop
 80162e2:	3710      	adds	r7, #16
 80162e4:	46bd      	mov	sp, r7
 80162e6:	bd80      	pop	{r7, pc}

080162e8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80162e8:	b480      	push	{r7}
 80162ea:	b085      	sub	sp, #20
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d017      	beq.n	8016326 <dhcp_supplied_address+0x3e>
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d013      	beq.n	8016326 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016302:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	795b      	ldrb	r3, [r3, #5]
 8016308:	2b0a      	cmp	r3, #10
 801630a:	d007      	beq.n	801631c <dhcp_supplied_address+0x34>
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	795b      	ldrb	r3, [r3, #5]
 8016310:	2b05      	cmp	r3, #5
 8016312:	d003      	beq.n	801631c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016318:	2b04      	cmp	r3, #4
 801631a:	d101      	bne.n	8016320 <dhcp_supplied_address+0x38>
 801631c:	2301      	movs	r3, #1
 801631e:	e000      	b.n	8016322 <dhcp_supplied_address+0x3a>
 8016320:	2300      	movs	r3, #0
 8016322:	b2db      	uxtb	r3, r3
 8016324:	e000      	b.n	8016328 <dhcp_supplied_address+0x40>
  }
  return 0;
 8016326:	2300      	movs	r3, #0
}
 8016328:	4618      	mov	r0, r3
 801632a:	3714      	adds	r7, #20
 801632c:	46bd      	mov	sp, r7
 801632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016332:	4770      	bx	lr

08016334 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	b082      	sub	sp, #8
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801633c:	4915      	ldr	r1, [pc, #84]	@ (8016394 <etharp_free_entry+0x60>)
 801633e:	687a      	ldr	r2, [r7, #4]
 8016340:	4613      	mov	r3, r2
 8016342:	005b      	lsls	r3, r3, #1
 8016344:	4413      	add	r3, r2
 8016346:	00db      	lsls	r3, r3, #3
 8016348:	440b      	add	r3, r1
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d013      	beq.n	8016378 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016350:	4910      	ldr	r1, [pc, #64]	@ (8016394 <etharp_free_entry+0x60>)
 8016352:	687a      	ldr	r2, [r7, #4]
 8016354:	4613      	mov	r3, r2
 8016356:	005b      	lsls	r3, r3, #1
 8016358:	4413      	add	r3, r2
 801635a:	00db      	lsls	r3, r3, #3
 801635c:	440b      	add	r3, r1
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	4618      	mov	r0, r3
 8016362:	f7f7 fd01 	bl	800dd68 <pbuf_free>
    arp_table[i].q = NULL;
 8016366:	490b      	ldr	r1, [pc, #44]	@ (8016394 <etharp_free_entry+0x60>)
 8016368:	687a      	ldr	r2, [r7, #4]
 801636a:	4613      	mov	r3, r2
 801636c:	005b      	lsls	r3, r3, #1
 801636e:	4413      	add	r3, r2
 8016370:	00db      	lsls	r3, r3, #3
 8016372:	440b      	add	r3, r1
 8016374:	2200      	movs	r2, #0
 8016376:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016378:	4906      	ldr	r1, [pc, #24]	@ (8016394 <etharp_free_entry+0x60>)
 801637a:	687a      	ldr	r2, [r7, #4]
 801637c:	4613      	mov	r3, r2
 801637e:	005b      	lsls	r3, r3, #1
 8016380:	4413      	add	r3, r2
 8016382:	00db      	lsls	r3, r3, #3
 8016384:	440b      	add	r3, r1
 8016386:	3314      	adds	r3, #20
 8016388:	2200      	movs	r2, #0
 801638a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801638c:	bf00      	nop
 801638e:	3708      	adds	r7, #8
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}
 8016394:	2000a398 	.word	0x2000a398

08016398 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	b082      	sub	sp, #8
 801639c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801639e:	2300      	movs	r3, #0
 80163a0:	607b      	str	r3, [r7, #4]
 80163a2:	e096      	b.n	80164d2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80163a4:	494f      	ldr	r1, [pc, #316]	@ (80164e4 <etharp_tmr+0x14c>)
 80163a6:	687a      	ldr	r2, [r7, #4]
 80163a8:	4613      	mov	r3, r2
 80163aa:	005b      	lsls	r3, r3, #1
 80163ac:	4413      	add	r3, r2
 80163ae:	00db      	lsls	r3, r3, #3
 80163b0:	440b      	add	r3, r1
 80163b2:	3314      	adds	r3, #20
 80163b4:	781b      	ldrb	r3, [r3, #0]
 80163b6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80163b8:	78fb      	ldrb	r3, [r7, #3]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	f000 8086 	beq.w	80164cc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80163c0:	4948      	ldr	r1, [pc, #288]	@ (80164e4 <etharp_tmr+0x14c>)
 80163c2:	687a      	ldr	r2, [r7, #4]
 80163c4:	4613      	mov	r3, r2
 80163c6:	005b      	lsls	r3, r3, #1
 80163c8:	4413      	add	r3, r2
 80163ca:	00db      	lsls	r3, r3, #3
 80163cc:	440b      	add	r3, r1
 80163ce:	3312      	adds	r3, #18
 80163d0:	881b      	ldrh	r3, [r3, #0]
 80163d2:	3301      	adds	r3, #1
 80163d4:	b298      	uxth	r0, r3
 80163d6:	4943      	ldr	r1, [pc, #268]	@ (80164e4 <etharp_tmr+0x14c>)
 80163d8:	687a      	ldr	r2, [r7, #4]
 80163da:	4613      	mov	r3, r2
 80163dc:	005b      	lsls	r3, r3, #1
 80163de:	4413      	add	r3, r2
 80163e0:	00db      	lsls	r3, r3, #3
 80163e2:	440b      	add	r3, r1
 80163e4:	3312      	adds	r3, #18
 80163e6:	4602      	mov	r2, r0
 80163e8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80163ea:	493e      	ldr	r1, [pc, #248]	@ (80164e4 <etharp_tmr+0x14c>)
 80163ec:	687a      	ldr	r2, [r7, #4]
 80163ee:	4613      	mov	r3, r2
 80163f0:	005b      	lsls	r3, r3, #1
 80163f2:	4413      	add	r3, r2
 80163f4:	00db      	lsls	r3, r3, #3
 80163f6:	440b      	add	r3, r1
 80163f8:	3312      	adds	r3, #18
 80163fa:	881b      	ldrh	r3, [r3, #0]
 80163fc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016400:	d215      	bcs.n	801642e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016402:	4938      	ldr	r1, [pc, #224]	@ (80164e4 <etharp_tmr+0x14c>)
 8016404:	687a      	ldr	r2, [r7, #4]
 8016406:	4613      	mov	r3, r2
 8016408:	005b      	lsls	r3, r3, #1
 801640a:	4413      	add	r3, r2
 801640c:	00db      	lsls	r3, r3, #3
 801640e:	440b      	add	r3, r1
 8016410:	3314      	adds	r3, #20
 8016412:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016414:	2b01      	cmp	r3, #1
 8016416:	d10e      	bne.n	8016436 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016418:	4932      	ldr	r1, [pc, #200]	@ (80164e4 <etharp_tmr+0x14c>)
 801641a:	687a      	ldr	r2, [r7, #4]
 801641c:	4613      	mov	r3, r2
 801641e:	005b      	lsls	r3, r3, #1
 8016420:	4413      	add	r3, r2
 8016422:	00db      	lsls	r3, r3, #3
 8016424:	440b      	add	r3, r1
 8016426:	3312      	adds	r3, #18
 8016428:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801642a:	2b04      	cmp	r3, #4
 801642c:	d903      	bls.n	8016436 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801642e:	6878      	ldr	r0, [r7, #4]
 8016430:	f7ff ff80 	bl	8016334 <etharp_free_entry>
 8016434:	e04a      	b.n	80164cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016436:	492b      	ldr	r1, [pc, #172]	@ (80164e4 <etharp_tmr+0x14c>)
 8016438:	687a      	ldr	r2, [r7, #4]
 801643a:	4613      	mov	r3, r2
 801643c:	005b      	lsls	r3, r3, #1
 801643e:	4413      	add	r3, r2
 8016440:	00db      	lsls	r3, r3, #3
 8016442:	440b      	add	r3, r1
 8016444:	3314      	adds	r3, #20
 8016446:	781b      	ldrb	r3, [r3, #0]
 8016448:	2b03      	cmp	r3, #3
 801644a:	d10a      	bne.n	8016462 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801644c:	4925      	ldr	r1, [pc, #148]	@ (80164e4 <etharp_tmr+0x14c>)
 801644e:	687a      	ldr	r2, [r7, #4]
 8016450:	4613      	mov	r3, r2
 8016452:	005b      	lsls	r3, r3, #1
 8016454:	4413      	add	r3, r2
 8016456:	00db      	lsls	r3, r3, #3
 8016458:	440b      	add	r3, r1
 801645a:	3314      	adds	r3, #20
 801645c:	2204      	movs	r2, #4
 801645e:	701a      	strb	r2, [r3, #0]
 8016460:	e034      	b.n	80164cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016462:	4920      	ldr	r1, [pc, #128]	@ (80164e4 <etharp_tmr+0x14c>)
 8016464:	687a      	ldr	r2, [r7, #4]
 8016466:	4613      	mov	r3, r2
 8016468:	005b      	lsls	r3, r3, #1
 801646a:	4413      	add	r3, r2
 801646c:	00db      	lsls	r3, r3, #3
 801646e:	440b      	add	r3, r1
 8016470:	3314      	adds	r3, #20
 8016472:	781b      	ldrb	r3, [r3, #0]
 8016474:	2b04      	cmp	r3, #4
 8016476:	d10a      	bne.n	801648e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016478:	491a      	ldr	r1, [pc, #104]	@ (80164e4 <etharp_tmr+0x14c>)
 801647a:	687a      	ldr	r2, [r7, #4]
 801647c:	4613      	mov	r3, r2
 801647e:	005b      	lsls	r3, r3, #1
 8016480:	4413      	add	r3, r2
 8016482:	00db      	lsls	r3, r3, #3
 8016484:	440b      	add	r3, r1
 8016486:	3314      	adds	r3, #20
 8016488:	2202      	movs	r2, #2
 801648a:	701a      	strb	r2, [r3, #0]
 801648c:	e01e      	b.n	80164cc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801648e:	4915      	ldr	r1, [pc, #84]	@ (80164e4 <etharp_tmr+0x14c>)
 8016490:	687a      	ldr	r2, [r7, #4]
 8016492:	4613      	mov	r3, r2
 8016494:	005b      	lsls	r3, r3, #1
 8016496:	4413      	add	r3, r2
 8016498:	00db      	lsls	r3, r3, #3
 801649a:	440b      	add	r3, r1
 801649c:	3314      	adds	r3, #20
 801649e:	781b      	ldrb	r3, [r3, #0]
 80164a0:	2b01      	cmp	r3, #1
 80164a2:	d113      	bne.n	80164cc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80164a4:	490f      	ldr	r1, [pc, #60]	@ (80164e4 <etharp_tmr+0x14c>)
 80164a6:	687a      	ldr	r2, [r7, #4]
 80164a8:	4613      	mov	r3, r2
 80164aa:	005b      	lsls	r3, r3, #1
 80164ac:	4413      	add	r3, r2
 80164ae:	00db      	lsls	r3, r3, #3
 80164b0:	440b      	add	r3, r1
 80164b2:	3308      	adds	r3, #8
 80164b4:	6818      	ldr	r0, [r3, #0]
 80164b6:	687a      	ldr	r2, [r7, #4]
 80164b8:	4613      	mov	r3, r2
 80164ba:	005b      	lsls	r3, r3, #1
 80164bc:	4413      	add	r3, r2
 80164be:	00db      	lsls	r3, r3, #3
 80164c0:	4a08      	ldr	r2, [pc, #32]	@ (80164e4 <etharp_tmr+0x14c>)
 80164c2:	4413      	add	r3, r2
 80164c4:	3304      	adds	r3, #4
 80164c6:	4619      	mov	r1, r3
 80164c8:	f000 fe90 	bl	80171ec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	3301      	adds	r3, #1
 80164d0:	607b      	str	r3, [r7, #4]
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	2b09      	cmp	r3, #9
 80164d6:	f77f af65 	ble.w	80163a4 <etharp_tmr+0xc>
      }
    }
  }
}
 80164da:	bf00      	nop
 80164dc:	bf00      	nop
 80164de:	3708      	adds	r7, #8
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd80      	pop	{r7, pc}
 80164e4:	2000a398 	.word	0x2000a398

080164e8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b08a      	sub	sp, #40	@ 0x28
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	60f8      	str	r0, [r7, #12]
 80164f0:	460b      	mov	r3, r1
 80164f2:	607a      	str	r2, [r7, #4]
 80164f4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80164f6:	230a      	movs	r3, #10
 80164f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80164fa:	230a      	movs	r3, #10
 80164fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80164fe:	230a      	movs	r3, #10
 8016500:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8016502:	2300      	movs	r3, #0
 8016504:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016506:	230a      	movs	r3, #10
 8016508:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801650a:	2300      	movs	r3, #0
 801650c:	83bb      	strh	r3, [r7, #28]
 801650e:	2300      	movs	r3, #0
 8016510:	837b      	strh	r3, [r7, #26]
 8016512:	2300      	movs	r3, #0
 8016514:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016516:	2300      	movs	r3, #0
 8016518:	843b      	strh	r3, [r7, #32]
 801651a:	e0ae      	b.n	801667a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801651c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016520:	49a6      	ldr	r1, [pc, #664]	@ (80167bc <etharp_find_entry+0x2d4>)
 8016522:	4613      	mov	r3, r2
 8016524:	005b      	lsls	r3, r3, #1
 8016526:	4413      	add	r3, r2
 8016528:	00db      	lsls	r3, r3, #3
 801652a:	440b      	add	r3, r1
 801652c:	3314      	adds	r3, #20
 801652e:	781b      	ldrb	r3, [r3, #0]
 8016530:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016532:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016536:	2b0a      	cmp	r3, #10
 8016538:	d105      	bne.n	8016546 <etharp_find_entry+0x5e>
 801653a:	7dfb      	ldrb	r3, [r7, #23]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d102      	bne.n	8016546 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016540:	8c3b      	ldrh	r3, [r7, #32]
 8016542:	847b      	strh	r3, [r7, #34]	@ 0x22
 8016544:	e095      	b.n	8016672 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016546:	7dfb      	ldrb	r3, [r7, #23]
 8016548:	2b00      	cmp	r3, #0
 801654a:	f000 8092 	beq.w	8016672 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801654e:	7dfb      	ldrb	r3, [r7, #23]
 8016550:	2b01      	cmp	r3, #1
 8016552:	d009      	beq.n	8016568 <etharp_find_entry+0x80>
 8016554:	7dfb      	ldrb	r3, [r7, #23]
 8016556:	2b01      	cmp	r3, #1
 8016558:	d806      	bhi.n	8016568 <etharp_find_entry+0x80>
 801655a:	4b99      	ldr	r3, [pc, #612]	@ (80167c0 <etharp_find_entry+0x2d8>)
 801655c:	f44f 7292 	mov.w	r2, #292	@ 0x124
 8016560:	4998      	ldr	r1, [pc, #608]	@ (80167c4 <etharp_find_entry+0x2dc>)
 8016562:	4899      	ldr	r0, [pc, #612]	@ (80167c8 <etharp_find_entry+0x2e0>)
 8016564:	f002 fbde 	bl	8018d24 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_eq(ipaddr, &arp_table[i].ipaddr)
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d020      	beq.n	80165b0 <etharp_find_entry+0xc8>
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	6819      	ldr	r1, [r3, #0]
 8016572:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016576:	4891      	ldr	r0, [pc, #580]	@ (80167bc <etharp_find_entry+0x2d4>)
 8016578:	4613      	mov	r3, r2
 801657a:	005b      	lsls	r3, r3, #1
 801657c:	4413      	add	r3, r2
 801657e:	00db      	lsls	r3, r3, #3
 8016580:	4403      	add	r3, r0
 8016582:	3304      	adds	r3, #4
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	4299      	cmp	r1, r3
 8016588:	d112      	bne.n	80165b0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d00c      	beq.n	80165aa <etharp_find_entry+0xc2>
 8016590:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016594:	4989      	ldr	r1, [pc, #548]	@ (80167bc <etharp_find_entry+0x2d4>)
 8016596:	4613      	mov	r3, r2
 8016598:	005b      	lsls	r3, r3, #1
 801659a:	4413      	add	r3, r2
 801659c:	00db      	lsls	r3, r3, #3
 801659e:	440b      	add	r3, r1
 80165a0:	3308      	adds	r3, #8
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	687a      	ldr	r2, [r7, #4]
 80165a6:	429a      	cmp	r2, r3
 80165a8:	d102      	bne.n	80165b0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80165aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80165ae:	e100      	b.n	80167b2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80165b0:	7dfb      	ldrb	r3, [r7, #23]
 80165b2:	2b01      	cmp	r3, #1
 80165b4:	d140      	bne.n	8016638 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80165b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165ba:	4980      	ldr	r1, [pc, #512]	@ (80167bc <etharp_find_entry+0x2d4>)
 80165bc:	4613      	mov	r3, r2
 80165be:	005b      	lsls	r3, r3, #1
 80165c0:	4413      	add	r3, r2
 80165c2:	00db      	lsls	r3, r3, #3
 80165c4:	440b      	add	r3, r1
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d01a      	beq.n	8016602 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80165cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165d0:	497a      	ldr	r1, [pc, #488]	@ (80167bc <etharp_find_entry+0x2d4>)
 80165d2:	4613      	mov	r3, r2
 80165d4:	005b      	lsls	r3, r3, #1
 80165d6:	4413      	add	r3, r2
 80165d8:	00db      	lsls	r3, r3, #3
 80165da:	440b      	add	r3, r1
 80165dc:	3312      	adds	r3, #18
 80165de:	881b      	ldrh	r3, [r3, #0]
 80165e0:	8bba      	ldrh	r2, [r7, #28]
 80165e2:	429a      	cmp	r2, r3
 80165e4:	d845      	bhi.n	8016672 <etharp_find_entry+0x18a>
            old_queue = i;
 80165e6:	8c3b      	ldrh	r3, [r7, #32]
 80165e8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80165ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165ee:	4973      	ldr	r1, [pc, #460]	@ (80167bc <etharp_find_entry+0x2d4>)
 80165f0:	4613      	mov	r3, r2
 80165f2:	005b      	lsls	r3, r3, #1
 80165f4:	4413      	add	r3, r2
 80165f6:	00db      	lsls	r3, r3, #3
 80165f8:	440b      	add	r3, r1
 80165fa:	3312      	adds	r3, #18
 80165fc:	881b      	ldrh	r3, [r3, #0]
 80165fe:	83bb      	strh	r3, [r7, #28]
 8016600:	e037      	b.n	8016672 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016602:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016606:	496d      	ldr	r1, [pc, #436]	@ (80167bc <etharp_find_entry+0x2d4>)
 8016608:	4613      	mov	r3, r2
 801660a:	005b      	lsls	r3, r3, #1
 801660c:	4413      	add	r3, r2
 801660e:	00db      	lsls	r3, r3, #3
 8016610:	440b      	add	r3, r1
 8016612:	3312      	adds	r3, #18
 8016614:	881b      	ldrh	r3, [r3, #0]
 8016616:	8b7a      	ldrh	r2, [r7, #26]
 8016618:	429a      	cmp	r2, r3
 801661a:	d82a      	bhi.n	8016672 <etharp_find_entry+0x18a>
            old_pending = i;
 801661c:	8c3b      	ldrh	r3, [r7, #32]
 801661e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8016620:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016624:	4965      	ldr	r1, [pc, #404]	@ (80167bc <etharp_find_entry+0x2d4>)
 8016626:	4613      	mov	r3, r2
 8016628:	005b      	lsls	r3, r3, #1
 801662a:	4413      	add	r3, r2
 801662c:	00db      	lsls	r3, r3, #3
 801662e:	440b      	add	r3, r1
 8016630:	3312      	adds	r3, #18
 8016632:	881b      	ldrh	r3, [r3, #0]
 8016634:	837b      	strh	r3, [r7, #26]
 8016636:	e01c      	b.n	8016672 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016638:	7dfb      	ldrb	r3, [r7, #23]
 801663a:	2b01      	cmp	r3, #1
 801663c:	d919      	bls.n	8016672 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801663e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016642:	495e      	ldr	r1, [pc, #376]	@ (80167bc <etharp_find_entry+0x2d4>)
 8016644:	4613      	mov	r3, r2
 8016646:	005b      	lsls	r3, r3, #1
 8016648:	4413      	add	r3, r2
 801664a:	00db      	lsls	r3, r3, #3
 801664c:	440b      	add	r3, r1
 801664e:	3312      	adds	r3, #18
 8016650:	881b      	ldrh	r3, [r3, #0]
 8016652:	8b3a      	ldrh	r2, [r7, #24]
 8016654:	429a      	cmp	r2, r3
 8016656:	d80c      	bhi.n	8016672 <etharp_find_entry+0x18a>
            old_stable = i;
 8016658:	8c3b      	ldrh	r3, [r7, #32]
 801665a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801665c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016660:	4956      	ldr	r1, [pc, #344]	@ (80167bc <etharp_find_entry+0x2d4>)
 8016662:	4613      	mov	r3, r2
 8016664:	005b      	lsls	r3, r3, #1
 8016666:	4413      	add	r3, r2
 8016668:	00db      	lsls	r3, r3, #3
 801666a:	440b      	add	r3, r1
 801666c:	3312      	adds	r3, #18
 801666e:	881b      	ldrh	r3, [r3, #0]
 8016670:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016672:	8c3b      	ldrh	r3, [r7, #32]
 8016674:	3301      	adds	r3, #1
 8016676:	b29b      	uxth	r3, r3
 8016678:	843b      	strh	r3, [r7, #32]
 801667a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801667e:	2b09      	cmp	r3, #9
 8016680:	f77f af4c 	ble.w	801651c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016684:	7afb      	ldrb	r3, [r7, #11]
 8016686:	f003 0302 	and.w	r3, r3, #2
 801668a:	2b00      	cmp	r3, #0
 801668c:	d108      	bne.n	80166a0 <etharp_find_entry+0x1b8>
 801668e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016692:	2b0a      	cmp	r3, #10
 8016694:	d107      	bne.n	80166a6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016696:	7afb      	ldrb	r3, [r7, #11]
 8016698:	f003 0301 	and.w	r3, r3, #1
 801669c:	2b00      	cmp	r3, #0
 801669e:	d102      	bne.n	80166a6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80166a0:	f04f 33ff 	mov.w	r3, #4294967295
 80166a4:	e085      	b.n	80167b2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80166a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80166aa:	2b09      	cmp	r3, #9
 80166ac:	dc02      	bgt.n	80166b4 <etharp_find_entry+0x1cc>
    i = empty;
 80166ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80166b0:	843b      	strh	r3, [r7, #32]
 80166b2:	e039      	b.n	8016728 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80166b4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80166b8:	2b09      	cmp	r3, #9
 80166ba:	dc14      	bgt.n	80166e6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80166bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80166be:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80166c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166c4:	493d      	ldr	r1, [pc, #244]	@ (80167bc <etharp_find_entry+0x2d4>)
 80166c6:	4613      	mov	r3, r2
 80166c8:	005b      	lsls	r3, r3, #1
 80166ca:	4413      	add	r3, r2
 80166cc:	00db      	lsls	r3, r3, #3
 80166ce:	440b      	add	r3, r1
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d018      	beq.n	8016708 <etharp_find_entry+0x220>
 80166d6:	4b3a      	ldr	r3, [pc, #232]	@ (80167c0 <etharp_find_entry+0x2d8>)
 80166d8:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80166dc:	493b      	ldr	r1, [pc, #236]	@ (80167cc <etharp_find_entry+0x2e4>)
 80166de:	483a      	ldr	r0, [pc, #232]	@ (80167c8 <etharp_find_entry+0x2e0>)
 80166e0:	f002 fb20 	bl	8018d24 <iprintf>
 80166e4:	e010      	b.n	8016708 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80166e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80166ea:	2b09      	cmp	r3, #9
 80166ec:	dc02      	bgt.n	80166f4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80166ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80166f0:	843b      	strh	r3, [r7, #32]
 80166f2:	e009      	b.n	8016708 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80166f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80166f8:	2b09      	cmp	r3, #9
 80166fa:	dc02      	bgt.n	8016702 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80166fc:	8bfb      	ldrh	r3, [r7, #30]
 80166fe:	843b      	strh	r3, [r7, #32]
 8016700:	e002      	b.n	8016708 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016702:	f04f 33ff 	mov.w	r3, #4294967295
 8016706:	e054      	b.n	80167b2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016708:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801670c:	2b09      	cmp	r3, #9
 801670e:	dd06      	ble.n	801671e <etharp_find_entry+0x236>
 8016710:	4b2b      	ldr	r3, [pc, #172]	@ (80167c0 <etharp_find_entry+0x2d8>)
 8016712:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8016716:	492e      	ldr	r1, [pc, #184]	@ (80167d0 <etharp_find_entry+0x2e8>)
 8016718:	482b      	ldr	r0, [pc, #172]	@ (80167c8 <etharp_find_entry+0x2e0>)
 801671a:	f002 fb03 	bl	8018d24 <iprintf>
    etharp_free_entry(i);
 801671e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016722:	4618      	mov	r0, r3
 8016724:	f7ff fe06 	bl	8016334 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016728:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801672c:	2b09      	cmp	r3, #9
 801672e:	dd06      	ble.n	801673e <etharp_find_entry+0x256>
 8016730:	4b23      	ldr	r3, [pc, #140]	@ (80167c0 <etharp_find_entry+0x2d8>)
 8016732:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8016736:	4926      	ldr	r1, [pc, #152]	@ (80167d0 <etharp_find_entry+0x2e8>)
 8016738:	4823      	ldr	r0, [pc, #140]	@ (80167c8 <etharp_find_entry+0x2e0>)
 801673a:	f002 faf3 	bl	8018d24 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801673e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016742:	491e      	ldr	r1, [pc, #120]	@ (80167bc <etharp_find_entry+0x2d4>)
 8016744:	4613      	mov	r3, r2
 8016746:	005b      	lsls	r3, r3, #1
 8016748:	4413      	add	r3, r2
 801674a:	00db      	lsls	r3, r3, #3
 801674c:	440b      	add	r3, r1
 801674e:	3314      	adds	r3, #20
 8016750:	781b      	ldrb	r3, [r3, #0]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d006      	beq.n	8016764 <etharp_find_entry+0x27c>
 8016756:	4b1a      	ldr	r3, [pc, #104]	@ (80167c0 <etharp_find_entry+0x2d8>)
 8016758:	f240 1285 	movw	r2, #389	@ 0x185
 801675c:	491d      	ldr	r1, [pc, #116]	@ (80167d4 <etharp_find_entry+0x2ec>)
 801675e:	481a      	ldr	r0, [pc, #104]	@ (80167c8 <etharp_find_entry+0x2e0>)
 8016760:	f002 fae0 	bl	8018d24 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d00b      	beq.n	8016782 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801676a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	6819      	ldr	r1, [r3, #0]
 8016772:	4812      	ldr	r0, [pc, #72]	@ (80167bc <etharp_find_entry+0x2d4>)
 8016774:	4613      	mov	r3, r2
 8016776:	005b      	lsls	r3, r3, #1
 8016778:	4413      	add	r3, r2
 801677a:	00db      	lsls	r3, r3, #3
 801677c:	4403      	add	r3, r0
 801677e:	3304      	adds	r3, #4
 8016780:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016782:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016786:	490d      	ldr	r1, [pc, #52]	@ (80167bc <etharp_find_entry+0x2d4>)
 8016788:	4613      	mov	r3, r2
 801678a:	005b      	lsls	r3, r3, #1
 801678c:	4413      	add	r3, r2
 801678e:	00db      	lsls	r3, r3, #3
 8016790:	440b      	add	r3, r1
 8016792:	3312      	adds	r3, #18
 8016794:	2200      	movs	r2, #0
 8016796:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016798:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801679c:	4907      	ldr	r1, [pc, #28]	@ (80167bc <etharp_find_entry+0x2d4>)
 801679e:	4613      	mov	r3, r2
 80167a0:	005b      	lsls	r3, r3, #1
 80167a2:	4413      	add	r3, r2
 80167a4:	00db      	lsls	r3, r3, #3
 80167a6:	440b      	add	r3, r1
 80167a8:	3308      	adds	r3, #8
 80167aa:	687a      	ldr	r2, [r7, #4]
 80167ac:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80167ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	3728      	adds	r7, #40	@ 0x28
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bd80      	pop	{r7, pc}
 80167ba:	bf00      	nop
 80167bc:	2000a398 	.word	0x2000a398
 80167c0:	0801ccec 	.word	0x0801ccec
 80167c4:	0801cd08 	.word	0x0801cd08
 80167c8:	0801cd48 	.word	0x0801cd48
 80167cc:	0801cd70 	.word	0x0801cd70
 80167d0:	0801cd88 	.word	0x0801cd88
 80167d4:	0801cd9c 	.word	0x0801cd9c

080167d8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b088      	sub	sp, #32
 80167dc:	af02      	add	r7, sp, #8
 80167de:	60f8      	str	r0, [r7, #12]
 80167e0:	60b9      	str	r1, [r7, #8]
 80167e2:	607a      	str	r2, [r7, #4]
 80167e4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80167ec:	2b06      	cmp	r3, #6
 80167ee:	d006      	beq.n	80167fe <etharp_update_arp_entry+0x26>
 80167f0:	4b48      	ldr	r3, [pc, #288]	@ (8016914 <etharp_update_arp_entry+0x13c>)
 80167f2:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80167f6:	4948      	ldr	r1, [pc, #288]	@ (8016918 <etharp_update_arp_entry+0x140>)
 80167f8:	4848      	ldr	r0, [pc, #288]	@ (801691c <etharp_update_arp_entry+0x144>)
 80167fa:	f002 fa93 	bl	8018d24 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80167fe:	68bb      	ldr	r3, [r7, #8]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d012      	beq.n	801682a <etharp_update_arp_entry+0x52>
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d00e      	beq.n	801682a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801680c:	68bb      	ldr	r3, [r7, #8]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	68f9      	ldr	r1, [r7, #12]
 8016812:	4618      	mov	r0, r3
 8016814:	f001 f9aa 	bl	8017b6c <ip4_addr_isbroadcast_u32>
 8016818:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801681a:	2b00      	cmp	r3, #0
 801681c:	d105      	bne.n	801682a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801681e:	68bb      	ldr	r3, [r7, #8]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016826:	2be0      	cmp	r3, #224	@ 0xe0
 8016828:	d102      	bne.n	8016830 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801682a:	f06f 030f 	mvn.w	r3, #15
 801682e:	e06c      	b.n	801690a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016830:	78fb      	ldrb	r3, [r7, #3]
 8016832:	68fa      	ldr	r2, [r7, #12]
 8016834:	4619      	mov	r1, r3
 8016836:	68b8      	ldr	r0, [r7, #8]
 8016838:	f7ff fe56 	bl	80164e8 <etharp_find_entry>
 801683c:	4603      	mov	r3, r0
 801683e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016840:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016844:	2b00      	cmp	r3, #0
 8016846:	da02      	bge.n	801684e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016848:	8afb      	ldrh	r3, [r7, #22]
 801684a:	b25b      	sxtb	r3, r3
 801684c:	e05d      	b.n	801690a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801684e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016852:	4933      	ldr	r1, [pc, #204]	@ (8016920 <etharp_update_arp_entry+0x148>)
 8016854:	4613      	mov	r3, r2
 8016856:	005b      	lsls	r3, r3, #1
 8016858:	4413      	add	r3, r2
 801685a:	00db      	lsls	r3, r3, #3
 801685c:	440b      	add	r3, r1
 801685e:	3314      	adds	r3, #20
 8016860:	2202      	movs	r2, #2
 8016862:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016864:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016868:	492d      	ldr	r1, [pc, #180]	@ (8016920 <etharp_update_arp_entry+0x148>)
 801686a:	4613      	mov	r3, r2
 801686c:	005b      	lsls	r3, r3, #1
 801686e:	4413      	add	r3, r2
 8016870:	00db      	lsls	r3, r3, #3
 8016872:	440b      	add	r3, r1
 8016874:	3308      	adds	r3, #8
 8016876:	68fa      	ldr	r2, [r7, #12]
 8016878:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801687a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801687e:	4613      	mov	r3, r2
 8016880:	005b      	lsls	r3, r3, #1
 8016882:	4413      	add	r3, r2
 8016884:	00db      	lsls	r3, r3, #3
 8016886:	3308      	adds	r3, #8
 8016888:	4a25      	ldr	r2, [pc, #148]	@ (8016920 <etharp_update_arp_entry+0x148>)
 801688a:	4413      	add	r3, r2
 801688c:	3304      	adds	r3, #4
 801688e:	2206      	movs	r2, #6
 8016890:	6879      	ldr	r1, [r7, #4]
 8016892:	4618      	mov	r0, r3
 8016894:	f002 fc69 	bl	801916a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016898:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801689c:	4920      	ldr	r1, [pc, #128]	@ (8016920 <etharp_update_arp_entry+0x148>)
 801689e:	4613      	mov	r3, r2
 80168a0:	005b      	lsls	r3, r3, #1
 80168a2:	4413      	add	r3, r2
 80168a4:	00db      	lsls	r3, r3, #3
 80168a6:	440b      	add	r3, r1
 80168a8:	3312      	adds	r3, #18
 80168aa:	2200      	movs	r2, #0
 80168ac:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80168ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168b2:	491b      	ldr	r1, [pc, #108]	@ (8016920 <etharp_update_arp_entry+0x148>)
 80168b4:	4613      	mov	r3, r2
 80168b6:	005b      	lsls	r3, r3, #1
 80168b8:	4413      	add	r3, r2
 80168ba:	00db      	lsls	r3, r3, #3
 80168bc:	440b      	add	r3, r1
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d021      	beq.n	8016908 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80168c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168c8:	4915      	ldr	r1, [pc, #84]	@ (8016920 <etharp_update_arp_entry+0x148>)
 80168ca:	4613      	mov	r3, r2
 80168cc:	005b      	lsls	r3, r3, #1
 80168ce:	4413      	add	r3, r2
 80168d0:	00db      	lsls	r3, r3, #3
 80168d2:	440b      	add	r3, r1
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80168d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168dc:	4910      	ldr	r1, [pc, #64]	@ (8016920 <etharp_update_arp_entry+0x148>)
 80168de:	4613      	mov	r3, r2
 80168e0:	005b      	lsls	r3, r3, #1
 80168e2:	4413      	add	r3, r2
 80168e4:	00db      	lsls	r3, r3, #3
 80168e6:	440b      	add	r3, r1
 80168e8:	2200      	movs	r2, #0
 80168ea:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 80168f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80168f6:	9300      	str	r3, [sp, #0]
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	6939      	ldr	r1, [r7, #16]
 80168fc:	68f8      	ldr	r0, [r7, #12]
 80168fe:	f002 f8c9 	bl	8018a94 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016902:	6938      	ldr	r0, [r7, #16]
 8016904:	f7f7 fa30 	bl	800dd68 <pbuf_free>
  }
  return ERR_OK;
 8016908:	2300      	movs	r3, #0
}
 801690a:	4618      	mov	r0, r3
 801690c:	3718      	adds	r7, #24
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}
 8016912:	bf00      	nop
 8016914:	0801ccec 	.word	0x0801ccec
 8016918:	0801cdc8 	.word	0x0801cdc8
 801691c:	0801cd48 	.word	0x0801cd48
 8016920:	2000a398 	.word	0x2000a398

08016924 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b084      	sub	sp, #16
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801692c:	2300      	movs	r3, #0
 801692e:	60fb      	str	r3, [r7, #12]
 8016930:	e01e      	b.n	8016970 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016932:	4913      	ldr	r1, [pc, #76]	@ (8016980 <etharp_cleanup_netif+0x5c>)
 8016934:	68fa      	ldr	r2, [r7, #12]
 8016936:	4613      	mov	r3, r2
 8016938:	005b      	lsls	r3, r3, #1
 801693a:	4413      	add	r3, r2
 801693c:	00db      	lsls	r3, r3, #3
 801693e:	440b      	add	r3, r1
 8016940:	3314      	adds	r3, #20
 8016942:	781b      	ldrb	r3, [r3, #0]
 8016944:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016946:	7afb      	ldrb	r3, [r7, #11]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d00e      	beq.n	801696a <etharp_cleanup_netif+0x46>
 801694c:	490c      	ldr	r1, [pc, #48]	@ (8016980 <etharp_cleanup_netif+0x5c>)
 801694e:	68fa      	ldr	r2, [r7, #12]
 8016950:	4613      	mov	r3, r2
 8016952:	005b      	lsls	r3, r3, #1
 8016954:	4413      	add	r3, r2
 8016956:	00db      	lsls	r3, r3, #3
 8016958:	440b      	add	r3, r1
 801695a:	3308      	adds	r3, #8
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	687a      	ldr	r2, [r7, #4]
 8016960:	429a      	cmp	r2, r3
 8016962:	d102      	bne.n	801696a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016964:	68f8      	ldr	r0, [r7, #12]
 8016966:	f7ff fce5 	bl	8016334 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	3301      	adds	r3, #1
 801696e:	60fb      	str	r3, [r7, #12]
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	2b09      	cmp	r3, #9
 8016974:	dddd      	ble.n	8016932 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016976:	bf00      	nop
 8016978:	bf00      	nop
 801697a:	3710      	adds	r7, #16
 801697c:	46bd      	mov	sp, r7
 801697e:	bd80      	pop	{r7, pc}
 8016980:	2000a398 	.word	0x2000a398

08016984 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016984:	b5b0      	push	{r4, r5, r7, lr}
 8016986:	b08a      	sub	sp, #40	@ 0x28
 8016988:	af04      	add	r7, sp, #16
 801698a:	6078      	str	r0, [r7, #4]
 801698c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us, from_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801698e:	683b      	ldr	r3, [r7, #0]
 8016990:	2b00      	cmp	r3, #0
 8016992:	f000 8083 	beq.w	8016a9c <etharp_input+0x118>

  hdr = (struct etharp_hdr *)p->payload;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	685b      	ldr	r3, [r3, #4]
 801699a:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801699c:	693b      	ldr	r3, [r7, #16]
 801699e:	881b      	ldrh	r3, [r3, #0]
 80169a0:	b29b      	uxth	r3, r3
 80169a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80169a6:	d10c      	bne.n	80169c2 <etharp_input+0x3e>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80169a8:	693b      	ldr	r3, [r7, #16]
 80169aa:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80169ac:	2b06      	cmp	r3, #6
 80169ae:	d108      	bne.n	80169c2 <etharp_input+0x3e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80169b0:	693b      	ldr	r3, [r7, #16]
 80169b2:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80169b4:	2b04      	cmp	r3, #4
 80169b6:	d104      	bne.n	80169c2 <etharp_input+0x3e>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80169b8:	693b      	ldr	r3, [r7, #16]
 80169ba:	885b      	ldrh	r3, [r3, #2]
 80169bc:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80169be:	2b08      	cmp	r3, #8
 80169c0:	d003      	beq.n	80169ca <etharp_input+0x46>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80169c2:	6878      	ldr	r0, [r7, #4]
 80169c4:	f7f7 f9d0 	bl	800dd68 <pbuf_free>
    return;
 80169c8:	e068      	b.n	8016a9c <etharp_input+0x118>
   * detect collisions.
   * acd_arp_reply ensures the detection of conflicts. It will handle possible
   * defending or retreating and will make sure a new IP address is selected.
   * etharp_input does not need to handle packets that originate "from_us".
   */
  acd_arp_reply(netif, hdr);
 80169ca:	6939      	ldr	r1, [r7, #16]
 80169cc:	6838      	ldr	r0, [r7, #0]
 80169ce:	f7fd fe03 	bl	80145d8 <acd_arp_reply>
#endif /* LWIP_ACD */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80169d2:	693b      	ldr	r3, [r7, #16]
 80169d4:	330e      	adds	r3, #14
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80169da:	693b      	ldr	r3, [r7, #16]
 80169dc:	3318      	adds	r3, #24
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80169e2:	683b      	ldr	r3, [r7, #0]
 80169e4:	3304      	adds	r3, #4
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d104      	bne.n	80169f6 <etharp_input+0x72>
    for_us = 0;
 80169ec:	2300      	movs	r3, #0
 80169ee:	75fb      	strb	r3, [r7, #23]
    from_us = 0;
 80169f0:	2300      	movs	r3, #0
 80169f2:	75bb      	strb	r3, [r7, #22]
 80169f4:	e013      	b.n	8016a1e <etharp_input+0x9a>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_eq(&dipaddr, netif_ip4_addr(netif));
 80169f6:	68ba      	ldr	r2, [r7, #8]
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	3304      	adds	r3, #4
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	429a      	cmp	r2, r3
 8016a00:	bf0c      	ite	eq
 8016a02:	2301      	moveq	r3, #1
 8016a04:	2300      	movne	r3, #0
 8016a06:	b2db      	uxtb	r3, r3
 8016a08:	75fb      	strb	r3, [r7, #23]
    /* ARP packet from us? */
    from_us = (u8_t)ip4_addr_eq(&sipaddr, netif_ip4_addr(netif));
 8016a0a:	68fa      	ldr	r2, [r7, #12]
 8016a0c:	683b      	ldr	r3, [r7, #0]
 8016a0e:	3304      	adds	r3, #4
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	429a      	cmp	r2, r3
 8016a14:	bf0c      	ite	eq
 8016a16:	2301      	moveq	r3, #1
 8016a18:	2300      	movne	r3, #0
 8016a1a:	b2db      	uxtb	r3, r3
 8016a1c:	75bb      	strb	r3, [r7, #22]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016a1e:	693b      	ldr	r3, [r7, #16]
 8016a20:	f103 0208 	add.w	r2, r3, #8
 8016a24:	7dfb      	ldrb	r3, [r7, #23]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d001      	beq.n	8016a2e <etharp_input+0xaa>
 8016a2a:	2301      	movs	r3, #1
 8016a2c:	e000      	b.n	8016a30 <etharp_input+0xac>
 8016a2e:	2302      	movs	r3, #2
 8016a30:	f107 010c 	add.w	r1, r7, #12
 8016a34:	6838      	ldr	r0, [r7, #0]
 8016a36:	f7ff fecf 	bl	80167d8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016a3a:	693b      	ldr	r3, [r7, #16]
 8016a3c:	88db      	ldrh	r3, [r3, #6]
 8016a3e:	b29b      	uxth	r3, r3
 8016a40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016a44:	d003      	beq.n	8016a4e <etharp_input+0xca>
 8016a46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016a4a:	d021      	beq.n	8016a90 <etharp_input+0x10c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016a4c:	e023      	b.n	8016a96 <etharp_input+0x112>
      if (for_us && !from_us) {
 8016a4e:	7dfb      	ldrb	r3, [r7, #23]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d01f      	beq.n	8016a94 <etharp_input+0x110>
 8016a54:	7dbb      	ldrb	r3, [r7, #22]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d11c      	bne.n	8016a94 <etharp_input+0x110>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016a5a:	683b      	ldr	r3, [r7, #0]
 8016a5c:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 8016a60:	693b      	ldr	r3, [r7, #16]
 8016a62:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016a66:	683b      	ldr	r3, [r7, #0]
 8016a68:	f103 052e 	add.w	r5, r3, #46	@ 0x2e
 8016a6c:	683b      	ldr	r3, [r7, #0]
 8016a6e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016a70:	693a      	ldr	r2, [r7, #16]
 8016a72:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016a74:	2102      	movs	r1, #2
 8016a76:	9103      	str	r1, [sp, #12]
 8016a78:	f107 010c 	add.w	r1, r7, #12
 8016a7c:	9102      	str	r1, [sp, #8]
 8016a7e:	9201      	str	r2, [sp, #4]
 8016a80:	9300      	str	r3, [sp, #0]
 8016a82:	462b      	mov	r3, r5
 8016a84:	4622      	mov	r2, r4
 8016a86:	4601      	mov	r1, r0
 8016a88:	6838      	ldr	r0, [r7, #0]
 8016a8a:	f000 fb01 	bl	8017090 <etharp_raw>
      break;
 8016a8e:	e001      	b.n	8016a94 <etharp_input+0x110>
      break;
 8016a90:	bf00      	nop
 8016a92:	e000      	b.n	8016a96 <etharp_input+0x112>
      break;
 8016a94:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016a96:	6878      	ldr	r0, [r7, #4]
 8016a98:	f7f7 f966 	bl	800dd68 <pbuf_free>
}
 8016a9c:	3718      	adds	r7, #24
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016aa4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b086      	sub	sp, #24
 8016aa8:	af02      	add	r7, sp, #8
 8016aaa:	60f8      	str	r0, [r7, #12]
 8016aac:	60b9      	str	r1, [r7, #8]
 8016aae:	4613      	mov	r3, r2
 8016ab0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016ab2:	79fa      	ldrb	r2, [r7, #7]
 8016ab4:	4944      	ldr	r1, [pc, #272]	@ (8016bc8 <etharp_output_to_arp_index+0x124>)
 8016ab6:	4613      	mov	r3, r2
 8016ab8:	005b      	lsls	r3, r3, #1
 8016aba:	4413      	add	r3, r2
 8016abc:	00db      	lsls	r3, r3, #3
 8016abe:	440b      	add	r3, r1
 8016ac0:	3314      	adds	r3, #20
 8016ac2:	781b      	ldrb	r3, [r3, #0]
 8016ac4:	2b01      	cmp	r3, #1
 8016ac6:	d806      	bhi.n	8016ad6 <etharp_output_to_arp_index+0x32>
 8016ac8:	4b40      	ldr	r3, [pc, #256]	@ (8016bcc <etharp_output_to_arp_index+0x128>)
 8016aca:	f240 22ef 	movw	r2, #751	@ 0x2ef
 8016ace:	4940      	ldr	r1, [pc, #256]	@ (8016bd0 <etharp_output_to_arp_index+0x12c>)
 8016ad0:	4840      	ldr	r0, [pc, #256]	@ (8016bd4 <etharp_output_to_arp_index+0x130>)
 8016ad2:	f002 f927 	bl	8018d24 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016ad6:	79fa      	ldrb	r2, [r7, #7]
 8016ad8:	493b      	ldr	r1, [pc, #236]	@ (8016bc8 <etharp_output_to_arp_index+0x124>)
 8016ada:	4613      	mov	r3, r2
 8016adc:	005b      	lsls	r3, r3, #1
 8016ade:	4413      	add	r3, r2
 8016ae0:	00db      	lsls	r3, r3, #3
 8016ae2:	440b      	add	r3, r1
 8016ae4:	3314      	adds	r3, #20
 8016ae6:	781b      	ldrb	r3, [r3, #0]
 8016ae8:	2b02      	cmp	r3, #2
 8016aea:	d153      	bne.n	8016b94 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016aec:	79fa      	ldrb	r2, [r7, #7]
 8016aee:	4936      	ldr	r1, [pc, #216]	@ (8016bc8 <etharp_output_to_arp_index+0x124>)
 8016af0:	4613      	mov	r3, r2
 8016af2:	005b      	lsls	r3, r3, #1
 8016af4:	4413      	add	r3, r2
 8016af6:	00db      	lsls	r3, r3, #3
 8016af8:	440b      	add	r3, r1
 8016afa:	3312      	adds	r3, #18
 8016afc:	881b      	ldrh	r3, [r3, #0]
 8016afe:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8016b02:	d919      	bls.n	8016b38 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016b04:	79fa      	ldrb	r2, [r7, #7]
 8016b06:	4613      	mov	r3, r2
 8016b08:	005b      	lsls	r3, r3, #1
 8016b0a:	4413      	add	r3, r2
 8016b0c:	00db      	lsls	r3, r3, #3
 8016b0e:	4a2e      	ldr	r2, [pc, #184]	@ (8016bc8 <etharp_output_to_arp_index+0x124>)
 8016b10:	4413      	add	r3, r2
 8016b12:	3304      	adds	r3, #4
 8016b14:	4619      	mov	r1, r3
 8016b16:	68f8      	ldr	r0, [r7, #12]
 8016b18:	f000 fb68 	bl	80171ec <etharp_request>
 8016b1c:	4603      	mov	r3, r0
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d138      	bne.n	8016b94 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016b22:	79fa      	ldrb	r2, [r7, #7]
 8016b24:	4928      	ldr	r1, [pc, #160]	@ (8016bc8 <etharp_output_to_arp_index+0x124>)
 8016b26:	4613      	mov	r3, r2
 8016b28:	005b      	lsls	r3, r3, #1
 8016b2a:	4413      	add	r3, r2
 8016b2c:	00db      	lsls	r3, r3, #3
 8016b2e:	440b      	add	r3, r1
 8016b30:	3314      	adds	r3, #20
 8016b32:	2203      	movs	r2, #3
 8016b34:	701a      	strb	r2, [r3, #0]
 8016b36:	e02d      	b.n	8016b94 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016b38:	79fa      	ldrb	r2, [r7, #7]
 8016b3a:	4923      	ldr	r1, [pc, #140]	@ (8016bc8 <etharp_output_to_arp_index+0x124>)
 8016b3c:	4613      	mov	r3, r2
 8016b3e:	005b      	lsls	r3, r3, #1
 8016b40:	4413      	add	r3, r2
 8016b42:	00db      	lsls	r3, r3, #3
 8016b44:	440b      	add	r3, r1
 8016b46:	3312      	adds	r3, #18
 8016b48:	881b      	ldrh	r3, [r3, #0]
 8016b4a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8016b4e:	d321      	bcc.n	8016b94 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016b50:	79fa      	ldrb	r2, [r7, #7]
 8016b52:	4613      	mov	r3, r2
 8016b54:	005b      	lsls	r3, r3, #1
 8016b56:	4413      	add	r3, r2
 8016b58:	00db      	lsls	r3, r3, #3
 8016b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8016bc8 <etharp_output_to_arp_index+0x124>)
 8016b5c:	4413      	add	r3, r2
 8016b5e:	1d19      	adds	r1, r3, #4
 8016b60:	79fa      	ldrb	r2, [r7, #7]
 8016b62:	4613      	mov	r3, r2
 8016b64:	005b      	lsls	r3, r3, #1
 8016b66:	4413      	add	r3, r2
 8016b68:	00db      	lsls	r3, r3, #3
 8016b6a:	3308      	adds	r3, #8
 8016b6c:	4a16      	ldr	r2, [pc, #88]	@ (8016bc8 <etharp_output_to_arp_index+0x124>)
 8016b6e:	4413      	add	r3, r2
 8016b70:	3304      	adds	r3, #4
 8016b72:	461a      	mov	r2, r3
 8016b74:	68f8      	ldr	r0, [r7, #12]
 8016b76:	f000 fb17 	bl	80171a8 <etharp_request_dst>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d109      	bne.n	8016b94 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016b80:	79fa      	ldrb	r2, [r7, #7]
 8016b82:	4911      	ldr	r1, [pc, #68]	@ (8016bc8 <etharp_output_to_arp_index+0x124>)
 8016b84:	4613      	mov	r3, r2
 8016b86:	005b      	lsls	r3, r3, #1
 8016b88:	4413      	add	r3, r2
 8016b8a:	00db      	lsls	r3, r3, #3
 8016b8c:	440b      	add	r3, r1
 8016b8e:	3314      	adds	r3, #20
 8016b90:	2203      	movs	r2, #3
 8016b92:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 8016b9a:	79fa      	ldrb	r2, [r7, #7]
 8016b9c:	4613      	mov	r3, r2
 8016b9e:	005b      	lsls	r3, r3, #1
 8016ba0:	4413      	add	r3, r2
 8016ba2:	00db      	lsls	r3, r3, #3
 8016ba4:	3308      	adds	r3, #8
 8016ba6:	4a08      	ldr	r2, [pc, #32]	@ (8016bc8 <etharp_output_to_arp_index+0x124>)
 8016ba8:	4413      	add	r3, r2
 8016baa:	3304      	adds	r3, #4
 8016bac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016bb0:	9200      	str	r2, [sp, #0]
 8016bb2:	460a      	mov	r2, r1
 8016bb4:	68b9      	ldr	r1, [r7, #8]
 8016bb6:	68f8      	ldr	r0, [r7, #12]
 8016bb8:	f001 ff6c 	bl	8018a94 <ethernet_output>
 8016bbc:	4603      	mov	r3, r0
}
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	3710      	adds	r7, #16
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}
 8016bc6:	bf00      	nop
 8016bc8:	2000a398 	.word	0x2000a398
 8016bcc:	0801ccec 	.word	0x0801ccec
 8016bd0:	0801ce40 	.word	0x0801ce40
 8016bd4:	0801cd48 	.word	0x0801cd48

08016bd8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b08a      	sub	sp, #40	@ 0x28
 8016bdc:	af02      	add	r7, sp, #8
 8016bde:	60f8      	str	r0, [r7, #12]
 8016be0:	60b9      	str	r1, [r7, #8]
 8016be2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d106      	bne.n	8016bfc <etharp_output+0x24>
 8016bee:	4b73      	ldr	r3, [pc, #460]	@ (8016dbc <etharp_output+0x1e4>)
 8016bf0:	f240 321f 	movw	r2, #799	@ 0x31f
 8016bf4:	4972      	ldr	r1, [pc, #456]	@ (8016dc0 <etharp_output+0x1e8>)
 8016bf6:	4873      	ldr	r0, [pc, #460]	@ (8016dc4 <etharp_output+0x1ec>)
 8016bf8:	f002 f894 	bl	8018d24 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016bfc:	68bb      	ldr	r3, [r7, #8]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d106      	bne.n	8016c10 <etharp_output+0x38>
 8016c02:	4b6e      	ldr	r3, [pc, #440]	@ (8016dbc <etharp_output+0x1e4>)
 8016c04:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016c08:	496f      	ldr	r1, [pc, #444]	@ (8016dc8 <etharp_output+0x1f0>)
 8016c0a:	486e      	ldr	r0, [pc, #440]	@ (8016dc4 <etharp_output+0x1ec>)
 8016c0c:	f002 f88a 	bl	8018d24 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d106      	bne.n	8016c24 <etharp_output+0x4c>
 8016c16:	4b69      	ldr	r3, [pc, #420]	@ (8016dbc <etharp_output+0x1e4>)
 8016c18:	f240 3221 	movw	r2, #801	@ 0x321
 8016c1c:	496b      	ldr	r1, [pc, #428]	@ (8016dcc <etharp_output+0x1f4>)
 8016c1e:	4869      	ldr	r0, [pc, #420]	@ (8016dc4 <etharp_output+0x1ec>)
 8016c20:	f002 f880 	bl	8018d24 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	68f9      	ldr	r1, [r7, #12]
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	f000 ff9e 	bl	8017b6c <ip4_addr_isbroadcast_u32>
 8016c30:	4603      	mov	r3, r0
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d002      	beq.n	8016c3c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016c36:	4b66      	ldr	r3, [pc, #408]	@ (8016dd0 <etharp_output+0x1f8>)
 8016c38:	61fb      	str	r3, [r7, #28]
 8016c3a:	e0af      	b.n	8016d9c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016c44:	2be0      	cmp	r3, #224	@ 0xe0
 8016c46:	d118      	bne.n	8016c7a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016c48:	2301      	movs	r3, #1
 8016c4a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016c50:	235e      	movs	r3, #94	@ 0x5e
 8016c52:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	3301      	adds	r3, #1
 8016c58:	781b      	ldrb	r3, [r3, #0]
 8016c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016c5e:	b2db      	uxtb	r3, r3
 8016c60:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	3302      	adds	r3, #2
 8016c66:	781b      	ldrb	r3, [r3, #0]
 8016c68:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	3303      	adds	r3, #3
 8016c6e:	781b      	ldrb	r3, [r3, #0]
 8016c70:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016c72:	f107 0310 	add.w	r3, r7, #16
 8016c76:	61fb      	str	r3, [r7, #28]
 8016c78:	e090      	b.n	8016d9c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_net_eq(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	681a      	ldr	r2, [r3, #0]
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	3304      	adds	r3, #4
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	405a      	eors	r2, r3
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	3308      	adds	r3, #8
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	4013      	ands	r3, r2
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d012      	beq.n	8016cb8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	b29b      	uxth	r3, r3
    if (!ip4_addr_net_eq(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016c98:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8016c9c:	4293      	cmp	r3, r2
 8016c9e:	d00b      	beq.n	8016cb8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	330c      	adds	r3, #12
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d003      	beq.n	8016cb2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	330c      	adds	r3, #12
 8016cae:	61bb      	str	r3, [r7, #24]
 8016cb0:	e002      	b.n	8016cb8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016cb2:	f06f 0303 	mvn.w	r3, #3
 8016cb6:	e07d      	b.n	8016db4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016cb8:	4b46      	ldr	r3, [pc, #280]	@ (8016dd4 <etharp_output+0x1fc>)
 8016cba:	781b      	ldrb	r3, [r3, #0]
 8016cbc:	4619      	mov	r1, r3
 8016cbe:	4a46      	ldr	r2, [pc, #280]	@ (8016dd8 <etharp_output+0x200>)
 8016cc0:	460b      	mov	r3, r1
 8016cc2:	005b      	lsls	r3, r3, #1
 8016cc4:	440b      	add	r3, r1
 8016cc6:	00db      	lsls	r3, r3, #3
 8016cc8:	4413      	add	r3, r2
 8016cca:	3314      	adds	r3, #20
 8016ccc:	781b      	ldrb	r3, [r3, #0]
 8016cce:	2b01      	cmp	r3, #1
 8016cd0:	d925      	bls.n	8016d1e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016cd2:	4b40      	ldr	r3, [pc, #256]	@ (8016dd4 <etharp_output+0x1fc>)
 8016cd4:	781b      	ldrb	r3, [r3, #0]
 8016cd6:	4619      	mov	r1, r3
 8016cd8:	4a3f      	ldr	r2, [pc, #252]	@ (8016dd8 <etharp_output+0x200>)
 8016cda:	460b      	mov	r3, r1
 8016cdc:	005b      	lsls	r3, r3, #1
 8016cde:	440b      	add	r3, r1
 8016ce0:	00db      	lsls	r3, r3, #3
 8016ce2:	4413      	add	r3, r2
 8016ce4:	3308      	adds	r3, #8
 8016ce6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016ce8:	68fa      	ldr	r2, [r7, #12]
 8016cea:	429a      	cmp	r2, r3
 8016cec:	d117      	bne.n	8016d1e <etharp_output+0x146>
#endif
            (ip4_addr_eq(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016cee:	69bb      	ldr	r3, [r7, #24]
 8016cf0:	681a      	ldr	r2, [r3, #0]
 8016cf2:	4b38      	ldr	r3, [pc, #224]	@ (8016dd4 <etharp_output+0x1fc>)
 8016cf4:	781b      	ldrb	r3, [r3, #0]
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	4937      	ldr	r1, [pc, #220]	@ (8016dd8 <etharp_output+0x200>)
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	005b      	lsls	r3, r3, #1
 8016cfe:	4403      	add	r3, r0
 8016d00:	00db      	lsls	r3, r3, #3
 8016d02:	440b      	add	r3, r1
 8016d04:	3304      	adds	r3, #4
 8016d06:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	d108      	bne.n	8016d1e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016d0c:	4b31      	ldr	r3, [pc, #196]	@ (8016dd4 <etharp_output+0x1fc>)
 8016d0e:	781b      	ldrb	r3, [r3, #0]
 8016d10:	461a      	mov	r2, r3
 8016d12:	68b9      	ldr	r1, [r7, #8]
 8016d14:	68f8      	ldr	r0, [r7, #12]
 8016d16:	f7ff fec5 	bl	8016aa4 <etharp_output_to_arp_index>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	e04a      	b.n	8016db4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016d1e:	2300      	movs	r3, #0
 8016d20:	75fb      	strb	r3, [r7, #23]
 8016d22:	e031      	b.n	8016d88 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016d24:	7dfa      	ldrb	r2, [r7, #23]
 8016d26:	492c      	ldr	r1, [pc, #176]	@ (8016dd8 <etharp_output+0x200>)
 8016d28:	4613      	mov	r3, r2
 8016d2a:	005b      	lsls	r3, r3, #1
 8016d2c:	4413      	add	r3, r2
 8016d2e:	00db      	lsls	r3, r3, #3
 8016d30:	440b      	add	r3, r1
 8016d32:	3314      	adds	r3, #20
 8016d34:	781b      	ldrb	r3, [r3, #0]
 8016d36:	2b01      	cmp	r3, #1
 8016d38:	d923      	bls.n	8016d82 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016d3a:	7dfa      	ldrb	r2, [r7, #23]
 8016d3c:	4926      	ldr	r1, [pc, #152]	@ (8016dd8 <etharp_output+0x200>)
 8016d3e:	4613      	mov	r3, r2
 8016d40:	005b      	lsls	r3, r3, #1
 8016d42:	4413      	add	r3, r2
 8016d44:	00db      	lsls	r3, r3, #3
 8016d46:	440b      	add	r3, r1
 8016d48:	3308      	adds	r3, #8
 8016d4a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016d4c:	68fa      	ldr	r2, [r7, #12]
 8016d4e:	429a      	cmp	r2, r3
 8016d50:	d117      	bne.n	8016d82 <etharp_output+0x1aa>
#endif
          (ip4_addr_eq(dst_addr, &arp_table[i].ipaddr))) {
 8016d52:	69bb      	ldr	r3, [r7, #24]
 8016d54:	6819      	ldr	r1, [r3, #0]
 8016d56:	7dfa      	ldrb	r2, [r7, #23]
 8016d58:	481f      	ldr	r0, [pc, #124]	@ (8016dd8 <etharp_output+0x200>)
 8016d5a:	4613      	mov	r3, r2
 8016d5c:	005b      	lsls	r3, r3, #1
 8016d5e:	4413      	add	r3, r2
 8016d60:	00db      	lsls	r3, r3, #3
 8016d62:	4403      	add	r3, r0
 8016d64:	3304      	adds	r3, #4
 8016d66:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016d68:	4299      	cmp	r1, r3
 8016d6a:	d10a      	bne.n	8016d82 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016d6c:	4a19      	ldr	r2, [pc, #100]	@ (8016dd4 <etharp_output+0x1fc>)
 8016d6e:	7dfb      	ldrb	r3, [r7, #23]
 8016d70:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016d72:	7dfb      	ldrb	r3, [r7, #23]
 8016d74:	461a      	mov	r2, r3
 8016d76:	68b9      	ldr	r1, [r7, #8]
 8016d78:	68f8      	ldr	r0, [r7, #12]
 8016d7a:	f7ff fe93 	bl	8016aa4 <etharp_output_to_arp_index>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	e018      	b.n	8016db4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016d82:	7dfb      	ldrb	r3, [r7, #23]
 8016d84:	3301      	adds	r3, #1
 8016d86:	75fb      	strb	r3, [r7, #23]
 8016d88:	7dfb      	ldrb	r3, [r7, #23]
 8016d8a:	2b09      	cmp	r3, #9
 8016d8c:	d9ca      	bls.n	8016d24 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016d8e:	68ba      	ldr	r2, [r7, #8]
 8016d90:	69b9      	ldr	r1, [r7, #24]
 8016d92:	68f8      	ldr	r0, [r7, #12]
 8016d94:	f000 f822 	bl	8016ddc <etharp_query>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	e00b      	b.n	8016db4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8016da2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016da6:	9300      	str	r3, [sp, #0]
 8016da8:	69fb      	ldr	r3, [r7, #28]
 8016daa:	68b9      	ldr	r1, [r7, #8]
 8016dac:	68f8      	ldr	r0, [r7, #12]
 8016dae:	f001 fe71 	bl	8018a94 <ethernet_output>
 8016db2:	4603      	mov	r3, r0
}
 8016db4:	4618      	mov	r0, r3
 8016db6:	3720      	adds	r7, #32
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}
 8016dbc:	0801ccec 	.word	0x0801ccec
 8016dc0:	0801ce20 	.word	0x0801ce20
 8016dc4:	0801cd48 	.word	0x0801cd48
 8016dc8:	0801ce70 	.word	0x0801ce70
 8016dcc:	0801ce10 	.word	0x0801ce10
 8016dd0:	0801d424 	.word	0x0801d424
 8016dd4:	2000a488 	.word	0x2000a488
 8016dd8:	2000a398 	.word	0x2000a398

08016ddc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b08c      	sub	sp, #48	@ 0x30
 8016de0:	af02      	add	r7, sp, #8
 8016de2:	60f8      	str	r0, [r7, #12]
 8016de4:	60b9      	str	r1, [r7, #8]
 8016de6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	332e      	adds	r3, #46	@ 0x2e
 8016dec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016dee:	23ff      	movs	r3, #255	@ 0xff
 8016df0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8016df4:	2300      	movs	r3, #0
 8016df6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016df8:	68bb      	ldr	r3, [r7, #8]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	68f9      	ldr	r1, [r7, #12]
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f000 feb4 	bl	8017b6c <ip4_addr_isbroadcast_u32>
 8016e04:	4603      	mov	r3, r0
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d10c      	bne.n	8016e24 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016e0a:	68bb      	ldr	r3, [r7, #8]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016e12:	2be0      	cmp	r3, #224	@ 0xe0
 8016e14:	d006      	beq.n	8016e24 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016e16:	68bb      	ldr	r3, [r7, #8]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d003      	beq.n	8016e24 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016e1c:	68bb      	ldr	r3, [r7, #8]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d102      	bne.n	8016e2a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016e24:	f06f 030f 	mvn.w	r3, #15
 8016e28:	e11d      	b.n	8017066 <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016e2a:	68fa      	ldr	r2, [r7, #12]
 8016e2c:	2101      	movs	r1, #1
 8016e2e:	68b8      	ldr	r0, [r7, #8]
 8016e30:	f7ff fb5a 	bl	80164e8 <etharp_find_entry>
 8016e34:	4603      	mov	r3, r0
 8016e36:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016e38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	da02      	bge.n	8016e46 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016e40:	8a7b      	ldrh	r3, [r7, #18]
 8016e42:	b25b      	sxtb	r3, r3
 8016e44:	e10f      	b.n	8017066 <etharp_query+0x28a>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016e46:	8a7b      	ldrh	r3, [r7, #18]
 8016e48:	2b7e      	cmp	r3, #126	@ 0x7e
 8016e4a:	d906      	bls.n	8016e5a <etharp_query+0x7e>
 8016e4c:	4b88      	ldr	r3, [pc, #544]	@ (8017070 <etharp_query+0x294>)
 8016e4e:	f240 32c2 	movw	r2, #962	@ 0x3c2
 8016e52:	4988      	ldr	r1, [pc, #544]	@ (8017074 <etharp_query+0x298>)
 8016e54:	4888      	ldr	r0, [pc, #544]	@ (8017078 <etharp_query+0x29c>)
 8016e56:	f001 ff65 	bl	8018d24 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016e5a:	8a7b      	ldrh	r3, [r7, #18]
 8016e5c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016e5e:	7c7a      	ldrb	r2, [r7, #17]
 8016e60:	4986      	ldr	r1, [pc, #536]	@ (801707c <etharp_query+0x2a0>)
 8016e62:	4613      	mov	r3, r2
 8016e64:	005b      	lsls	r3, r3, #1
 8016e66:	4413      	add	r3, r2
 8016e68:	00db      	lsls	r3, r3, #3
 8016e6a:	440b      	add	r3, r1
 8016e6c:	3314      	adds	r3, #20
 8016e6e:	781b      	ldrb	r3, [r3, #0]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d115      	bne.n	8016ea0 <etharp_query+0xc4>
    is_new_entry = 1;
 8016e74:	2301      	movs	r3, #1
 8016e76:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016e78:	7c7a      	ldrb	r2, [r7, #17]
 8016e7a:	4980      	ldr	r1, [pc, #512]	@ (801707c <etharp_query+0x2a0>)
 8016e7c:	4613      	mov	r3, r2
 8016e7e:	005b      	lsls	r3, r3, #1
 8016e80:	4413      	add	r3, r2
 8016e82:	00db      	lsls	r3, r3, #3
 8016e84:	440b      	add	r3, r1
 8016e86:	3314      	adds	r3, #20
 8016e88:	2201      	movs	r2, #1
 8016e8a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016e8c:	7c7a      	ldrb	r2, [r7, #17]
 8016e8e:	497b      	ldr	r1, [pc, #492]	@ (801707c <etharp_query+0x2a0>)
 8016e90:	4613      	mov	r3, r2
 8016e92:	005b      	lsls	r3, r3, #1
 8016e94:	4413      	add	r3, r2
 8016e96:	00db      	lsls	r3, r3, #3
 8016e98:	440b      	add	r3, r1
 8016e9a:	3308      	adds	r3, #8
 8016e9c:	68fa      	ldr	r2, [r7, #12]
 8016e9e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016ea0:	7c7a      	ldrb	r2, [r7, #17]
 8016ea2:	4976      	ldr	r1, [pc, #472]	@ (801707c <etharp_query+0x2a0>)
 8016ea4:	4613      	mov	r3, r2
 8016ea6:	005b      	lsls	r3, r3, #1
 8016ea8:	4413      	add	r3, r2
 8016eaa:	00db      	lsls	r3, r3, #3
 8016eac:	440b      	add	r3, r1
 8016eae:	3314      	adds	r3, #20
 8016eb0:	781b      	ldrb	r3, [r3, #0]
 8016eb2:	2b01      	cmp	r3, #1
 8016eb4:	d011      	beq.n	8016eda <etharp_query+0xfe>
 8016eb6:	7c7a      	ldrb	r2, [r7, #17]
 8016eb8:	4970      	ldr	r1, [pc, #448]	@ (801707c <etharp_query+0x2a0>)
 8016eba:	4613      	mov	r3, r2
 8016ebc:	005b      	lsls	r3, r3, #1
 8016ebe:	4413      	add	r3, r2
 8016ec0:	00db      	lsls	r3, r3, #3
 8016ec2:	440b      	add	r3, r1
 8016ec4:	3314      	adds	r3, #20
 8016ec6:	781b      	ldrb	r3, [r3, #0]
 8016ec8:	2b01      	cmp	r3, #1
 8016eca:	d806      	bhi.n	8016eda <etharp_query+0xfe>
 8016ecc:	4b68      	ldr	r3, [pc, #416]	@ (8017070 <etharp_query+0x294>)
 8016ece:	f240 32ce 	movw	r2, #974	@ 0x3ce
 8016ed2:	496b      	ldr	r1, [pc, #428]	@ (8017080 <etharp_query+0x2a4>)
 8016ed4:	4868      	ldr	r0, [pc, #416]	@ (8017078 <etharp_query+0x29c>)
 8016ed6:	f001 ff25 	bl	8018d24 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016eda:	6a3b      	ldr	r3, [r7, #32]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d102      	bne.n	8016ee6 <etharp_query+0x10a>
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d128      	bne.n	8016f38 <etharp_query+0x15c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016ee6:	68b9      	ldr	r1, [r7, #8]
 8016ee8:	68f8      	ldr	r0, [r7, #12]
 8016eea:	f000 f97f 	bl	80171ec <etharp_request>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (result != ERR_OK) {
 8016ef4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d117      	bne.n	8016f2c <etharp_query+0x150>
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    } else {
      /* ARP request successfully sent */
      if ((arp_table[i].state == ETHARP_STATE_PENDING) && !is_new_entry) {
 8016efc:	7c7a      	ldrb	r2, [r7, #17]
 8016efe:	495f      	ldr	r1, [pc, #380]	@ (801707c <etharp_query+0x2a0>)
 8016f00:	4613      	mov	r3, r2
 8016f02:	005b      	lsls	r3, r3, #1
 8016f04:	4413      	add	r3, r2
 8016f06:	00db      	lsls	r3, r3, #3
 8016f08:	440b      	add	r3, r1
 8016f0a:	3314      	adds	r3, #20
 8016f0c:	781b      	ldrb	r3, [r3, #0]
 8016f0e:	2b01      	cmp	r3, #1
 8016f10:	d10c      	bne.n	8016f2c <etharp_query+0x150>
 8016f12:	6a3b      	ldr	r3, [r7, #32]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d109      	bne.n	8016f2c <etharp_query+0x150>
        /* A new ARP request has been sent for a pending entry. Reset the ctime to
           not let it expire too fast. */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: reset ctime for entry %"S16_F"\n", (s16_t)i));
        arp_table[i].ctime = 0;
 8016f18:	7c7a      	ldrb	r2, [r7, #17]
 8016f1a:	4958      	ldr	r1, [pc, #352]	@ (801707c <etharp_query+0x2a0>)
 8016f1c:	4613      	mov	r3, r2
 8016f1e:	005b      	lsls	r3, r3, #1
 8016f20:	4413      	add	r3, r2
 8016f22:	00db      	lsls	r3, r3, #3
 8016f24:	440b      	add	r3, r1
 8016f26:	3312      	adds	r3, #18
 8016f28:	2200      	movs	r2, #0
 8016f2a:	801a      	strh	r2, [r3, #0]
      }
    }
    if (q == NULL) {
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d102      	bne.n	8016f38 <etharp_query+0x15c>
      return result;
 8016f32:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016f36:	e096      	b.n	8017066 <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d106      	bne.n	8016f4c <etharp_query+0x170>
 8016f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8017070 <etharp_query+0x294>)
 8016f40:	f240 32ea 	movw	r2, #1002	@ 0x3ea
 8016f44:	494f      	ldr	r1, [pc, #316]	@ (8017084 <etharp_query+0x2a8>)
 8016f46:	484c      	ldr	r0, [pc, #304]	@ (8017078 <etharp_query+0x29c>)
 8016f48:	f001 feec 	bl	8018d24 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016f4c:	7c7a      	ldrb	r2, [r7, #17]
 8016f4e:	494b      	ldr	r1, [pc, #300]	@ (801707c <etharp_query+0x2a0>)
 8016f50:	4613      	mov	r3, r2
 8016f52:	005b      	lsls	r3, r3, #1
 8016f54:	4413      	add	r3, r2
 8016f56:	00db      	lsls	r3, r3, #3
 8016f58:	440b      	add	r3, r1
 8016f5a:	3314      	adds	r3, #20
 8016f5c:	781b      	ldrb	r3, [r3, #0]
 8016f5e:	2b01      	cmp	r3, #1
 8016f60:	d917      	bls.n	8016f92 <etharp_query+0x1b6>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016f62:	4a49      	ldr	r2, [pc, #292]	@ (8017088 <etharp_query+0x2ac>)
 8016f64:	7c7b      	ldrb	r3, [r7, #17]
 8016f66:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016f68:	7c7a      	ldrb	r2, [r7, #17]
 8016f6a:	4613      	mov	r3, r2
 8016f6c:	005b      	lsls	r3, r3, #1
 8016f6e:	4413      	add	r3, r2
 8016f70:	00db      	lsls	r3, r3, #3
 8016f72:	3308      	adds	r3, #8
 8016f74:	4a41      	ldr	r2, [pc, #260]	@ (801707c <etharp_query+0x2a0>)
 8016f76:	4413      	add	r3, r2
 8016f78:	3304      	adds	r3, #4
 8016f7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016f7e:	9200      	str	r2, [sp, #0]
 8016f80:	697a      	ldr	r2, [r7, #20]
 8016f82:	6879      	ldr	r1, [r7, #4]
 8016f84:	68f8      	ldr	r0, [r7, #12]
 8016f86:	f001 fd85 	bl	8018a94 <ethernet_output>
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016f90:	e067      	b.n	8017062 <etharp_query+0x286>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016f92:	7c7a      	ldrb	r2, [r7, #17]
 8016f94:	4939      	ldr	r1, [pc, #228]	@ (801707c <etharp_query+0x2a0>)
 8016f96:	4613      	mov	r3, r2
 8016f98:	005b      	lsls	r3, r3, #1
 8016f9a:	4413      	add	r3, r2
 8016f9c:	00db      	lsls	r3, r3, #3
 8016f9e:	440b      	add	r3, r1
 8016fa0:	3314      	adds	r3, #20
 8016fa2:	781b      	ldrb	r3, [r3, #0]
 8016fa4:	2b01      	cmp	r3, #1
 8016fa6:	d15c      	bne.n	8017062 <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016fa8:	2300      	movs	r3, #0
 8016faa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016fb0:	e01c      	b.n	8016fec <etharp_query+0x210>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == NULL));
 8016fb2:	69fb      	ldr	r3, [r7, #28]
 8016fb4:	895a      	ldrh	r2, [r3, #10]
 8016fb6:	69fb      	ldr	r3, [r7, #28]
 8016fb8:	891b      	ldrh	r3, [r3, #8]
 8016fba:	429a      	cmp	r2, r3
 8016fbc:	d10a      	bne.n	8016fd4 <etharp_query+0x1f8>
 8016fbe:	69fb      	ldr	r3, [r7, #28]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d006      	beq.n	8016fd4 <etharp_query+0x1f8>
 8016fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8017070 <etharp_query+0x294>)
 8016fc8:	f240 32fa 	movw	r2, #1018	@ 0x3fa
 8016fcc:	492f      	ldr	r1, [pc, #188]	@ (801708c <etharp_query+0x2b0>)
 8016fce:	482a      	ldr	r0, [pc, #168]	@ (8017078 <etharp_query+0x29c>)
 8016fd0:	f001 fea8 	bl	8018d24 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016fd4:	69fb      	ldr	r3, [r7, #28]
 8016fd6:	7b1b      	ldrb	r3, [r3, #12]
 8016fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d002      	beq.n	8016fe6 <etharp_query+0x20a>
        copy_needed = 1;
 8016fe0:	2301      	movs	r3, #1
 8016fe2:	61bb      	str	r3, [r7, #24]
        break;
 8016fe4:	e005      	b.n	8016ff2 <etharp_query+0x216>
      }
      p = p->next;
 8016fe6:	69fb      	ldr	r3, [r7, #28]
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016fec:	69fb      	ldr	r3, [r7, #28]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d1df      	bne.n	8016fb2 <etharp_query+0x1d6>
    }
    if (copy_needed) {
 8016ff2:	69bb      	ldr	r3, [r7, #24]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d007      	beq.n	8017008 <etharp_query+0x22c>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016ff8:	687a      	ldr	r2, [r7, #4]
 8016ffa:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8016ffe:	200e      	movs	r0, #14
 8017000:	f7f7 f990 	bl	800e324 <pbuf_clone>
 8017004:	61f8      	str	r0, [r7, #28]
 8017006:	e004      	b.n	8017012 <etharp_query+0x236>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801700c:	69f8      	ldr	r0, [r7, #28]
 801700e:	f7f6 ff4b 	bl	800dea8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017012:	69fb      	ldr	r3, [r7, #28]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d021      	beq.n	801705c <etharp_query+0x280>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017018:	7c7a      	ldrb	r2, [r7, #17]
 801701a:	4918      	ldr	r1, [pc, #96]	@ (801707c <etharp_query+0x2a0>)
 801701c:	4613      	mov	r3, r2
 801701e:	005b      	lsls	r3, r3, #1
 8017020:	4413      	add	r3, r2
 8017022:	00db      	lsls	r3, r3, #3
 8017024:	440b      	add	r3, r1
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d00a      	beq.n	8017042 <etharp_query+0x266>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801702c:	7c7a      	ldrb	r2, [r7, #17]
 801702e:	4913      	ldr	r1, [pc, #76]	@ (801707c <etharp_query+0x2a0>)
 8017030:	4613      	mov	r3, r2
 8017032:	005b      	lsls	r3, r3, #1
 8017034:	4413      	add	r3, r2
 8017036:	00db      	lsls	r3, r3, #3
 8017038:	440b      	add	r3, r1
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	4618      	mov	r0, r3
 801703e:	f7f6 fe93 	bl	800dd68 <pbuf_free>
      }
      arp_table[i].q = p;
 8017042:	7c7a      	ldrb	r2, [r7, #17]
 8017044:	490d      	ldr	r1, [pc, #52]	@ (801707c <etharp_query+0x2a0>)
 8017046:	4613      	mov	r3, r2
 8017048:	005b      	lsls	r3, r3, #1
 801704a:	4413      	add	r3, r2
 801704c:	00db      	lsls	r3, r3, #3
 801704e:	440b      	add	r3, r1
 8017050:	69fa      	ldr	r2, [r7, #28]
 8017052:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017054:	2300      	movs	r3, #0
 8017056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801705a:	e002      	b.n	8017062 <etharp_query+0x286>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801705c:	23ff      	movs	r3, #255	@ 0xff
 801705e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8017062:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8017066:	4618      	mov	r0, r3
 8017068:	3728      	adds	r7, #40	@ 0x28
 801706a:	46bd      	mov	sp, r7
 801706c:	bd80      	pop	{r7, pc}
 801706e:	bf00      	nop
 8017070:	0801ccec 	.word	0x0801ccec
 8017074:	0801ce7c 	.word	0x0801ce7c
 8017078:	0801cd48 	.word	0x0801cd48
 801707c:	2000a398 	.word	0x2000a398
 8017080:	0801ce8c 	.word	0x0801ce8c
 8017084:	0801ce70 	.word	0x0801ce70
 8017088:	2000a488 	.word	0x2000a488
 801708c:	0801ceb4 	.word	0x0801ceb4

08017090 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b08a      	sub	sp, #40	@ 0x28
 8017094:	af02      	add	r7, sp, #8
 8017096:	60f8      	str	r0, [r7, #12]
 8017098:	60b9      	str	r1, [r7, #8]
 801709a:	607a      	str	r2, [r7, #4]
 801709c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801709e:	2300      	movs	r3, #0
 80170a0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d106      	bne.n	80170b6 <etharp_raw+0x26>
 80170a8:	4b3a      	ldr	r3, [pc, #232]	@ (8017194 <etharp_raw+0x104>)
 80170aa:	f44f 628c 	mov.w	r2, #1120	@ 0x460
 80170ae:	493a      	ldr	r1, [pc, #232]	@ (8017198 <etharp_raw+0x108>)
 80170b0:	483a      	ldr	r0, [pc, #232]	@ (801719c <etharp_raw+0x10c>)
 80170b2:	f001 fe37 	bl	8018d24 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80170b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80170ba:	211c      	movs	r1, #28
 80170bc:	200e      	movs	r0, #14
 80170be:	f7f6 fb6d 	bl	800d79c <pbuf_alloc>
 80170c2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80170c4:	69bb      	ldr	r3, [r7, #24]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d102      	bne.n	80170d0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80170ca:	f04f 33ff 	mov.w	r3, #4294967295
 80170ce:	e05d      	b.n	801718c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80170d0:	69bb      	ldr	r3, [r7, #24]
 80170d2:	895b      	ldrh	r3, [r3, #10]
 80170d4:	2b1b      	cmp	r3, #27
 80170d6:	d806      	bhi.n	80170e6 <etharp_raw+0x56>
 80170d8:	4b2e      	ldr	r3, [pc, #184]	@ (8017194 <etharp_raw+0x104>)
 80170da:	f240 426b 	movw	r2, #1131	@ 0x46b
 80170de:	4930      	ldr	r1, [pc, #192]	@ (80171a0 <etharp_raw+0x110>)
 80170e0:	482e      	ldr	r0, [pc, #184]	@ (801719c <etharp_raw+0x10c>)
 80170e2:	f001 fe1f 	bl	8018d24 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80170e6:	69bb      	ldr	r3, [r7, #24]
 80170e8:	685b      	ldr	r3, [r3, #4]
 80170ea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80170ec:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80170ee:	4618      	mov	r0, r3
 80170f0:	f7f5 face 	bl	800c690 <lwip_htons>
 80170f4:	4603      	mov	r3, r0
 80170f6:	461a      	mov	r2, r3
 80170f8:	697b      	ldr	r3, [r7, #20]
 80170fa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017102:	2b06      	cmp	r3, #6
 8017104:	d006      	beq.n	8017114 <etharp_raw+0x84>
 8017106:	4b23      	ldr	r3, [pc, #140]	@ (8017194 <etharp_raw+0x104>)
 8017108:	f240 4272 	movw	r2, #1138	@ 0x472
 801710c:	4925      	ldr	r1, [pc, #148]	@ (80171a4 <etharp_raw+0x114>)
 801710e:	4823      	ldr	r0, [pc, #140]	@ (801719c <etharp_raw+0x10c>)
 8017110:	f001 fe08 	bl	8018d24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017114:	697b      	ldr	r3, [r7, #20]
 8017116:	3308      	adds	r3, #8
 8017118:	2206      	movs	r2, #6
 801711a:	6839      	ldr	r1, [r7, #0]
 801711c:	4618      	mov	r0, r3
 801711e:	f002 f824 	bl	801916a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017122:	697b      	ldr	r3, [r7, #20]
 8017124:	3312      	adds	r3, #18
 8017126:	2206      	movs	r2, #6
 8017128:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801712a:	4618      	mov	r0, r3
 801712c:	f002 f81d 	bl	801916a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017130:	697b      	ldr	r3, [r7, #20]
 8017132:	330e      	adds	r3, #14
 8017134:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017136:	6812      	ldr	r2, [r2, #0]
 8017138:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	3318      	adds	r3, #24
 801713e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017140:	6812      	ldr	r2, [r2, #0]
 8017142:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017144:	697b      	ldr	r3, [r7, #20]
 8017146:	2200      	movs	r2, #0
 8017148:	701a      	strb	r2, [r3, #0]
 801714a:	2200      	movs	r2, #0
 801714c:	f042 0201 	orr.w	r2, r2, #1
 8017150:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017152:	697b      	ldr	r3, [r7, #20]
 8017154:	2200      	movs	r2, #0
 8017156:	f042 0208 	orr.w	r2, r2, #8
 801715a:	709a      	strb	r2, [r3, #2]
 801715c:	2200      	movs	r2, #0
 801715e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017160:	697b      	ldr	r3, [r7, #20]
 8017162:	2206      	movs	r2, #6
 8017164:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017166:	697b      	ldr	r3, [r7, #20]
 8017168:	2204      	movs	r2, #4
 801716a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801716c:	f640 0306 	movw	r3, #2054	@ 0x806
 8017170:	9300      	str	r3, [sp, #0]
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	68ba      	ldr	r2, [r7, #8]
 8017176:	69b9      	ldr	r1, [r7, #24]
 8017178:	68f8      	ldr	r0, [r7, #12]
 801717a:	f001 fc8b 	bl	8018a94 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801717e:	69b8      	ldr	r0, [r7, #24]
 8017180:	f7f6 fdf2 	bl	800dd68 <pbuf_free>
  p = NULL;
 8017184:	2300      	movs	r3, #0
 8017186:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017188:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801718c:	4618      	mov	r0, r3
 801718e:	3720      	adds	r7, #32
 8017190:	46bd      	mov	sp, r7
 8017192:	bd80      	pop	{r7, pc}
 8017194:	0801ccec 	.word	0x0801ccec
 8017198:	0801ce20 	.word	0x0801ce20
 801719c:	0801cd48 	.word	0x0801cd48
 80171a0:	0801ced0 	.word	0x0801ced0
 80171a4:	0801cf04 	.word	0x0801cf04

080171a8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b088      	sub	sp, #32
 80171ac:	af04      	add	r7, sp, #16
 80171ae:	60f8      	str	r0, [r7, #12]
 80171b0:	60b9      	str	r1, [r7, #8]
 80171b2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80171c4:	2201      	movs	r2, #1
 80171c6:	9203      	str	r2, [sp, #12]
 80171c8:	68ba      	ldr	r2, [r7, #8]
 80171ca:	9202      	str	r2, [sp, #8]
 80171cc:	4a06      	ldr	r2, [pc, #24]	@ (80171e8 <etharp_request_dst+0x40>)
 80171ce:	9201      	str	r2, [sp, #4]
 80171d0:	9300      	str	r3, [sp, #0]
 80171d2:	4603      	mov	r3, r0
 80171d4:	687a      	ldr	r2, [r7, #4]
 80171d6:	68f8      	ldr	r0, [r7, #12]
 80171d8:	f7ff ff5a 	bl	8017090 <etharp_raw>
 80171dc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80171de:	4618      	mov	r0, r3
 80171e0:	3710      	adds	r7, #16
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd80      	pop	{r7, pc}
 80171e6:	bf00      	nop
 80171e8:	0801d42c 	.word	0x0801d42c

080171ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b082      	sub	sp, #8
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	6078      	str	r0, [r7, #4]
 80171f4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80171f6:	4a05      	ldr	r2, [pc, #20]	@ (801720c <etharp_request+0x20>)
 80171f8:	6839      	ldr	r1, [r7, #0]
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	f7ff ffd4 	bl	80171a8 <etharp_request_dst>
 8017200:	4603      	mov	r3, r0
}
 8017202:	4618      	mov	r0, r3
 8017204:	3708      	adds	r7, #8
 8017206:	46bd      	mov	sp, r7
 8017208:	bd80      	pop	{r7, pc}
 801720a:	bf00      	nop
 801720c:	0801d424 	.word	0x0801d424

08017210 <etharp_acd_probe>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_acd_probe(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017210:	b580      	push	{r7, lr}
 8017212:	b086      	sub	sp, #24
 8017214:	af04      	add	r7, sp, #16
 8017216:	6078      	str	r0, [r7, #4]
 8017218:	6039      	str	r1, [r7, #0]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
                    (struct eth_addr *)netif->hwaddr, IP4_ADDR_ANY4, &ethzero,
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 8017226:	2301      	movs	r3, #1
 8017228:	9303      	str	r3, [sp, #12]
 801722a:	683b      	ldr	r3, [r7, #0]
 801722c:	9302      	str	r3, [sp, #8]
 801722e:	4b07      	ldr	r3, [pc, #28]	@ (801724c <etharp_acd_probe+0x3c>)
 8017230:	9301      	str	r3, [sp, #4]
 8017232:	4b07      	ldr	r3, [pc, #28]	@ (8017250 <etharp_acd_probe+0x40>)
 8017234:	9300      	str	r3, [sp, #0]
 8017236:	4613      	mov	r3, r2
 8017238:	4a06      	ldr	r2, [pc, #24]	@ (8017254 <etharp_acd_probe+0x44>)
 801723a:	6878      	ldr	r0, [r7, #4]
 801723c:	f7ff ff28 	bl	8017090 <etharp_raw>
 8017240:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017242:	4618      	mov	r0, r3
 8017244:	3708      	adds	r7, #8
 8017246:	46bd      	mov	sp, r7
 8017248:	bd80      	pop	{r7, pc}
 801724a:	bf00      	nop
 801724c:	0801d42c 	.word	0x0801d42c
 8017250:	0801d41c 	.word	0x0801d41c
 8017254:	0801d424 	.word	0x0801d424

08017258 <etharp_acd_announce>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_acd_announce(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b086      	sub	sp, #24
 801725c:	af04      	add	r7, sp, #16
 801725e:	6078      	str	r0, [r7, #4]
 8017260:	6039      	str	r1, [r7, #0]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
                    (struct eth_addr *)netif->hwaddr, ipaddr, &ethzero,
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 801726e:	2301      	movs	r3, #1
 8017270:	9303      	str	r3, [sp, #12]
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	9302      	str	r3, [sp, #8]
 8017276:	4b07      	ldr	r3, [pc, #28]	@ (8017294 <etharp_acd_announce+0x3c>)
 8017278:	9301      	str	r3, [sp, #4]
 801727a:	683b      	ldr	r3, [r7, #0]
 801727c:	9300      	str	r3, [sp, #0]
 801727e:	4613      	mov	r3, r2
 8017280:	4a05      	ldr	r2, [pc, #20]	@ (8017298 <etharp_acd_announce+0x40>)
 8017282:	6878      	ldr	r0, [r7, #4]
 8017284:	f7ff ff04 	bl	8017090 <etharp_raw>
 8017288:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801728a:	4618      	mov	r0, r3
 801728c:	3708      	adds	r7, #8
 801728e:	46bd      	mov	sp, r7
 8017290:	bd80      	pop	{r7, pc}
 8017292:	bf00      	nop
 8017294:	0801d42c 	.word	0x0801d42c
 8017298:	0801d424 	.word	0x0801d424

0801729c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b08e      	sub	sp, #56	@ 0x38
 80172a0:	af04      	add	r7, sp, #16
 80172a2:	6078      	str	r0, [r7, #4]
 80172a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80172a6:	4b82      	ldr	r3, [pc, #520]	@ (80174b0 <icmp_input+0x214>)
 80172a8:	689b      	ldr	r3, [r3, #8]
 80172aa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80172ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	f003 030f 	and.w	r3, r3, #15
 80172b4:	b2db      	uxtb	r3, r3
 80172b6:	009b      	lsls	r3, r3, #2
 80172b8:	b2db      	uxtb	r3, r3
 80172ba:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80172bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80172be:	2b13      	cmp	r3, #19
 80172c0:	f240 80de 	bls.w	8017480 <icmp_input+0x1e4>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	895b      	ldrh	r3, [r3, #10]
 80172c8:	2b03      	cmp	r3, #3
 80172ca:	f240 80db 	bls.w	8017484 <icmp_input+0x1e8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	685b      	ldr	r3, [r3, #4]
 80172d2:	781b      	ldrb	r3, [r3, #0]
 80172d4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80172d8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80172dc:	2b00      	cmp	r3, #0
 80172de:	f000 80c8 	beq.w	8017472 <icmp_input+0x1d6>
 80172e2:	2b08      	cmp	r3, #8
 80172e4:	f040 80c8 	bne.w	8017478 <icmp_input+0x1dc>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80172e8:	4b72      	ldr	r3, [pc, #456]	@ (80174b4 <icmp_input+0x218>)
 80172ea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80172ec:	4b70      	ldr	r3, [pc, #448]	@ (80174b0 <icmp_input+0x214>)
 80172ee:	695b      	ldr	r3, [r3, #20]
 80172f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80172f4:	2be0      	cmp	r3, #224	@ 0xe0
 80172f6:	f000 80cc 	beq.w	8017492 <icmp_input+0x1f6>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80172fa:	4b6d      	ldr	r3, [pc, #436]	@ (80174b0 <icmp_input+0x214>)
 80172fc:	695b      	ldr	r3, [r3, #20]
 80172fe:	4a6c      	ldr	r2, [pc, #432]	@ (80174b0 <icmp_input+0x214>)
 8017300:	6812      	ldr	r2, [r2, #0]
 8017302:	4611      	mov	r1, r2
 8017304:	4618      	mov	r0, r3
 8017306:	f000 fc31 	bl	8017b6c <ip4_addr_isbroadcast_u32>
 801730a:	4603      	mov	r3, r0
 801730c:	2b00      	cmp	r3, #0
 801730e:	f040 80c2 	bne.w	8017496 <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	891b      	ldrh	r3, [r3, #8]
 8017316:	2b07      	cmp	r3, #7
 8017318:	f240 80b6 	bls.w	8017488 <icmp_input+0x1ec>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801731c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801731e:	330e      	adds	r3, #14
 8017320:	4619      	mov	r1, r3
 8017322:	6878      	ldr	r0, [r7, #4]
 8017324:	f7f6 fc94 	bl	800dc50 <pbuf_add_header>
 8017328:	4603      	mov	r3, r0
 801732a:	2b00      	cmp	r3, #0
 801732c:	d04b      	beq.n	80173c6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	891a      	ldrh	r2, [r3, #8]
 8017332:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017334:	4413      	add	r3, r2
 8017336:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	891b      	ldrh	r3, [r3, #8]
 801733c:	8b7a      	ldrh	r2, [r7, #26]
 801733e:	429a      	cmp	r2, r3
 8017340:	f0c0 80ab 	bcc.w	801749a <icmp_input+0x1fe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017344:	8b7b      	ldrh	r3, [r7, #26]
 8017346:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801734a:	4619      	mov	r1, r3
 801734c:	200e      	movs	r0, #14
 801734e:	f7f6 fa25 	bl	800d79c <pbuf_alloc>
 8017352:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017354:	697b      	ldr	r3, [r7, #20]
 8017356:	2b00      	cmp	r3, #0
 8017358:	f000 80a1 	beq.w	801749e <icmp_input+0x202>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801735c:	697b      	ldr	r3, [r7, #20]
 801735e:	895b      	ldrh	r3, [r3, #10]
 8017360:	461a      	mov	r2, r3
 8017362:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017364:	3308      	adds	r3, #8
 8017366:	429a      	cmp	r2, r3
 8017368:	d203      	bcs.n	8017372 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header\n"));
          pbuf_free(r);
 801736a:	6978      	ldr	r0, [r7, #20]
 801736c:	f7f6 fcfc 	bl	800dd68 <pbuf_free>
          goto icmperr;
 8017370:	e096      	b.n	80174a0 <icmp_input+0x204>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017372:	697b      	ldr	r3, [r7, #20]
 8017374:	685b      	ldr	r3, [r3, #4]
 8017376:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017378:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801737a:	4618      	mov	r0, r3
 801737c:	f001 fef5 	bl	801916a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017380:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017382:	4619      	mov	r1, r3
 8017384:	6978      	ldr	r0, [r7, #20]
 8017386:	f7f6 fc73 	bl	800dc70 <pbuf_remove_header>
 801738a:	4603      	mov	r3, r0
 801738c:	2b00      	cmp	r3, #0
 801738e:	d009      	beq.n	80173a4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed", 0);
 8017390:	4b49      	ldr	r3, [pc, #292]	@ (80174b8 <icmp_input+0x21c>)
 8017392:	22b6      	movs	r2, #182	@ 0xb6
 8017394:	4949      	ldr	r1, [pc, #292]	@ (80174bc <icmp_input+0x220>)
 8017396:	484a      	ldr	r0, [pc, #296]	@ (80174c0 <icmp_input+0x224>)
 8017398:	f001 fcc4 	bl	8018d24 <iprintf>
          pbuf_free(r);
 801739c:	6978      	ldr	r0, [r7, #20]
 801739e:	f7f6 fce3 	bl	800dd68 <pbuf_free>
          goto icmperr;
 80173a2:	e07d      	b.n	80174a0 <icmp_input+0x204>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80173a4:	6879      	ldr	r1, [r7, #4]
 80173a6:	6978      	ldr	r0, [r7, #20]
 80173a8:	f7f6 fdfc 	bl	800dfa4 <pbuf_copy>
 80173ac:	4603      	mov	r3, r0
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d003      	beq.n	80173ba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed\n"));
          pbuf_free(r);
 80173b2:	6978      	ldr	r0, [r7, #20]
 80173b4:	f7f6 fcd8 	bl	800dd68 <pbuf_free>
          goto icmperr;
 80173b8:	e072      	b.n	80174a0 <icmp_input+0x204>
        }
        /* free the original p */
        pbuf_free(p);
 80173ba:	6878      	ldr	r0, [r7, #4]
 80173bc:	f7f6 fcd4 	bl	800dd68 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80173c0:	697b      	ldr	r3, [r7, #20]
 80173c2:	607b      	str	r3, [r7, #4]
 80173c4:	e00f      	b.n	80173e6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80173c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80173c8:	330e      	adds	r3, #14
 80173ca:	4619      	mov	r1, r3
 80173cc:	6878      	ldr	r0, [r7, #4]
 80173ce:	f7f6 fc4f 	bl	800dc70 <pbuf_remove_header>
 80173d2:	4603      	mov	r3, r0
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d006      	beq.n	80173e6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed", 0);
 80173d8:	4b37      	ldr	r3, [pc, #220]	@ (80174b8 <icmp_input+0x21c>)
 80173da:	22c7      	movs	r2, #199	@ 0xc7
 80173dc:	4939      	ldr	r1, [pc, #228]	@ (80174c4 <icmp_input+0x228>)
 80173de:	4838      	ldr	r0, [pc, #224]	@ (80174c0 <icmp_input+0x224>)
 80173e0:	f001 fca0 	bl	8018d24 <iprintf>
          goto icmperr;
 80173e4:	e05c      	b.n	80174a0 <icmp_input+0x204>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	685b      	ldr	r3, [r3, #4]
 80173ea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80173ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80173ee:	4619      	mov	r1, r3
 80173f0:	6878      	ldr	r0, [r7, #4]
 80173f2:	f7f6 fc2d 	bl	800dc50 <pbuf_add_header>
 80173f6:	4603      	mov	r3, r0
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d13c      	bne.n	8017476 <icmp_input+0x1da>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet\n"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	685b      	ldr	r3, [r3, #4]
 8017400:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017402:	69fb      	ldr	r3, [r7, #28]
 8017404:	681a      	ldr	r2, [r3, #0]
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801740a:	4b29      	ldr	r3, [pc, #164]	@ (80174b0 <icmp_input+0x214>)
 801740c:	691a      	ldr	r2, [r3, #16]
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017412:	693b      	ldr	r3, [r7, #16]
 8017414:	2200      	movs	r2, #0
 8017416:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017418:	693b      	ldr	r3, [r7, #16]
 801741a:	885b      	ldrh	r3, [r3, #2]
 801741c:	b29b      	uxth	r3, r3
 801741e:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8017422:	4293      	cmp	r3, r2
 8017424:	d907      	bls.n	8017436 <icmp_input+0x19a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017426:	693b      	ldr	r3, [r7, #16]
 8017428:	885b      	ldrh	r3, [r3, #2]
 801742a:	b29b      	uxth	r3, r3
 801742c:	3309      	adds	r3, #9
 801742e:	b29a      	uxth	r2, r3
 8017430:	693b      	ldr	r3, [r7, #16]
 8017432:	805a      	strh	r2, [r3, #2]
 8017434:	e006      	b.n	8017444 <icmp_input+0x1a8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017436:	693b      	ldr	r3, [r7, #16]
 8017438:	885b      	ldrh	r3, [r3, #2]
 801743a:	b29b      	uxth	r3, r3
 801743c:	3308      	adds	r3, #8
 801743e:	b29a      	uxth	r2, r3
 8017440:	693b      	ldr	r3, [r7, #16]
 8017442:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	22ff      	movs	r2, #255	@ 0xff
 8017448:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	2200      	movs	r2, #0
 801744e:	729a      	strb	r2, [r3, #10]
 8017450:	2200      	movs	r2, #0
 8017452:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017454:	683b      	ldr	r3, [r7, #0]
 8017456:	9302      	str	r3, [sp, #8]
 8017458:	2301      	movs	r3, #1
 801745a:	9301      	str	r3, [sp, #4]
 801745c:	2300      	movs	r3, #0
 801745e:	9300      	str	r3, [sp, #0]
 8017460:	23ff      	movs	r3, #255	@ 0xff
 8017462:	2200      	movs	r2, #0
 8017464:	69f9      	ldr	r1, [r7, #28]
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f000 faa8 	bl	80179bc <ip4_output_if>
 801746c:	4603      	mov	r3, r0
 801746e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017470:	e001      	b.n	8017476 <icmp_input+0x1da>
      break;
 8017472:	bf00      	nop
 8017474:	e000      	b.n	8017478 <icmp_input+0x1dc>
      break;
 8017476:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017478:	6878      	ldr	r0, [r7, #4]
 801747a:	f7f6 fc75 	bl	800dd68 <pbuf_free>
  return;
 801747e:	e013      	b.n	80174a8 <icmp_input+0x20c>
    goto lenerr;
 8017480:	bf00      	nop
 8017482:	e002      	b.n	801748a <icmp_input+0x1ee>
    goto lenerr;
 8017484:	bf00      	nop
 8017486:	e000      	b.n	801748a <icmp_input+0x1ee>
        goto lenerr;
 8017488:	bf00      	nop
lenerr:
  pbuf_free(p);
 801748a:	6878      	ldr	r0, [r7, #4]
 801748c:	f7f6 fc6c 	bl	800dd68 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017490:	e00a      	b.n	80174a8 <icmp_input+0x20c>
        goto icmperr;
 8017492:	bf00      	nop
 8017494:	e004      	b.n	80174a0 <icmp_input+0x204>
        goto icmperr;
 8017496:	bf00      	nop
 8017498:	e002      	b.n	80174a0 <icmp_input+0x204>
          goto icmperr;
 801749a:	bf00      	nop
 801749c:	e000      	b.n	80174a0 <icmp_input+0x204>
          goto icmperr;
 801749e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80174a0:	6878      	ldr	r0, [r7, #4]
 80174a2:	f7f6 fc61 	bl	800dd68 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80174a6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80174a8:	3728      	adds	r7, #40	@ 0x28
 80174aa:	46bd      	mov	sp, r7
 80174ac:	bd80      	pop	{r7, pc}
 80174ae:	bf00      	nop
 80174b0:	200035ac 	.word	0x200035ac
 80174b4:	200035c0 	.word	0x200035c0
 80174b8:	0801cf48 	.word	0x0801cf48
 80174bc:	0801cf60 	.word	0x0801cf60
 80174c0:	0801cf94 	.word	0x0801cf94
 80174c4:	0801cfbc 	.word	0x0801cfbc

080174c8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b082      	sub	sp, #8
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
 80174d0:	460b      	mov	r3, r1
 80174d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80174d4:	78fb      	ldrb	r3, [r7, #3]
 80174d6:	461a      	mov	r2, r3
 80174d8:	2103      	movs	r1, #3
 80174da:	6878      	ldr	r0, [r7, #4]
 80174dc:	f000 f814 	bl	8017508 <icmp_send_response>
}
 80174e0:	bf00      	nop
 80174e2:	3708      	adds	r7, #8
 80174e4:	46bd      	mov	sp, r7
 80174e6:	bd80      	pop	{r7, pc}

080174e8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b082      	sub	sp, #8
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
 80174f0:	460b      	mov	r3, r1
 80174f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80174f4:	78fb      	ldrb	r3, [r7, #3]
 80174f6:	461a      	mov	r2, r3
 80174f8:	210b      	movs	r1, #11
 80174fa:	6878      	ldr	r0, [r7, #4]
 80174fc:	f000 f804 	bl	8017508 <icmp_send_response>
}
 8017500:	bf00      	nop
 8017502:	3708      	adds	r7, #8
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}

08017508 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b08c      	sub	sp, #48	@ 0x30
 801750c:	af04      	add	r7, sp, #16
 801750e:	6078      	str	r0, [r7, #4]
 8017510:	460b      	mov	r3, r1
 8017512:	70fb      	strb	r3, [r7, #3]
 8017514:	4613      	mov	r3, r2
 8017516:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* Keep IP header + up to 8 bytes */
  response_pkt_len = IP_HLEN + ICMP_DEST_UNREACH_DATASIZE;
 8017518:	231c      	movs	r3, #28
 801751a:	83fb      	strh	r3, [r7, #30]
  if (p->tot_len < response_pkt_len) {
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	891b      	ldrh	r3, [r3, #8]
 8017520:	8bfa      	ldrh	r2, [r7, #30]
 8017522:	429a      	cmp	r2, r3
 8017524:	d902      	bls.n	801752c <icmp_send_response+0x24>
    response_pkt_len = p->tot_len;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	891b      	ldrh	r3, [r3, #8]
 801752a:	83fb      	strh	r3, [r7, #30]
  }

  /* ICMP header + part of original packet */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_hdr) + response_pkt_len, PBUF_RAM);
 801752c:	8bfb      	ldrh	r3, [r7, #30]
 801752e:	3308      	adds	r3, #8
 8017530:	b29b      	uxth	r3, r3
 8017532:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017536:	4619      	mov	r1, r3
 8017538:	2022      	movs	r0, #34	@ 0x22
 801753a:	f7f6 f92f 	bl	800d79c <pbuf_alloc>
 801753e:	61b8      	str	r0, [r7, #24]
  if (q == NULL) {
 8017540:	69bb      	ldr	r3, [r7, #24]
 8017542:	2b00      	cmp	r3, #0
 8017544:	d054      	beq.n	80175f0 <icmp_send_response+0xe8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_send_response: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017546:	69bb      	ldr	r3, [r7, #24]
 8017548:	895b      	ldrh	r3, [r3, #10]
 801754a:	461a      	mov	r2, r3
 801754c:	8bfb      	ldrh	r3, [r7, #30]
 801754e:	3308      	adds	r3, #8
 8017550:	429a      	cmp	r2, r3
 8017552:	d206      	bcs.n	8017562 <icmp_send_response+0x5a>
 8017554:	4b28      	ldr	r3, [pc, #160]	@ (80175f8 <icmp_send_response+0xf0>)
 8017556:	f240 126d 	movw	r2, #365	@ 0x16d
 801755a:	4928      	ldr	r1, [pc, #160]	@ (80175fc <icmp_send_response+0xf4>)
 801755c:	4828      	ldr	r0, [pc, #160]	@ (8017600 <icmp_send_response+0xf8>)
 801755e:	f001 fbe1 	bl	8018d24 <iprintf>
              (q->len >= (sizeof(struct icmp_hdr) + response_pkt_len)));

  iphdr = (struct ip_hdr *)p->payload;
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	685b      	ldr	r3, [r3, #4]
 8017566:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_hdr *)q->payload;
 8017568:	69bb      	ldr	r3, [r7, #24]
 801756a:	685b      	ldr	r3, [r3, #4]
 801756c:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	78fa      	ldrb	r2, [r7, #3]
 8017572:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017574:	693b      	ldr	r3, [r7, #16]
 8017576:	78ba      	ldrb	r2, [r7, #2]
 8017578:	705a      	strb	r2, [r3, #1]
  icmphdr->data = 0;
 801757a:	693b      	ldr	r3, [r7, #16]
 801757c:	2200      	movs	r2, #0
 801757e:	711a      	strb	r2, [r3, #4]
 8017580:	2200      	movs	r2, #0
 8017582:	715a      	strb	r2, [r3, #5]
 8017584:	2200      	movs	r2, #0
 8017586:	719a      	strb	r2, [r3, #6]
 8017588:	2200      	movs	r2, #0
 801758a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  pbuf_copy_partial_pbuf(q, p, response_pkt_len, sizeof(struct icmp_hdr));
 801758c:	8bfa      	ldrh	r2, [r7, #30]
 801758e:	2308      	movs	r3, #8
 8017590:	6879      	ldr	r1, [r7, #4]
 8017592:	69b8      	ldr	r0, [r7, #24]
 8017594:	f7f6 fd1e 	bl	800dfd4 <pbuf_copy_partial_pbuf>

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017598:	697b      	ldr	r3, [r7, #20]
 801759a:	68db      	ldr	r3, [r3, #12]
 801759c:	60bb      	str	r3, [r7, #8]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801759e:	f107 0308 	add.w	r3, r7, #8
 80175a2:	4618      	mov	r0, r3
 80175a4:	f000 f82e 	bl	8017604 <ip4_route>
 80175a8:	60f8      	str	r0, [r7, #12]
#endif
  if (netif != NULL) {
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d01b      	beq.n	80175e8 <icmp_send_response+0xe0>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80175b0:	693b      	ldr	r3, [r7, #16]
 80175b2:	2200      	movs	r2, #0
 80175b4:	709a      	strb	r2, [r3, #2]
 80175b6:	2200      	movs	r2, #0
 80175b8:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80175ba:	69bb      	ldr	r3, [r7, #24]
 80175bc:	895b      	ldrh	r3, [r3, #10]
 80175be:	4619      	mov	r1, r3
 80175c0:	6938      	ldr	r0, [r7, #16]
 80175c2:	f7f5 f8f1 	bl	800c7a8 <inet_chksum>
 80175c6:	4603      	mov	r3, r0
 80175c8:	461a      	mov	r2, r3
 80175ca:	693b      	ldr	r3, [r7, #16]
 80175cc:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80175ce:	f107 0208 	add.w	r2, r7, #8
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	9302      	str	r3, [sp, #8]
 80175d6:	2301      	movs	r3, #1
 80175d8:	9301      	str	r3, [sp, #4]
 80175da:	2300      	movs	r3, #0
 80175dc:	9300      	str	r3, [sp, #0]
 80175de:	23ff      	movs	r3, #255	@ 0xff
 80175e0:	2100      	movs	r1, #0
 80175e2:	69b8      	ldr	r0, [r7, #24]
 80175e4:	f000 f9ea 	bl	80179bc <ip4_output_if>
  }
  pbuf_free(q);
 80175e8:	69b8      	ldr	r0, [r7, #24]
 80175ea:	f7f6 fbbd 	bl	800dd68 <pbuf_free>
 80175ee:	e000      	b.n	80175f2 <icmp_send_response+0xea>
    return;
 80175f0:	bf00      	nop
}
 80175f2:	3720      	adds	r7, #32
 80175f4:	46bd      	mov	sp, r7
 80175f6:	bd80      	pop	{r7, pc}
 80175f8:	0801cf48 	.word	0x0801cf48
 80175fc:	0801cff0 	.word	0x0801cff0
 8017600:	0801cf94 	.word	0x0801cf94

08017604 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017604:	b480      	push	{r7}
 8017606:	b085      	sub	sp, #20
 8017608:	af00      	add	r7, sp, #0
 801760a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801760c:	4b33      	ldr	r3, [pc, #204]	@ (80176dc <ip4_route+0xd8>)
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	60fb      	str	r3, [r7, #12]
 8017612:	e036      	b.n	8017682 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801761a:	f003 0301 	and.w	r3, r3, #1
 801761e:	b2db      	uxtb	r3, r3
 8017620:	2b00      	cmp	r3, #0
 8017622:	d02b      	beq.n	801767c <ip4_route+0x78>
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801762a:	089b      	lsrs	r3, r3, #2
 801762c:	f003 0301 	and.w	r3, r3, #1
 8017630:	b2db      	uxtb	r3, r3
 8017632:	2b00      	cmp	r3, #0
 8017634:	d022      	beq.n	801767c <ip4_route+0x78>
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	3304      	adds	r3, #4
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d01d      	beq.n	801767c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_net_eq(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681a      	ldr	r2, [r3, #0]
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	3304      	adds	r3, #4
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	405a      	eors	r2, r3
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	3308      	adds	r3, #8
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	4013      	ands	r3, r2
 8017654:	2b00      	cmp	r3, #0
 8017656:	d101      	bne.n	801765c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	e038      	b.n	80176ce <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_eq(dest, netif_ip4_gw(netif))) {
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017662:	f003 0302 	and.w	r3, r3, #2
 8017666:	2b00      	cmp	r3, #0
 8017668:	d108      	bne.n	801767c <ip4_route+0x78>
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	681a      	ldr	r2, [r3, #0]
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	330c      	adds	r3, #12
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	429a      	cmp	r2, r3
 8017676:	d101      	bne.n	801767c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	e028      	b.n	80176ce <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	60fb      	str	r3, [r7, #12]
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	2b00      	cmp	r3, #0
 8017686:	d1c5      	bne.n	8017614 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017688:	4b15      	ldr	r3, [pc, #84]	@ (80176e0 <ip4_route+0xdc>)
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d01a      	beq.n	80176c6 <ip4_route+0xc2>
 8017690:	4b13      	ldr	r3, [pc, #76]	@ (80176e0 <ip4_route+0xdc>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017698:	f003 0301 	and.w	r3, r3, #1
 801769c:	2b00      	cmp	r3, #0
 801769e:	d012      	beq.n	80176c6 <ip4_route+0xc2>
 80176a0:	4b0f      	ldr	r3, [pc, #60]	@ (80176e0 <ip4_route+0xdc>)
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80176a8:	f003 0304 	and.w	r3, r3, #4
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d00a      	beq.n	80176c6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80176b0:	4b0b      	ldr	r3, [pc, #44]	@ (80176e0 <ip4_route+0xdc>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	3304      	adds	r3, #4
 80176b6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d004      	beq.n	80176c6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	b2db      	uxtb	r3, r3
 80176c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80176c4:	d101      	bne.n	80176ca <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80176c6:	2300      	movs	r3, #0
 80176c8:	e001      	b.n	80176ce <ip4_route+0xca>
  }

  return netif_default;
 80176ca:	4b05      	ldr	r3, [pc, #20]	@ (80176e0 <ip4_route+0xdc>)
 80176cc:	681b      	ldr	r3, [r3, #0]
}
 80176ce:	4618      	mov	r0, r3
 80176d0:	3714      	adds	r7, #20
 80176d2:	46bd      	mov	sp, r7
 80176d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d8:	4770      	bx	lr
 80176da:	bf00      	nop
 80176dc:	2000a2f8 	.word	0x2000a2f8
 80176e0:	2000a2fc 	.word	0x2000a2fc

080176e4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b082      	sub	sp, #8
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80176f2:	f003 0301 	and.w	r3, r3, #1
 80176f6:	b2db      	uxtb	r3, r3
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d016      	beq.n	801772a <ip4_input_accept+0x46>
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	3304      	adds	r3, #4
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d011      	beq.n	801772a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017706:	4b0b      	ldr	r3, [pc, #44]	@ (8017734 <ip4_input_accept+0x50>)
 8017708:	695a      	ldr	r2, [r3, #20]
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	3304      	adds	r3, #4
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	429a      	cmp	r2, r3
 8017712:	d008      	beq.n	8017726 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017714:	4b07      	ldr	r3, [pc, #28]	@ (8017734 <ip4_input_accept+0x50>)
 8017716:	695b      	ldr	r3, [r3, #20]
 8017718:	6879      	ldr	r1, [r7, #4]
 801771a:	4618      	mov	r0, r3
 801771c:	f000 fa26 	bl	8017b6c <ip4_addr_isbroadcast_u32>
 8017720:	4603      	mov	r3, r0
    if (ip4_addr_eq(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017722:	2b00      	cmp	r3, #0
 8017724:	d001      	beq.n	801772a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017726:	2301      	movs	r3, #1
 8017728:	e000      	b.n	801772c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801772a:	2300      	movs	r3, #0
}
 801772c:	4618      	mov	r0, r3
 801772e:	3708      	adds	r7, #8
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}
 8017734:	200035ac 	.word	0x200035ac

08017738 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b088      	sub	sp, #32
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
 8017740:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017742:	2301      	movs	r3, #1
 8017744:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	685b      	ldr	r3, [r3, #4]
 801774a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801774c:	69fb      	ldr	r3, [r7, #28]
 801774e:	781b      	ldrb	r3, [r3, #0]
 8017750:	091b      	lsrs	r3, r3, #4
 8017752:	b2db      	uxtb	r3, r3
 8017754:	2b04      	cmp	r3, #4
 8017756:	d004      	beq.n	8017762 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017758:	6878      	ldr	r0, [r7, #4]
 801775a:	f7f6 fb05 	bl	800dd68 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801775e:	2300      	movs	r3, #0
 8017760:	e123      	b.n	80179aa <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017762:	69fb      	ldr	r3, [r7, #28]
 8017764:	781b      	ldrb	r3, [r3, #0]
 8017766:	f003 030f 	and.w	r3, r3, #15
 801776a:	b2db      	uxtb	r3, r3
 801776c:	009b      	lsls	r3, r3, #2
 801776e:	b2db      	uxtb	r3, r3
 8017770:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017772:	69fb      	ldr	r3, [r7, #28]
 8017774:	885b      	ldrh	r3, [r3, #2]
 8017776:	b29b      	uxth	r3, r3
 8017778:	4618      	mov	r0, r3
 801777a:	f7f4 ff89 	bl	800c690 <lwip_htons>
 801777e:	4603      	mov	r3, r0
 8017780:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	891b      	ldrh	r3, [r3, #8]
 8017786:	8a3a      	ldrh	r2, [r7, #16]
 8017788:	429a      	cmp	r2, r3
 801778a:	d204      	bcs.n	8017796 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801778c:	8a3b      	ldrh	r3, [r7, #16]
 801778e:	4619      	mov	r1, r3
 8017790:	6878      	ldr	r0, [r7, #4]
 8017792:	f7f6 f961 	bl	800da58 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	895b      	ldrh	r3, [r3, #10]
 801779a:	8a7a      	ldrh	r2, [r7, #18]
 801779c:	429a      	cmp	r2, r3
 801779e:	d807      	bhi.n	80177b0 <ip4_input+0x78>
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	891b      	ldrh	r3, [r3, #8]
 80177a4:	8a3a      	ldrh	r2, [r7, #16]
 80177a6:	429a      	cmp	r2, r3
 80177a8:	d802      	bhi.n	80177b0 <ip4_input+0x78>
 80177aa:	8a7b      	ldrh	r3, [r7, #18]
 80177ac:	2b13      	cmp	r3, #19
 80177ae:	d804      	bhi.n	80177ba <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80177b0:	6878      	ldr	r0, [r7, #4]
 80177b2:	f7f6 fad9 	bl	800dd68 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80177b6:	2300      	movs	r3, #0
 80177b8:	e0f7      	b.n	80179aa <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80177ba:	69fb      	ldr	r3, [r7, #28]
 80177bc:	691b      	ldr	r3, [r3, #16]
 80177be:	4a7d      	ldr	r2, [pc, #500]	@ (80179b4 <ip4_input+0x27c>)
 80177c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80177c2:	69fb      	ldr	r3, [r7, #28]
 80177c4:	68db      	ldr	r3, [r3, #12]
 80177c6:	4a7b      	ldr	r2, [pc, #492]	@ (80179b4 <ip4_input+0x27c>)
 80177c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80177ca:	4b7a      	ldr	r3, [pc, #488]	@ (80179b4 <ip4_input+0x27c>)
 80177cc:	695b      	ldr	r3, [r3, #20]
 80177ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80177d2:	2be0      	cmp	r3, #224	@ 0xe0
 80177d4:	d112      	bne.n	80177fc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80177d6:	683b      	ldr	r3, [r7, #0]
 80177d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80177dc:	f003 0301 	and.w	r3, r3, #1
 80177e0:	b2db      	uxtb	r3, r3
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d007      	beq.n	80177f6 <ip4_input+0xbe>
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	3304      	adds	r3, #4
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d002      	beq.n	80177f6 <ip4_input+0xbe>
      netif = inp;
 80177f0:	683b      	ldr	r3, [r7, #0]
 80177f2:	61bb      	str	r3, [r7, #24]
 80177f4:	e02a      	b.n	801784c <ip4_input+0x114>
    } else {
      netif = NULL;
 80177f6:	2300      	movs	r3, #0
 80177f8:	61bb      	str	r3, [r7, #24]
 80177fa:	e027      	b.n	801784c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80177fc:	6838      	ldr	r0, [r7, #0]
 80177fe:	f7ff ff71 	bl	80176e4 <ip4_input_accept>
 8017802:	4603      	mov	r3, r0
 8017804:	2b00      	cmp	r3, #0
 8017806:	d002      	beq.n	801780e <ip4_input+0xd6>
      netif = inp;
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	61bb      	str	r3, [r7, #24]
 801780c:	e01e      	b.n	801784c <ip4_input+0x114>
    } else {
      netif = NULL;
 801780e:	2300      	movs	r3, #0
 8017810:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017812:	4b68      	ldr	r3, [pc, #416]	@ (80179b4 <ip4_input+0x27c>)
 8017814:	695b      	ldr	r3, [r3, #20]
 8017816:	b2db      	uxtb	r3, r3
 8017818:	2b7f      	cmp	r3, #127	@ 0x7f
 801781a:	d017      	beq.n	801784c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801781c:	4b66      	ldr	r3, [pc, #408]	@ (80179b8 <ip4_input+0x280>)
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	61bb      	str	r3, [r7, #24]
 8017822:	e00e      	b.n	8017842 <ip4_input+0x10a>
          if (netif == inp) {
 8017824:	69ba      	ldr	r2, [r7, #24]
 8017826:	683b      	ldr	r3, [r7, #0]
 8017828:	429a      	cmp	r2, r3
 801782a:	d006      	beq.n	801783a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801782c:	69b8      	ldr	r0, [r7, #24]
 801782e:	f7ff ff59 	bl	80176e4 <ip4_input_accept>
 8017832:	4603      	mov	r3, r0
 8017834:	2b00      	cmp	r3, #0
 8017836:	d108      	bne.n	801784a <ip4_input+0x112>
 8017838:	e000      	b.n	801783c <ip4_input+0x104>
            continue;
 801783a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801783c:	69bb      	ldr	r3, [r7, #24]
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	61bb      	str	r3, [r7, #24]
 8017842:	69bb      	ldr	r3, [r7, #24]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d1ed      	bne.n	8017824 <ip4_input+0xec>
 8017848:	e000      	b.n	801784c <ip4_input+0x114>
            break;
 801784a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801784c:	69bb      	ldr	r3, [r7, #24]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d111      	bne.n	8017876 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017852:	69fb      	ldr	r3, [r7, #28]
 8017854:	7a5b      	ldrb	r3, [r3, #9]
 8017856:	2b11      	cmp	r3, #17
 8017858:	d10d      	bne.n	8017876 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801785a:	8a7b      	ldrh	r3, [r7, #18]
 801785c:	69fa      	ldr	r2, [r7, #28]
 801785e:	4413      	add	r3, r2
 8017860:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	885b      	ldrh	r3, [r3, #2]
 8017866:	b29b      	uxth	r3, r3
 8017868:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801786c:	d103      	bne.n	8017876 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801786e:	683b      	ldr	r3, [r7, #0]
 8017870:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017872:	2300      	movs	r3, #0
 8017874:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017876:	697b      	ldr	r3, [r7, #20]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d017      	beq.n	80178ac <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801787c:	4b4d      	ldr	r3, [pc, #308]	@ (80179b4 <ip4_input+0x27c>)
 801787e:	691b      	ldr	r3, [r3, #16]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d013      	beq.n	80178ac <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017884:	4b4b      	ldr	r3, [pc, #300]	@ (80179b4 <ip4_input+0x27c>)
 8017886:	691b      	ldr	r3, [r3, #16]
 8017888:	6839      	ldr	r1, [r7, #0]
 801788a:	4618      	mov	r0, r3
 801788c:	f000 f96e 	bl	8017b6c <ip4_addr_isbroadcast_u32>
 8017890:	4603      	mov	r3, r0
 8017892:	2b00      	cmp	r3, #0
 8017894:	d105      	bne.n	80178a2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017896:	4b47      	ldr	r3, [pc, #284]	@ (80179b4 <ip4_input+0x27c>)
 8017898:	691b      	ldr	r3, [r3, #16]
 801789a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801789e:	2be0      	cmp	r3, #224	@ 0xe0
 80178a0:	d104      	bne.n	80178ac <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80178a2:	6878      	ldr	r0, [r7, #4]
 80178a4:	f7f6 fa60 	bl	800dd68 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80178a8:	2300      	movs	r3, #0
 80178aa:	e07e      	b.n	80179aa <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80178ac:	69bb      	ldr	r3, [r7, #24]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d104      	bne.n	80178bc <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f7f6 fa58 	bl	800dd68 <pbuf_free>
    return ERR_OK;
 80178b8:	2300      	movs	r3, #0
 80178ba:	e076      	b.n	80179aa <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80178bc:	69fb      	ldr	r3, [r7, #28]
 80178be:	88db      	ldrh	r3, [r3, #6]
 80178c0:	b29b      	uxth	r3, r3
 80178c2:	461a      	mov	r2, r3
 80178c4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80178c8:	4013      	ands	r3, r2
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d00b      	beq.n	80178e6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80178ce:	6878      	ldr	r0, [r7, #4]
 80178d0:	f000 fd22 	bl	8018318 <ip4_reass>
 80178d4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d101      	bne.n	80178e0 <ip4_input+0x1a8>
      return ERR_OK;
 80178dc:	2300      	movs	r3, #0
 80178de:	e064      	b.n	80179aa <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	685b      	ldr	r3, [r3, #4]
 80178e4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80178e6:	4a33      	ldr	r2, [pc, #204]	@ (80179b4 <ip4_input+0x27c>)
 80178e8:	69bb      	ldr	r3, [r7, #24]
 80178ea:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80178ec:	4a31      	ldr	r2, [pc, #196]	@ (80179b4 <ip4_input+0x27c>)
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80178f2:	4a30      	ldr	r2, [pc, #192]	@ (80179b4 <ip4_input+0x27c>)
 80178f4:	69fb      	ldr	r3, [r7, #28]
 80178f6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80178f8:	69fb      	ldr	r3, [r7, #28]
 80178fa:	781b      	ldrb	r3, [r3, #0]
 80178fc:	f003 030f 	and.w	r3, r3, #15
 8017900:	b2db      	uxtb	r3, r3
 8017902:	009b      	lsls	r3, r3, #2
 8017904:	b2db      	uxtb	r3, r3
 8017906:	461a      	mov	r2, r3
 8017908:	4b2a      	ldr	r3, [pc, #168]	@ (80179b4 <ip4_input+0x27c>)
 801790a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801790c:	8a7b      	ldrh	r3, [r7, #18]
 801790e:	4619      	mov	r1, r3
 8017910:	6878      	ldr	r0, [r7, #4]
 8017912:	f7f6 f9ad 	bl	800dc70 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017916:	69fb      	ldr	r3, [r7, #28]
 8017918:	7a5b      	ldrb	r3, [r3, #9]
 801791a:	2b11      	cmp	r3, #17
 801791c:	d006      	beq.n	801792c <ip4_input+0x1f4>
 801791e:	2b11      	cmp	r3, #17
 8017920:	dc13      	bgt.n	801794a <ip4_input+0x212>
 8017922:	2b01      	cmp	r3, #1
 8017924:	d00c      	beq.n	8017940 <ip4_input+0x208>
 8017926:	2b06      	cmp	r3, #6
 8017928:	d005      	beq.n	8017936 <ip4_input+0x1fe>
 801792a:	e00e      	b.n	801794a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801792c:	6839      	ldr	r1, [r7, #0]
 801792e:	6878      	ldr	r0, [r7, #4]
 8017930:	f7fc f8be 	bl	8013ab0 <udp_input>
        break;
 8017934:	e026      	b.n	8017984 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017936:	6839      	ldr	r1, [r7, #0]
 8017938:	6878      	ldr	r0, [r7, #4]
 801793a:	f7f8 f879 	bl	800fa30 <tcp_input>
        break;
 801793e:	e021      	b.n	8017984 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017940:	6839      	ldr	r1, [r7, #0]
 8017942:	6878      	ldr	r0, [r7, #4]
 8017944:	f7ff fcaa 	bl	801729c <icmp_input>
        break;
 8017948:	e01c      	b.n	8017984 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801794a:	4b1a      	ldr	r3, [pc, #104]	@ (80179b4 <ip4_input+0x27c>)
 801794c:	695b      	ldr	r3, [r3, #20]
 801794e:	69b9      	ldr	r1, [r7, #24]
 8017950:	4618      	mov	r0, r3
 8017952:	f000 f90b 	bl	8017b6c <ip4_addr_isbroadcast_u32>
 8017956:	4603      	mov	r3, r0
 8017958:	2b00      	cmp	r3, #0
 801795a:	d10f      	bne.n	801797c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801795c:	4b15      	ldr	r3, [pc, #84]	@ (80179b4 <ip4_input+0x27c>)
 801795e:	695b      	ldr	r3, [r3, #20]
 8017960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017964:	2be0      	cmp	r3, #224	@ 0xe0
 8017966:	d009      	beq.n	801797c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017968:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801796c:	4619      	mov	r1, r3
 801796e:	6878      	ldr	r0, [r7, #4]
 8017970:	f7f6 f9e7 	bl	800dd42 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017974:	2102      	movs	r1, #2
 8017976:	6878      	ldr	r0, [r7, #4]
 8017978:	f7ff fda6 	bl	80174c8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801797c:	6878      	ldr	r0, [r7, #4]
 801797e:	f7f6 f9f3 	bl	800dd68 <pbuf_free>
        break;
 8017982:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017984:	4b0b      	ldr	r3, [pc, #44]	@ (80179b4 <ip4_input+0x27c>)
 8017986:	2200      	movs	r2, #0
 8017988:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801798a:	4b0a      	ldr	r3, [pc, #40]	@ (80179b4 <ip4_input+0x27c>)
 801798c:	2200      	movs	r2, #0
 801798e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017990:	4b08      	ldr	r3, [pc, #32]	@ (80179b4 <ip4_input+0x27c>)
 8017992:	2200      	movs	r2, #0
 8017994:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017996:	4b07      	ldr	r3, [pc, #28]	@ (80179b4 <ip4_input+0x27c>)
 8017998:	2200      	movs	r2, #0
 801799a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801799c:	4b05      	ldr	r3, [pc, #20]	@ (80179b4 <ip4_input+0x27c>)
 801799e:	2200      	movs	r2, #0
 80179a0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80179a2:	4b04      	ldr	r3, [pc, #16]	@ (80179b4 <ip4_input+0x27c>)
 80179a4:	2200      	movs	r2, #0
 80179a6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80179a8:	2300      	movs	r3, #0
}
 80179aa:	4618      	mov	r0, r3
 80179ac:	3720      	adds	r7, #32
 80179ae:	46bd      	mov	sp, r7
 80179b0:	bd80      	pop	{r7, pc}
 80179b2:	bf00      	nop
 80179b4:	200035ac 	.word	0x200035ac
 80179b8:	2000a2f8 	.word	0x2000a2f8

080179bc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b08a      	sub	sp, #40	@ 0x28
 80179c0:	af04      	add	r7, sp, #16
 80179c2:	60f8      	str	r0, [r7, #12]
 80179c4:	60b9      	str	r1, [r7, #8]
 80179c6:	607a      	str	r2, [r7, #4]
 80179c8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80179ca:	68bb      	ldr	r3, [r7, #8]
 80179cc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d009      	beq.n	80179e8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80179d4:	68bb      	ldr	r3, [r7, #8]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d003      	beq.n	80179e2 <ip4_output_if+0x26>
 80179da:	68bb      	ldr	r3, [r7, #8]
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d102      	bne.n	80179e8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80179e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179e4:	3304      	adds	r3, #4
 80179e6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80179e8:	78fa      	ldrb	r2, [r7, #3]
 80179ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179ec:	9302      	str	r3, [sp, #8]
 80179ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80179f2:	9301      	str	r3, [sp, #4]
 80179f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80179f8:	9300      	str	r3, [sp, #0]
 80179fa:	4613      	mov	r3, r2
 80179fc:	687a      	ldr	r2, [r7, #4]
 80179fe:	6979      	ldr	r1, [r7, #20]
 8017a00:	68f8      	ldr	r0, [r7, #12]
 8017a02:	f000 f805 	bl	8017a10 <ip4_output_if_src>
 8017a06:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017a08:	4618      	mov	r0, r3
 8017a0a:	3718      	adds	r7, #24
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	bd80      	pop	{r7, pc}

08017a10 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b088      	sub	sp, #32
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	60f8      	str	r0, [r7, #12]
 8017a18:	60b9      	str	r1, [r7, #8]
 8017a1a:	607a      	str	r2, [r7, #4]
 8017a1c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	7b9b      	ldrb	r3, [r3, #14]
 8017a22:	2b01      	cmp	r3, #1
 8017a24:	d006      	beq.n	8017a34 <ip4_output_if_src+0x24>
 8017a26:	4b4b      	ldr	r3, [pc, #300]	@ (8017b54 <ip4_output_if_src+0x144>)
 8017a28:	f240 3276 	movw	r2, #886	@ 0x376
 8017a2c:	494a      	ldr	r1, [pc, #296]	@ (8017b58 <ip4_output_if_src+0x148>)
 8017a2e:	484b      	ldr	r0, [pc, #300]	@ (8017b5c <ip4_output_if_src+0x14c>)
 8017a30:	f001 f978 	bl	8018d24 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d060      	beq.n	8017afc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017a3a:	2314      	movs	r3, #20
 8017a3c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017a3e:	2114      	movs	r1, #20
 8017a40:	68f8      	ldr	r0, [r7, #12]
 8017a42:	f7f6 f905 	bl	800dc50 <pbuf_add_header>
 8017a46:	4603      	mov	r3, r0
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d002      	beq.n	8017a52 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017a4c:	f06f 0301 	mvn.w	r3, #1
 8017a50:	e07c      	b.n	8017b4c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	685b      	ldr	r3, [r3, #4]
 8017a56:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	895b      	ldrh	r3, [r3, #10]
 8017a5c:	2b13      	cmp	r3, #19
 8017a5e:	d806      	bhi.n	8017a6e <ip4_output_if_src+0x5e>
 8017a60:	4b3c      	ldr	r3, [pc, #240]	@ (8017b54 <ip4_output_if_src+0x144>)
 8017a62:	f240 32aa 	movw	r2, #938	@ 0x3aa
 8017a66:	493e      	ldr	r1, [pc, #248]	@ (8017b60 <ip4_output_if_src+0x150>)
 8017a68:	483c      	ldr	r0, [pc, #240]	@ (8017b5c <ip4_output_if_src+0x14c>)
 8017a6a:	f001 f95b 	bl	8018d24 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017a6e:	69fb      	ldr	r3, [r7, #28]
 8017a70:	78fa      	ldrb	r2, [r7, #3]
 8017a72:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017a74:	69fb      	ldr	r3, [r7, #28]
 8017a76:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017a7a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	681a      	ldr	r2, [r3, #0]
 8017a80:	69fb      	ldr	r3, [r7, #28]
 8017a82:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017a84:	8b7b      	ldrh	r3, [r7, #26]
 8017a86:	089b      	lsrs	r3, r3, #2
 8017a88:	b29b      	uxth	r3, r3
 8017a8a:	b2db      	uxtb	r3, r3
 8017a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a90:	b2da      	uxtb	r2, r3
 8017a92:	69fb      	ldr	r3, [r7, #28]
 8017a94:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017a96:	69fb      	ldr	r3, [r7, #28]
 8017a98:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017a9c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	891b      	ldrh	r3, [r3, #8]
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f7f4 fdf4 	bl	800c690 <lwip_htons>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	461a      	mov	r2, r3
 8017aac:	69fb      	ldr	r3, [r7, #28]
 8017aae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017ab0:	69fb      	ldr	r3, [r7, #28]
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	719a      	strb	r2, [r3, #6]
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017aba:	4b2a      	ldr	r3, [pc, #168]	@ (8017b64 <ip4_output_if_src+0x154>)
 8017abc:	881b      	ldrh	r3, [r3, #0]
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f7f4 fde6 	bl	800c690 <lwip_htons>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	461a      	mov	r2, r3
 8017ac8:	69fb      	ldr	r3, [r7, #28]
 8017aca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017acc:	4b25      	ldr	r3, [pc, #148]	@ (8017b64 <ip4_output_if_src+0x154>)
 8017ace:	881b      	ldrh	r3, [r3, #0]
 8017ad0:	3301      	adds	r3, #1
 8017ad2:	b29a      	uxth	r2, r3
 8017ad4:	4b23      	ldr	r3, [pc, #140]	@ (8017b64 <ip4_output_if_src+0x154>)
 8017ad6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017ad8:	68bb      	ldr	r3, [r7, #8]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d104      	bne.n	8017ae8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017ade:	4b22      	ldr	r3, [pc, #136]	@ (8017b68 <ip4_output_if_src+0x158>)
 8017ae0:	681a      	ldr	r2, [r3, #0]
 8017ae2:	69fb      	ldr	r3, [r7, #28]
 8017ae4:	60da      	str	r2, [r3, #12]
 8017ae6:	e003      	b.n	8017af0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017ae8:	68bb      	ldr	r3, [r7, #8]
 8017aea:	681a      	ldr	r2, [r3, #0]
 8017aec:	69fb      	ldr	r3, [r7, #28]
 8017aee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017af0:	69fb      	ldr	r3, [r7, #28]
 8017af2:	2200      	movs	r2, #0
 8017af4:	729a      	strb	r2, [r3, #10]
 8017af6:	2200      	movs	r2, #0
 8017af8:	72da      	strb	r2, [r3, #11]
 8017afa:	e00f      	b.n	8017b1c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	895b      	ldrh	r3, [r3, #10]
 8017b00:	2b13      	cmp	r3, #19
 8017b02:	d802      	bhi.n	8017b0a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017b04:	f06f 0301 	mvn.w	r3, #1
 8017b08:	e020      	b.n	8017b4c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	685b      	ldr	r3, [r3, #4]
 8017b0e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017b10:	69fb      	ldr	r3, [r7, #28]
 8017b12:	691b      	ldr	r3, [r3, #16]
 8017b14:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017b16:	f107 0314 	add.w	r3, r7, #20
 8017b1a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b1e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d00c      	beq.n	8017b3e <ip4_output_if_src+0x12e>
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	891a      	ldrh	r2, [r3, #8]
 8017b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8017b2c:	429a      	cmp	r2, r3
 8017b2e:	d906      	bls.n	8017b3e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017b30:	687a      	ldr	r2, [r7, #4]
 8017b32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017b34:	68f8      	ldr	r0, [r7, #12]
 8017b36:	f000 fde3 	bl	8018700 <ip4_frag>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	e006      	b.n	8017b4c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b40:	695b      	ldr	r3, [r3, #20]
 8017b42:	687a      	ldr	r2, [r7, #4]
 8017b44:	68f9      	ldr	r1, [r7, #12]
 8017b46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017b48:	4798      	blx	r3
 8017b4a:	4603      	mov	r3, r0
}
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	3720      	adds	r7, #32
 8017b50:	46bd      	mov	sp, r7
 8017b52:	bd80      	pop	{r7, pc}
 8017b54:	0801d01c 	.word	0x0801d01c
 8017b58:	0801d034 	.word	0x0801d034
 8017b5c:	0801d040 	.word	0x0801d040
 8017b60:	0801d068 	.word	0x0801d068
 8017b64:	2000a48a 	.word	0x2000a48a
 8017b68:	0801d41c 	.word	0x0801d41c

08017b6c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017b6c:	b480      	push	{r7}
 8017b6e:	b085      	sub	sp, #20
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	6078      	str	r0, [r7, #4]
 8017b74:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b80:	d002      	beq.n	8017b88 <ip4_addr_isbroadcast_u32+0x1c>
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d101      	bne.n	8017b8c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017b88:	2301      	movs	r3, #1
 8017b8a:	e02a      	b.n	8017be2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017b8c:	683b      	ldr	r3, [r7, #0]
 8017b8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8017b92:	f003 0302 	and.w	r3, r3, #2
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d101      	bne.n	8017b9e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	e021      	b.n	8017be2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017b9e:	683b      	ldr	r3, [r7, #0]
 8017ba0:	3304      	adds	r3, #4
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	687a      	ldr	r2, [r7, #4]
 8017ba6:	429a      	cmp	r2, r3
 8017ba8:	d101      	bne.n	8017bae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017baa:	2300      	movs	r3, #0
 8017bac:	e019      	b.n	8017be2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_net_eq(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017bae:	68fa      	ldr	r2, [r7, #12]
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	3304      	adds	r3, #4
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	405a      	eors	r2, r3
 8017bb8:	683b      	ldr	r3, [r7, #0]
 8017bba:	3308      	adds	r3, #8
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	4013      	ands	r3, r2
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d10d      	bne.n	8017be0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017bc4:	683b      	ldr	r3, [r7, #0]
 8017bc6:	3308      	adds	r3, #8
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	43da      	mvns	r2, r3
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017bd0:	683b      	ldr	r3, [r7, #0]
 8017bd2:	3308      	adds	r3, #8
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017bd8:	429a      	cmp	r2, r3
 8017bda:	d101      	bne.n	8017be0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017bdc:	2301      	movs	r3, #1
 8017bde:	e000      	b.n	8017be2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017be0:	2300      	movs	r3, #0
  }
}
 8017be2:	4618      	mov	r0, r3
 8017be4:	3714      	adds	r7, #20
 8017be6:	46bd      	mov	sp, r7
 8017be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bec:	4770      	bx	lr
	...

08017bf0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b082      	sub	sp, #8
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8017bf8:	2210      	movs	r2, #16
 8017bfa:	4904      	ldr	r1, [pc, #16]	@ (8017c0c <ip4addr_ntoa+0x1c>)
 8017bfc:	6878      	ldr	r0, [r7, #4]
 8017bfe:	f000 f807 	bl	8017c10 <ip4addr_ntoa_r>
 8017c02:	4603      	mov	r3, r0
}
 8017c04:	4618      	mov	r0, r3
 8017c06:	3708      	adds	r7, #8
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	bd80      	pop	{r7, pc}
 8017c0c:	2000a48c 	.word	0x2000a48c

08017c10 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8017c10:	b480      	push	{r7}
 8017c12:	b08d      	sub	sp, #52	@ 0x34
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	60f8      	str	r0, [r7, #12]
 8017c18:	60b9      	str	r1, [r7, #8]
 8017c1a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8017c26:	68bb      	ldr	r3, [r7, #8]
 8017c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8017c2a:	f107 0318 	add.w	r3, r7, #24
 8017c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8017c30:	2300      	movs	r3, #0
 8017c32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017c36:	e058      	b.n	8017cea <ip4addr_ntoa_r+0xda>
    i = 0;
 8017c38:	2300      	movs	r3, #0
 8017c3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8017c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c40:	781a      	ldrb	r2, [r3, #0]
 8017c42:	4b32      	ldr	r3, [pc, #200]	@ (8017d0c <ip4addr_ntoa_r+0xfc>)
 8017c44:	fba3 1302 	umull	r1, r3, r3, r2
 8017c48:	08d9      	lsrs	r1, r3, #3
 8017c4a:	460b      	mov	r3, r1
 8017c4c:	009b      	lsls	r3, r3, #2
 8017c4e:	440b      	add	r3, r1
 8017c50:	005b      	lsls	r3, r3, #1
 8017c52:	1ad3      	subs	r3, r2, r3
 8017c54:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8017c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c58:	781b      	ldrb	r3, [r3, #0]
 8017c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8017d0c <ip4addr_ntoa_r+0xfc>)
 8017c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8017c60:	08db      	lsrs	r3, r3, #3
 8017c62:	b2da      	uxtb	r2, r3
 8017c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c66:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8017c68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017c6c:	1c5a      	adds	r2, r3, #1
 8017c6e:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8017c72:	4619      	mov	r1, r3
 8017c74:	7ffb      	ldrb	r3, [r7, #31]
 8017c76:	3330      	adds	r3, #48	@ 0x30
 8017c78:	b2da      	uxtb	r2, r3
 8017c7a:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8017c7e:	443b      	add	r3, r7
 8017c80:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8017c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c86:	781b      	ldrb	r3, [r3, #0]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d1d8      	bne.n	8017c3e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8017c8c:	e011      	b.n	8017cb2 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8017c8e:	6a3b      	ldr	r3, [r7, #32]
 8017c90:	1c5a      	adds	r2, r3, #1
 8017c92:	623a      	str	r2, [r7, #32]
 8017c94:	687a      	ldr	r2, [r7, #4]
 8017c96:	429a      	cmp	r2, r3
 8017c98:	dc01      	bgt.n	8017c9e <ip4addr_ntoa_r+0x8e>
        return NULL;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	e030      	b.n	8017d00 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8017c9e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8017ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ca4:	1c59      	adds	r1, r3, #1
 8017ca6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8017ca8:	3230      	adds	r2, #48	@ 0x30
 8017caa:	443a      	add	r2, r7
 8017cac:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8017cb0:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8017cb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017cb6:	1e5a      	subs	r2, r3, #1
 8017cb8:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d1e6      	bne.n	8017c8e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8017cc0:	6a3b      	ldr	r3, [r7, #32]
 8017cc2:	1c5a      	adds	r2, r3, #1
 8017cc4:	623a      	str	r2, [r7, #32]
 8017cc6:	687a      	ldr	r2, [r7, #4]
 8017cc8:	429a      	cmp	r2, r3
 8017cca:	dc01      	bgt.n	8017cd0 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8017ccc:	2300      	movs	r3, #0
 8017cce:	e017      	b.n	8017d00 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8017cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cd2:	1c5a      	adds	r2, r3, #1
 8017cd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8017cd6:	222e      	movs	r2, #46	@ 0x2e
 8017cd8:	701a      	strb	r2, [r3, #0]
    ap++;
 8017cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cdc:	3301      	adds	r3, #1
 8017cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8017ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ce4:	3301      	adds	r3, #1
 8017ce6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017cea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017cee:	2b03      	cmp	r3, #3
 8017cf0:	d9a2      	bls.n	8017c38 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8017cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cf4:	3b01      	subs	r3, #1
 8017cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	701a      	strb	r2, [r3, #0]
  return buf;
 8017cfe:	68bb      	ldr	r3, [r7, #8]
}
 8017d00:	4618      	mov	r0, r3
 8017d02:	3734      	adds	r7, #52	@ 0x34
 8017d04:	46bd      	mov	sp, r7
 8017d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0a:	4770      	bx	lr
 8017d0c:	cccccccd 	.word	0xcccccccd

08017d10 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b084      	sub	sp, #16
 8017d14:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017d16:	2300      	movs	r3, #0
 8017d18:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017d1a:	4b12      	ldr	r3, [pc, #72]	@ (8017d64 <ip_reass_tmr+0x54>)
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017d20:	e018      	b.n	8017d54 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	7fdb      	ldrb	r3, [r3, #31]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d00b      	beq.n	8017d42 <ip_reass_tmr+0x32>
      r->timer--;
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	7fdb      	ldrb	r3, [r3, #31]
 8017d2e:	3b01      	subs	r3, #1
 8017d30:	b2da      	uxtb	r2, r3
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	60fb      	str	r3, [r7, #12]
 8017d40:	e008      	b.n	8017d54 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017d4c:	68b9      	ldr	r1, [r7, #8]
 8017d4e:	6878      	ldr	r0, [r7, #4]
 8017d50:	f000 f80a 	bl	8017d68 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d1e3      	bne.n	8017d22 <ip_reass_tmr+0x12>
    }
  }
}
 8017d5a:	bf00      	nop
 8017d5c:	bf00      	nop
 8017d5e:	3710      	adds	r7, #16
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd80      	pop	{r7, pc}
 8017d64:	2000a49c 	.word	0x2000a49c

08017d68 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b088      	sub	sp, #32
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	6078      	str	r0, [r7, #4]
 8017d70:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017d72:	2300      	movs	r3, #0
 8017d74:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017d76:	683a      	ldr	r2, [r7, #0]
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	429a      	cmp	r2, r3
 8017d7c:	d105      	bne.n	8017d8a <ip_reass_free_complete_datagram+0x22>
 8017d7e:	4b45      	ldr	r3, [pc, #276]	@ (8017e94 <ip_reass_free_complete_datagram+0x12c>)
 8017d80:	22ab      	movs	r2, #171	@ 0xab
 8017d82:	4945      	ldr	r1, [pc, #276]	@ (8017e98 <ip_reass_free_complete_datagram+0x130>)
 8017d84:	4845      	ldr	r0, [pc, #276]	@ (8017e9c <ip_reass_free_complete_datagram+0x134>)
 8017d86:	f000 ffcd 	bl	8018d24 <iprintf>
  if (prev != NULL) {
 8017d8a:	683b      	ldr	r3, [r7, #0]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d00a      	beq.n	8017da6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017d90:	683b      	ldr	r3, [r7, #0]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	687a      	ldr	r2, [r7, #4]
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d005      	beq.n	8017da6 <ip_reass_free_complete_datagram+0x3e>
 8017d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8017e94 <ip_reass_free_complete_datagram+0x12c>)
 8017d9c:	22ad      	movs	r2, #173	@ 0xad
 8017d9e:	4940      	ldr	r1, [pc, #256]	@ (8017ea0 <ip_reass_free_complete_datagram+0x138>)
 8017da0:	483e      	ldr	r0, [pc, #248]	@ (8017e9c <ip_reass_free_complete_datagram+0x134>)
 8017da2:	f000 ffbf 	bl	8018d24 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	685b      	ldr	r3, [r3, #4]
 8017daa:	685b      	ldr	r3, [r3, #4]
 8017dac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017dae:	697b      	ldr	r3, [r7, #20]
 8017db0:	889b      	ldrh	r3, [r3, #4]
 8017db2:	b29b      	uxth	r3, r3
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d12a      	bne.n	8017e0e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	685b      	ldr	r3, [r3, #4]
 8017dbc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017dbe:	697b      	ldr	r3, [r7, #20]
 8017dc0:	681a      	ldr	r2, [r3, #0]
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017dc6:	69bb      	ldr	r3, [r7, #24]
 8017dc8:	6858      	ldr	r0, [r3, #4]
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	3308      	adds	r3, #8
 8017dce:	2214      	movs	r2, #20
 8017dd0:	4619      	mov	r1, r3
 8017dd2:	f001 f9ca 	bl	801916a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017dd6:	2101      	movs	r1, #1
 8017dd8:	69b8      	ldr	r0, [r7, #24]
 8017dda:	f7ff fb85 	bl	80174e8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017dde:	69b8      	ldr	r0, [r7, #24]
 8017de0:	f7f6 f84a 	bl	800de78 <pbuf_clen>
 8017de4:	4603      	mov	r3, r0
 8017de6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017de8:	8bfa      	ldrh	r2, [r7, #30]
 8017dea:	8a7b      	ldrh	r3, [r7, #18]
 8017dec:	4413      	add	r3, r2
 8017dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017df2:	db05      	blt.n	8017e00 <ip_reass_free_complete_datagram+0x98>
 8017df4:	4b27      	ldr	r3, [pc, #156]	@ (8017e94 <ip_reass_free_complete_datagram+0x12c>)
 8017df6:	22bc      	movs	r2, #188	@ 0xbc
 8017df8:	492a      	ldr	r1, [pc, #168]	@ (8017ea4 <ip_reass_free_complete_datagram+0x13c>)
 8017dfa:	4828      	ldr	r0, [pc, #160]	@ (8017e9c <ip_reass_free_complete_datagram+0x134>)
 8017dfc:	f000 ff92 	bl	8018d24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017e00:	8bfa      	ldrh	r2, [r7, #30]
 8017e02:	8a7b      	ldrh	r3, [r7, #18]
 8017e04:	4413      	add	r3, r2
 8017e06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017e08:	69b8      	ldr	r0, [r7, #24]
 8017e0a:	f7f5 ffad 	bl	800dd68 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	685b      	ldr	r3, [r3, #4]
 8017e12:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017e14:	e01f      	b.n	8017e56 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017e16:	69bb      	ldr	r3, [r7, #24]
 8017e18:	685b      	ldr	r3, [r3, #4]
 8017e1a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017e1c:	69bb      	ldr	r3, [r7, #24]
 8017e1e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017e20:	697b      	ldr	r3, [r7, #20]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017e26:	68f8      	ldr	r0, [r7, #12]
 8017e28:	f7f6 f826 	bl	800de78 <pbuf_clen>
 8017e2c:	4603      	mov	r3, r0
 8017e2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017e30:	8bfa      	ldrh	r2, [r7, #30]
 8017e32:	8a7b      	ldrh	r3, [r7, #18]
 8017e34:	4413      	add	r3, r2
 8017e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017e3a:	db05      	blt.n	8017e48 <ip_reass_free_complete_datagram+0xe0>
 8017e3c:	4b15      	ldr	r3, [pc, #84]	@ (8017e94 <ip_reass_free_complete_datagram+0x12c>)
 8017e3e:	22cc      	movs	r2, #204	@ 0xcc
 8017e40:	4918      	ldr	r1, [pc, #96]	@ (8017ea4 <ip_reass_free_complete_datagram+0x13c>)
 8017e42:	4816      	ldr	r0, [pc, #88]	@ (8017e9c <ip_reass_free_complete_datagram+0x134>)
 8017e44:	f000 ff6e 	bl	8018d24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017e48:	8bfa      	ldrh	r2, [r7, #30]
 8017e4a:	8a7b      	ldrh	r3, [r7, #18]
 8017e4c:	4413      	add	r3, r2
 8017e4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017e50:	68f8      	ldr	r0, [r7, #12]
 8017e52:	f7f5 ff89 	bl	800dd68 <pbuf_free>
  while (p != NULL) {
 8017e56:	69bb      	ldr	r3, [r7, #24]
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d1dc      	bne.n	8017e16 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017e5c:	6839      	ldr	r1, [r7, #0]
 8017e5e:	6878      	ldr	r0, [r7, #4]
 8017e60:	f000 f8c2 	bl	8017fe8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017e64:	4b10      	ldr	r3, [pc, #64]	@ (8017ea8 <ip_reass_free_complete_datagram+0x140>)
 8017e66:	881b      	ldrh	r3, [r3, #0]
 8017e68:	8bfa      	ldrh	r2, [r7, #30]
 8017e6a:	429a      	cmp	r2, r3
 8017e6c:	d905      	bls.n	8017e7a <ip_reass_free_complete_datagram+0x112>
 8017e6e:	4b09      	ldr	r3, [pc, #36]	@ (8017e94 <ip_reass_free_complete_datagram+0x12c>)
 8017e70:	22d2      	movs	r2, #210	@ 0xd2
 8017e72:	490e      	ldr	r1, [pc, #56]	@ (8017eac <ip_reass_free_complete_datagram+0x144>)
 8017e74:	4809      	ldr	r0, [pc, #36]	@ (8017e9c <ip_reass_free_complete_datagram+0x134>)
 8017e76:	f000 ff55 	bl	8018d24 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8017ea8 <ip_reass_free_complete_datagram+0x140>)
 8017e7c:	881a      	ldrh	r2, [r3, #0]
 8017e7e:	8bfb      	ldrh	r3, [r7, #30]
 8017e80:	1ad3      	subs	r3, r2, r3
 8017e82:	b29a      	uxth	r2, r3
 8017e84:	4b08      	ldr	r3, [pc, #32]	@ (8017ea8 <ip_reass_free_complete_datagram+0x140>)
 8017e86:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017e88:	8bfb      	ldrh	r3, [r7, #30]
}
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	3720      	adds	r7, #32
 8017e8e:	46bd      	mov	sp, r7
 8017e90:	bd80      	pop	{r7, pc}
 8017e92:	bf00      	nop
 8017e94:	0801d098 	.word	0x0801d098
 8017e98:	0801d0b4 	.word	0x0801d0b4
 8017e9c:	0801d0c0 	.word	0x0801d0c0
 8017ea0:	0801d0e8 	.word	0x0801d0e8
 8017ea4:	0801d0fc 	.word	0x0801d0fc
 8017ea8:	2000a4a0 	.word	0x2000a4a0
 8017eac:	0801d11c 	.word	0x0801d11c

08017eb0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b08a      	sub	sp, #40	@ 0x28
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	6078      	str	r0, [r7, #4]
 8017eb8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017eba:	2300      	movs	r3, #0
 8017ebc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017eca:	2300      	movs	r3, #0
 8017ecc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017ece:	4b28      	ldr	r3, [pc, #160]	@ (8017f70 <ip_reass_remove_oldest_datagram+0xc0>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017ed4:	e030      	b.n	8017f38 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ed8:	695a      	ldr	r2, [r3, #20]
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	68db      	ldr	r3, [r3, #12]
 8017ede:	429a      	cmp	r2, r3
 8017ee0:	d10c      	bne.n	8017efc <ip_reass_remove_oldest_datagram+0x4c>
 8017ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ee4:	699a      	ldr	r2, [r3, #24]
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	691b      	ldr	r3, [r3, #16]
 8017eea:	429a      	cmp	r2, r3
 8017eec:	d106      	bne.n	8017efc <ip_reass_remove_oldest_datagram+0x4c>
 8017eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ef0:	899a      	ldrh	r2, [r3, #12]
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	889b      	ldrh	r3, [r3, #4]
 8017ef6:	b29b      	uxth	r3, r3
 8017ef8:	429a      	cmp	r2, r3
 8017efa:	d014      	beq.n	8017f26 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017efc:	693b      	ldr	r3, [r7, #16]
 8017efe:	3301      	adds	r3, #1
 8017f00:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017f02:	6a3b      	ldr	r3, [r7, #32]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d104      	bne.n	8017f12 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f0a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017f0c:	69fb      	ldr	r3, [r7, #28]
 8017f0e:	61bb      	str	r3, [r7, #24]
 8017f10:	e009      	b.n	8017f26 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f14:	7fda      	ldrb	r2, [r3, #31]
 8017f16:	6a3b      	ldr	r3, [r7, #32]
 8017f18:	7fdb      	ldrb	r3, [r3, #31]
 8017f1a:	429a      	cmp	r2, r3
 8017f1c:	d803      	bhi.n	8017f26 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f20:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017f22:	69fb      	ldr	r3, [r7, #28]
 8017f24:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d001      	beq.n	8017f32 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f30:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d1cb      	bne.n	8017ed6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017f3e:	6a3b      	ldr	r3, [r7, #32]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d008      	beq.n	8017f56 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017f44:	69b9      	ldr	r1, [r7, #24]
 8017f46:	6a38      	ldr	r0, [r7, #32]
 8017f48:	f7ff ff0e 	bl	8017d68 <ip_reass_free_complete_datagram>
 8017f4c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017f4e:	697a      	ldr	r2, [r7, #20]
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	4413      	add	r3, r2
 8017f54:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017f56:	697a      	ldr	r2, [r7, #20]
 8017f58:	683b      	ldr	r3, [r7, #0]
 8017f5a:	429a      	cmp	r2, r3
 8017f5c:	da02      	bge.n	8017f64 <ip_reass_remove_oldest_datagram+0xb4>
 8017f5e:	693b      	ldr	r3, [r7, #16]
 8017f60:	2b01      	cmp	r3, #1
 8017f62:	dcac      	bgt.n	8017ebe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017f64:	697b      	ldr	r3, [r7, #20]
}
 8017f66:	4618      	mov	r0, r3
 8017f68:	3728      	adds	r7, #40	@ 0x28
 8017f6a:	46bd      	mov	sp, r7
 8017f6c:	bd80      	pop	{r7, pc}
 8017f6e:	bf00      	nop
 8017f70:	2000a49c 	.word	0x2000a49c

08017f74 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b084      	sub	sp, #16
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
 8017f7c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017f7e:	2004      	movs	r0, #4
 8017f80:	f7f5 f86a 	bl	800d058 <memp_malloc>
 8017f84:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d110      	bne.n	8017fae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017f8c:	6839      	ldr	r1, [r7, #0]
 8017f8e:	6878      	ldr	r0, [r7, #4]
 8017f90:	f7ff ff8e 	bl	8017eb0 <ip_reass_remove_oldest_datagram>
 8017f94:	4602      	mov	r2, r0
 8017f96:	683b      	ldr	r3, [r7, #0]
 8017f98:	4293      	cmp	r3, r2
 8017f9a:	dc03      	bgt.n	8017fa4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017f9c:	2004      	movs	r0, #4
 8017f9e:	f7f5 f85b 	bl	800d058 <memp_malloc>
 8017fa2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d101      	bne.n	8017fae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017faa:	2300      	movs	r3, #0
 8017fac:	e016      	b.n	8017fdc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017fae:	2220      	movs	r2, #32
 8017fb0:	2100      	movs	r1, #0
 8017fb2:	68f8      	ldr	r0, [r7, #12]
 8017fb4:	f001 f85e 	bl	8019074 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	220f      	movs	r2, #15
 8017fbc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017fbe:	4b09      	ldr	r3, [pc, #36]	@ (8017fe4 <ip_reass_enqueue_new_datagram+0x70>)
 8017fc0:	681a      	ldr	r2, [r3, #0]
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017fc6:	4a07      	ldr	r2, [pc, #28]	@ (8017fe4 <ip_reass_enqueue_new_datagram+0x70>)
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	3308      	adds	r3, #8
 8017fd0:	2214      	movs	r2, #20
 8017fd2:	6879      	ldr	r1, [r7, #4]
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	f001 f8c8 	bl	801916a <memcpy>
  return ipr;
 8017fda:	68fb      	ldr	r3, [r7, #12]
}
 8017fdc:	4618      	mov	r0, r3
 8017fde:	3710      	adds	r7, #16
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	bd80      	pop	{r7, pc}
 8017fe4:	2000a49c 	.word	0x2000a49c

08017fe8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b082      	sub	sp, #8
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	6078      	str	r0, [r7, #4]
 8017ff0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017ff2:	4b10      	ldr	r3, [pc, #64]	@ (8018034 <ip_reass_dequeue_datagram+0x4c>)
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	687a      	ldr	r2, [r7, #4]
 8017ff8:	429a      	cmp	r2, r3
 8017ffa:	d104      	bne.n	8018006 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	4a0c      	ldr	r2, [pc, #48]	@ (8018034 <ip_reass_dequeue_datagram+0x4c>)
 8018002:	6013      	str	r3, [r2, #0]
 8018004:	e00d      	b.n	8018022 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018006:	683b      	ldr	r3, [r7, #0]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d106      	bne.n	801801a <ip_reass_dequeue_datagram+0x32>
 801800c:	4b0a      	ldr	r3, [pc, #40]	@ (8018038 <ip_reass_dequeue_datagram+0x50>)
 801800e:	f240 1245 	movw	r2, #325	@ 0x145
 8018012:	490a      	ldr	r1, [pc, #40]	@ (801803c <ip_reass_dequeue_datagram+0x54>)
 8018014:	480a      	ldr	r0, [pc, #40]	@ (8018040 <ip_reass_dequeue_datagram+0x58>)
 8018016:	f000 fe85 	bl	8018d24 <iprintf>
    prev->next = ipr->next;
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	681a      	ldr	r2, [r3, #0]
 801801e:	683b      	ldr	r3, [r7, #0]
 8018020:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018022:	6879      	ldr	r1, [r7, #4]
 8018024:	2004      	movs	r0, #4
 8018026:	f7f5 f87b 	bl	800d120 <memp_free>
}
 801802a:	bf00      	nop
 801802c:	3708      	adds	r7, #8
 801802e:	46bd      	mov	sp, r7
 8018030:	bd80      	pop	{r7, pc}
 8018032:	bf00      	nop
 8018034:	2000a49c 	.word	0x2000a49c
 8018038:	0801d098 	.word	0x0801d098
 801803c:	0801d140 	.word	0x0801d140
 8018040:	0801d0c0 	.word	0x0801d0c0

08018044 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b08c      	sub	sp, #48	@ 0x30
 8018048:	af00      	add	r7, sp, #0
 801804a:	60f8      	str	r0, [r7, #12]
 801804c:	60b9      	str	r1, [r7, #8]
 801804e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018050:	2300      	movs	r3, #0
 8018052:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018054:	2301      	movs	r3, #1
 8018056:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	685b      	ldr	r3, [r3, #4]
 801805c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801805e:	69fb      	ldr	r3, [r7, #28]
 8018060:	885b      	ldrh	r3, [r3, #2]
 8018062:	b29b      	uxth	r3, r3
 8018064:	4618      	mov	r0, r3
 8018066:	f7f4 fb13 	bl	800c690 <lwip_htons>
 801806a:	4603      	mov	r3, r0
 801806c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801806e:	69fb      	ldr	r3, [r7, #28]
 8018070:	781b      	ldrb	r3, [r3, #0]
 8018072:	f003 030f 	and.w	r3, r3, #15
 8018076:	b2db      	uxtb	r3, r3
 8018078:	009b      	lsls	r3, r3, #2
 801807a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801807c:	7e7b      	ldrb	r3, [r7, #25]
 801807e:	b29b      	uxth	r3, r3
 8018080:	8b7a      	ldrh	r2, [r7, #26]
 8018082:	429a      	cmp	r2, r3
 8018084:	d202      	bcs.n	801808c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018086:	f04f 33ff 	mov.w	r3, #4294967295
 801808a:	e135      	b.n	80182f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801808c:	7e7b      	ldrb	r3, [r7, #25]
 801808e:	b29b      	uxth	r3, r3
 8018090:	8b7a      	ldrh	r2, [r7, #26]
 8018092:	1ad3      	subs	r3, r2, r3
 8018094:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018096:	69fb      	ldr	r3, [r7, #28]
 8018098:	88db      	ldrh	r3, [r3, #6]
 801809a:	b29b      	uxth	r3, r3
 801809c:	4618      	mov	r0, r3
 801809e:	f7f4 faf7 	bl	800c690 <lwip_htons>
 80180a2:	4603      	mov	r3, r0
 80180a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80180a8:	b29b      	uxth	r3, r3
 80180aa:	00db      	lsls	r3, r3, #3
 80180ac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80180ae:	68bb      	ldr	r3, [r7, #8]
 80180b0:	685b      	ldr	r3, [r3, #4]
 80180b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80180b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180b6:	2200      	movs	r2, #0
 80180b8:	701a      	strb	r2, [r3, #0]
 80180ba:	2200      	movs	r2, #0
 80180bc:	705a      	strb	r2, [r3, #1]
 80180be:	2200      	movs	r2, #0
 80180c0:	709a      	strb	r2, [r3, #2]
 80180c2:	2200      	movs	r2, #0
 80180c4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80180c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180c8:	8afa      	ldrh	r2, [r7, #22]
 80180ca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80180cc:	8afa      	ldrh	r2, [r7, #22]
 80180ce:	8b7b      	ldrh	r3, [r7, #26]
 80180d0:	4413      	add	r3, r2
 80180d2:	b29a      	uxth	r2, r3
 80180d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180d6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80180d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180da:	88db      	ldrh	r3, [r3, #6]
 80180dc:	b29b      	uxth	r3, r3
 80180de:	8afa      	ldrh	r2, [r7, #22]
 80180e0:	429a      	cmp	r2, r3
 80180e2:	d902      	bls.n	80180ea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80180e4:	f04f 33ff 	mov.w	r3, #4294967295
 80180e8:	e106      	b.n	80182f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	685b      	ldr	r3, [r3, #4]
 80180ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80180f0:	e068      	b.n	80181c4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80180f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180f4:	685b      	ldr	r3, [r3, #4]
 80180f6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80180f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180fa:	889b      	ldrh	r3, [r3, #4]
 80180fc:	b29a      	uxth	r2, r3
 80180fe:	693b      	ldr	r3, [r7, #16]
 8018100:	889b      	ldrh	r3, [r3, #4]
 8018102:	b29b      	uxth	r3, r3
 8018104:	429a      	cmp	r2, r3
 8018106:	d235      	bcs.n	8018174 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801810a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801810c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801810e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018110:	2b00      	cmp	r3, #0
 8018112:	d020      	beq.n	8018156 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018116:	889b      	ldrh	r3, [r3, #4]
 8018118:	b29a      	uxth	r2, r3
 801811a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801811c:	88db      	ldrh	r3, [r3, #6]
 801811e:	b29b      	uxth	r3, r3
 8018120:	429a      	cmp	r2, r3
 8018122:	d307      	bcc.n	8018134 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018126:	88db      	ldrh	r3, [r3, #6]
 8018128:	b29a      	uxth	r2, r3
 801812a:	693b      	ldr	r3, [r7, #16]
 801812c:	889b      	ldrh	r3, [r3, #4]
 801812e:	b29b      	uxth	r3, r3
 8018130:	429a      	cmp	r2, r3
 8018132:	d902      	bls.n	801813a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018134:	f04f 33ff 	mov.w	r3, #4294967295
 8018138:	e0de      	b.n	80182f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801813a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801813c:	68ba      	ldr	r2, [r7, #8]
 801813e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018142:	88db      	ldrh	r3, [r3, #6]
 8018144:	b29a      	uxth	r2, r3
 8018146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018148:	889b      	ldrh	r3, [r3, #4]
 801814a:	b29b      	uxth	r3, r3
 801814c:	429a      	cmp	r2, r3
 801814e:	d03d      	beq.n	80181cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018150:	2300      	movs	r3, #0
 8018152:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018154:	e03a      	b.n	80181cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018158:	88db      	ldrh	r3, [r3, #6]
 801815a:	b29a      	uxth	r2, r3
 801815c:	693b      	ldr	r3, [r7, #16]
 801815e:	889b      	ldrh	r3, [r3, #4]
 8018160:	b29b      	uxth	r3, r3
 8018162:	429a      	cmp	r2, r3
 8018164:	d902      	bls.n	801816c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018166:	f04f 33ff 	mov.w	r3, #4294967295
 801816a:	e0c5      	b.n	80182f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	68ba      	ldr	r2, [r7, #8]
 8018170:	605a      	str	r2, [r3, #4]
      break;
 8018172:	e02b      	b.n	80181cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018176:	889b      	ldrh	r3, [r3, #4]
 8018178:	b29a      	uxth	r2, r3
 801817a:	693b      	ldr	r3, [r7, #16]
 801817c:	889b      	ldrh	r3, [r3, #4]
 801817e:	b29b      	uxth	r3, r3
 8018180:	429a      	cmp	r2, r3
 8018182:	d102      	bne.n	801818a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018184:	f04f 33ff 	mov.w	r3, #4294967295
 8018188:	e0b6      	b.n	80182f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801818a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801818c:	889b      	ldrh	r3, [r3, #4]
 801818e:	b29a      	uxth	r2, r3
 8018190:	693b      	ldr	r3, [r7, #16]
 8018192:	88db      	ldrh	r3, [r3, #6]
 8018194:	b29b      	uxth	r3, r3
 8018196:	429a      	cmp	r2, r3
 8018198:	d202      	bcs.n	80181a0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801819a:	f04f 33ff 	mov.w	r3, #4294967295
 801819e:	e0ab      	b.n	80182f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80181a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d009      	beq.n	80181ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80181a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181a8:	88db      	ldrh	r3, [r3, #6]
 80181aa:	b29a      	uxth	r2, r3
 80181ac:	693b      	ldr	r3, [r7, #16]
 80181ae:	889b      	ldrh	r3, [r3, #4]
 80181b0:	b29b      	uxth	r3, r3
 80181b2:	429a      	cmp	r2, r3
 80181b4:	d001      	beq.n	80181ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80181b6:	2300      	movs	r3, #0
 80181b8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80181ba:	693b      	ldr	r3, [r7, #16]
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80181c0:	693b      	ldr	r3, [r7, #16]
 80181c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80181c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d193      	bne.n	80180f2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80181ca:	e000      	b.n	80181ce <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80181cc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80181ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d12d      	bne.n	8018230 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80181d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d01c      	beq.n	8018214 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80181da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181dc:	88db      	ldrh	r3, [r3, #6]
 80181de:	b29a      	uxth	r2, r3
 80181e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181e2:	889b      	ldrh	r3, [r3, #4]
 80181e4:	b29b      	uxth	r3, r3
 80181e6:	429a      	cmp	r2, r3
 80181e8:	d906      	bls.n	80181f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80181ea:	4b45      	ldr	r3, [pc, #276]	@ (8018300 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80181ec:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80181f0:	4944      	ldr	r1, [pc, #272]	@ (8018304 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80181f2:	4845      	ldr	r0, [pc, #276]	@ (8018308 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80181f4:	f000 fd96 	bl	8018d24 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80181f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181fa:	68ba      	ldr	r2, [r7, #8]
 80181fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80181fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018200:	88db      	ldrh	r3, [r3, #6]
 8018202:	b29a      	uxth	r2, r3
 8018204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018206:	889b      	ldrh	r3, [r3, #4]
 8018208:	b29b      	uxth	r3, r3
 801820a:	429a      	cmp	r2, r3
 801820c:	d010      	beq.n	8018230 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801820e:	2300      	movs	r3, #0
 8018210:	623b      	str	r3, [r7, #32]
 8018212:	e00d      	b.n	8018230 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	685b      	ldr	r3, [r3, #4]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d006      	beq.n	801822a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801821c:	4b38      	ldr	r3, [pc, #224]	@ (8018300 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801821e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8018222:	493a      	ldr	r1, [pc, #232]	@ (801830c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018224:	4838      	ldr	r0, [pc, #224]	@ (8018308 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018226:	f000 fd7d 	bl	8018d24 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	68ba      	ldr	r2, [r7, #8]
 801822e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d105      	bne.n	8018242 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018236:	68fb      	ldr	r3, [r7, #12]
 8018238:	7f9b      	ldrb	r3, [r3, #30]
 801823a:	f003 0301 	and.w	r3, r3, #1
 801823e:	2b00      	cmp	r3, #0
 8018240:	d059      	beq.n	80182f6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018242:	6a3b      	ldr	r3, [r7, #32]
 8018244:	2b00      	cmp	r3, #0
 8018246:	d04f      	beq.n	80182e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	685b      	ldr	r3, [r3, #4]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d006      	beq.n	801825e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	685b      	ldr	r3, [r3, #4]
 8018254:	685b      	ldr	r3, [r3, #4]
 8018256:	889b      	ldrh	r3, [r3, #4]
 8018258:	b29b      	uxth	r3, r3
 801825a:	2b00      	cmp	r3, #0
 801825c:	d002      	beq.n	8018264 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801825e:	2300      	movs	r3, #0
 8018260:	623b      	str	r3, [r7, #32]
 8018262:	e041      	b.n	80182e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018266:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8018268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801826e:	e012      	b.n	8018296 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018272:	685b      	ldr	r3, [r3, #4]
 8018274:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8018276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018278:	88db      	ldrh	r3, [r3, #6]
 801827a:	b29a      	uxth	r2, r3
 801827c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801827e:	889b      	ldrh	r3, [r3, #4]
 8018280:	b29b      	uxth	r3, r3
 8018282:	429a      	cmp	r2, r3
 8018284:	d002      	beq.n	801828c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018286:	2300      	movs	r3, #0
 8018288:	623b      	str	r3, [r7, #32]
            break;
 801828a:	e007      	b.n	801829c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801828c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801828e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8018290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018298:	2b00      	cmp	r3, #0
 801829a:	d1e9      	bne.n	8018270 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801829c:	6a3b      	ldr	r3, [r7, #32]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d022      	beq.n	80182e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	685b      	ldr	r3, [r3, #4]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d106      	bne.n	80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80182aa:	4b15      	ldr	r3, [pc, #84]	@ (8018300 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80182ac:	f240 12df 	movw	r2, #479	@ 0x1df
 80182b0:	4917      	ldr	r1, [pc, #92]	@ (8018310 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80182b2:	4815      	ldr	r0, [pc, #84]	@ (8018308 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80182b4:	f000 fd36 	bl	8018d24 <iprintf>
          LWIP_ASSERT("sanity check",
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	685b      	ldr	r3, [r3, #4]
 80182bc:	685b      	ldr	r3, [r3, #4]
 80182be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80182c0:	429a      	cmp	r2, r3
 80182c2:	d106      	bne.n	80182d2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80182c4:	4b0e      	ldr	r3, [pc, #56]	@ (8018300 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80182c6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80182ca:	4911      	ldr	r1, [pc, #68]	@ (8018310 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80182cc:	480e      	ldr	r0, [pc, #56]	@ (8018308 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80182ce:	f000 fd29 	bl	8018d24 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80182d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d006      	beq.n	80182e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80182da:	4b09      	ldr	r3, [pc, #36]	@ (8018300 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80182dc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80182e0:	490c      	ldr	r1, [pc, #48]	@ (8018314 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80182e2:	4809      	ldr	r0, [pc, #36]	@ (8018308 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80182e4:	f000 fd1e 	bl	8018d24 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80182e8:	6a3b      	ldr	r3, [r7, #32]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	bf14      	ite	ne
 80182ee:	2301      	movne	r3, #1
 80182f0:	2300      	moveq	r3, #0
 80182f2:	b2db      	uxtb	r3, r3
 80182f4:	e000      	b.n	80182f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80182f6:	2300      	movs	r3, #0
}
 80182f8:	4618      	mov	r0, r3
 80182fa:	3730      	adds	r7, #48	@ 0x30
 80182fc:	46bd      	mov	sp, r7
 80182fe:	bd80      	pop	{r7, pc}
 8018300:	0801d098 	.word	0x0801d098
 8018304:	0801d15c 	.word	0x0801d15c
 8018308:	0801d0c0 	.word	0x0801d0c0
 801830c:	0801d17c 	.word	0x0801d17c
 8018310:	0801d1b4 	.word	0x0801d1b4
 8018314:	0801d1c4 	.word	0x0801d1c4

08018318 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018318:	b580      	push	{r7, lr}
 801831a:	b08e      	sub	sp, #56	@ 0x38
 801831c:	af00      	add	r7, sp, #0
 801831e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	685b      	ldr	r3, [r3, #4]
 8018324:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018328:	781b      	ldrb	r3, [r3, #0]
 801832a:	f003 030f 	and.w	r3, r3, #15
 801832e:	b2db      	uxtb	r3, r3
 8018330:	009b      	lsls	r3, r3, #2
 8018332:	b2db      	uxtb	r3, r3
 8018334:	2b14      	cmp	r3, #20
 8018336:	f040 8171 	bne.w	801861c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801833a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801833c:	88db      	ldrh	r3, [r3, #6]
 801833e:	b29b      	uxth	r3, r3
 8018340:	4618      	mov	r0, r3
 8018342:	f7f4 f9a5 	bl	800c690 <lwip_htons>
 8018346:	4603      	mov	r3, r0
 8018348:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801834c:	b29b      	uxth	r3, r3
 801834e:	00db      	lsls	r3, r3, #3
 8018350:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018354:	885b      	ldrh	r3, [r3, #2]
 8018356:	b29b      	uxth	r3, r3
 8018358:	4618      	mov	r0, r3
 801835a:	f7f4 f999 	bl	800c690 <lwip_htons>
 801835e:	4603      	mov	r3, r0
 8018360:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018364:	781b      	ldrb	r3, [r3, #0]
 8018366:	f003 030f 	and.w	r3, r3, #15
 801836a:	b2db      	uxtb	r3, r3
 801836c:	009b      	lsls	r3, r3, #2
 801836e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8018372:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018376:	b29b      	uxth	r3, r3
 8018378:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801837a:	429a      	cmp	r2, r3
 801837c:	f0c0 8150 	bcc.w	8018620 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018380:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018384:	b29b      	uxth	r3, r3
 8018386:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018388:	1ad3      	subs	r3, r2, r3
 801838a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801838c:	6878      	ldr	r0, [r7, #4]
 801838e:	f7f5 fd73 	bl	800de78 <pbuf_clen>
 8018392:	4603      	mov	r3, r0
 8018394:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018396:	4b8c      	ldr	r3, [pc, #560]	@ (80185c8 <ip4_reass+0x2b0>)
 8018398:	881b      	ldrh	r3, [r3, #0]
 801839a:	461a      	mov	r2, r3
 801839c:	8c3b      	ldrh	r3, [r7, #32]
 801839e:	4413      	add	r3, r2
 80183a0:	2b0a      	cmp	r3, #10
 80183a2:	dd10      	ble.n	80183c6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80183a4:	8c3b      	ldrh	r3, [r7, #32]
 80183a6:	4619      	mov	r1, r3
 80183a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80183aa:	f7ff fd81 	bl	8017eb0 <ip_reass_remove_oldest_datagram>
 80183ae:	4603      	mov	r3, r0
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	f000 8137 	beq.w	8018624 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80183b6:	4b84      	ldr	r3, [pc, #528]	@ (80185c8 <ip4_reass+0x2b0>)
 80183b8:	881b      	ldrh	r3, [r3, #0]
 80183ba:	461a      	mov	r2, r3
 80183bc:	8c3b      	ldrh	r3, [r7, #32]
 80183be:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80183c0:	2b0a      	cmp	r3, #10
 80183c2:	f300 812f 	bgt.w	8018624 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80183c6:	4b81      	ldr	r3, [pc, #516]	@ (80185cc <ip4_reass+0x2b4>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80183cc:	e015      	b.n	80183fa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80183ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183d0:	695a      	ldr	r2, [r3, #20]
 80183d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183d4:	68db      	ldr	r3, [r3, #12]
 80183d6:	429a      	cmp	r2, r3
 80183d8:	d10c      	bne.n	80183f4 <ip4_reass+0xdc>
 80183da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183dc:	699a      	ldr	r2, [r3, #24]
 80183de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183e0:	691b      	ldr	r3, [r3, #16]
 80183e2:	429a      	cmp	r2, r3
 80183e4:	d106      	bne.n	80183f4 <ip4_reass+0xdc>
 80183e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183e8:	899a      	ldrh	r2, [r3, #12]
 80183ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183ec:	889b      	ldrh	r3, [r3, #4]
 80183ee:	b29b      	uxth	r3, r3
 80183f0:	429a      	cmp	r2, r3
 80183f2:	d006      	beq.n	8018402 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80183f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80183fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d1e6      	bne.n	80183ce <ip4_reass+0xb6>
 8018400:	e000      	b.n	8018404 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018402:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018406:	2b00      	cmp	r3, #0
 8018408:	d109      	bne.n	801841e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801840a:	8c3b      	ldrh	r3, [r7, #32]
 801840c:	4619      	mov	r1, r3
 801840e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018410:	f7ff fdb0 	bl	8017f74 <ip_reass_enqueue_new_datagram>
 8018414:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018418:	2b00      	cmp	r3, #0
 801841a:	d11c      	bne.n	8018456 <ip4_reass+0x13e>
      goto nullreturn;
 801841c:	e105      	b.n	801862a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801841e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018420:	88db      	ldrh	r3, [r3, #6]
 8018422:	b29b      	uxth	r3, r3
 8018424:	4618      	mov	r0, r3
 8018426:	f7f4 f933 	bl	800c690 <lwip_htons>
 801842a:	4603      	mov	r3, r0
 801842c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018430:	2b00      	cmp	r3, #0
 8018432:	d110      	bne.n	8018456 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018436:	89db      	ldrh	r3, [r3, #14]
 8018438:	4618      	mov	r0, r3
 801843a:	f7f4 f929 	bl	800c690 <lwip_htons>
 801843e:	4603      	mov	r3, r0
 8018440:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018444:	2b00      	cmp	r3, #0
 8018446:	d006      	beq.n	8018456 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801844a:	3308      	adds	r3, #8
 801844c:	2214      	movs	r2, #20
 801844e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018450:	4618      	mov	r0, r3
 8018452:	f000 fe8a 	bl	801916a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018458:	88db      	ldrh	r3, [r3, #6]
 801845a:	b29b      	uxth	r3, r3
 801845c:	f003 0320 	and.w	r3, r3, #32
 8018460:	2b00      	cmp	r3, #0
 8018462:	bf0c      	ite	eq
 8018464:	2301      	moveq	r3, #1
 8018466:	2300      	movne	r3, #0
 8018468:	b2db      	uxtb	r3, r3
 801846a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801846c:	69fb      	ldr	r3, [r7, #28]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d00e      	beq.n	8018490 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018472:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018474:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018476:	4413      	add	r3, r2
 8018478:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801847a:	8b7a      	ldrh	r2, [r7, #26]
 801847c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801847e:	429a      	cmp	r2, r3
 8018480:	f0c0 80a0 	bcc.w	80185c4 <ip4_reass+0x2ac>
 8018484:	8b7b      	ldrh	r3, [r7, #26]
 8018486:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801848a:	4293      	cmp	r3, r2
 801848c:	f200 809a 	bhi.w	80185c4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018490:	69fa      	ldr	r2, [r7, #28]
 8018492:	6879      	ldr	r1, [r7, #4]
 8018494:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018496:	f7ff fdd5 	bl	8018044 <ip_reass_chain_frag_into_datagram_and_validate>
 801849a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801849c:	697b      	ldr	r3, [r7, #20]
 801849e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184a2:	f000 809b 	beq.w	80185dc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80184a6:	4b48      	ldr	r3, [pc, #288]	@ (80185c8 <ip4_reass+0x2b0>)
 80184a8:	881a      	ldrh	r2, [r3, #0]
 80184aa:	8c3b      	ldrh	r3, [r7, #32]
 80184ac:	4413      	add	r3, r2
 80184ae:	b29a      	uxth	r2, r3
 80184b0:	4b45      	ldr	r3, [pc, #276]	@ (80185c8 <ip4_reass+0x2b0>)
 80184b2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80184b4:	69fb      	ldr	r3, [r7, #28]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d00d      	beq.n	80184d6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80184ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80184bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80184be:	4413      	add	r3, r2
 80184c0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80184c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184c4:	8a7a      	ldrh	r2, [r7, #18]
 80184c6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80184c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184ca:	7f9b      	ldrb	r3, [r3, #30]
 80184cc:	f043 0301 	orr.w	r3, r3, #1
 80184d0:	b2da      	uxtb	r2, r3
 80184d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184d4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80184d6:	697b      	ldr	r3, [r7, #20]
 80184d8:	2b01      	cmp	r3, #1
 80184da:	d171      	bne.n	80185c0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80184dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184de:	8b9b      	ldrh	r3, [r3, #28]
 80184e0:	3314      	adds	r3, #20
 80184e2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80184e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184e6:	685b      	ldr	r3, [r3, #4]
 80184e8:	685b      	ldr	r3, [r3, #4]
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80184ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184f0:	685b      	ldr	r3, [r3, #4]
 80184f2:	685b      	ldr	r3, [r3, #4]
 80184f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80184f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184f8:	3308      	adds	r3, #8
 80184fa:	2214      	movs	r2, #20
 80184fc:	4619      	mov	r1, r3
 80184fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018500:	f000 fe33 	bl	801916a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018504:	8a3b      	ldrh	r3, [r7, #16]
 8018506:	4618      	mov	r0, r3
 8018508:	f7f4 f8c2 	bl	800c690 <lwip_htons>
 801850c:	4603      	mov	r3, r0
 801850e:	461a      	mov	r2, r3
 8018510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018512:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018516:	2200      	movs	r2, #0
 8018518:	719a      	strb	r2, [r3, #6]
 801851a:	2200      	movs	r2, #0
 801851c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801851e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018520:	2200      	movs	r2, #0
 8018522:	729a      	strb	r2, [r3, #10]
 8018524:	2200      	movs	r2, #0
 8018526:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801852a:	685b      	ldr	r3, [r3, #4]
 801852c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801852e:	e00d      	b.n	801854c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018532:	685b      	ldr	r3, [r3, #4]
 8018534:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018536:	2114      	movs	r1, #20
 8018538:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801853a:	f7f5 fb99 	bl	800dc70 <pbuf_remove_header>
      pbuf_cat(p, r);
 801853e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018540:	6878      	ldr	r0, [r7, #4]
 8018542:	f7f5 fcd3 	bl	800deec <pbuf_cat>
      r = iprh->next_pbuf;
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801854c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801854e:	2b00      	cmp	r3, #0
 8018550:	d1ee      	bne.n	8018530 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018552:	4b1e      	ldr	r3, [pc, #120]	@ (80185cc <ip4_reass+0x2b4>)
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018558:	429a      	cmp	r2, r3
 801855a:	d102      	bne.n	8018562 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801855c:	2300      	movs	r3, #0
 801855e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018560:	e010      	b.n	8018584 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018562:	4b1a      	ldr	r3, [pc, #104]	@ (80185cc <ip4_reass+0x2b4>)
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018568:	e007      	b.n	801857a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801856a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018570:	429a      	cmp	r2, r3
 8018572:	d006      	beq.n	8018582 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801857a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801857c:	2b00      	cmp	r3, #0
 801857e:	d1f4      	bne.n	801856a <ip4_reass+0x252>
 8018580:	e000      	b.n	8018584 <ip4_reass+0x26c>
          break;
 8018582:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018586:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018588:	f7ff fd2e 	bl	8017fe8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801858c:	6878      	ldr	r0, [r7, #4]
 801858e:	f7f5 fc73 	bl	800de78 <pbuf_clen>
 8018592:	4603      	mov	r3, r0
 8018594:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018596:	4b0c      	ldr	r3, [pc, #48]	@ (80185c8 <ip4_reass+0x2b0>)
 8018598:	881b      	ldrh	r3, [r3, #0]
 801859a:	8c3a      	ldrh	r2, [r7, #32]
 801859c:	429a      	cmp	r2, r3
 801859e:	d906      	bls.n	80185ae <ip4_reass+0x296>
 80185a0:	4b0b      	ldr	r3, [pc, #44]	@ (80185d0 <ip4_reass+0x2b8>)
 80185a2:	f240 229b 	movw	r2, #667	@ 0x29b
 80185a6:	490b      	ldr	r1, [pc, #44]	@ (80185d4 <ip4_reass+0x2bc>)
 80185a8:	480b      	ldr	r0, [pc, #44]	@ (80185d8 <ip4_reass+0x2c0>)
 80185aa:	f000 fbbb 	bl	8018d24 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80185ae:	4b06      	ldr	r3, [pc, #24]	@ (80185c8 <ip4_reass+0x2b0>)
 80185b0:	881a      	ldrh	r2, [r3, #0]
 80185b2:	8c3b      	ldrh	r3, [r7, #32]
 80185b4:	1ad3      	subs	r3, r2, r3
 80185b6:	b29a      	uxth	r2, r3
 80185b8:	4b03      	ldr	r3, [pc, #12]	@ (80185c8 <ip4_reass+0x2b0>)
 80185ba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	e038      	b.n	8018632 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80185c0:	2300      	movs	r3, #0
 80185c2:	e036      	b.n	8018632 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80185c4:	bf00      	nop
 80185c6:	e00a      	b.n	80185de <ip4_reass+0x2c6>
 80185c8:	2000a4a0 	.word	0x2000a4a0
 80185cc:	2000a49c 	.word	0x2000a49c
 80185d0:	0801d098 	.word	0x0801d098
 80185d4:	0801d1e8 	.word	0x0801d1e8
 80185d8:	0801d0c0 	.word	0x0801d0c0
    goto nullreturn_ipr;
 80185dc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80185de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d106      	bne.n	80185f2 <ip4_reass+0x2da>
 80185e4:	4b15      	ldr	r3, [pc, #84]	@ (801863c <ip4_reass+0x324>)
 80185e6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80185ea:	4915      	ldr	r1, [pc, #84]	@ (8018640 <ip4_reass+0x328>)
 80185ec:	4815      	ldr	r0, [pc, #84]	@ (8018644 <ip4_reass+0x32c>)
 80185ee:	f000 fb99 	bl	8018d24 <iprintf>
  if (ipr->p == NULL) {
 80185f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185f4:	685b      	ldr	r3, [r3, #4]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d116      	bne.n	8018628 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80185fa:	4b13      	ldr	r3, [pc, #76]	@ (8018648 <ip4_reass+0x330>)
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018600:	429a      	cmp	r2, r3
 8018602:	d006      	beq.n	8018612 <ip4_reass+0x2fa>
 8018604:	4b0d      	ldr	r3, [pc, #52]	@ (801863c <ip4_reass+0x324>)
 8018606:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801860a:	4910      	ldr	r1, [pc, #64]	@ (801864c <ip4_reass+0x334>)
 801860c:	480d      	ldr	r0, [pc, #52]	@ (8018644 <ip4_reass+0x32c>)
 801860e:	f000 fb89 	bl	8018d24 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018612:	2100      	movs	r1, #0
 8018614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018616:	f7ff fce7 	bl	8017fe8 <ip_reass_dequeue_datagram>
 801861a:	e006      	b.n	801862a <ip4_reass+0x312>
    goto nullreturn;
 801861c:	bf00      	nop
 801861e:	e004      	b.n	801862a <ip4_reass+0x312>
    goto nullreturn;
 8018620:	bf00      	nop
 8018622:	e002      	b.n	801862a <ip4_reass+0x312>
      goto nullreturn;
 8018624:	bf00      	nop
 8018626:	e000      	b.n	801862a <ip4_reass+0x312>
  }

nullreturn:
 8018628:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801862a:	6878      	ldr	r0, [r7, #4]
 801862c:	f7f5 fb9c 	bl	800dd68 <pbuf_free>
  return NULL;
 8018630:	2300      	movs	r3, #0
}
 8018632:	4618      	mov	r0, r3
 8018634:	3738      	adds	r7, #56	@ 0x38
 8018636:	46bd      	mov	sp, r7
 8018638:	bd80      	pop	{r7, pc}
 801863a:	bf00      	nop
 801863c:	0801d098 	.word	0x0801d098
 8018640:	0801d204 	.word	0x0801d204
 8018644:	0801d0c0 	.word	0x0801d0c0
 8018648:	2000a49c 	.word	0x2000a49c
 801864c:	0801d210 	.word	0x0801d210

08018650 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018650:	b580      	push	{r7, lr}
 8018652:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018654:	2005      	movs	r0, #5
 8018656:	f7f4 fcff 	bl	800d058 <memp_malloc>
 801865a:	4603      	mov	r3, r0
}
 801865c:	4618      	mov	r0, r3
 801865e:	bd80      	pop	{r7, pc}

08018660 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b082      	sub	sp, #8
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d106      	bne.n	801867c <ip_frag_free_pbuf_custom_ref+0x1c>
 801866e:	4b07      	ldr	r3, [pc, #28]	@ (801868c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018670:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018674:	4906      	ldr	r1, [pc, #24]	@ (8018690 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018676:	4807      	ldr	r0, [pc, #28]	@ (8018694 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018678:	f000 fb54 	bl	8018d24 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801867c:	6879      	ldr	r1, [r7, #4]
 801867e:	2005      	movs	r0, #5
 8018680:	f7f4 fd4e 	bl	800d120 <memp_free>
}
 8018684:	bf00      	nop
 8018686:	3708      	adds	r7, #8
 8018688:	46bd      	mov	sp, r7
 801868a:	bd80      	pop	{r7, pc}
 801868c:	0801d098 	.word	0x0801d098
 8018690:	0801d230 	.word	0x0801d230
 8018694:	0801d0c0 	.word	0x0801d0c0

08018698 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018698:	b580      	push	{r7, lr}
 801869a:	b084      	sub	sp, #16
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d106      	bne.n	80186b8 <ipfrag_free_pbuf_custom+0x20>
 80186aa:	4b11      	ldr	r3, [pc, #68]	@ (80186f0 <ipfrag_free_pbuf_custom+0x58>)
 80186ac:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80186b0:	4910      	ldr	r1, [pc, #64]	@ (80186f4 <ipfrag_free_pbuf_custom+0x5c>)
 80186b2:	4811      	ldr	r0, [pc, #68]	@ (80186f8 <ipfrag_free_pbuf_custom+0x60>)
 80186b4:	f000 fb36 	bl	8018d24 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80186b8:	68fa      	ldr	r2, [r7, #12]
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	429a      	cmp	r2, r3
 80186be:	d006      	beq.n	80186ce <ipfrag_free_pbuf_custom+0x36>
 80186c0:	4b0b      	ldr	r3, [pc, #44]	@ (80186f0 <ipfrag_free_pbuf_custom+0x58>)
 80186c2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80186c6:	490d      	ldr	r1, [pc, #52]	@ (80186fc <ipfrag_free_pbuf_custom+0x64>)
 80186c8:	480b      	ldr	r0, [pc, #44]	@ (80186f8 <ipfrag_free_pbuf_custom+0x60>)
 80186ca:	f000 fb2b 	bl	8018d24 <iprintf>
  if (pcr->original != NULL) {
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	695b      	ldr	r3, [r3, #20]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d004      	beq.n	80186e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	695b      	ldr	r3, [r3, #20]
 80186da:	4618      	mov	r0, r3
 80186dc:	f7f5 fb44 	bl	800dd68 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80186e0:	68f8      	ldr	r0, [r7, #12]
 80186e2:	f7ff ffbd 	bl	8018660 <ip_frag_free_pbuf_custom_ref>
}
 80186e6:	bf00      	nop
 80186e8:	3710      	adds	r7, #16
 80186ea:	46bd      	mov	sp, r7
 80186ec:	bd80      	pop	{r7, pc}
 80186ee:	bf00      	nop
 80186f0:	0801d098 	.word	0x0801d098
 80186f4:	0801d23c 	.word	0x0801d23c
 80186f8:	0801d0c0 	.word	0x0801d0c0
 80186fc:	0801d248 	.word	0x0801d248

08018700 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b094      	sub	sp, #80	@ 0x50
 8018704:	af02      	add	r7, sp, #8
 8018706:	60f8      	str	r0, [r7, #12]
 8018708:	60b9      	str	r1, [r7, #8]
 801870a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801870c:	2300      	movs	r3, #0
 801870e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018712:	68bb      	ldr	r3, [r7, #8]
 8018714:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8018716:	3b14      	subs	r3, #20
 8018718:	2b00      	cmp	r3, #0
 801871a:	da00      	bge.n	801871e <ip4_frag+0x1e>
 801871c:	3307      	adds	r3, #7
 801871e:	10db      	asrs	r3, r3, #3
 8018720:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018722:	2314      	movs	r3, #20
 8018724:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	685b      	ldr	r3, [r3, #4]
 801872a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801872c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801872e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018732:	781b      	ldrb	r3, [r3, #0]
 8018734:	f003 030f 	and.w	r3, r3, #15
 8018738:	b2db      	uxtb	r3, r3
 801873a:	009b      	lsls	r3, r3, #2
 801873c:	b2db      	uxtb	r3, r3
 801873e:	2b14      	cmp	r3, #20
 8018740:	d002      	beq.n	8018748 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018742:	f06f 0305 	mvn.w	r3, #5
 8018746:	e109      	b.n	801895c <ip4_frag+0x25c>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	895b      	ldrh	r3, [r3, #10]
 801874c:	2b13      	cmp	r3, #19
 801874e:	d802      	bhi.n	8018756 <ip4_frag+0x56>
 8018750:	f06f 0305 	mvn.w	r3, #5
 8018754:	e102      	b.n	801895c <ip4_frag+0x25c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018758:	88db      	ldrh	r3, [r3, #6]
 801875a:	b29b      	uxth	r3, r3
 801875c:	4618      	mov	r0, r3
 801875e:	f7f3 ff97 	bl	800c690 <lwip_htons>
 8018762:	4603      	mov	r3, r0
 8018764:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8018766:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801876c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018770:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018776:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	891b      	ldrh	r3, [r3, #8]
 801877c:	3b14      	subs	r3, #20
 801877e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8018782:	e0e1      	b.n	8018948 <ip4_frag+0x248>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018784:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018786:	00db      	lsls	r3, r3, #3
 8018788:	b29b      	uxth	r3, r3
 801878a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801878e:	4293      	cmp	r3, r2
 8018790:	bf28      	it	cs
 8018792:	4613      	movcs	r3, r2
 8018794:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018796:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801879a:	2114      	movs	r1, #20
 801879c:	200e      	movs	r0, #14
 801879e:	f7f4 fffd 	bl	800d79c <pbuf_alloc>
 80187a2:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80187a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	f000 80d5 	beq.w	8018956 <ip4_frag+0x256>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80187ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187ae:	895b      	ldrh	r3, [r3, #10]
 80187b0:	2b13      	cmp	r3, #19
 80187b2:	d806      	bhi.n	80187c2 <ip4_frag+0xc2>
 80187b4:	4b6b      	ldr	r3, [pc, #428]	@ (8018964 <ip4_frag+0x264>)
 80187b6:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80187ba:	496b      	ldr	r1, [pc, #428]	@ (8018968 <ip4_frag+0x268>)
 80187bc:	486b      	ldr	r0, [pc, #428]	@ (801896c <ip4_frag+0x26c>)
 80187be:	f000 fab1 	bl	8018d24 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80187c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187c4:	685b      	ldr	r3, [r3, #4]
 80187c6:	2214      	movs	r2, #20
 80187c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80187ca:	4618      	mov	r0, r3
 80187cc:	f000 fccd 	bl	801916a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80187d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187d2:	685b      	ldr	r3, [r3, #4]
 80187d4:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80187d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80187d8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80187dc:	e064      	b.n	80188a8 <ip4_frag+0x1a8>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	895a      	ldrh	r2, [r3, #10]
 80187e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80187e4:	1ad3      	subs	r3, r2, r3
 80187e6:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	895b      	ldrh	r3, [r3, #10]
 80187ec:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80187ee:	429a      	cmp	r2, r3
 80187f0:	d906      	bls.n	8018800 <ip4_frag+0x100>
 80187f2:	4b5c      	ldr	r3, [pc, #368]	@ (8018964 <ip4_frag+0x264>)
 80187f4:	f240 322d 	movw	r2, #813	@ 0x32d
 80187f8:	495d      	ldr	r1, [pc, #372]	@ (8018970 <ip4_frag+0x270>)
 80187fa:	485c      	ldr	r0, [pc, #368]	@ (801896c <ip4_frag+0x26c>)
 80187fc:	f000 fa92 	bl	8018d24 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018800:	8bfa      	ldrh	r2, [r7, #30]
 8018802:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018806:	4293      	cmp	r3, r2
 8018808:	bf28      	it	cs
 801880a:	4613      	movcs	r3, r2
 801880c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018810:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018814:	2b00      	cmp	r3, #0
 8018816:	d105      	bne.n	8018824 <ip4_frag+0x124>
        poff = 0;
 8018818:	2300      	movs	r3, #0
 801881a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	60fb      	str	r3, [r7, #12]
        continue;
 8018822:	e041      	b.n	80188a8 <ip4_frag+0x1a8>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018824:	f7ff ff14 	bl	8018650 <ip_frag_alloc_pbuf_custom_ref>
 8018828:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801882a:	69bb      	ldr	r3, [r7, #24]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d103      	bne.n	8018838 <ip4_frag+0x138>
        pbuf_free(rambuf);
 8018830:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018832:	f7f5 fa99 	bl	800dd68 <pbuf_free>
        goto memerr;
 8018836:	e08f      	b.n	8018958 <ip4_frag+0x258>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018838:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801883e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018840:	4413      	add	r3, r2
 8018842:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8018846:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801884a:	9201      	str	r2, [sp, #4]
 801884c:	9300      	str	r3, [sp, #0]
 801884e:	4603      	mov	r3, r0
 8018850:	2241      	movs	r2, #65	@ 0x41
 8018852:	2000      	movs	r0, #0
 8018854:	f7f5 f8cc 	bl	800d9f0 <pbuf_alloced_custom>
 8018858:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801885a:	697b      	ldr	r3, [r7, #20]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d106      	bne.n	801886e <ip4_frag+0x16e>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018860:	69b8      	ldr	r0, [r7, #24]
 8018862:	f7ff fefd 	bl	8018660 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018866:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018868:	f7f5 fa7e 	bl	800dd68 <pbuf_free>
        goto memerr;
 801886c:	e074      	b.n	8018958 <ip4_frag+0x258>
      }
      pbuf_ref(p);
 801886e:	68f8      	ldr	r0, [r7, #12]
 8018870:	f7f5 fb1a 	bl	800dea8 <pbuf_ref>
      pcr->original = p;
 8018874:	69bb      	ldr	r3, [r7, #24]
 8018876:	68fa      	ldr	r2, [r7, #12]
 8018878:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801887a:	69bb      	ldr	r3, [r7, #24]
 801887c:	4a3d      	ldr	r2, [pc, #244]	@ (8018974 <ip4_frag+0x274>)
 801887e:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018880:	6979      	ldr	r1, [r7, #20]
 8018882:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018884:	f7f5 fb32 	bl	800deec <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018888:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801888c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018890:	1ad3      	subs	r3, r2, r3
 8018892:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018896:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801889a:	2b00      	cmp	r3, #0
 801889c:	d004      	beq.n	80188a8 <ip4_frag+0x1a8>
        poff = 0;
 801889e:	2300      	movs	r3, #0
 80188a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80188a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d196      	bne.n	80187de <ip4_frag+0xde>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80188b0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80188b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80188b6:	4413      	add	r3, r2
 80188b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80188ba:	68bb      	ldr	r3, [r7, #8]
 80188bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80188be:	f1a3 0213 	sub.w	r2, r3, #19
 80188c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80188c6:	429a      	cmp	r2, r3
 80188c8:	bfcc      	ite	gt
 80188ca:	2301      	movgt	r3, #1
 80188cc:	2300      	movle	r3, #0
 80188ce:	b2db      	uxtb	r3, r3
 80188d0:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80188d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80188d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80188da:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80188dc:	6a3b      	ldr	r3, [r7, #32]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d002      	beq.n	80188e8 <ip4_frag+0x1e8>
 80188e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d003      	beq.n	80188f0 <ip4_frag+0x1f0>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80188e8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80188ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80188ee:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80188f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80188f2:	4618      	mov	r0, r3
 80188f4:	f7f3 fecc 	bl	800c690 <lwip_htons>
 80188f8:	4603      	mov	r3, r0
 80188fa:	461a      	mov	r2, r3
 80188fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188fe:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018900:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018902:	3314      	adds	r3, #20
 8018904:	b29b      	uxth	r3, r3
 8018906:	4618      	mov	r0, r3
 8018908:	f7f3 fec2 	bl	800c690 <lwip_htons>
 801890c:	4603      	mov	r3, r0
 801890e:	461a      	mov	r2, r3
 8018910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018912:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018916:	2200      	movs	r2, #0
 8018918:	729a      	strb	r2, [r3, #10]
 801891a:	2200      	movs	r2, #0
 801891c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801891e:	68bb      	ldr	r3, [r7, #8]
 8018920:	695b      	ldr	r3, [r3, #20]
 8018922:	687a      	ldr	r2, [r7, #4]
 8018924:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018926:	68b8      	ldr	r0, [r7, #8]
 8018928:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801892a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801892c:	f7f5 fa1c 	bl	800dd68 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018930:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018934:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018936:	1ad3      	subs	r3, r2, r3
 8018938:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801893c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018940:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018942:	4413      	add	r3, r2
 8018944:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8018948:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801894c:	2b00      	cmp	r3, #0
 801894e:	f47f af19 	bne.w	8018784 <ip4_frag+0x84>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018952:	2300      	movs	r3, #0
 8018954:	e002      	b.n	801895c <ip4_frag+0x25c>
      goto memerr;
 8018956:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018958:	f04f 33ff 	mov.w	r3, #4294967295
}
 801895c:	4618      	mov	r0, r3
 801895e:	3748      	adds	r7, #72	@ 0x48
 8018960:	46bd      	mov	sp, r7
 8018962:	bd80      	pop	{r7, pc}
 8018964:	0801d098 	.word	0x0801d098
 8018968:	0801d254 	.word	0x0801d254
 801896c:	0801d0c0 	.word	0x0801d0c0
 8018970:	0801d274 	.word	0x0801d274
 8018974:	08018699 	.word	0x08018699

08018978 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b086      	sub	sp, #24
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
 8018980:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018982:	230e      	movs	r3, #14
 8018984:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	895b      	ldrh	r3, [r3, #10]
 801898a:	2b0e      	cmp	r3, #14
 801898c:	d96e      	bls.n	8018a6c <ethernet_input+0xf4>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	685b      	ldr	r3, [r3, #4]
 8018992:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018994:	693b      	ldr	r3, [r7, #16]
 8018996:	7b1a      	ldrb	r2, [r3, #12]
 8018998:	7b5b      	ldrb	r3, [r3, #13]
 801899a:	021b      	lsls	r3, r3, #8
 801899c:	4313      	orrs	r3, r2
 801899e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (p->if_idx == NETIF_NO_INDEX) {
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	7bdb      	ldrb	r3, [r3, #15]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d106      	bne.n	80189b6 <ethernet_input+0x3e>
    p->if_idx = netif_get_index(netif);
 80189a8:	683b      	ldr	r3, [r7, #0]
 80189aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80189ae:	3301      	adds	r3, #1
 80189b0:	b2da      	uxtb	r2, r3
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	73da      	strb	r2, [r3, #15]
  }

  if (ethhdr->dest.addr[0] & 1) {
 80189b6:	693b      	ldr	r3, [r7, #16]
 80189b8:	781b      	ldrb	r3, [r3, #0]
 80189ba:	f003 0301 	and.w	r3, r3, #1
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d023      	beq.n	8018a0a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80189c2:	693b      	ldr	r3, [r7, #16]
 80189c4:	781b      	ldrb	r3, [r3, #0]
 80189c6:	2b01      	cmp	r3, #1
 80189c8:	d10f      	bne.n	80189ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80189ca:	693b      	ldr	r3, [r7, #16]
 80189cc:	785b      	ldrb	r3, [r3, #1]
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d11b      	bne.n	8018a0a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80189d2:	693b      	ldr	r3, [r7, #16]
 80189d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80189d6:	2b5e      	cmp	r3, #94	@ 0x5e
 80189d8:	d117      	bne.n	8018a0a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	7b5b      	ldrb	r3, [r3, #13]
 80189de:	f043 0310 	orr.w	r3, r3, #16
 80189e2:	b2da      	uxtb	r2, r3
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	735a      	strb	r2, [r3, #13]
 80189e8:	e00f      	b.n	8018a0a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80189ea:	693b      	ldr	r3, [r7, #16]
 80189ec:	2206      	movs	r2, #6
 80189ee:	4928      	ldr	r1, [pc, #160]	@ (8018a90 <ethernet_input+0x118>)
 80189f0:	4618      	mov	r0, r3
 80189f2:	f000 fb15 	bl	8019020 <memcmp>
 80189f6:	4603      	mov	r3, r0
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d106      	bne.n	8018a0a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	7b5b      	ldrb	r3, [r3, #13]
 8018a00:	f043 0308 	orr.w	r3, r3, #8
 8018a04:	b2da      	uxtb	r2, r3
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018a0a:	89fb      	ldrh	r3, [r7, #14]
 8018a0c:	2b08      	cmp	r3, #8
 8018a0e:	d003      	beq.n	8018a18 <ethernet_input+0xa0>
 8018a10:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8018a14:	d014      	beq.n	8018a40 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018a16:	e032      	b.n	8018a7e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018a18:	683b      	ldr	r3, [r7, #0]
 8018a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8018a1e:	f003 0308 	and.w	r3, r3, #8
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d024      	beq.n	8018a70 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018a26:	8afb      	ldrh	r3, [r7, #22]
 8018a28:	4619      	mov	r1, r3
 8018a2a:	6878      	ldr	r0, [r7, #4]
 8018a2c:	f7f5 f920 	bl	800dc70 <pbuf_remove_header>
 8018a30:	4603      	mov	r3, r0
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d11e      	bne.n	8018a74 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018a36:	6839      	ldr	r1, [r7, #0]
 8018a38:	6878      	ldr	r0, [r7, #4]
 8018a3a:	f7fe fe7d 	bl	8017738 <ip4_input>
      break;
 8018a3e:	e013      	b.n	8018a68 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018a40:	683b      	ldr	r3, [r7, #0]
 8018a42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8018a46:	f003 0308 	and.w	r3, r3, #8
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d014      	beq.n	8018a78 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018a4e:	8afb      	ldrh	r3, [r7, #22]
 8018a50:	4619      	mov	r1, r3
 8018a52:	6878      	ldr	r0, [r7, #4]
 8018a54:	f7f5 f90c 	bl	800dc70 <pbuf_remove_header>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d10e      	bne.n	8018a7c <ethernet_input+0x104>
        etharp_input(p, netif);
 8018a5e:	6839      	ldr	r1, [r7, #0]
 8018a60:	6878      	ldr	r0, [r7, #4]
 8018a62:	f7fd ff8f 	bl	8016984 <etharp_input>
      break;
 8018a66:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018a68:	2300      	movs	r3, #0
 8018a6a:	e00c      	b.n	8018a86 <ethernet_input+0x10e>
    goto free_and_return;
 8018a6c:	bf00      	nop
 8018a6e:	e006      	b.n	8018a7e <ethernet_input+0x106>
        goto free_and_return;
 8018a70:	bf00      	nop
 8018a72:	e004      	b.n	8018a7e <ethernet_input+0x106>
        goto free_and_return;
 8018a74:	bf00      	nop
 8018a76:	e002      	b.n	8018a7e <ethernet_input+0x106>
        goto free_and_return;
 8018a78:	bf00      	nop
 8018a7a:	e000      	b.n	8018a7e <ethernet_input+0x106>
        goto free_and_return;
 8018a7c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018a7e:	6878      	ldr	r0, [r7, #4]
 8018a80:	f7f5 f972 	bl	800dd68 <pbuf_free>
  return ERR_OK;
 8018a84:	2300      	movs	r3, #0
}
 8018a86:	4618      	mov	r0, r3
 8018a88:	3718      	adds	r7, #24
 8018a8a:	46bd      	mov	sp, r7
 8018a8c:	bd80      	pop	{r7, pc}
 8018a8e:	bf00      	nop
 8018a90:	0801d424 	.word	0x0801d424

08018a94 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b086      	sub	sp, #24
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	60f8      	str	r0, [r7, #12]
 8018a9c:	60b9      	str	r1, [r7, #8]
 8018a9e:	607a      	str	r2, [r7, #4]
 8018aa0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018aa2:	8c3b      	ldrh	r3, [r7, #32]
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	f7f3 fdf3 	bl	800c690 <lwip_htons>
 8018aaa:	4603      	mov	r3, r0
 8018aac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && (defined(LWIP_HOOK_VLAN_SET) || LWIP_VLAN_PCP) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018aae:	210e      	movs	r1, #14
 8018ab0:	68b8      	ldr	r0, [r7, #8]
 8018ab2:	f7f5 f8cd 	bl	800dc50 <pbuf_add_header>
 8018ab6:	4603      	mov	r3, r0
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d125      	bne.n	8018b08 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018abc:	68bb      	ldr	r3, [r7, #8]
 8018abe:	685b      	ldr	r3, [r3, #4]
 8018ac0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018ac2:	693b      	ldr	r3, [r7, #16]
 8018ac4:	8afa      	ldrh	r2, [r7, #22]
 8018ac6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018ac8:	693b      	ldr	r3, [r7, #16]
 8018aca:	2206      	movs	r2, #6
 8018acc:	6839      	ldr	r1, [r7, #0]
 8018ace:	4618      	mov	r0, r3
 8018ad0:	f000 fb4b 	bl	801916a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018ad4:	693b      	ldr	r3, [r7, #16]
 8018ad6:	3306      	adds	r3, #6
 8018ad8:	2206      	movs	r2, #6
 8018ada:	6879      	ldr	r1, [r7, #4]
 8018adc:	4618      	mov	r0, r3
 8018ade:	f000 fb44 	bl	801916a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8018ae8:	2b06      	cmp	r3, #6
 8018aea:	d006      	beq.n	8018afa <ethernet_output+0x66>
 8018aec:	4b0a      	ldr	r3, [pc, #40]	@ (8018b18 <ethernet_output+0x84>)
 8018aee:	f44f 729d 	mov.w	r2, #314	@ 0x13a
 8018af2:	490a      	ldr	r1, [pc, #40]	@ (8018b1c <ethernet_output+0x88>)
 8018af4:	480a      	ldr	r0, [pc, #40]	@ (8018b20 <ethernet_output+0x8c>)
 8018af6:	f000 f915 	bl	8018d24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	699b      	ldr	r3, [r3, #24]
 8018afe:	68b9      	ldr	r1, [r7, #8]
 8018b00:	68f8      	ldr	r0, [r7, #12]
 8018b02:	4798      	blx	r3
 8018b04:	4603      	mov	r3, r0
 8018b06:	e002      	b.n	8018b0e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018b08:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018b0a:	f06f 0301 	mvn.w	r3, #1
}
 8018b0e:	4618      	mov	r0, r3
 8018b10:	3718      	adds	r7, #24
 8018b12:	46bd      	mov	sp, r7
 8018b14:	bd80      	pop	{r7, pc}
 8018b16:	bf00      	nop
 8018b18:	0801d284 	.word	0x0801d284
 8018b1c:	0801d29c 	.word	0x0801d29c
 8018b20:	0801d2d0 	.word	0x0801d2d0

08018b24 <rand>:
 8018b24:	4b16      	ldr	r3, [pc, #88]	@ (8018b80 <rand+0x5c>)
 8018b26:	b510      	push	{r4, lr}
 8018b28:	681c      	ldr	r4, [r3, #0]
 8018b2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018b2c:	b9b3      	cbnz	r3, 8018b5c <rand+0x38>
 8018b2e:	2018      	movs	r0, #24
 8018b30:	f000 fb90 	bl	8019254 <malloc>
 8018b34:	4602      	mov	r2, r0
 8018b36:	6320      	str	r0, [r4, #48]	@ 0x30
 8018b38:	b920      	cbnz	r0, 8018b44 <rand+0x20>
 8018b3a:	4b12      	ldr	r3, [pc, #72]	@ (8018b84 <rand+0x60>)
 8018b3c:	2152      	movs	r1, #82	@ 0x52
 8018b3e:	4812      	ldr	r0, [pc, #72]	@ (8018b88 <rand+0x64>)
 8018b40:	f000 fb20 	bl	8019184 <__assert_func>
 8018b44:	4911      	ldr	r1, [pc, #68]	@ (8018b8c <rand+0x68>)
 8018b46:	4b12      	ldr	r3, [pc, #72]	@ (8018b90 <rand+0x6c>)
 8018b48:	e9c0 1300 	strd	r1, r3, [r0]
 8018b4c:	4b11      	ldr	r3, [pc, #68]	@ (8018b94 <rand+0x70>)
 8018b4e:	2100      	movs	r1, #0
 8018b50:	6083      	str	r3, [r0, #8]
 8018b52:	230b      	movs	r3, #11
 8018b54:	8183      	strh	r3, [r0, #12]
 8018b56:	2001      	movs	r0, #1
 8018b58:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018b5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018b5e:	480e      	ldr	r0, [pc, #56]	@ (8018b98 <rand+0x74>)
 8018b60:	690b      	ldr	r3, [r1, #16]
 8018b62:	694c      	ldr	r4, [r1, #20]
 8018b64:	4a0d      	ldr	r2, [pc, #52]	@ (8018b9c <rand+0x78>)
 8018b66:	4358      	muls	r0, r3
 8018b68:	fb02 0004 	mla	r0, r2, r4, r0
 8018b6c:	fba3 3202 	umull	r3, r2, r3, r2
 8018b70:	3301      	adds	r3, #1
 8018b72:	eb40 0002 	adc.w	r0, r0, r2
 8018b76:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018b7a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018b7e:	bd10      	pop	{r4, pc}
 8018b80:	20000040 	.word	0x20000040
 8018b84:	0801d432 	.word	0x0801d432
 8018b88:	0801d449 	.word	0x0801d449
 8018b8c:	abcd330e 	.word	0xabcd330e
 8018b90:	e66d1234 	.word	0xe66d1234
 8018b94:	0005deec 	.word	0x0005deec
 8018b98:	5851f42d 	.word	0x5851f42d
 8018b9c:	4c957f2d 	.word	0x4c957f2d

08018ba0 <std>:
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	b510      	push	{r4, lr}
 8018ba4:	4604      	mov	r4, r0
 8018ba6:	6083      	str	r3, [r0, #8]
 8018ba8:	8181      	strh	r1, [r0, #12]
 8018baa:	4619      	mov	r1, r3
 8018bac:	6643      	str	r3, [r0, #100]	@ 0x64
 8018bae:	81c2      	strh	r2, [r0, #14]
 8018bb0:	2208      	movs	r2, #8
 8018bb2:	6183      	str	r3, [r0, #24]
 8018bb4:	e9c0 3300 	strd	r3, r3, [r0]
 8018bb8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018bbc:	305c      	adds	r0, #92	@ 0x5c
 8018bbe:	f000 fa59 	bl	8019074 <memset>
 8018bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8018bf8 <std+0x58>)
 8018bc4:	6224      	str	r4, [r4, #32]
 8018bc6:	6263      	str	r3, [r4, #36]	@ 0x24
 8018bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8018bfc <std+0x5c>)
 8018bca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8018c00 <std+0x60>)
 8018bce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8018c04 <std+0x64>)
 8018bd2:	6323      	str	r3, [r4, #48]	@ 0x30
 8018bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8018c08 <std+0x68>)
 8018bd6:	429c      	cmp	r4, r3
 8018bd8:	d006      	beq.n	8018be8 <std+0x48>
 8018bda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018bde:	4294      	cmp	r4, r2
 8018be0:	d002      	beq.n	8018be8 <std+0x48>
 8018be2:	33d0      	adds	r3, #208	@ 0xd0
 8018be4:	429c      	cmp	r4, r3
 8018be6:	d105      	bne.n	8018bf4 <std+0x54>
 8018be8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bf0:	f000 bab8 	b.w	8019164 <__retarget_lock_init_recursive>
 8018bf4:	bd10      	pop	{r4, pc}
 8018bf6:	bf00      	nop
 8018bf8:	08018e71 	.word	0x08018e71
 8018bfc:	08018e93 	.word	0x08018e93
 8018c00:	08018ecb 	.word	0x08018ecb
 8018c04:	08018eef 	.word	0x08018eef
 8018c08:	2000a4a4 	.word	0x2000a4a4

08018c0c <stdio_exit_handler>:
 8018c0c:	4a02      	ldr	r2, [pc, #8]	@ (8018c18 <stdio_exit_handler+0xc>)
 8018c0e:	4903      	ldr	r1, [pc, #12]	@ (8018c1c <stdio_exit_handler+0x10>)
 8018c10:	4803      	ldr	r0, [pc, #12]	@ (8018c20 <stdio_exit_handler+0x14>)
 8018c12:	f000 b869 	b.w	8018ce8 <_fwalk_sglue>
 8018c16:	bf00      	nop
 8018c18:	20000034 	.word	0x20000034
 8018c1c:	08019d1d 	.word	0x08019d1d
 8018c20:	20000044 	.word	0x20000044

08018c24 <cleanup_stdio>:
 8018c24:	6841      	ldr	r1, [r0, #4]
 8018c26:	4b0c      	ldr	r3, [pc, #48]	@ (8018c58 <cleanup_stdio+0x34>)
 8018c28:	4299      	cmp	r1, r3
 8018c2a:	b510      	push	{r4, lr}
 8018c2c:	4604      	mov	r4, r0
 8018c2e:	d001      	beq.n	8018c34 <cleanup_stdio+0x10>
 8018c30:	f001 f874 	bl	8019d1c <_fflush_r>
 8018c34:	68a1      	ldr	r1, [r4, #8]
 8018c36:	4b09      	ldr	r3, [pc, #36]	@ (8018c5c <cleanup_stdio+0x38>)
 8018c38:	4299      	cmp	r1, r3
 8018c3a:	d002      	beq.n	8018c42 <cleanup_stdio+0x1e>
 8018c3c:	4620      	mov	r0, r4
 8018c3e:	f001 f86d 	bl	8019d1c <_fflush_r>
 8018c42:	68e1      	ldr	r1, [r4, #12]
 8018c44:	4b06      	ldr	r3, [pc, #24]	@ (8018c60 <cleanup_stdio+0x3c>)
 8018c46:	4299      	cmp	r1, r3
 8018c48:	d004      	beq.n	8018c54 <cleanup_stdio+0x30>
 8018c4a:	4620      	mov	r0, r4
 8018c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c50:	f001 b864 	b.w	8019d1c <_fflush_r>
 8018c54:	bd10      	pop	{r4, pc}
 8018c56:	bf00      	nop
 8018c58:	2000a4a4 	.word	0x2000a4a4
 8018c5c:	2000a50c 	.word	0x2000a50c
 8018c60:	2000a574 	.word	0x2000a574

08018c64 <global_stdio_init.part.0>:
 8018c64:	b510      	push	{r4, lr}
 8018c66:	4b0b      	ldr	r3, [pc, #44]	@ (8018c94 <global_stdio_init.part.0+0x30>)
 8018c68:	2104      	movs	r1, #4
 8018c6a:	4c0b      	ldr	r4, [pc, #44]	@ (8018c98 <global_stdio_init.part.0+0x34>)
 8018c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8018c9c <global_stdio_init.part.0+0x38>)
 8018c6e:	4620      	mov	r0, r4
 8018c70:	601a      	str	r2, [r3, #0]
 8018c72:	2200      	movs	r2, #0
 8018c74:	f7ff ff94 	bl	8018ba0 <std>
 8018c78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018c7c:	2201      	movs	r2, #1
 8018c7e:	2109      	movs	r1, #9
 8018c80:	f7ff ff8e 	bl	8018ba0 <std>
 8018c84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018c88:	2202      	movs	r2, #2
 8018c8a:	2112      	movs	r1, #18
 8018c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c90:	f7ff bf86 	b.w	8018ba0 <std>
 8018c94:	2000a5dc 	.word	0x2000a5dc
 8018c98:	2000a4a4 	.word	0x2000a4a4
 8018c9c:	08018c0d 	.word	0x08018c0d

08018ca0 <__sfp_lock_acquire>:
 8018ca0:	4801      	ldr	r0, [pc, #4]	@ (8018ca8 <__sfp_lock_acquire+0x8>)
 8018ca2:	f000 ba60 	b.w	8019166 <__retarget_lock_acquire_recursive>
 8018ca6:	bf00      	nop
 8018ca8:	2000a5e5 	.word	0x2000a5e5

08018cac <__sfp_lock_release>:
 8018cac:	4801      	ldr	r0, [pc, #4]	@ (8018cb4 <__sfp_lock_release+0x8>)
 8018cae:	f000 ba5b 	b.w	8019168 <__retarget_lock_release_recursive>
 8018cb2:	bf00      	nop
 8018cb4:	2000a5e5 	.word	0x2000a5e5

08018cb8 <__sinit>:
 8018cb8:	b510      	push	{r4, lr}
 8018cba:	4604      	mov	r4, r0
 8018cbc:	f7ff fff0 	bl	8018ca0 <__sfp_lock_acquire>
 8018cc0:	6a23      	ldr	r3, [r4, #32]
 8018cc2:	b11b      	cbz	r3, 8018ccc <__sinit+0x14>
 8018cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018cc8:	f7ff bff0 	b.w	8018cac <__sfp_lock_release>
 8018ccc:	4b04      	ldr	r3, [pc, #16]	@ (8018ce0 <__sinit+0x28>)
 8018cce:	6223      	str	r3, [r4, #32]
 8018cd0:	4b04      	ldr	r3, [pc, #16]	@ (8018ce4 <__sinit+0x2c>)
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d1f5      	bne.n	8018cc4 <__sinit+0xc>
 8018cd8:	f7ff ffc4 	bl	8018c64 <global_stdio_init.part.0>
 8018cdc:	e7f2      	b.n	8018cc4 <__sinit+0xc>
 8018cde:	bf00      	nop
 8018ce0:	08018c25 	.word	0x08018c25
 8018ce4:	2000a5dc 	.word	0x2000a5dc

08018ce8 <_fwalk_sglue>:
 8018ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cec:	4607      	mov	r7, r0
 8018cee:	4688      	mov	r8, r1
 8018cf0:	4614      	mov	r4, r2
 8018cf2:	2600      	movs	r6, #0
 8018cf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018cf8:	f1b9 0901 	subs.w	r9, r9, #1
 8018cfc:	d505      	bpl.n	8018d0a <_fwalk_sglue+0x22>
 8018cfe:	6824      	ldr	r4, [r4, #0]
 8018d00:	2c00      	cmp	r4, #0
 8018d02:	d1f7      	bne.n	8018cf4 <_fwalk_sglue+0xc>
 8018d04:	4630      	mov	r0, r6
 8018d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d0a:	89ab      	ldrh	r3, [r5, #12]
 8018d0c:	2b01      	cmp	r3, #1
 8018d0e:	d907      	bls.n	8018d20 <_fwalk_sglue+0x38>
 8018d10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018d14:	3301      	adds	r3, #1
 8018d16:	d003      	beq.n	8018d20 <_fwalk_sglue+0x38>
 8018d18:	4629      	mov	r1, r5
 8018d1a:	4638      	mov	r0, r7
 8018d1c:	47c0      	blx	r8
 8018d1e:	4306      	orrs	r6, r0
 8018d20:	3568      	adds	r5, #104	@ 0x68
 8018d22:	e7e9      	b.n	8018cf8 <_fwalk_sglue+0x10>

08018d24 <iprintf>:
 8018d24:	b40f      	push	{r0, r1, r2, r3}
 8018d26:	b507      	push	{r0, r1, r2, lr}
 8018d28:	4906      	ldr	r1, [pc, #24]	@ (8018d44 <iprintf+0x20>)
 8018d2a:	ab04      	add	r3, sp, #16
 8018d2c:	6808      	ldr	r0, [r1, #0]
 8018d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d32:	6881      	ldr	r1, [r0, #8]
 8018d34:	9301      	str	r3, [sp, #4]
 8018d36:	f000 fcc5 	bl	80196c4 <_vfiprintf_r>
 8018d3a:	b003      	add	sp, #12
 8018d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d40:	b004      	add	sp, #16
 8018d42:	4770      	bx	lr
 8018d44:	20000040 	.word	0x20000040

08018d48 <_puts_r>:
 8018d48:	6a03      	ldr	r3, [r0, #32]
 8018d4a:	b570      	push	{r4, r5, r6, lr}
 8018d4c:	4605      	mov	r5, r0
 8018d4e:	460e      	mov	r6, r1
 8018d50:	6884      	ldr	r4, [r0, #8]
 8018d52:	b90b      	cbnz	r3, 8018d58 <_puts_r+0x10>
 8018d54:	f7ff ffb0 	bl	8018cb8 <__sinit>
 8018d58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018d5a:	07db      	lsls	r3, r3, #31
 8018d5c:	d405      	bmi.n	8018d6a <_puts_r+0x22>
 8018d5e:	89a3      	ldrh	r3, [r4, #12]
 8018d60:	0598      	lsls	r0, r3, #22
 8018d62:	d402      	bmi.n	8018d6a <_puts_r+0x22>
 8018d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d66:	f000 f9fe 	bl	8019166 <__retarget_lock_acquire_recursive>
 8018d6a:	89a3      	ldrh	r3, [r4, #12]
 8018d6c:	0719      	lsls	r1, r3, #28
 8018d6e:	d502      	bpl.n	8018d76 <_puts_r+0x2e>
 8018d70:	6923      	ldr	r3, [r4, #16]
 8018d72:	2b00      	cmp	r3, #0
 8018d74:	d135      	bne.n	8018de2 <_puts_r+0x9a>
 8018d76:	4621      	mov	r1, r4
 8018d78:	4628      	mov	r0, r5
 8018d7a:	f000 f8fb 	bl	8018f74 <__swsetup_r>
 8018d7e:	b380      	cbz	r0, 8018de2 <_puts_r+0x9a>
 8018d80:	f04f 35ff 	mov.w	r5, #4294967295
 8018d84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018d86:	07da      	lsls	r2, r3, #31
 8018d88:	d405      	bmi.n	8018d96 <_puts_r+0x4e>
 8018d8a:	89a3      	ldrh	r3, [r4, #12]
 8018d8c:	059b      	lsls	r3, r3, #22
 8018d8e:	d402      	bmi.n	8018d96 <_puts_r+0x4e>
 8018d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d92:	f000 f9e9 	bl	8019168 <__retarget_lock_release_recursive>
 8018d96:	4628      	mov	r0, r5
 8018d98:	bd70      	pop	{r4, r5, r6, pc}
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	da04      	bge.n	8018da8 <_puts_r+0x60>
 8018d9e:	69a2      	ldr	r2, [r4, #24]
 8018da0:	429a      	cmp	r2, r3
 8018da2:	dc17      	bgt.n	8018dd4 <_puts_r+0x8c>
 8018da4:	290a      	cmp	r1, #10
 8018da6:	d015      	beq.n	8018dd4 <_puts_r+0x8c>
 8018da8:	6823      	ldr	r3, [r4, #0]
 8018daa:	1c5a      	adds	r2, r3, #1
 8018dac:	6022      	str	r2, [r4, #0]
 8018dae:	7019      	strb	r1, [r3, #0]
 8018db0:	68a3      	ldr	r3, [r4, #8]
 8018db2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018db6:	3b01      	subs	r3, #1
 8018db8:	60a3      	str	r3, [r4, #8]
 8018dba:	2900      	cmp	r1, #0
 8018dbc:	d1ed      	bne.n	8018d9a <_puts_r+0x52>
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	da11      	bge.n	8018de6 <_puts_r+0x9e>
 8018dc2:	4622      	mov	r2, r4
 8018dc4:	210a      	movs	r1, #10
 8018dc6:	4628      	mov	r0, r5
 8018dc8:	f000 f895 	bl	8018ef6 <__swbuf_r>
 8018dcc:	3001      	adds	r0, #1
 8018dce:	d0d7      	beq.n	8018d80 <_puts_r+0x38>
 8018dd0:	250a      	movs	r5, #10
 8018dd2:	e7d7      	b.n	8018d84 <_puts_r+0x3c>
 8018dd4:	4622      	mov	r2, r4
 8018dd6:	4628      	mov	r0, r5
 8018dd8:	f000 f88d 	bl	8018ef6 <__swbuf_r>
 8018ddc:	3001      	adds	r0, #1
 8018dde:	d1e7      	bne.n	8018db0 <_puts_r+0x68>
 8018de0:	e7ce      	b.n	8018d80 <_puts_r+0x38>
 8018de2:	3e01      	subs	r6, #1
 8018de4:	e7e4      	b.n	8018db0 <_puts_r+0x68>
 8018de6:	6823      	ldr	r3, [r4, #0]
 8018de8:	1c5a      	adds	r2, r3, #1
 8018dea:	6022      	str	r2, [r4, #0]
 8018dec:	220a      	movs	r2, #10
 8018dee:	701a      	strb	r2, [r3, #0]
 8018df0:	e7ee      	b.n	8018dd0 <_puts_r+0x88>
	...

08018df4 <puts>:
 8018df4:	4b02      	ldr	r3, [pc, #8]	@ (8018e00 <puts+0xc>)
 8018df6:	4601      	mov	r1, r0
 8018df8:	6818      	ldr	r0, [r3, #0]
 8018dfa:	f7ff bfa5 	b.w	8018d48 <_puts_r>
 8018dfe:	bf00      	nop
 8018e00:	20000040 	.word	0x20000040

08018e04 <sniprintf>:
 8018e04:	b40c      	push	{r2, r3}
 8018e06:	4b19      	ldr	r3, [pc, #100]	@ (8018e6c <sniprintf+0x68>)
 8018e08:	b530      	push	{r4, r5, lr}
 8018e0a:	1e0c      	subs	r4, r1, #0
 8018e0c:	b09d      	sub	sp, #116	@ 0x74
 8018e0e:	681d      	ldr	r5, [r3, #0]
 8018e10:	da08      	bge.n	8018e24 <sniprintf+0x20>
 8018e12:	238b      	movs	r3, #139	@ 0x8b
 8018e14:	f04f 30ff 	mov.w	r0, #4294967295
 8018e18:	602b      	str	r3, [r5, #0]
 8018e1a:	b01d      	add	sp, #116	@ 0x74
 8018e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018e20:	b002      	add	sp, #8
 8018e22:	4770      	bx	lr
 8018e24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018e28:	9002      	str	r0, [sp, #8]
 8018e2a:	9006      	str	r0, [sp, #24]
 8018e2c:	a902      	add	r1, sp, #8
 8018e2e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018e32:	f04f 0300 	mov.w	r3, #0
 8018e36:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018e38:	4628      	mov	r0, r5
 8018e3a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8018e3c:	bf14      	ite	ne
 8018e3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018e42:	4623      	moveq	r3, r4
 8018e44:	9304      	str	r3, [sp, #16]
 8018e46:	9307      	str	r3, [sp, #28]
 8018e48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018e4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018e50:	ab21      	add	r3, sp, #132	@ 0x84
 8018e52:	9301      	str	r3, [sp, #4]
 8018e54:	f000 fb10 	bl	8019478 <_svfiprintf_r>
 8018e58:	1c43      	adds	r3, r0, #1
 8018e5a:	bfbc      	itt	lt
 8018e5c:	238b      	movlt	r3, #139	@ 0x8b
 8018e5e:	602b      	strlt	r3, [r5, #0]
 8018e60:	2c00      	cmp	r4, #0
 8018e62:	d0da      	beq.n	8018e1a <sniprintf+0x16>
 8018e64:	9b02      	ldr	r3, [sp, #8]
 8018e66:	2200      	movs	r2, #0
 8018e68:	701a      	strb	r2, [r3, #0]
 8018e6a:	e7d6      	b.n	8018e1a <sniprintf+0x16>
 8018e6c:	20000040 	.word	0x20000040

08018e70 <__sread>:
 8018e70:	b510      	push	{r4, lr}
 8018e72:	460c      	mov	r4, r1
 8018e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e78:	f000 f926 	bl	80190c8 <_read_r>
 8018e7c:	2800      	cmp	r0, #0
 8018e7e:	bfab      	itete	ge
 8018e80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018e82:	89a3      	ldrhlt	r3, [r4, #12]
 8018e84:	181b      	addge	r3, r3, r0
 8018e86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018e8a:	bfac      	ite	ge
 8018e8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018e8e:	81a3      	strhlt	r3, [r4, #12]
 8018e90:	bd10      	pop	{r4, pc}

08018e92 <__swrite>:
 8018e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e96:	461f      	mov	r7, r3
 8018e98:	898b      	ldrh	r3, [r1, #12]
 8018e9a:	4605      	mov	r5, r0
 8018e9c:	460c      	mov	r4, r1
 8018e9e:	05db      	lsls	r3, r3, #23
 8018ea0:	4616      	mov	r6, r2
 8018ea2:	d505      	bpl.n	8018eb0 <__swrite+0x1e>
 8018ea4:	2302      	movs	r3, #2
 8018ea6:	2200      	movs	r2, #0
 8018ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018eac:	f000 f8fa 	bl	80190a4 <_lseek_r>
 8018eb0:	89a3      	ldrh	r3, [r4, #12]
 8018eb2:	4632      	mov	r2, r6
 8018eb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018eb8:	4628      	mov	r0, r5
 8018eba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018ebe:	81a3      	strh	r3, [r4, #12]
 8018ec0:	463b      	mov	r3, r7
 8018ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ec6:	f000 b911 	b.w	80190ec <_write_r>

08018eca <__sseek>:
 8018eca:	b510      	push	{r4, lr}
 8018ecc:	460c      	mov	r4, r1
 8018ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ed2:	f000 f8e7 	bl	80190a4 <_lseek_r>
 8018ed6:	1c43      	adds	r3, r0, #1
 8018ed8:	89a3      	ldrh	r3, [r4, #12]
 8018eda:	bf15      	itete	ne
 8018edc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018ede:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018ee2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8018ee6:	81a3      	strheq	r3, [r4, #12]
 8018ee8:	bf18      	it	ne
 8018eea:	81a3      	strhne	r3, [r4, #12]
 8018eec:	bd10      	pop	{r4, pc}

08018eee <__sclose>:
 8018eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ef2:	f000 b8c7 	b.w	8019084 <_close_r>

08018ef6 <__swbuf_r>:
 8018ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ef8:	460e      	mov	r6, r1
 8018efa:	4614      	mov	r4, r2
 8018efc:	4605      	mov	r5, r0
 8018efe:	b118      	cbz	r0, 8018f08 <__swbuf_r+0x12>
 8018f00:	6a03      	ldr	r3, [r0, #32]
 8018f02:	b90b      	cbnz	r3, 8018f08 <__swbuf_r+0x12>
 8018f04:	f7ff fed8 	bl	8018cb8 <__sinit>
 8018f08:	69a3      	ldr	r3, [r4, #24]
 8018f0a:	60a3      	str	r3, [r4, #8]
 8018f0c:	89a3      	ldrh	r3, [r4, #12]
 8018f0e:	071a      	lsls	r2, r3, #28
 8018f10:	d501      	bpl.n	8018f16 <__swbuf_r+0x20>
 8018f12:	6923      	ldr	r3, [r4, #16]
 8018f14:	b943      	cbnz	r3, 8018f28 <__swbuf_r+0x32>
 8018f16:	4621      	mov	r1, r4
 8018f18:	4628      	mov	r0, r5
 8018f1a:	f000 f82b 	bl	8018f74 <__swsetup_r>
 8018f1e:	b118      	cbz	r0, 8018f28 <__swbuf_r+0x32>
 8018f20:	f04f 37ff 	mov.w	r7, #4294967295
 8018f24:	4638      	mov	r0, r7
 8018f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f28:	6823      	ldr	r3, [r4, #0]
 8018f2a:	b2f6      	uxtb	r6, r6
 8018f2c:	6922      	ldr	r2, [r4, #16]
 8018f2e:	4637      	mov	r7, r6
 8018f30:	1a98      	subs	r0, r3, r2
 8018f32:	6963      	ldr	r3, [r4, #20]
 8018f34:	4283      	cmp	r3, r0
 8018f36:	dc05      	bgt.n	8018f44 <__swbuf_r+0x4e>
 8018f38:	4621      	mov	r1, r4
 8018f3a:	4628      	mov	r0, r5
 8018f3c:	f000 feee 	bl	8019d1c <_fflush_r>
 8018f40:	2800      	cmp	r0, #0
 8018f42:	d1ed      	bne.n	8018f20 <__swbuf_r+0x2a>
 8018f44:	68a3      	ldr	r3, [r4, #8]
 8018f46:	3b01      	subs	r3, #1
 8018f48:	60a3      	str	r3, [r4, #8]
 8018f4a:	6823      	ldr	r3, [r4, #0]
 8018f4c:	1c5a      	adds	r2, r3, #1
 8018f4e:	6022      	str	r2, [r4, #0]
 8018f50:	701e      	strb	r6, [r3, #0]
 8018f52:	1c43      	adds	r3, r0, #1
 8018f54:	6962      	ldr	r2, [r4, #20]
 8018f56:	429a      	cmp	r2, r3
 8018f58:	d004      	beq.n	8018f64 <__swbuf_r+0x6e>
 8018f5a:	89a3      	ldrh	r3, [r4, #12]
 8018f5c:	07db      	lsls	r3, r3, #31
 8018f5e:	d5e1      	bpl.n	8018f24 <__swbuf_r+0x2e>
 8018f60:	2e0a      	cmp	r6, #10
 8018f62:	d1df      	bne.n	8018f24 <__swbuf_r+0x2e>
 8018f64:	4621      	mov	r1, r4
 8018f66:	4628      	mov	r0, r5
 8018f68:	f000 fed8 	bl	8019d1c <_fflush_r>
 8018f6c:	2800      	cmp	r0, #0
 8018f6e:	d0d9      	beq.n	8018f24 <__swbuf_r+0x2e>
 8018f70:	e7d6      	b.n	8018f20 <__swbuf_r+0x2a>
	...

08018f74 <__swsetup_r>:
 8018f74:	b538      	push	{r3, r4, r5, lr}
 8018f76:	4b29      	ldr	r3, [pc, #164]	@ (801901c <__swsetup_r+0xa8>)
 8018f78:	4605      	mov	r5, r0
 8018f7a:	460c      	mov	r4, r1
 8018f7c:	6818      	ldr	r0, [r3, #0]
 8018f7e:	b118      	cbz	r0, 8018f88 <__swsetup_r+0x14>
 8018f80:	6a03      	ldr	r3, [r0, #32]
 8018f82:	b90b      	cbnz	r3, 8018f88 <__swsetup_r+0x14>
 8018f84:	f7ff fe98 	bl	8018cb8 <__sinit>
 8018f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f8c:	0719      	lsls	r1, r3, #28
 8018f8e:	d422      	bmi.n	8018fd6 <__swsetup_r+0x62>
 8018f90:	06da      	lsls	r2, r3, #27
 8018f92:	d407      	bmi.n	8018fa4 <__swsetup_r+0x30>
 8018f94:	2209      	movs	r2, #9
 8018f96:	602a      	str	r2, [r5, #0]
 8018f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8018fa0:	81a3      	strh	r3, [r4, #12]
 8018fa2:	e033      	b.n	801900c <__swsetup_r+0x98>
 8018fa4:	0758      	lsls	r0, r3, #29
 8018fa6:	d512      	bpl.n	8018fce <__swsetup_r+0x5a>
 8018fa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018faa:	b141      	cbz	r1, 8018fbe <__swsetup_r+0x4a>
 8018fac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018fb0:	4299      	cmp	r1, r3
 8018fb2:	d002      	beq.n	8018fba <__swsetup_r+0x46>
 8018fb4:	4628      	mov	r0, r5
 8018fb6:	f000 f903 	bl	80191c0 <_free_r>
 8018fba:	2300      	movs	r3, #0
 8018fbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8018fbe:	89a3      	ldrh	r3, [r4, #12]
 8018fc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018fc4:	81a3      	strh	r3, [r4, #12]
 8018fc6:	2300      	movs	r3, #0
 8018fc8:	6063      	str	r3, [r4, #4]
 8018fca:	6923      	ldr	r3, [r4, #16]
 8018fcc:	6023      	str	r3, [r4, #0]
 8018fce:	89a3      	ldrh	r3, [r4, #12]
 8018fd0:	f043 0308 	orr.w	r3, r3, #8
 8018fd4:	81a3      	strh	r3, [r4, #12]
 8018fd6:	6923      	ldr	r3, [r4, #16]
 8018fd8:	b94b      	cbnz	r3, 8018fee <__swsetup_r+0x7a>
 8018fda:	89a3      	ldrh	r3, [r4, #12]
 8018fdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018fe4:	d003      	beq.n	8018fee <__swsetup_r+0x7a>
 8018fe6:	4621      	mov	r1, r4
 8018fe8:	4628      	mov	r0, r5
 8018fea:	f000 fef6 	bl	8019dda <__smakebuf_r>
 8018fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ff2:	f013 0201 	ands.w	r2, r3, #1
 8018ff6:	d00a      	beq.n	801900e <__swsetup_r+0x9a>
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	60a2      	str	r2, [r4, #8]
 8018ffc:	6962      	ldr	r2, [r4, #20]
 8018ffe:	4252      	negs	r2, r2
 8019000:	61a2      	str	r2, [r4, #24]
 8019002:	6922      	ldr	r2, [r4, #16]
 8019004:	b942      	cbnz	r2, 8019018 <__swsetup_r+0xa4>
 8019006:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801900a:	d1c5      	bne.n	8018f98 <__swsetup_r+0x24>
 801900c:	bd38      	pop	{r3, r4, r5, pc}
 801900e:	0799      	lsls	r1, r3, #30
 8019010:	bf58      	it	pl
 8019012:	6962      	ldrpl	r2, [r4, #20]
 8019014:	60a2      	str	r2, [r4, #8]
 8019016:	e7f4      	b.n	8019002 <__swsetup_r+0x8e>
 8019018:	2000      	movs	r0, #0
 801901a:	e7f7      	b.n	801900c <__swsetup_r+0x98>
 801901c:	20000040 	.word	0x20000040

08019020 <memcmp>:
 8019020:	3901      	subs	r1, #1
 8019022:	4402      	add	r2, r0
 8019024:	b510      	push	{r4, lr}
 8019026:	4290      	cmp	r0, r2
 8019028:	d101      	bne.n	801902e <memcmp+0xe>
 801902a:	2000      	movs	r0, #0
 801902c:	e005      	b.n	801903a <memcmp+0x1a>
 801902e:	7803      	ldrb	r3, [r0, #0]
 8019030:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019034:	42a3      	cmp	r3, r4
 8019036:	d001      	beq.n	801903c <memcmp+0x1c>
 8019038:	1b18      	subs	r0, r3, r4
 801903a:	bd10      	pop	{r4, pc}
 801903c:	3001      	adds	r0, #1
 801903e:	e7f2      	b.n	8019026 <memcmp+0x6>

08019040 <memmove>:
 8019040:	4288      	cmp	r0, r1
 8019042:	b510      	push	{r4, lr}
 8019044:	eb01 0402 	add.w	r4, r1, r2
 8019048:	d902      	bls.n	8019050 <memmove+0x10>
 801904a:	4284      	cmp	r4, r0
 801904c:	4623      	mov	r3, r4
 801904e:	d807      	bhi.n	8019060 <memmove+0x20>
 8019050:	1e43      	subs	r3, r0, #1
 8019052:	42a1      	cmp	r1, r4
 8019054:	d008      	beq.n	8019068 <memmove+0x28>
 8019056:	f811 2b01 	ldrb.w	r2, [r1], #1
 801905a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801905e:	e7f8      	b.n	8019052 <memmove+0x12>
 8019060:	4402      	add	r2, r0
 8019062:	4601      	mov	r1, r0
 8019064:	428a      	cmp	r2, r1
 8019066:	d100      	bne.n	801906a <memmove+0x2a>
 8019068:	bd10      	pop	{r4, pc}
 801906a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801906e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019072:	e7f7      	b.n	8019064 <memmove+0x24>

08019074 <memset>:
 8019074:	4402      	add	r2, r0
 8019076:	4603      	mov	r3, r0
 8019078:	4293      	cmp	r3, r2
 801907a:	d100      	bne.n	801907e <memset+0xa>
 801907c:	4770      	bx	lr
 801907e:	f803 1b01 	strb.w	r1, [r3], #1
 8019082:	e7f9      	b.n	8019078 <memset+0x4>

08019084 <_close_r>:
 8019084:	b538      	push	{r3, r4, r5, lr}
 8019086:	2300      	movs	r3, #0
 8019088:	4d05      	ldr	r5, [pc, #20]	@ (80190a0 <_close_r+0x1c>)
 801908a:	4604      	mov	r4, r0
 801908c:	4608      	mov	r0, r1
 801908e:	602b      	str	r3, [r5, #0]
 8019090:	f7e9 f899 	bl	80021c6 <_close>
 8019094:	1c43      	adds	r3, r0, #1
 8019096:	d102      	bne.n	801909e <_close_r+0x1a>
 8019098:	682b      	ldr	r3, [r5, #0]
 801909a:	b103      	cbz	r3, 801909e <_close_r+0x1a>
 801909c:	6023      	str	r3, [r4, #0]
 801909e:	bd38      	pop	{r3, r4, r5, pc}
 80190a0:	2000a5e0 	.word	0x2000a5e0

080190a4 <_lseek_r>:
 80190a4:	b538      	push	{r3, r4, r5, lr}
 80190a6:	4604      	mov	r4, r0
 80190a8:	4d06      	ldr	r5, [pc, #24]	@ (80190c4 <_lseek_r+0x20>)
 80190aa:	4608      	mov	r0, r1
 80190ac:	4611      	mov	r1, r2
 80190ae:	2200      	movs	r2, #0
 80190b0:	602a      	str	r2, [r5, #0]
 80190b2:	461a      	mov	r2, r3
 80190b4:	f7e9 f8ae 	bl	8002214 <_lseek>
 80190b8:	1c43      	adds	r3, r0, #1
 80190ba:	d102      	bne.n	80190c2 <_lseek_r+0x1e>
 80190bc:	682b      	ldr	r3, [r5, #0]
 80190be:	b103      	cbz	r3, 80190c2 <_lseek_r+0x1e>
 80190c0:	6023      	str	r3, [r4, #0]
 80190c2:	bd38      	pop	{r3, r4, r5, pc}
 80190c4:	2000a5e0 	.word	0x2000a5e0

080190c8 <_read_r>:
 80190c8:	b538      	push	{r3, r4, r5, lr}
 80190ca:	4604      	mov	r4, r0
 80190cc:	4d06      	ldr	r5, [pc, #24]	@ (80190e8 <_read_r+0x20>)
 80190ce:	4608      	mov	r0, r1
 80190d0:	4611      	mov	r1, r2
 80190d2:	2200      	movs	r2, #0
 80190d4:	602a      	str	r2, [r5, #0]
 80190d6:	461a      	mov	r2, r3
 80190d8:	f7e9 f83c 	bl	8002154 <_read>
 80190dc:	1c43      	adds	r3, r0, #1
 80190de:	d102      	bne.n	80190e6 <_read_r+0x1e>
 80190e0:	682b      	ldr	r3, [r5, #0]
 80190e2:	b103      	cbz	r3, 80190e6 <_read_r+0x1e>
 80190e4:	6023      	str	r3, [r4, #0]
 80190e6:	bd38      	pop	{r3, r4, r5, pc}
 80190e8:	2000a5e0 	.word	0x2000a5e0

080190ec <_write_r>:
 80190ec:	b538      	push	{r3, r4, r5, lr}
 80190ee:	4604      	mov	r4, r0
 80190f0:	4d06      	ldr	r5, [pc, #24]	@ (801910c <_write_r+0x20>)
 80190f2:	4608      	mov	r0, r1
 80190f4:	4611      	mov	r1, r2
 80190f6:	2200      	movs	r2, #0
 80190f8:	602a      	str	r2, [r5, #0]
 80190fa:	461a      	mov	r2, r3
 80190fc:	f7e9 f847 	bl	800218e <_write>
 8019100:	1c43      	adds	r3, r0, #1
 8019102:	d102      	bne.n	801910a <_write_r+0x1e>
 8019104:	682b      	ldr	r3, [r5, #0]
 8019106:	b103      	cbz	r3, 801910a <_write_r+0x1e>
 8019108:	6023      	str	r3, [r4, #0]
 801910a:	bd38      	pop	{r3, r4, r5, pc}
 801910c:	2000a5e0 	.word	0x2000a5e0

08019110 <__errno>:
 8019110:	4b01      	ldr	r3, [pc, #4]	@ (8019118 <__errno+0x8>)
 8019112:	6818      	ldr	r0, [r3, #0]
 8019114:	4770      	bx	lr
 8019116:	bf00      	nop
 8019118:	20000040 	.word	0x20000040

0801911c <__libc_init_array>:
 801911c:	b570      	push	{r4, r5, r6, lr}
 801911e:	4d0d      	ldr	r5, [pc, #52]	@ (8019154 <__libc_init_array+0x38>)
 8019120:	2600      	movs	r6, #0
 8019122:	4c0d      	ldr	r4, [pc, #52]	@ (8019158 <__libc_init_array+0x3c>)
 8019124:	1b64      	subs	r4, r4, r5
 8019126:	10a4      	asrs	r4, r4, #2
 8019128:	42a6      	cmp	r6, r4
 801912a:	d109      	bne.n	8019140 <__libc_init_array+0x24>
 801912c:	4d0b      	ldr	r5, [pc, #44]	@ (801915c <__libc_init_array+0x40>)
 801912e:	2600      	movs	r6, #0
 8019130:	4c0b      	ldr	r4, [pc, #44]	@ (8019160 <__libc_init_array+0x44>)
 8019132:	f001 feb3 	bl	801ae9c <_init>
 8019136:	1b64      	subs	r4, r4, r5
 8019138:	10a4      	asrs	r4, r4, #2
 801913a:	42a6      	cmp	r6, r4
 801913c:	d105      	bne.n	801914a <__libc_init_array+0x2e>
 801913e:	bd70      	pop	{r4, r5, r6, pc}
 8019140:	f855 3b04 	ldr.w	r3, [r5], #4
 8019144:	3601      	adds	r6, #1
 8019146:	4798      	blx	r3
 8019148:	e7ee      	b.n	8019128 <__libc_init_array+0xc>
 801914a:	f855 3b04 	ldr.w	r3, [r5], #4
 801914e:	3601      	adds	r6, #1
 8019150:	4798      	blx	r3
 8019152:	e7f2      	b.n	801913a <__libc_init_array+0x1e>
 8019154:	0801d558 	.word	0x0801d558
 8019158:	0801d558 	.word	0x0801d558
 801915c:	0801d558 	.word	0x0801d558
 8019160:	0801d55c 	.word	0x0801d55c

08019164 <__retarget_lock_init_recursive>:
 8019164:	4770      	bx	lr

08019166 <__retarget_lock_acquire_recursive>:
 8019166:	4770      	bx	lr

08019168 <__retarget_lock_release_recursive>:
 8019168:	4770      	bx	lr

0801916a <memcpy>:
 801916a:	440a      	add	r2, r1
 801916c:	1e43      	subs	r3, r0, #1
 801916e:	4291      	cmp	r1, r2
 8019170:	d100      	bne.n	8019174 <memcpy+0xa>
 8019172:	4770      	bx	lr
 8019174:	b510      	push	{r4, lr}
 8019176:	f811 4b01 	ldrb.w	r4, [r1], #1
 801917a:	4291      	cmp	r1, r2
 801917c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019180:	d1f9      	bne.n	8019176 <memcpy+0xc>
 8019182:	bd10      	pop	{r4, pc}

08019184 <__assert_func>:
 8019184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019186:	4614      	mov	r4, r2
 8019188:	461a      	mov	r2, r3
 801918a:	4b09      	ldr	r3, [pc, #36]	@ (80191b0 <__assert_func+0x2c>)
 801918c:	4605      	mov	r5, r0
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	68d8      	ldr	r0, [r3, #12]
 8019192:	b14c      	cbz	r4, 80191a8 <__assert_func+0x24>
 8019194:	4b07      	ldr	r3, [pc, #28]	@ (80191b4 <__assert_func+0x30>)
 8019196:	9100      	str	r1, [sp, #0]
 8019198:	4907      	ldr	r1, [pc, #28]	@ (80191b8 <__assert_func+0x34>)
 801919a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801919e:	462b      	mov	r3, r5
 80191a0:	f000 fde4 	bl	8019d6c <fiprintf>
 80191a4:	f000 fe96 	bl	8019ed4 <abort>
 80191a8:	4b04      	ldr	r3, [pc, #16]	@ (80191bc <__assert_func+0x38>)
 80191aa:	461c      	mov	r4, r3
 80191ac:	e7f3      	b.n	8019196 <__assert_func+0x12>
 80191ae:	bf00      	nop
 80191b0:	20000040 	.word	0x20000040
 80191b4:	0801d4a1 	.word	0x0801d4a1
 80191b8:	0801d4ae 	.word	0x0801d4ae
 80191bc:	0801d4dc 	.word	0x0801d4dc

080191c0 <_free_r>:
 80191c0:	b538      	push	{r3, r4, r5, lr}
 80191c2:	4605      	mov	r5, r0
 80191c4:	2900      	cmp	r1, #0
 80191c6:	d041      	beq.n	801924c <_free_r+0x8c>
 80191c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80191cc:	1f0c      	subs	r4, r1, #4
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	bfb8      	it	lt
 80191d2:	18e4      	addlt	r4, r4, r3
 80191d4:	f000 f8e8 	bl	80193a8 <__malloc_lock>
 80191d8:	4a1d      	ldr	r2, [pc, #116]	@ (8019250 <_free_r+0x90>)
 80191da:	6813      	ldr	r3, [r2, #0]
 80191dc:	b933      	cbnz	r3, 80191ec <_free_r+0x2c>
 80191de:	6063      	str	r3, [r4, #4]
 80191e0:	6014      	str	r4, [r2, #0]
 80191e2:	4628      	mov	r0, r5
 80191e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80191e8:	f000 b8e4 	b.w	80193b4 <__malloc_unlock>
 80191ec:	42a3      	cmp	r3, r4
 80191ee:	d908      	bls.n	8019202 <_free_r+0x42>
 80191f0:	6820      	ldr	r0, [r4, #0]
 80191f2:	1821      	adds	r1, r4, r0
 80191f4:	428b      	cmp	r3, r1
 80191f6:	bf01      	itttt	eq
 80191f8:	6819      	ldreq	r1, [r3, #0]
 80191fa:	685b      	ldreq	r3, [r3, #4]
 80191fc:	1809      	addeq	r1, r1, r0
 80191fe:	6021      	streq	r1, [r4, #0]
 8019200:	e7ed      	b.n	80191de <_free_r+0x1e>
 8019202:	461a      	mov	r2, r3
 8019204:	685b      	ldr	r3, [r3, #4]
 8019206:	b10b      	cbz	r3, 801920c <_free_r+0x4c>
 8019208:	42a3      	cmp	r3, r4
 801920a:	d9fa      	bls.n	8019202 <_free_r+0x42>
 801920c:	6811      	ldr	r1, [r2, #0]
 801920e:	1850      	adds	r0, r2, r1
 8019210:	42a0      	cmp	r0, r4
 8019212:	d10b      	bne.n	801922c <_free_r+0x6c>
 8019214:	6820      	ldr	r0, [r4, #0]
 8019216:	4401      	add	r1, r0
 8019218:	1850      	adds	r0, r2, r1
 801921a:	6011      	str	r1, [r2, #0]
 801921c:	4283      	cmp	r3, r0
 801921e:	d1e0      	bne.n	80191e2 <_free_r+0x22>
 8019220:	6818      	ldr	r0, [r3, #0]
 8019222:	685b      	ldr	r3, [r3, #4]
 8019224:	4408      	add	r0, r1
 8019226:	6053      	str	r3, [r2, #4]
 8019228:	6010      	str	r0, [r2, #0]
 801922a:	e7da      	b.n	80191e2 <_free_r+0x22>
 801922c:	d902      	bls.n	8019234 <_free_r+0x74>
 801922e:	230c      	movs	r3, #12
 8019230:	602b      	str	r3, [r5, #0]
 8019232:	e7d6      	b.n	80191e2 <_free_r+0x22>
 8019234:	6820      	ldr	r0, [r4, #0]
 8019236:	1821      	adds	r1, r4, r0
 8019238:	428b      	cmp	r3, r1
 801923a:	bf02      	ittt	eq
 801923c:	6819      	ldreq	r1, [r3, #0]
 801923e:	685b      	ldreq	r3, [r3, #4]
 8019240:	1809      	addeq	r1, r1, r0
 8019242:	6063      	str	r3, [r4, #4]
 8019244:	bf08      	it	eq
 8019246:	6021      	streq	r1, [r4, #0]
 8019248:	6054      	str	r4, [r2, #4]
 801924a:	e7ca      	b.n	80191e2 <_free_r+0x22>
 801924c:	bd38      	pop	{r3, r4, r5, pc}
 801924e:	bf00      	nop
 8019250:	2000a5ec 	.word	0x2000a5ec

08019254 <malloc>:
 8019254:	4b02      	ldr	r3, [pc, #8]	@ (8019260 <malloc+0xc>)
 8019256:	4601      	mov	r1, r0
 8019258:	6818      	ldr	r0, [r3, #0]
 801925a:	f000 b825 	b.w	80192a8 <_malloc_r>
 801925e:	bf00      	nop
 8019260:	20000040 	.word	0x20000040

08019264 <sbrk_aligned>:
 8019264:	b570      	push	{r4, r5, r6, lr}
 8019266:	4e0f      	ldr	r6, [pc, #60]	@ (80192a4 <sbrk_aligned+0x40>)
 8019268:	460c      	mov	r4, r1
 801926a:	4605      	mov	r5, r0
 801926c:	6831      	ldr	r1, [r6, #0]
 801926e:	b911      	cbnz	r1, 8019276 <sbrk_aligned+0x12>
 8019270:	f000 fe12 	bl	8019e98 <_sbrk_r>
 8019274:	6030      	str	r0, [r6, #0]
 8019276:	4621      	mov	r1, r4
 8019278:	4628      	mov	r0, r5
 801927a:	f000 fe0d 	bl	8019e98 <_sbrk_r>
 801927e:	1c43      	adds	r3, r0, #1
 8019280:	d103      	bne.n	801928a <sbrk_aligned+0x26>
 8019282:	f04f 34ff 	mov.w	r4, #4294967295
 8019286:	4620      	mov	r0, r4
 8019288:	bd70      	pop	{r4, r5, r6, pc}
 801928a:	1cc4      	adds	r4, r0, #3
 801928c:	f024 0403 	bic.w	r4, r4, #3
 8019290:	42a0      	cmp	r0, r4
 8019292:	d0f8      	beq.n	8019286 <sbrk_aligned+0x22>
 8019294:	1a21      	subs	r1, r4, r0
 8019296:	4628      	mov	r0, r5
 8019298:	f000 fdfe 	bl	8019e98 <_sbrk_r>
 801929c:	3001      	adds	r0, #1
 801929e:	d1f2      	bne.n	8019286 <sbrk_aligned+0x22>
 80192a0:	e7ef      	b.n	8019282 <sbrk_aligned+0x1e>
 80192a2:	bf00      	nop
 80192a4:	2000a5e8 	.word	0x2000a5e8

080192a8 <_malloc_r>:
 80192a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192ac:	1ccd      	adds	r5, r1, #3
 80192ae:	4606      	mov	r6, r0
 80192b0:	f025 0503 	bic.w	r5, r5, #3
 80192b4:	3508      	adds	r5, #8
 80192b6:	2d0c      	cmp	r5, #12
 80192b8:	bf38      	it	cc
 80192ba:	250c      	movcc	r5, #12
 80192bc:	2d00      	cmp	r5, #0
 80192be:	db01      	blt.n	80192c4 <_malloc_r+0x1c>
 80192c0:	42a9      	cmp	r1, r5
 80192c2:	d904      	bls.n	80192ce <_malloc_r+0x26>
 80192c4:	230c      	movs	r3, #12
 80192c6:	6033      	str	r3, [r6, #0]
 80192c8:	2000      	movs	r0, #0
 80192ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80193a4 <_malloc_r+0xfc>
 80192d2:	f000 f869 	bl	80193a8 <__malloc_lock>
 80192d6:	f8d8 3000 	ldr.w	r3, [r8]
 80192da:	461c      	mov	r4, r3
 80192dc:	bb44      	cbnz	r4, 8019330 <_malloc_r+0x88>
 80192de:	4629      	mov	r1, r5
 80192e0:	4630      	mov	r0, r6
 80192e2:	f7ff ffbf 	bl	8019264 <sbrk_aligned>
 80192e6:	1c43      	adds	r3, r0, #1
 80192e8:	4604      	mov	r4, r0
 80192ea:	d158      	bne.n	801939e <_malloc_r+0xf6>
 80192ec:	f8d8 4000 	ldr.w	r4, [r8]
 80192f0:	4627      	mov	r7, r4
 80192f2:	2f00      	cmp	r7, #0
 80192f4:	d143      	bne.n	801937e <_malloc_r+0xd6>
 80192f6:	2c00      	cmp	r4, #0
 80192f8:	d04b      	beq.n	8019392 <_malloc_r+0xea>
 80192fa:	6823      	ldr	r3, [r4, #0]
 80192fc:	4639      	mov	r1, r7
 80192fe:	4630      	mov	r0, r6
 8019300:	eb04 0903 	add.w	r9, r4, r3
 8019304:	f000 fdc8 	bl	8019e98 <_sbrk_r>
 8019308:	4581      	cmp	r9, r0
 801930a:	d142      	bne.n	8019392 <_malloc_r+0xea>
 801930c:	6821      	ldr	r1, [r4, #0]
 801930e:	4630      	mov	r0, r6
 8019310:	1a6d      	subs	r5, r5, r1
 8019312:	4629      	mov	r1, r5
 8019314:	f7ff ffa6 	bl	8019264 <sbrk_aligned>
 8019318:	3001      	adds	r0, #1
 801931a:	d03a      	beq.n	8019392 <_malloc_r+0xea>
 801931c:	6823      	ldr	r3, [r4, #0]
 801931e:	442b      	add	r3, r5
 8019320:	6023      	str	r3, [r4, #0]
 8019322:	f8d8 3000 	ldr.w	r3, [r8]
 8019326:	685a      	ldr	r2, [r3, #4]
 8019328:	bb62      	cbnz	r2, 8019384 <_malloc_r+0xdc>
 801932a:	f8c8 7000 	str.w	r7, [r8]
 801932e:	e00f      	b.n	8019350 <_malloc_r+0xa8>
 8019330:	6822      	ldr	r2, [r4, #0]
 8019332:	1b52      	subs	r2, r2, r5
 8019334:	d420      	bmi.n	8019378 <_malloc_r+0xd0>
 8019336:	2a0b      	cmp	r2, #11
 8019338:	d917      	bls.n	801936a <_malloc_r+0xc2>
 801933a:	1961      	adds	r1, r4, r5
 801933c:	42a3      	cmp	r3, r4
 801933e:	6025      	str	r5, [r4, #0]
 8019340:	bf18      	it	ne
 8019342:	6059      	strne	r1, [r3, #4]
 8019344:	6863      	ldr	r3, [r4, #4]
 8019346:	bf08      	it	eq
 8019348:	f8c8 1000 	streq.w	r1, [r8]
 801934c:	5162      	str	r2, [r4, r5]
 801934e:	604b      	str	r3, [r1, #4]
 8019350:	4630      	mov	r0, r6
 8019352:	f000 f82f 	bl	80193b4 <__malloc_unlock>
 8019356:	f104 000b 	add.w	r0, r4, #11
 801935a:	1d23      	adds	r3, r4, #4
 801935c:	f020 0007 	bic.w	r0, r0, #7
 8019360:	1ac2      	subs	r2, r0, r3
 8019362:	bf1c      	itt	ne
 8019364:	1a1b      	subne	r3, r3, r0
 8019366:	50a3      	strne	r3, [r4, r2]
 8019368:	e7af      	b.n	80192ca <_malloc_r+0x22>
 801936a:	6862      	ldr	r2, [r4, #4]
 801936c:	42a3      	cmp	r3, r4
 801936e:	bf0c      	ite	eq
 8019370:	f8c8 2000 	streq.w	r2, [r8]
 8019374:	605a      	strne	r2, [r3, #4]
 8019376:	e7eb      	b.n	8019350 <_malloc_r+0xa8>
 8019378:	4623      	mov	r3, r4
 801937a:	6864      	ldr	r4, [r4, #4]
 801937c:	e7ae      	b.n	80192dc <_malloc_r+0x34>
 801937e:	463c      	mov	r4, r7
 8019380:	687f      	ldr	r7, [r7, #4]
 8019382:	e7b6      	b.n	80192f2 <_malloc_r+0x4a>
 8019384:	461a      	mov	r2, r3
 8019386:	685b      	ldr	r3, [r3, #4]
 8019388:	42a3      	cmp	r3, r4
 801938a:	d1fb      	bne.n	8019384 <_malloc_r+0xdc>
 801938c:	2300      	movs	r3, #0
 801938e:	6053      	str	r3, [r2, #4]
 8019390:	e7de      	b.n	8019350 <_malloc_r+0xa8>
 8019392:	230c      	movs	r3, #12
 8019394:	4630      	mov	r0, r6
 8019396:	6033      	str	r3, [r6, #0]
 8019398:	f000 f80c 	bl	80193b4 <__malloc_unlock>
 801939c:	e794      	b.n	80192c8 <_malloc_r+0x20>
 801939e:	6005      	str	r5, [r0, #0]
 80193a0:	e7d6      	b.n	8019350 <_malloc_r+0xa8>
 80193a2:	bf00      	nop
 80193a4:	2000a5ec 	.word	0x2000a5ec

080193a8 <__malloc_lock>:
 80193a8:	4801      	ldr	r0, [pc, #4]	@ (80193b0 <__malloc_lock+0x8>)
 80193aa:	f7ff bedc 	b.w	8019166 <__retarget_lock_acquire_recursive>
 80193ae:	bf00      	nop
 80193b0:	2000a5e4 	.word	0x2000a5e4

080193b4 <__malloc_unlock>:
 80193b4:	4801      	ldr	r0, [pc, #4]	@ (80193bc <__malloc_unlock+0x8>)
 80193b6:	f7ff bed7 	b.w	8019168 <__retarget_lock_release_recursive>
 80193ba:	bf00      	nop
 80193bc:	2000a5e4 	.word	0x2000a5e4

080193c0 <__ssputs_r>:
 80193c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193c4:	461f      	mov	r7, r3
 80193c6:	688e      	ldr	r6, [r1, #8]
 80193c8:	4682      	mov	sl, r0
 80193ca:	460c      	mov	r4, r1
 80193cc:	42be      	cmp	r6, r7
 80193ce:	4690      	mov	r8, r2
 80193d0:	680b      	ldr	r3, [r1, #0]
 80193d2:	d82d      	bhi.n	8019430 <__ssputs_r+0x70>
 80193d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80193d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80193dc:	d026      	beq.n	801942c <__ssputs_r+0x6c>
 80193de:	6965      	ldr	r5, [r4, #20]
 80193e0:	6909      	ldr	r1, [r1, #16]
 80193e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80193e6:	eba3 0901 	sub.w	r9, r3, r1
 80193ea:	1c7b      	adds	r3, r7, #1
 80193ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80193f0:	444b      	add	r3, r9
 80193f2:	106d      	asrs	r5, r5, #1
 80193f4:	429d      	cmp	r5, r3
 80193f6:	bf38      	it	cc
 80193f8:	461d      	movcc	r5, r3
 80193fa:	0553      	lsls	r3, r2, #21
 80193fc:	d527      	bpl.n	801944e <__ssputs_r+0x8e>
 80193fe:	4629      	mov	r1, r5
 8019400:	f7ff ff52 	bl	80192a8 <_malloc_r>
 8019404:	4606      	mov	r6, r0
 8019406:	b360      	cbz	r0, 8019462 <__ssputs_r+0xa2>
 8019408:	464a      	mov	r2, r9
 801940a:	6921      	ldr	r1, [r4, #16]
 801940c:	f7ff fead 	bl	801916a <memcpy>
 8019410:	89a3      	ldrh	r3, [r4, #12]
 8019412:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801941a:	81a3      	strh	r3, [r4, #12]
 801941c:	6126      	str	r6, [r4, #16]
 801941e:	444e      	add	r6, r9
 8019420:	6165      	str	r5, [r4, #20]
 8019422:	eba5 0509 	sub.w	r5, r5, r9
 8019426:	6026      	str	r6, [r4, #0]
 8019428:	463e      	mov	r6, r7
 801942a:	60a5      	str	r5, [r4, #8]
 801942c:	42be      	cmp	r6, r7
 801942e:	d900      	bls.n	8019432 <__ssputs_r+0x72>
 8019430:	463e      	mov	r6, r7
 8019432:	4632      	mov	r2, r6
 8019434:	4641      	mov	r1, r8
 8019436:	6820      	ldr	r0, [r4, #0]
 8019438:	f7ff fe02 	bl	8019040 <memmove>
 801943c:	68a3      	ldr	r3, [r4, #8]
 801943e:	2000      	movs	r0, #0
 8019440:	1b9b      	subs	r3, r3, r6
 8019442:	60a3      	str	r3, [r4, #8]
 8019444:	6823      	ldr	r3, [r4, #0]
 8019446:	4433      	add	r3, r6
 8019448:	6023      	str	r3, [r4, #0]
 801944a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801944e:	462a      	mov	r2, r5
 8019450:	f000 fd47 	bl	8019ee2 <_realloc_r>
 8019454:	4606      	mov	r6, r0
 8019456:	2800      	cmp	r0, #0
 8019458:	d1e0      	bne.n	801941c <__ssputs_r+0x5c>
 801945a:	6921      	ldr	r1, [r4, #16]
 801945c:	4650      	mov	r0, sl
 801945e:	f7ff feaf 	bl	80191c0 <_free_r>
 8019462:	230c      	movs	r3, #12
 8019464:	f04f 30ff 	mov.w	r0, #4294967295
 8019468:	f8ca 3000 	str.w	r3, [sl]
 801946c:	89a3      	ldrh	r3, [r4, #12]
 801946e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019472:	81a3      	strh	r3, [r4, #12]
 8019474:	e7e9      	b.n	801944a <__ssputs_r+0x8a>
	...

08019478 <_svfiprintf_r>:
 8019478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801947c:	4698      	mov	r8, r3
 801947e:	898b      	ldrh	r3, [r1, #12]
 8019480:	b09d      	sub	sp, #116	@ 0x74
 8019482:	4607      	mov	r7, r0
 8019484:	061b      	lsls	r3, r3, #24
 8019486:	460d      	mov	r5, r1
 8019488:	4614      	mov	r4, r2
 801948a:	d510      	bpl.n	80194ae <_svfiprintf_r+0x36>
 801948c:	690b      	ldr	r3, [r1, #16]
 801948e:	b973      	cbnz	r3, 80194ae <_svfiprintf_r+0x36>
 8019490:	2140      	movs	r1, #64	@ 0x40
 8019492:	f7ff ff09 	bl	80192a8 <_malloc_r>
 8019496:	6028      	str	r0, [r5, #0]
 8019498:	6128      	str	r0, [r5, #16]
 801949a:	b930      	cbnz	r0, 80194aa <_svfiprintf_r+0x32>
 801949c:	230c      	movs	r3, #12
 801949e:	603b      	str	r3, [r7, #0]
 80194a0:	f04f 30ff 	mov.w	r0, #4294967295
 80194a4:	b01d      	add	sp, #116	@ 0x74
 80194a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194aa:	2340      	movs	r3, #64	@ 0x40
 80194ac:	616b      	str	r3, [r5, #20]
 80194ae:	2300      	movs	r3, #0
 80194b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80194b4:	f04f 0901 	mov.w	r9, #1
 80194b8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 801965c <_svfiprintf_r+0x1e4>
 80194bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80194be:	2320      	movs	r3, #32
 80194c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80194c4:	2330      	movs	r3, #48	@ 0x30
 80194c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80194ca:	4623      	mov	r3, r4
 80194cc:	469a      	mov	sl, r3
 80194ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80194d2:	b10a      	cbz	r2, 80194d8 <_svfiprintf_r+0x60>
 80194d4:	2a25      	cmp	r2, #37	@ 0x25
 80194d6:	d1f9      	bne.n	80194cc <_svfiprintf_r+0x54>
 80194d8:	ebba 0b04 	subs.w	fp, sl, r4
 80194dc:	d00b      	beq.n	80194f6 <_svfiprintf_r+0x7e>
 80194de:	465b      	mov	r3, fp
 80194e0:	4622      	mov	r2, r4
 80194e2:	4629      	mov	r1, r5
 80194e4:	4638      	mov	r0, r7
 80194e6:	f7ff ff6b 	bl	80193c0 <__ssputs_r>
 80194ea:	3001      	adds	r0, #1
 80194ec:	f000 80a7 	beq.w	801963e <_svfiprintf_r+0x1c6>
 80194f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80194f2:	445a      	add	r2, fp
 80194f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80194f6:	f89a 3000 	ldrb.w	r3, [sl]
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	f000 809f 	beq.w	801963e <_svfiprintf_r+0x1c6>
 8019500:	2300      	movs	r3, #0
 8019502:	f04f 32ff 	mov.w	r2, #4294967295
 8019506:	f10a 0a01 	add.w	sl, sl, #1
 801950a:	9304      	str	r3, [sp, #16]
 801950c:	9307      	str	r3, [sp, #28]
 801950e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019512:	931a      	str	r3, [sp, #104]	@ 0x68
 8019514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019518:	4654      	mov	r4, sl
 801951a:	2205      	movs	r2, #5
 801951c:	484f      	ldr	r0, [pc, #316]	@ (801965c <_svfiprintf_r+0x1e4>)
 801951e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019522:	f000 fcc9 	bl	8019eb8 <memchr>
 8019526:	9a04      	ldr	r2, [sp, #16]
 8019528:	b9d8      	cbnz	r0, 8019562 <_svfiprintf_r+0xea>
 801952a:	06d0      	lsls	r0, r2, #27
 801952c:	bf44      	itt	mi
 801952e:	2320      	movmi	r3, #32
 8019530:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019534:	0711      	lsls	r1, r2, #28
 8019536:	bf44      	itt	mi
 8019538:	232b      	movmi	r3, #43	@ 0x2b
 801953a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801953e:	f89a 3000 	ldrb.w	r3, [sl]
 8019542:	2b2a      	cmp	r3, #42	@ 0x2a
 8019544:	d015      	beq.n	8019572 <_svfiprintf_r+0xfa>
 8019546:	9a07      	ldr	r2, [sp, #28]
 8019548:	4654      	mov	r4, sl
 801954a:	2000      	movs	r0, #0
 801954c:	f04f 0c0a 	mov.w	ip, #10
 8019550:	4621      	mov	r1, r4
 8019552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019556:	3b30      	subs	r3, #48	@ 0x30
 8019558:	2b09      	cmp	r3, #9
 801955a:	d94b      	bls.n	80195f4 <_svfiprintf_r+0x17c>
 801955c:	b1b0      	cbz	r0, 801958c <_svfiprintf_r+0x114>
 801955e:	9207      	str	r2, [sp, #28]
 8019560:	e014      	b.n	801958c <_svfiprintf_r+0x114>
 8019562:	eba0 0308 	sub.w	r3, r0, r8
 8019566:	46a2      	mov	sl, r4
 8019568:	fa09 f303 	lsl.w	r3, r9, r3
 801956c:	4313      	orrs	r3, r2
 801956e:	9304      	str	r3, [sp, #16]
 8019570:	e7d2      	b.n	8019518 <_svfiprintf_r+0xa0>
 8019572:	9b03      	ldr	r3, [sp, #12]
 8019574:	1d19      	adds	r1, r3, #4
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	2b00      	cmp	r3, #0
 801957a:	9103      	str	r1, [sp, #12]
 801957c:	bfbb      	ittet	lt
 801957e:	425b      	neglt	r3, r3
 8019580:	f042 0202 	orrlt.w	r2, r2, #2
 8019584:	9307      	strge	r3, [sp, #28]
 8019586:	9307      	strlt	r3, [sp, #28]
 8019588:	bfb8      	it	lt
 801958a:	9204      	strlt	r2, [sp, #16]
 801958c:	7823      	ldrb	r3, [r4, #0]
 801958e:	2b2e      	cmp	r3, #46	@ 0x2e
 8019590:	d10a      	bne.n	80195a8 <_svfiprintf_r+0x130>
 8019592:	7863      	ldrb	r3, [r4, #1]
 8019594:	2b2a      	cmp	r3, #42	@ 0x2a
 8019596:	d132      	bne.n	80195fe <_svfiprintf_r+0x186>
 8019598:	9b03      	ldr	r3, [sp, #12]
 801959a:	3402      	adds	r4, #2
 801959c:	1d1a      	adds	r2, r3, #4
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80195a4:	9203      	str	r2, [sp, #12]
 80195a6:	9305      	str	r3, [sp, #20]
 80195a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801966c <_svfiprintf_r+0x1f4>
 80195ac:	2203      	movs	r2, #3
 80195ae:	7821      	ldrb	r1, [r4, #0]
 80195b0:	4650      	mov	r0, sl
 80195b2:	f000 fc81 	bl	8019eb8 <memchr>
 80195b6:	b138      	cbz	r0, 80195c8 <_svfiprintf_r+0x150>
 80195b8:	eba0 000a 	sub.w	r0, r0, sl
 80195bc:	2240      	movs	r2, #64	@ 0x40
 80195be:	9b04      	ldr	r3, [sp, #16]
 80195c0:	3401      	adds	r4, #1
 80195c2:	4082      	lsls	r2, r0
 80195c4:	4313      	orrs	r3, r2
 80195c6:	9304      	str	r3, [sp, #16]
 80195c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195cc:	2206      	movs	r2, #6
 80195ce:	4824      	ldr	r0, [pc, #144]	@ (8019660 <_svfiprintf_r+0x1e8>)
 80195d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80195d4:	f000 fc70 	bl	8019eb8 <memchr>
 80195d8:	2800      	cmp	r0, #0
 80195da:	d036      	beq.n	801964a <_svfiprintf_r+0x1d2>
 80195dc:	4b21      	ldr	r3, [pc, #132]	@ (8019664 <_svfiprintf_r+0x1ec>)
 80195de:	bb1b      	cbnz	r3, 8019628 <_svfiprintf_r+0x1b0>
 80195e0:	9b03      	ldr	r3, [sp, #12]
 80195e2:	3307      	adds	r3, #7
 80195e4:	f023 0307 	bic.w	r3, r3, #7
 80195e8:	3308      	adds	r3, #8
 80195ea:	9303      	str	r3, [sp, #12]
 80195ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80195ee:	4433      	add	r3, r6
 80195f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80195f2:	e76a      	b.n	80194ca <_svfiprintf_r+0x52>
 80195f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80195f8:	460c      	mov	r4, r1
 80195fa:	2001      	movs	r0, #1
 80195fc:	e7a8      	b.n	8019550 <_svfiprintf_r+0xd8>
 80195fe:	2300      	movs	r3, #0
 8019600:	3401      	adds	r4, #1
 8019602:	f04f 0c0a 	mov.w	ip, #10
 8019606:	4619      	mov	r1, r3
 8019608:	9305      	str	r3, [sp, #20]
 801960a:	4620      	mov	r0, r4
 801960c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019610:	3a30      	subs	r2, #48	@ 0x30
 8019612:	2a09      	cmp	r2, #9
 8019614:	d903      	bls.n	801961e <_svfiprintf_r+0x1a6>
 8019616:	2b00      	cmp	r3, #0
 8019618:	d0c6      	beq.n	80195a8 <_svfiprintf_r+0x130>
 801961a:	9105      	str	r1, [sp, #20]
 801961c:	e7c4      	b.n	80195a8 <_svfiprintf_r+0x130>
 801961e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019622:	4604      	mov	r4, r0
 8019624:	2301      	movs	r3, #1
 8019626:	e7f0      	b.n	801960a <_svfiprintf_r+0x192>
 8019628:	ab03      	add	r3, sp, #12
 801962a:	462a      	mov	r2, r5
 801962c:	a904      	add	r1, sp, #16
 801962e:	4638      	mov	r0, r7
 8019630:	9300      	str	r3, [sp, #0]
 8019632:	4b0d      	ldr	r3, [pc, #52]	@ (8019668 <_svfiprintf_r+0x1f0>)
 8019634:	f3af 8000 	nop.w
 8019638:	1c42      	adds	r2, r0, #1
 801963a:	4606      	mov	r6, r0
 801963c:	d1d6      	bne.n	80195ec <_svfiprintf_r+0x174>
 801963e:	89ab      	ldrh	r3, [r5, #12]
 8019640:	065b      	lsls	r3, r3, #25
 8019642:	f53f af2d 	bmi.w	80194a0 <_svfiprintf_r+0x28>
 8019646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019648:	e72c      	b.n	80194a4 <_svfiprintf_r+0x2c>
 801964a:	ab03      	add	r3, sp, #12
 801964c:	462a      	mov	r2, r5
 801964e:	a904      	add	r1, sp, #16
 8019650:	4638      	mov	r0, r7
 8019652:	9300      	str	r3, [sp, #0]
 8019654:	4b04      	ldr	r3, [pc, #16]	@ (8019668 <_svfiprintf_r+0x1f0>)
 8019656:	f000 f9bf 	bl	80199d8 <_printf_i>
 801965a:	e7ed      	b.n	8019638 <_svfiprintf_r+0x1c0>
 801965c:	0801d4dd 	.word	0x0801d4dd
 8019660:	0801d4e7 	.word	0x0801d4e7
 8019664:	00000000 	.word	0x00000000
 8019668:	080193c1 	.word	0x080193c1
 801966c:	0801d4e3 	.word	0x0801d4e3

08019670 <__sfputc_r>:
 8019670:	6893      	ldr	r3, [r2, #8]
 8019672:	3b01      	subs	r3, #1
 8019674:	2b00      	cmp	r3, #0
 8019676:	b410      	push	{r4}
 8019678:	6093      	str	r3, [r2, #8]
 801967a:	da08      	bge.n	801968e <__sfputc_r+0x1e>
 801967c:	6994      	ldr	r4, [r2, #24]
 801967e:	42a3      	cmp	r3, r4
 8019680:	db01      	blt.n	8019686 <__sfputc_r+0x16>
 8019682:	290a      	cmp	r1, #10
 8019684:	d103      	bne.n	801968e <__sfputc_r+0x1e>
 8019686:	f85d 4b04 	ldr.w	r4, [sp], #4
 801968a:	f7ff bc34 	b.w	8018ef6 <__swbuf_r>
 801968e:	6813      	ldr	r3, [r2, #0]
 8019690:	1c58      	adds	r0, r3, #1
 8019692:	6010      	str	r0, [r2, #0]
 8019694:	4608      	mov	r0, r1
 8019696:	7019      	strb	r1, [r3, #0]
 8019698:	f85d 4b04 	ldr.w	r4, [sp], #4
 801969c:	4770      	bx	lr

0801969e <__sfputs_r>:
 801969e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196a0:	4606      	mov	r6, r0
 80196a2:	460f      	mov	r7, r1
 80196a4:	4614      	mov	r4, r2
 80196a6:	18d5      	adds	r5, r2, r3
 80196a8:	42ac      	cmp	r4, r5
 80196aa:	d101      	bne.n	80196b0 <__sfputs_r+0x12>
 80196ac:	2000      	movs	r0, #0
 80196ae:	e007      	b.n	80196c0 <__sfputs_r+0x22>
 80196b0:	463a      	mov	r2, r7
 80196b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196b6:	4630      	mov	r0, r6
 80196b8:	f7ff ffda 	bl	8019670 <__sfputc_r>
 80196bc:	1c43      	adds	r3, r0, #1
 80196be:	d1f3      	bne.n	80196a8 <__sfputs_r+0xa>
 80196c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080196c4 <_vfiprintf_r>:
 80196c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196c8:	460d      	mov	r5, r1
 80196ca:	b09d      	sub	sp, #116	@ 0x74
 80196cc:	4614      	mov	r4, r2
 80196ce:	4698      	mov	r8, r3
 80196d0:	4606      	mov	r6, r0
 80196d2:	b118      	cbz	r0, 80196dc <_vfiprintf_r+0x18>
 80196d4:	6a03      	ldr	r3, [r0, #32]
 80196d6:	b90b      	cbnz	r3, 80196dc <_vfiprintf_r+0x18>
 80196d8:	f7ff faee 	bl	8018cb8 <__sinit>
 80196dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80196de:	07d9      	lsls	r1, r3, #31
 80196e0:	d405      	bmi.n	80196ee <_vfiprintf_r+0x2a>
 80196e2:	89ab      	ldrh	r3, [r5, #12]
 80196e4:	059a      	lsls	r2, r3, #22
 80196e6:	d402      	bmi.n	80196ee <_vfiprintf_r+0x2a>
 80196e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80196ea:	f7ff fd3c 	bl	8019166 <__retarget_lock_acquire_recursive>
 80196ee:	89ab      	ldrh	r3, [r5, #12]
 80196f0:	071b      	lsls	r3, r3, #28
 80196f2:	d501      	bpl.n	80196f8 <_vfiprintf_r+0x34>
 80196f4:	692b      	ldr	r3, [r5, #16]
 80196f6:	b99b      	cbnz	r3, 8019720 <_vfiprintf_r+0x5c>
 80196f8:	4629      	mov	r1, r5
 80196fa:	4630      	mov	r0, r6
 80196fc:	f7ff fc3a 	bl	8018f74 <__swsetup_r>
 8019700:	b170      	cbz	r0, 8019720 <_vfiprintf_r+0x5c>
 8019702:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019704:	07dc      	lsls	r4, r3, #31
 8019706:	d504      	bpl.n	8019712 <_vfiprintf_r+0x4e>
 8019708:	f04f 30ff 	mov.w	r0, #4294967295
 801970c:	b01d      	add	sp, #116	@ 0x74
 801970e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019712:	89ab      	ldrh	r3, [r5, #12]
 8019714:	0598      	lsls	r0, r3, #22
 8019716:	d4f7      	bmi.n	8019708 <_vfiprintf_r+0x44>
 8019718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801971a:	f7ff fd25 	bl	8019168 <__retarget_lock_release_recursive>
 801971e:	e7f3      	b.n	8019708 <_vfiprintf_r+0x44>
 8019720:	2300      	movs	r3, #0
 8019722:	f8cd 800c 	str.w	r8, [sp, #12]
 8019726:	f04f 0901 	mov.w	r9, #1
 801972a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80198e0 <_vfiprintf_r+0x21c>
 801972e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019730:	2320      	movs	r3, #32
 8019732:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019736:	2330      	movs	r3, #48	@ 0x30
 8019738:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801973c:	4623      	mov	r3, r4
 801973e:	469a      	mov	sl, r3
 8019740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019744:	b10a      	cbz	r2, 801974a <_vfiprintf_r+0x86>
 8019746:	2a25      	cmp	r2, #37	@ 0x25
 8019748:	d1f9      	bne.n	801973e <_vfiprintf_r+0x7a>
 801974a:	ebba 0b04 	subs.w	fp, sl, r4
 801974e:	d00b      	beq.n	8019768 <_vfiprintf_r+0xa4>
 8019750:	465b      	mov	r3, fp
 8019752:	4622      	mov	r2, r4
 8019754:	4629      	mov	r1, r5
 8019756:	4630      	mov	r0, r6
 8019758:	f7ff ffa1 	bl	801969e <__sfputs_r>
 801975c:	3001      	adds	r0, #1
 801975e:	f000 80a7 	beq.w	80198b0 <_vfiprintf_r+0x1ec>
 8019762:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019764:	445a      	add	r2, fp
 8019766:	9209      	str	r2, [sp, #36]	@ 0x24
 8019768:	f89a 3000 	ldrb.w	r3, [sl]
 801976c:	2b00      	cmp	r3, #0
 801976e:	f000 809f 	beq.w	80198b0 <_vfiprintf_r+0x1ec>
 8019772:	2300      	movs	r3, #0
 8019774:	f04f 32ff 	mov.w	r2, #4294967295
 8019778:	f10a 0a01 	add.w	sl, sl, #1
 801977c:	9304      	str	r3, [sp, #16]
 801977e:	9307      	str	r3, [sp, #28]
 8019780:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019784:	931a      	str	r3, [sp, #104]	@ 0x68
 8019786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801978a:	4654      	mov	r4, sl
 801978c:	2205      	movs	r2, #5
 801978e:	4854      	ldr	r0, [pc, #336]	@ (80198e0 <_vfiprintf_r+0x21c>)
 8019790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019794:	f000 fb90 	bl	8019eb8 <memchr>
 8019798:	9a04      	ldr	r2, [sp, #16]
 801979a:	b9d8      	cbnz	r0, 80197d4 <_vfiprintf_r+0x110>
 801979c:	06d1      	lsls	r1, r2, #27
 801979e:	bf44      	itt	mi
 80197a0:	2320      	movmi	r3, #32
 80197a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80197a6:	0713      	lsls	r3, r2, #28
 80197a8:	bf44      	itt	mi
 80197aa:	232b      	movmi	r3, #43	@ 0x2b
 80197ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80197b0:	f89a 3000 	ldrb.w	r3, [sl]
 80197b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80197b6:	d015      	beq.n	80197e4 <_vfiprintf_r+0x120>
 80197b8:	9a07      	ldr	r2, [sp, #28]
 80197ba:	4654      	mov	r4, sl
 80197bc:	2000      	movs	r0, #0
 80197be:	f04f 0c0a 	mov.w	ip, #10
 80197c2:	4621      	mov	r1, r4
 80197c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80197c8:	3b30      	subs	r3, #48	@ 0x30
 80197ca:	2b09      	cmp	r3, #9
 80197cc:	d94b      	bls.n	8019866 <_vfiprintf_r+0x1a2>
 80197ce:	b1b0      	cbz	r0, 80197fe <_vfiprintf_r+0x13a>
 80197d0:	9207      	str	r2, [sp, #28]
 80197d2:	e014      	b.n	80197fe <_vfiprintf_r+0x13a>
 80197d4:	eba0 0308 	sub.w	r3, r0, r8
 80197d8:	46a2      	mov	sl, r4
 80197da:	fa09 f303 	lsl.w	r3, r9, r3
 80197de:	4313      	orrs	r3, r2
 80197e0:	9304      	str	r3, [sp, #16]
 80197e2:	e7d2      	b.n	801978a <_vfiprintf_r+0xc6>
 80197e4:	9b03      	ldr	r3, [sp, #12]
 80197e6:	1d19      	adds	r1, r3, #4
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	9103      	str	r1, [sp, #12]
 80197ee:	bfbb      	ittet	lt
 80197f0:	425b      	neglt	r3, r3
 80197f2:	f042 0202 	orrlt.w	r2, r2, #2
 80197f6:	9307      	strge	r3, [sp, #28]
 80197f8:	9307      	strlt	r3, [sp, #28]
 80197fa:	bfb8      	it	lt
 80197fc:	9204      	strlt	r2, [sp, #16]
 80197fe:	7823      	ldrb	r3, [r4, #0]
 8019800:	2b2e      	cmp	r3, #46	@ 0x2e
 8019802:	d10a      	bne.n	801981a <_vfiprintf_r+0x156>
 8019804:	7863      	ldrb	r3, [r4, #1]
 8019806:	2b2a      	cmp	r3, #42	@ 0x2a
 8019808:	d132      	bne.n	8019870 <_vfiprintf_r+0x1ac>
 801980a:	9b03      	ldr	r3, [sp, #12]
 801980c:	3402      	adds	r4, #2
 801980e:	1d1a      	adds	r2, r3, #4
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019816:	9203      	str	r2, [sp, #12]
 8019818:	9305      	str	r3, [sp, #20]
 801981a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80198f0 <_vfiprintf_r+0x22c>
 801981e:	2203      	movs	r2, #3
 8019820:	7821      	ldrb	r1, [r4, #0]
 8019822:	4650      	mov	r0, sl
 8019824:	f000 fb48 	bl	8019eb8 <memchr>
 8019828:	b138      	cbz	r0, 801983a <_vfiprintf_r+0x176>
 801982a:	eba0 000a 	sub.w	r0, r0, sl
 801982e:	2240      	movs	r2, #64	@ 0x40
 8019830:	9b04      	ldr	r3, [sp, #16]
 8019832:	3401      	adds	r4, #1
 8019834:	4082      	lsls	r2, r0
 8019836:	4313      	orrs	r3, r2
 8019838:	9304      	str	r3, [sp, #16]
 801983a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801983e:	2206      	movs	r2, #6
 8019840:	4828      	ldr	r0, [pc, #160]	@ (80198e4 <_vfiprintf_r+0x220>)
 8019842:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019846:	f000 fb37 	bl	8019eb8 <memchr>
 801984a:	2800      	cmp	r0, #0
 801984c:	d03f      	beq.n	80198ce <_vfiprintf_r+0x20a>
 801984e:	4b26      	ldr	r3, [pc, #152]	@ (80198e8 <_vfiprintf_r+0x224>)
 8019850:	bb1b      	cbnz	r3, 801989a <_vfiprintf_r+0x1d6>
 8019852:	9b03      	ldr	r3, [sp, #12]
 8019854:	3307      	adds	r3, #7
 8019856:	f023 0307 	bic.w	r3, r3, #7
 801985a:	3308      	adds	r3, #8
 801985c:	9303      	str	r3, [sp, #12]
 801985e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019860:	443b      	add	r3, r7
 8019862:	9309      	str	r3, [sp, #36]	@ 0x24
 8019864:	e76a      	b.n	801973c <_vfiprintf_r+0x78>
 8019866:	fb0c 3202 	mla	r2, ip, r2, r3
 801986a:	460c      	mov	r4, r1
 801986c:	2001      	movs	r0, #1
 801986e:	e7a8      	b.n	80197c2 <_vfiprintf_r+0xfe>
 8019870:	2300      	movs	r3, #0
 8019872:	3401      	adds	r4, #1
 8019874:	f04f 0c0a 	mov.w	ip, #10
 8019878:	4619      	mov	r1, r3
 801987a:	9305      	str	r3, [sp, #20]
 801987c:	4620      	mov	r0, r4
 801987e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019882:	3a30      	subs	r2, #48	@ 0x30
 8019884:	2a09      	cmp	r2, #9
 8019886:	d903      	bls.n	8019890 <_vfiprintf_r+0x1cc>
 8019888:	2b00      	cmp	r3, #0
 801988a:	d0c6      	beq.n	801981a <_vfiprintf_r+0x156>
 801988c:	9105      	str	r1, [sp, #20]
 801988e:	e7c4      	b.n	801981a <_vfiprintf_r+0x156>
 8019890:	fb0c 2101 	mla	r1, ip, r1, r2
 8019894:	4604      	mov	r4, r0
 8019896:	2301      	movs	r3, #1
 8019898:	e7f0      	b.n	801987c <_vfiprintf_r+0x1b8>
 801989a:	ab03      	add	r3, sp, #12
 801989c:	462a      	mov	r2, r5
 801989e:	a904      	add	r1, sp, #16
 80198a0:	4630      	mov	r0, r6
 80198a2:	9300      	str	r3, [sp, #0]
 80198a4:	4b11      	ldr	r3, [pc, #68]	@ (80198ec <_vfiprintf_r+0x228>)
 80198a6:	f3af 8000 	nop.w
 80198aa:	4607      	mov	r7, r0
 80198ac:	1c78      	adds	r0, r7, #1
 80198ae:	d1d6      	bne.n	801985e <_vfiprintf_r+0x19a>
 80198b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80198b2:	07d9      	lsls	r1, r3, #31
 80198b4:	d405      	bmi.n	80198c2 <_vfiprintf_r+0x1fe>
 80198b6:	89ab      	ldrh	r3, [r5, #12]
 80198b8:	059a      	lsls	r2, r3, #22
 80198ba:	d402      	bmi.n	80198c2 <_vfiprintf_r+0x1fe>
 80198bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80198be:	f7ff fc53 	bl	8019168 <__retarget_lock_release_recursive>
 80198c2:	89ab      	ldrh	r3, [r5, #12]
 80198c4:	065b      	lsls	r3, r3, #25
 80198c6:	f53f af1f 	bmi.w	8019708 <_vfiprintf_r+0x44>
 80198ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80198cc:	e71e      	b.n	801970c <_vfiprintf_r+0x48>
 80198ce:	ab03      	add	r3, sp, #12
 80198d0:	462a      	mov	r2, r5
 80198d2:	a904      	add	r1, sp, #16
 80198d4:	4630      	mov	r0, r6
 80198d6:	9300      	str	r3, [sp, #0]
 80198d8:	4b04      	ldr	r3, [pc, #16]	@ (80198ec <_vfiprintf_r+0x228>)
 80198da:	f000 f87d 	bl	80199d8 <_printf_i>
 80198de:	e7e4      	b.n	80198aa <_vfiprintf_r+0x1e6>
 80198e0:	0801d4dd 	.word	0x0801d4dd
 80198e4:	0801d4e7 	.word	0x0801d4e7
 80198e8:	00000000 	.word	0x00000000
 80198ec:	0801969f 	.word	0x0801969f
 80198f0:	0801d4e3 	.word	0x0801d4e3

080198f4 <_printf_common>:
 80198f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198f8:	4616      	mov	r6, r2
 80198fa:	4698      	mov	r8, r3
 80198fc:	688a      	ldr	r2, [r1, #8]
 80198fe:	4607      	mov	r7, r0
 8019900:	690b      	ldr	r3, [r1, #16]
 8019902:	460c      	mov	r4, r1
 8019904:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019908:	4293      	cmp	r3, r2
 801990a:	bfb8      	it	lt
 801990c:	4613      	movlt	r3, r2
 801990e:	6033      	str	r3, [r6, #0]
 8019910:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019914:	b10a      	cbz	r2, 801991a <_printf_common+0x26>
 8019916:	3301      	adds	r3, #1
 8019918:	6033      	str	r3, [r6, #0]
 801991a:	6823      	ldr	r3, [r4, #0]
 801991c:	0699      	lsls	r1, r3, #26
 801991e:	bf42      	ittt	mi
 8019920:	6833      	ldrmi	r3, [r6, #0]
 8019922:	3302      	addmi	r3, #2
 8019924:	6033      	strmi	r3, [r6, #0]
 8019926:	6825      	ldr	r5, [r4, #0]
 8019928:	f015 0506 	ands.w	r5, r5, #6
 801992c:	d106      	bne.n	801993c <_printf_common+0x48>
 801992e:	f104 0a19 	add.w	sl, r4, #25
 8019932:	68e3      	ldr	r3, [r4, #12]
 8019934:	6832      	ldr	r2, [r6, #0]
 8019936:	1a9b      	subs	r3, r3, r2
 8019938:	42ab      	cmp	r3, r5
 801993a:	dc2b      	bgt.n	8019994 <_printf_common+0xa0>
 801993c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019940:	6822      	ldr	r2, [r4, #0]
 8019942:	3b00      	subs	r3, #0
 8019944:	bf18      	it	ne
 8019946:	2301      	movne	r3, #1
 8019948:	0692      	lsls	r2, r2, #26
 801994a:	d430      	bmi.n	80199ae <_printf_common+0xba>
 801994c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019950:	4641      	mov	r1, r8
 8019952:	4638      	mov	r0, r7
 8019954:	47c8      	blx	r9
 8019956:	3001      	adds	r0, #1
 8019958:	d023      	beq.n	80199a2 <_printf_common+0xae>
 801995a:	6823      	ldr	r3, [r4, #0]
 801995c:	341a      	adds	r4, #26
 801995e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8019962:	f003 0306 	and.w	r3, r3, #6
 8019966:	2b04      	cmp	r3, #4
 8019968:	bf0a      	itet	eq
 801996a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801996e:	2500      	movne	r5, #0
 8019970:	6833      	ldreq	r3, [r6, #0]
 8019972:	f04f 0600 	mov.w	r6, #0
 8019976:	bf08      	it	eq
 8019978:	1aed      	subeq	r5, r5, r3
 801997a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801997e:	bf08      	it	eq
 8019980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019984:	4293      	cmp	r3, r2
 8019986:	bfc4      	itt	gt
 8019988:	1a9b      	subgt	r3, r3, r2
 801998a:	18ed      	addgt	r5, r5, r3
 801998c:	42b5      	cmp	r5, r6
 801998e:	d11a      	bne.n	80199c6 <_printf_common+0xd2>
 8019990:	2000      	movs	r0, #0
 8019992:	e008      	b.n	80199a6 <_printf_common+0xb2>
 8019994:	2301      	movs	r3, #1
 8019996:	4652      	mov	r2, sl
 8019998:	4641      	mov	r1, r8
 801999a:	4638      	mov	r0, r7
 801999c:	47c8      	blx	r9
 801999e:	3001      	adds	r0, #1
 80199a0:	d103      	bne.n	80199aa <_printf_common+0xb6>
 80199a2:	f04f 30ff 	mov.w	r0, #4294967295
 80199a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199aa:	3501      	adds	r5, #1
 80199ac:	e7c1      	b.n	8019932 <_printf_common+0x3e>
 80199ae:	18e1      	adds	r1, r4, r3
 80199b0:	1c5a      	adds	r2, r3, #1
 80199b2:	2030      	movs	r0, #48	@ 0x30
 80199b4:	3302      	adds	r3, #2
 80199b6:	4422      	add	r2, r4
 80199b8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80199bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80199c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80199c4:	e7c2      	b.n	801994c <_printf_common+0x58>
 80199c6:	2301      	movs	r3, #1
 80199c8:	4622      	mov	r2, r4
 80199ca:	4641      	mov	r1, r8
 80199cc:	4638      	mov	r0, r7
 80199ce:	47c8      	blx	r9
 80199d0:	3001      	adds	r0, #1
 80199d2:	d0e6      	beq.n	80199a2 <_printf_common+0xae>
 80199d4:	3601      	adds	r6, #1
 80199d6:	e7d9      	b.n	801998c <_printf_common+0x98>

080199d8 <_printf_i>:
 80199d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80199dc:	7e0f      	ldrb	r7, [r1, #24]
 80199de:	4691      	mov	r9, r2
 80199e0:	4680      	mov	r8, r0
 80199e2:	460c      	mov	r4, r1
 80199e4:	2f78      	cmp	r7, #120	@ 0x78
 80199e6:	469a      	mov	sl, r3
 80199e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80199ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80199ee:	d807      	bhi.n	8019a00 <_printf_i+0x28>
 80199f0:	2f62      	cmp	r7, #98	@ 0x62
 80199f2:	d80a      	bhi.n	8019a0a <_printf_i+0x32>
 80199f4:	2f00      	cmp	r7, #0
 80199f6:	f000 80d1 	beq.w	8019b9c <_printf_i+0x1c4>
 80199fa:	2f58      	cmp	r7, #88	@ 0x58
 80199fc:	f000 80b8 	beq.w	8019b70 <_printf_i+0x198>
 8019a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019a04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019a08:	e03a      	b.n	8019a80 <_printf_i+0xa8>
 8019a0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019a0e:	2b15      	cmp	r3, #21
 8019a10:	d8f6      	bhi.n	8019a00 <_printf_i+0x28>
 8019a12:	a101      	add	r1, pc, #4	@ (adr r1, 8019a18 <_printf_i+0x40>)
 8019a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019a18:	08019a71 	.word	0x08019a71
 8019a1c:	08019a85 	.word	0x08019a85
 8019a20:	08019a01 	.word	0x08019a01
 8019a24:	08019a01 	.word	0x08019a01
 8019a28:	08019a01 	.word	0x08019a01
 8019a2c:	08019a01 	.word	0x08019a01
 8019a30:	08019a85 	.word	0x08019a85
 8019a34:	08019a01 	.word	0x08019a01
 8019a38:	08019a01 	.word	0x08019a01
 8019a3c:	08019a01 	.word	0x08019a01
 8019a40:	08019a01 	.word	0x08019a01
 8019a44:	08019b83 	.word	0x08019b83
 8019a48:	08019aaf 	.word	0x08019aaf
 8019a4c:	08019b3d 	.word	0x08019b3d
 8019a50:	08019a01 	.word	0x08019a01
 8019a54:	08019a01 	.word	0x08019a01
 8019a58:	08019ba5 	.word	0x08019ba5
 8019a5c:	08019a01 	.word	0x08019a01
 8019a60:	08019aaf 	.word	0x08019aaf
 8019a64:	08019a01 	.word	0x08019a01
 8019a68:	08019a01 	.word	0x08019a01
 8019a6c:	08019b45 	.word	0x08019b45
 8019a70:	6833      	ldr	r3, [r6, #0]
 8019a72:	1d1a      	adds	r2, r3, #4
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	6032      	str	r2, [r6, #0]
 8019a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019a7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019a80:	2301      	movs	r3, #1
 8019a82:	e09c      	b.n	8019bbe <_printf_i+0x1e6>
 8019a84:	6833      	ldr	r3, [r6, #0]
 8019a86:	6820      	ldr	r0, [r4, #0]
 8019a88:	1d19      	adds	r1, r3, #4
 8019a8a:	6031      	str	r1, [r6, #0]
 8019a8c:	0606      	lsls	r6, r0, #24
 8019a8e:	d501      	bpl.n	8019a94 <_printf_i+0xbc>
 8019a90:	681d      	ldr	r5, [r3, #0]
 8019a92:	e003      	b.n	8019a9c <_printf_i+0xc4>
 8019a94:	0645      	lsls	r5, r0, #25
 8019a96:	d5fb      	bpl.n	8019a90 <_printf_i+0xb8>
 8019a98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019a9c:	2d00      	cmp	r5, #0
 8019a9e:	da03      	bge.n	8019aa8 <_printf_i+0xd0>
 8019aa0:	232d      	movs	r3, #45	@ 0x2d
 8019aa2:	426d      	negs	r5, r5
 8019aa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019aa8:	4858      	ldr	r0, [pc, #352]	@ (8019c0c <_printf_i+0x234>)
 8019aaa:	230a      	movs	r3, #10
 8019aac:	e011      	b.n	8019ad2 <_printf_i+0xfa>
 8019aae:	6821      	ldr	r1, [r4, #0]
 8019ab0:	6833      	ldr	r3, [r6, #0]
 8019ab2:	0608      	lsls	r0, r1, #24
 8019ab4:	f853 5b04 	ldr.w	r5, [r3], #4
 8019ab8:	d402      	bmi.n	8019ac0 <_printf_i+0xe8>
 8019aba:	0649      	lsls	r1, r1, #25
 8019abc:	bf48      	it	mi
 8019abe:	b2ad      	uxthmi	r5, r5
 8019ac0:	2f6f      	cmp	r7, #111	@ 0x6f
 8019ac2:	6033      	str	r3, [r6, #0]
 8019ac4:	4851      	ldr	r0, [pc, #324]	@ (8019c0c <_printf_i+0x234>)
 8019ac6:	bf14      	ite	ne
 8019ac8:	230a      	movne	r3, #10
 8019aca:	2308      	moveq	r3, #8
 8019acc:	2100      	movs	r1, #0
 8019ace:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019ad2:	6866      	ldr	r6, [r4, #4]
 8019ad4:	2e00      	cmp	r6, #0
 8019ad6:	60a6      	str	r6, [r4, #8]
 8019ad8:	db05      	blt.n	8019ae6 <_printf_i+0x10e>
 8019ada:	6821      	ldr	r1, [r4, #0]
 8019adc:	432e      	orrs	r6, r5
 8019ade:	f021 0104 	bic.w	r1, r1, #4
 8019ae2:	6021      	str	r1, [r4, #0]
 8019ae4:	d04b      	beq.n	8019b7e <_printf_i+0x1a6>
 8019ae6:	4616      	mov	r6, r2
 8019ae8:	fbb5 f1f3 	udiv	r1, r5, r3
 8019aec:	fb03 5711 	mls	r7, r3, r1, r5
 8019af0:	5dc7      	ldrb	r7, [r0, r7]
 8019af2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019af6:	462f      	mov	r7, r5
 8019af8:	460d      	mov	r5, r1
 8019afa:	42bb      	cmp	r3, r7
 8019afc:	d9f4      	bls.n	8019ae8 <_printf_i+0x110>
 8019afe:	2b08      	cmp	r3, #8
 8019b00:	d10b      	bne.n	8019b1a <_printf_i+0x142>
 8019b02:	6823      	ldr	r3, [r4, #0]
 8019b04:	07df      	lsls	r7, r3, #31
 8019b06:	d508      	bpl.n	8019b1a <_printf_i+0x142>
 8019b08:	6923      	ldr	r3, [r4, #16]
 8019b0a:	6861      	ldr	r1, [r4, #4]
 8019b0c:	4299      	cmp	r1, r3
 8019b0e:	bfde      	ittt	le
 8019b10:	2330      	movle	r3, #48	@ 0x30
 8019b12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019b16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019b1a:	1b92      	subs	r2, r2, r6
 8019b1c:	6122      	str	r2, [r4, #16]
 8019b1e:	464b      	mov	r3, r9
 8019b20:	aa03      	add	r2, sp, #12
 8019b22:	4621      	mov	r1, r4
 8019b24:	4640      	mov	r0, r8
 8019b26:	f8cd a000 	str.w	sl, [sp]
 8019b2a:	f7ff fee3 	bl	80198f4 <_printf_common>
 8019b2e:	3001      	adds	r0, #1
 8019b30:	d14a      	bne.n	8019bc8 <_printf_i+0x1f0>
 8019b32:	f04f 30ff 	mov.w	r0, #4294967295
 8019b36:	b004      	add	sp, #16
 8019b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b3c:	6823      	ldr	r3, [r4, #0]
 8019b3e:	f043 0320 	orr.w	r3, r3, #32
 8019b42:	6023      	str	r3, [r4, #0]
 8019b44:	2778      	movs	r7, #120	@ 0x78
 8019b46:	4832      	ldr	r0, [pc, #200]	@ (8019c10 <_printf_i+0x238>)
 8019b48:	6823      	ldr	r3, [r4, #0]
 8019b4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019b4e:	061f      	lsls	r7, r3, #24
 8019b50:	6831      	ldr	r1, [r6, #0]
 8019b52:	f851 5b04 	ldr.w	r5, [r1], #4
 8019b56:	d402      	bmi.n	8019b5e <_printf_i+0x186>
 8019b58:	065f      	lsls	r7, r3, #25
 8019b5a:	bf48      	it	mi
 8019b5c:	b2ad      	uxthmi	r5, r5
 8019b5e:	6031      	str	r1, [r6, #0]
 8019b60:	07d9      	lsls	r1, r3, #31
 8019b62:	bf44      	itt	mi
 8019b64:	f043 0320 	orrmi.w	r3, r3, #32
 8019b68:	6023      	strmi	r3, [r4, #0]
 8019b6a:	b11d      	cbz	r5, 8019b74 <_printf_i+0x19c>
 8019b6c:	2310      	movs	r3, #16
 8019b6e:	e7ad      	b.n	8019acc <_printf_i+0xf4>
 8019b70:	4826      	ldr	r0, [pc, #152]	@ (8019c0c <_printf_i+0x234>)
 8019b72:	e7e9      	b.n	8019b48 <_printf_i+0x170>
 8019b74:	6823      	ldr	r3, [r4, #0]
 8019b76:	f023 0320 	bic.w	r3, r3, #32
 8019b7a:	6023      	str	r3, [r4, #0]
 8019b7c:	e7f6      	b.n	8019b6c <_printf_i+0x194>
 8019b7e:	4616      	mov	r6, r2
 8019b80:	e7bd      	b.n	8019afe <_printf_i+0x126>
 8019b82:	6833      	ldr	r3, [r6, #0]
 8019b84:	6825      	ldr	r5, [r4, #0]
 8019b86:	1d18      	adds	r0, r3, #4
 8019b88:	6961      	ldr	r1, [r4, #20]
 8019b8a:	6030      	str	r0, [r6, #0]
 8019b8c:	062e      	lsls	r6, r5, #24
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	d501      	bpl.n	8019b96 <_printf_i+0x1be>
 8019b92:	6019      	str	r1, [r3, #0]
 8019b94:	e002      	b.n	8019b9c <_printf_i+0x1c4>
 8019b96:	0668      	lsls	r0, r5, #25
 8019b98:	d5fb      	bpl.n	8019b92 <_printf_i+0x1ba>
 8019b9a:	8019      	strh	r1, [r3, #0]
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	4616      	mov	r6, r2
 8019ba0:	6123      	str	r3, [r4, #16]
 8019ba2:	e7bc      	b.n	8019b1e <_printf_i+0x146>
 8019ba4:	6833      	ldr	r3, [r6, #0]
 8019ba6:	2100      	movs	r1, #0
 8019ba8:	1d1a      	adds	r2, r3, #4
 8019baa:	6032      	str	r2, [r6, #0]
 8019bac:	681e      	ldr	r6, [r3, #0]
 8019bae:	6862      	ldr	r2, [r4, #4]
 8019bb0:	4630      	mov	r0, r6
 8019bb2:	f000 f981 	bl	8019eb8 <memchr>
 8019bb6:	b108      	cbz	r0, 8019bbc <_printf_i+0x1e4>
 8019bb8:	1b80      	subs	r0, r0, r6
 8019bba:	6060      	str	r0, [r4, #4]
 8019bbc:	6863      	ldr	r3, [r4, #4]
 8019bbe:	6123      	str	r3, [r4, #16]
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019bc6:	e7aa      	b.n	8019b1e <_printf_i+0x146>
 8019bc8:	6923      	ldr	r3, [r4, #16]
 8019bca:	4632      	mov	r2, r6
 8019bcc:	4649      	mov	r1, r9
 8019bce:	4640      	mov	r0, r8
 8019bd0:	47d0      	blx	sl
 8019bd2:	3001      	adds	r0, #1
 8019bd4:	d0ad      	beq.n	8019b32 <_printf_i+0x15a>
 8019bd6:	6823      	ldr	r3, [r4, #0]
 8019bd8:	079b      	lsls	r3, r3, #30
 8019bda:	d413      	bmi.n	8019c04 <_printf_i+0x22c>
 8019bdc:	68e0      	ldr	r0, [r4, #12]
 8019bde:	9b03      	ldr	r3, [sp, #12]
 8019be0:	4298      	cmp	r0, r3
 8019be2:	bfb8      	it	lt
 8019be4:	4618      	movlt	r0, r3
 8019be6:	e7a6      	b.n	8019b36 <_printf_i+0x15e>
 8019be8:	2301      	movs	r3, #1
 8019bea:	4632      	mov	r2, r6
 8019bec:	4649      	mov	r1, r9
 8019bee:	4640      	mov	r0, r8
 8019bf0:	47d0      	blx	sl
 8019bf2:	3001      	adds	r0, #1
 8019bf4:	d09d      	beq.n	8019b32 <_printf_i+0x15a>
 8019bf6:	3501      	adds	r5, #1
 8019bf8:	68e3      	ldr	r3, [r4, #12]
 8019bfa:	9903      	ldr	r1, [sp, #12]
 8019bfc:	1a5b      	subs	r3, r3, r1
 8019bfe:	42ab      	cmp	r3, r5
 8019c00:	dcf2      	bgt.n	8019be8 <_printf_i+0x210>
 8019c02:	e7eb      	b.n	8019bdc <_printf_i+0x204>
 8019c04:	2500      	movs	r5, #0
 8019c06:	f104 0619 	add.w	r6, r4, #25
 8019c0a:	e7f5      	b.n	8019bf8 <_printf_i+0x220>
 8019c0c:	0801d4ee 	.word	0x0801d4ee
 8019c10:	0801d4ff 	.word	0x0801d4ff

08019c14 <__sflush_r>:
 8019c14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c1c:	0716      	lsls	r6, r2, #28
 8019c1e:	4605      	mov	r5, r0
 8019c20:	460c      	mov	r4, r1
 8019c22:	d454      	bmi.n	8019cce <__sflush_r+0xba>
 8019c24:	684b      	ldr	r3, [r1, #4]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	dc02      	bgt.n	8019c30 <__sflush_r+0x1c>
 8019c2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	dd48      	ble.n	8019cc2 <__sflush_r+0xae>
 8019c30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019c32:	2e00      	cmp	r6, #0
 8019c34:	d045      	beq.n	8019cc2 <__sflush_r+0xae>
 8019c36:	2300      	movs	r3, #0
 8019c38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019c3c:	682f      	ldr	r7, [r5, #0]
 8019c3e:	6a21      	ldr	r1, [r4, #32]
 8019c40:	602b      	str	r3, [r5, #0]
 8019c42:	d030      	beq.n	8019ca6 <__sflush_r+0x92>
 8019c44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019c46:	89a3      	ldrh	r3, [r4, #12]
 8019c48:	0759      	lsls	r1, r3, #29
 8019c4a:	d505      	bpl.n	8019c58 <__sflush_r+0x44>
 8019c4c:	6863      	ldr	r3, [r4, #4]
 8019c4e:	1ad2      	subs	r2, r2, r3
 8019c50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019c52:	b10b      	cbz	r3, 8019c58 <__sflush_r+0x44>
 8019c54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019c56:	1ad2      	subs	r2, r2, r3
 8019c58:	2300      	movs	r3, #0
 8019c5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019c5c:	6a21      	ldr	r1, [r4, #32]
 8019c5e:	4628      	mov	r0, r5
 8019c60:	47b0      	blx	r6
 8019c62:	1c43      	adds	r3, r0, #1
 8019c64:	89a3      	ldrh	r3, [r4, #12]
 8019c66:	d106      	bne.n	8019c76 <__sflush_r+0x62>
 8019c68:	6829      	ldr	r1, [r5, #0]
 8019c6a:	291d      	cmp	r1, #29
 8019c6c:	d82b      	bhi.n	8019cc6 <__sflush_r+0xb2>
 8019c6e:	4a2a      	ldr	r2, [pc, #168]	@ (8019d18 <__sflush_r+0x104>)
 8019c70:	40ca      	lsrs	r2, r1
 8019c72:	07d6      	lsls	r6, r2, #31
 8019c74:	d527      	bpl.n	8019cc6 <__sflush_r+0xb2>
 8019c76:	2200      	movs	r2, #0
 8019c78:	04d9      	lsls	r1, r3, #19
 8019c7a:	6062      	str	r2, [r4, #4]
 8019c7c:	6922      	ldr	r2, [r4, #16]
 8019c7e:	6022      	str	r2, [r4, #0]
 8019c80:	d504      	bpl.n	8019c8c <__sflush_r+0x78>
 8019c82:	1c42      	adds	r2, r0, #1
 8019c84:	d101      	bne.n	8019c8a <__sflush_r+0x76>
 8019c86:	682b      	ldr	r3, [r5, #0]
 8019c88:	b903      	cbnz	r3, 8019c8c <__sflush_r+0x78>
 8019c8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8019c8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019c8e:	602f      	str	r7, [r5, #0]
 8019c90:	b1b9      	cbz	r1, 8019cc2 <__sflush_r+0xae>
 8019c92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019c96:	4299      	cmp	r1, r3
 8019c98:	d002      	beq.n	8019ca0 <__sflush_r+0x8c>
 8019c9a:	4628      	mov	r0, r5
 8019c9c:	f7ff fa90 	bl	80191c0 <_free_r>
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	6363      	str	r3, [r4, #52]	@ 0x34
 8019ca4:	e00d      	b.n	8019cc2 <__sflush_r+0xae>
 8019ca6:	2301      	movs	r3, #1
 8019ca8:	4628      	mov	r0, r5
 8019caa:	47b0      	blx	r6
 8019cac:	4602      	mov	r2, r0
 8019cae:	1c50      	adds	r0, r2, #1
 8019cb0:	d1c9      	bne.n	8019c46 <__sflush_r+0x32>
 8019cb2:	682b      	ldr	r3, [r5, #0]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d0c6      	beq.n	8019c46 <__sflush_r+0x32>
 8019cb8:	2b1d      	cmp	r3, #29
 8019cba:	d001      	beq.n	8019cc0 <__sflush_r+0xac>
 8019cbc:	2b16      	cmp	r3, #22
 8019cbe:	d11d      	bne.n	8019cfc <__sflush_r+0xe8>
 8019cc0:	602f      	str	r7, [r5, #0]
 8019cc2:	2000      	movs	r0, #0
 8019cc4:	e021      	b.n	8019d0a <__sflush_r+0xf6>
 8019cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019cca:	b21b      	sxth	r3, r3
 8019ccc:	e01a      	b.n	8019d04 <__sflush_r+0xf0>
 8019cce:	690f      	ldr	r7, [r1, #16]
 8019cd0:	2f00      	cmp	r7, #0
 8019cd2:	d0f6      	beq.n	8019cc2 <__sflush_r+0xae>
 8019cd4:	0793      	lsls	r3, r2, #30
 8019cd6:	680e      	ldr	r6, [r1, #0]
 8019cd8:	600f      	str	r7, [r1, #0]
 8019cda:	bf0c      	ite	eq
 8019cdc:	694b      	ldreq	r3, [r1, #20]
 8019cde:	2300      	movne	r3, #0
 8019ce0:	eba6 0807 	sub.w	r8, r6, r7
 8019ce4:	608b      	str	r3, [r1, #8]
 8019ce6:	f1b8 0f00 	cmp.w	r8, #0
 8019cea:	ddea      	ble.n	8019cc2 <__sflush_r+0xae>
 8019cec:	4643      	mov	r3, r8
 8019cee:	463a      	mov	r2, r7
 8019cf0:	6a21      	ldr	r1, [r4, #32]
 8019cf2:	4628      	mov	r0, r5
 8019cf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019cf6:	47b0      	blx	r6
 8019cf8:	2800      	cmp	r0, #0
 8019cfa:	dc08      	bgt.n	8019d0e <__sflush_r+0xfa>
 8019cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019d04:	f04f 30ff 	mov.w	r0, #4294967295
 8019d08:	81a3      	strh	r3, [r4, #12]
 8019d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d0e:	4407      	add	r7, r0
 8019d10:	eba8 0800 	sub.w	r8, r8, r0
 8019d14:	e7e7      	b.n	8019ce6 <__sflush_r+0xd2>
 8019d16:	bf00      	nop
 8019d18:	20400001 	.word	0x20400001

08019d1c <_fflush_r>:
 8019d1c:	b538      	push	{r3, r4, r5, lr}
 8019d1e:	690b      	ldr	r3, [r1, #16]
 8019d20:	4605      	mov	r5, r0
 8019d22:	460c      	mov	r4, r1
 8019d24:	b913      	cbnz	r3, 8019d2c <_fflush_r+0x10>
 8019d26:	2500      	movs	r5, #0
 8019d28:	4628      	mov	r0, r5
 8019d2a:	bd38      	pop	{r3, r4, r5, pc}
 8019d2c:	b118      	cbz	r0, 8019d36 <_fflush_r+0x1a>
 8019d2e:	6a03      	ldr	r3, [r0, #32]
 8019d30:	b90b      	cbnz	r3, 8019d36 <_fflush_r+0x1a>
 8019d32:	f7fe ffc1 	bl	8018cb8 <__sinit>
 8019d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d0f3      	beq.n	8019d26 <_fflush_r+0xa>
 8019d3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019d40:	07d0      	lsls	r0, r2, #31
 8019d42:	d404      	bmi.n	8019d4e <_fflush_r+0x32>
 8019d44:	0599      	lsls	r1, r3, #22
 8019d46:	d402      	bmi.n	8019d4e <_fflush_r+0x32>
 8019d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019d4a:	f7ff fa0c 	bl	8019166 <__retarget_lock_acquire_recursive>
 8019d4e:	4628      	mov	r0, r5
 8019d50:	4621      	mov	r1, r4
 8019d52:	f7ff ff5f 	bl	8019c14 <__sflush_r>
 8019d56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019d58:	4605      	mov	r5, r0
 8019d5a:	07da      	lsls	r2, r3, #31
 8019d5c:	d4e4      	bmi.n	8019d28 <_fflush_r+0xc>
 8019d5e:	89a3      	ldrh	r3, [r4, #12]
 8019d60:	059b      	lsls	r3, r3, #22
 8019d62:	d4e1      	bmi.n	8019d28 <_fflush_r+0xc>
 8019d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019d66:	f7ff f9ff 	bl	8019168 <__retarget_lock_release_recursive>
 8019d6a:	e7dd      	b.n	8019d28 <_fflush_r+0xc>

08019d6c <fiprintf>:
 8019d6c:	b40e      	push	{r1, r2, r3}
 8019d6e:	b503      	push	{r0, r1, lr}
 8019d70:	ab03      	add	r3, sp, #12
 8019d72:	4601      	mov	r1, r0
 8019d74:	4805      	ldr	r0, [pc, #20]	@ (8019d8c <fiprintf+0x20>)
 8019d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d7a:	6800      	ldr	r0, [r0, #0]
 8019d7c:	9301      	str	r3, [sp, #4]
 8019d7e:	f7ff fca1 	bl	80196c4 <_vfiprintf_r>
 8019d82:	b002      	add	sp, #8
 8019d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d88:	b003      	add	sp, #12
 8019d8a:	4770      	bx	lr
 8019d8c:	20000040 	.word	0x20000040

08019d90 <__swhatbuf_r>:
 8019d90:	b570      	push	{r4, r5, r6, lr}
 8019d92:	460c      	mov	r4, r1
 8019d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d98:	b096      	sub	sp, #88	@ 0x58
 8019d9a:	4615      	mov	r5, r2
 8019d9c:	2900      	cmp	r1, #0
 8019d9e:	461e      	mov	r6, r3
 8019da0:	da0c      	bge.n	8019dbc <__swhatbuf_r+0x2c>
 8019da2:	89a3      	ldrh	r3, [r4, #12]
 8019da4:	2100      	movs	r1, #0
 8019da6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019daa:	bf14      	ite	ne
 8019dac:	2340      	movne	r3, #64	@ 0x40
 8019dae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019db2:	2000      	movs	r0, #0
 8019db4:	6031      	str	r1, [r6, #0]
 8019db6:	602b      	str	r3, [r5, #0]
 8019db8:	b016      	add	sp, #88	@ 0x58
 8019dba:	bd70      	pop	{r4, r5, r6, pc}
 8019dbc:	466a      	mov	r2, sp
 8019dbe:	f000 f849 	bl	8019e54 <_fstat_r>
 8019dc2:	2800      	cmp	r0, #0
 8019dc4:	dbed      	blt.n	8019da2 <__swhatbuf_r+0x12>
 8019dc6:	9901      	ldr	r1, [sp, #4]
 8019dc8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019dcc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019dd0:	4259      	negs	r1, r3
 8019dd2:	4159      	adcs	r1, r3
 8019dd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019dd8:	e7eb      	b.n	8019db2 <__swhatbuf_r+0x22>

08019dda <__smakebuf_r>:
 8019dda:	898b      	ldrh	r3, [r1, #12]
 8019ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019dde:	079d      	lsls	r5, r3, #30
 8019de0:	4606      	mov	r6, r0
 8019de2:	460c      	mov	r4, r1
 8019de4:	d507      	bpl.n	8019df6 <__smakebuf_r+0x1c>
 8019de6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019dea:	6023      	str	r3, [r4, #0]
 8019dec:	6123      	str	r3, [r4, #16]
 8019dee:	2301      	movs	r3, #1
 8019df0:	6163      	str	r3, [r4, #20]
 8019df2:	b003      	add	sp, #12
 8019df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019df6:	ab01      	add	r3, sp, #4
 8019df8:	466a      	mov	r2, sp
 8019dfa:	f7ff ffc9 	bl	8019d90 <__swhatbuf_r>
 8019dfe:	9f00      	ldr	r7, [sp, #0]
 8019e00:	4605      	mov	r5, r0
 8019e02:	4630      	mov	r0, r6
 8019e04:	4639      	mov	r1, r7
 8019e06:	f7ff fa4f 	bl	80192a8 <_malloc_r>
 8019e0a:	b948      	cbnz	r0, 8019e20 <__smakebuf_r+0x46>
 8019e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e10:	059a      	lsls	r2, r3, #22
 8019e12:	d4ee      	bmi.n	8019df2 <__smakebuf_r+0x18>
 8019e14:	f023 0303 	bic.w	r3, r3, #3
 8019e18:	f043 0302 	orr.w	r3, r3, #2
 8019e1c:	81a3      	strh	r3, [r4, #12]
 8019e1e:	e7e2      	b.n	8019de6 <__smakebuf_r+0xc>
 8019e20:	89a3      	ldrh	r3, [r4, #12]
 8019e22:	6020      	str	r0, [r4, #0]
 8019e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019e28:	81a3      	strh	r3, [r4, #12]
 8019e2a:	9b01      	ldr	r3, [sp, #4]
 8019e2c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019e30:	b15b      	cbz	r3, 8019e4a <__smakebuf_r+0x70>
 8019e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019e36:	4630      	mov	r0, r6
 8019e38:	f000 f81e 	bl	8019e78 <_isatty_r>
 8019e3c:	b128      	cbz	r0, 8019e4a <__smakebuf_r+0x70>
 8019e3e:	89a3      	ldrh	r3, [r4, #12]
 8019e40:	f023 0303 	bic.w	r3, r3, #3
 8019e44:	f043 0301 	orr.w	r3, r3, #1
 8019e48:	81a3      	strh	r3, [r4, #12]
 8019e4a:	89a3      	ldrh	r3, [r4, #12]
 8019e4c:	431d      	orrs	r5, r3
 8019e4e:	81a5      	strh	r5, [r4, #12]
 8019e50:	e7cf      	b.n	8019df2 <__smakebuf_r+0x18>
	...

08019e54 <_fstat_r>:
 8019e54:	b538      	push	{r3, r4, r5, lr}
 8019e56:	2300      	movs	r3, #0
 8019e58:	4d06      	ldr	r5, [pc, #24]	@ (8019e74 <_fstat_r+0x20>)
 8019e5a:	4604      	mov	r4, r0
 8019e5c:	4608      	mov	r0, r1
 8019e5e:	4611      	mov	r1, r2
 8019e60:	602b      	str	r3, [r5, #0]
 8019e62:	f7e8 f9bc 	bl	80021de <_fstat>
 8019e66:	1c43      	adds	r3, r0, #1
 8019e68:	d102      	bne.n	8019e70 <_fstat_r+0x1c>
 8019e6a:	682b      	ldr	r3, [r5, #0]
 8019e6c:	b103      	cbz	r3, 8019e70 <_fstat_r+0x1c>
 8019e6e:	6023      	str	r3, [r4, #0]
 8019e70:	bd38      	pop	{r3, r4, r5, pc}
 8019e72:	bf00      	nop
 8019e74:	2000a5e0 	.word	0x2000a5e0

08019e78 <_isatty_r>:
 8019e78:	b538      	push	{r3, r4, r5, lr}
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	4d05      	ldr	r5, [pc, #20]	@ (8019e94 <_isatty_r+0x1c>)
 8019e7e:	4604      	mov	r4, r0
 8019e80:	4608      	mov	r0, r1
 8019e82:	602b      	str	r3, [r5, #0]
 8019e84:	f7e8 f9bb 	bl	80021fe <_isatty>
 8019e88:	1c43      	adds	r3, r0, #1
 8019e8a:	d102      	bne.n	8019e92 <_isatty_r+0x1a>
 8019e8c:	682b      	ldr	r3, [r5, #0]
 8019e8e:	b103      	cbz	r3, 8019e92 <_isatty_r+0x1a>
 8019e90:	6023      	str	r3, [r4, #0]
 8019e92:	bd38      	pop	{r3, r4, r5, pc}
 8019e94:	2000a5e0 	.word	0x2000a5e0

08019e98 <_sbrk_r>:
 8019e98:	b538      	push	{r3, r4, r5, lr}
 8019e9a:	2300      	movs	r3, #0
 8019e9c:	4d05      	ldr	r5, [pc, #20]	@ (8019eb4 <_sbrk_r+0x1c>)
 8019e9e:	4604      	mov	r4, r0
 8019ea0:	4608      	mov	r0, r1
 8019ea2:	602b      	str	r3, [r5, #0]
 8019ea4:	f7e8 f9c4 	bl	8002230 <_sbrk>
 8019ea8:	1c43      	adds	r3, r0, #1
 8019eaa:	d102      	bne.n	8019eb2 <_sbrk_r+0x1a>
 8019eac:	682b      	ldr	r3, [r5, #0]
 8019eae:	b103      	cbz	r3, 8019eb2 <_sbrk_r+0x1a>
 8019eb0:	6023      	str	r3, [r4, #0]
 8019eb2:	bd38      	pop	{r3, r4, r5, pc}
 8019eb4:	2000a5e0 	.word	0x2000a5e0

08019eb8 <memchr>:
 8019eb8:	b2c9      	uxtb	r1, r1
 8019eba:	4603      	mov	r3, r0
 8019ebc:	4402      	add	r2, r0
 8019ebe:	b510      	push	{r4, lr}
 8019ec0:	4293      	cmp	r3, r2
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	d101      	bne.n	8019eca <memchr+0x12>
 8019ec6:	2000      	movs	r0, #0
 8019ec8:	e003      	b.n	8019ed2 <memchr+0x1a>
 8019eca:	7804      	ldrb	r4, [r0, #0]
 8019ecc:	3301      	adds	r3, #1
 8019ece:	428c      	cmp	r4, r1
 8019ed0:	d1f6      	bne.n	8019ec0 <memchr+0x8>
 8019ed2:	bd10      	pop	{r4, pc}

08019ed4 <abort>:
 8019ed4:	2006      	movs	r0, #6
 8019ed6:	b508      	push	{r3, lr}
 8019ed8:	f000 f85a 	bl	8019f90 <raise>
 8019edc:	2001      	movs	r0, #1
 8019ede:	f7e8 f92e 	bl	800213e <_exit>

08019ee2 <_realloc_r>:
 8019ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ee6:	4607      	mov	r7, r0
 8019ee8:	4614      	mov	r4, r2
 8019eea:	460d      	mov	r5, r1
 8019eec:	b921      	cbnz	r1, 8019ef8 <_realloc_r+0x16>
 8019eee:	4611      	mov	r1, r2
 8019ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ef4:	f7ff b9d8 	b.w	80192a8 <_malloc_r>
 8019ef8:	b92a      	cbnz	r2, 8019f06 <_realloc_r+0x24>
 8019efa:	4625      	mov	r5, r4
 8019efc:	f7ff f960 	bl	80191c0 <_free_r>
 8019f00:	4628      	mov	r0, r5
 8019f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f06:	f000 f85f 	bl	8019fc8 <_malloc_usable_size_r>
 8019f0a:	4284      	cmp	r4, r0
 8019f0c:	4606      	mov	r6, r0
 8019f0e:	d802      	bhi.n	8019f16 <_realloc_r+0x34>
 8019f10:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019f14:	d8f4      	bhi.n	8019f00 <_realloc_r+0x1e>
 8019f16:	4621      	mov	r1, r4
 8019f18:	4638      	mov	r0, r7
 8019f1a:	f7ff f9c5 	bl	80192a8 <_malloc_r>
 8019f1e:	4680      	mov	r8, r0
 8019f20:	b908      	cbnz	r0, 8019f26 <_realloc_r+0x44>
 8019f22:	4645      	mov	r5, r8
 8019f24:	e7ec      	b.n	8019f00 <_realloc_r+0x1e>
 8019f26:	42b4      	cmp	r4, r6
 8019f28:	4622      	mov	r2, r4
 8019f2a:	4629      	mov	r1, r5
 8019f2c:	bf28      	it	cs
 8019f2e:	4632      	movcs	r2, r6
 8019f30:	f7ff f91b 	bl	801916a <memcpy>
 8019f34:	4629      	mov	r1, r5
 8019f36:	4638      	mov	r0, r7
 8019f38:	f7ff f942 	bl	80191c0 <_free_r>
 8019f3c:	e7f1      	b.n	8019f22 <_realloc_r+0x40>

08019f3e <_raise_r>:
 8019f3e:	291f      	cmp	r1, #31
 8019f40:	b538      	push	{r3, r4, r5, lr}
 8019f42:	4605      	mov	r5, r0
 8019f44:	460c      	mov	r4, r1
 8019f46:	d904      	bls.n	8019f52 <_raise_r+0x14>
 8019f48:	2316      	movs	r3, #22
 8019f4a:	6003      	str	r3, [r0, #0]
 8019f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f50:	bd38      	pop	{r3, r4, r5, pc}
 8019f52:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019f54:	b112      	cbz	r2, 8019f5c <_raise_r+0x1e>
 8019f56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019f5a:	b94b      	cbnz	r3, 8019f70 <_raise_r+0x32>
 8019f5c:	4628      	mov	r0, r5
 8019f5e:	f000 f831 	bl	8019fc4 <_getpid_r>
 8019f62:	4622      	mov	r2, r4
 8019f64:	4601      	mov	r1, r0
 8019f66:	4628      	mov	r0, r5
 8019f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f6c:	f000 b818 	b.w	8019fa0 <_kill_r>
 8019f70:	2b01      	cmp	r3, #1
 8019f72:	d00a      	beq.n	8019f8a <_raise_r+0x4c>
 8019f74:	1c59      	adds	r1, r3, #1
 8019f76:	d103      	bne.n	8019f80 <_raise_r+0x42>
 8019f78:	2316      	movs	r3, #22
 8019f7a:	6003      	str	r3, [r0, #0]
 8019f7c:	2001      	movs	r0, #1
 8019f7e:	e7e7      	b.n	8019f50 <_raise_r+0x12>
 8019f80:	2100      	movs	r1, #0
 8019f82:	4620      	mov	r0, r4
 8019f84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019f88:	4798      	blx	r3
 8019f8a:	2000      	movs	r0, #0
 8019f8c:	e7e0      	b.n	8019f50 <_raise_r+0x12>
	...

08019f90 <raise>:
 8019f90:	4b02      	ldr	r3, [pc, #8]	@ (8019f9c <raise+0xc>)
 8019f92:	4601      	mov	r1, r0
 8019f94:	6818      	ldr	r0, [r3, #0]
 8019f96:	f7ff bfd2 	b.w	8019f3e <_raise_r>
 8019f9a:	bf00      	nop
 8019f9c:	20000040 	.word	0x20000040

08019fa0 <_kill_r>:
 8019fa0:	b538      	push	{r3, r4, r5, lr}
 8019fa2:	2300      	movs	r3, #0
 8019fa4:	4d06      	ldr	r5, [pc, #24]	@ (8019fc0 <_kill_r+0x20>)
 8019fa6:	4604      	mov	r4, r0
 8019fa8:	4608      	mov	r0, r1
 8019faa:	4611      	mov	r1, r2
 8019fac:	602b      	str	r3, [r5, #0]
 8019fae:	f7e8 f8b6 	bl	800211e <_kill>
 8019fb2:	1c43      	adds	r3, r0, #1
 8019fb4:	d102      	bne.n	8019fbc <_kill_r+0x1c>
 8019fb6:	682b      	ldr	r3, [r5, #0]
 8019fb8:	b103      	cbz	r3, 8019fbc <_kill_r+0x1c>
 8019fba:	6023      	str	r3, [r4, #0]
 8019fbc:	bd38      	pop	{r3, r4, r5, pc}
 8019fbe:	bf00      	nop
 8019fc0:	2000a5e0 	.word	0x2000a5e0

08019fc4 <_getpid_r>:
 8019fc4:	f7e8 b8a3 	b.w	800210e <_getpid>

08019fc8 <_malloc_usable_size_r>:
 8019fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019fcc:	1f18      	subs	r0, r3, #4
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	bfbc      	itt	lt
 8019fd2:	580b      	ldrlt	r3, [r1, r0]
 8019fd4:	18c0      	addlt	r0, r0, r3
 8019fd6:	4770      	bx	lr

08019fd8 <pow>:
 8019fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fda:	ec55 4b11 	vmov	r4, r5, d1
 8019fde:	ed2d 8b02 	vpush	{d8}
 8019fe2:	eeb0 8a40 	vmov.f32	s16, s0
 8019fe6:	eef0 8a60 	vmov.f32	s17, s1
 8019fea:	f000 f871 	bl	801a0d0 <__ieee754_pow>
 8019fee:	4622      	mov	r2, r4
 8019ff0:	462b      	mov	r3, r5
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	4629      	mov	r1, r5
 8019ff6:	ec57 6b10 	vmov	r6, r7, d0
 8019ffa:	f7e6 fd9f 	bl	8000b3c <__aeabi_dcmpun>
 8019ffe:	2800      	cmp	r0, #0
 801a000:	d13b      	bne.n	801a07a <pow+0xa2>
 801a002:	2200      	movs	r2, #0
 801a004:	2300      	movs	r3, #0
 801a006:	ec51 0b18 	vmov	r0, r1, d8
 801a00a:	f7e6 fd65 	bl	8000ad8 <__aeabi_dcmpeq>
 801a00e:	b1b8      	cbz	r0, 801a040 <pow+0x68>
 801a010:	2200      	movs	r2, #0
 801a012:	2300      	movs	r3, #0
 801a014:	4620      	mov	r0, r4
 801a016:	4629      	mov	r1, r5
 801a018:	f7e6 fd5e 	bl	8000ad8 <__aeabi_dcmpeq>
 801a01c:	2800      	cmp	r0, #0
 801a01e:	d146      	bne.n	801a0ae <pow+0xd6>
 801a020:	ec45 4b10 	vmov	d0, r4, r5
 801a024:	f000 f848 	bl	801a0b8 <finite>
 801a028:	b338      	cbz	r0, 801a07a <pow+0xa2>
 801a02a:	2200      	movs	r2, #0
 801a02c:	2300      	movs	r3, #0
 801a02e:	4620      	mov	r0, r4
 801a030:	4629      	mov	r1, r5
 801a032:	f7e6 fd5b 	bl	8000aec <__aeabi_dcmplt>
 801a036:	b300      	cbz	r0, 801a07a <pow+0xa2>
 801a038:	f7ff f86a 	bl	8019110 <__errno>
 801a03c:	2322      	movs	r3, #34	@ 0x22
 801a03e:	e01b      	b.n	801a078 <pow+0xa0>
 801a040:	ec47 6b10 	vmov	d0, r6, r7
 801a044:	f000 f838 	bl	801a0b8 <finite>
 801a048:	b9e0      	cbnz	r0, 801a084 <pow+0xac>
 801a04a:	eeb0 0a48 	vmov.f32	s0, s16
 801a04e:	eef0 0a68 	vmov.f32	s1, s17
 801a052:	f000 f831 	bl	801a0b8 <finite>
 801a056:	b1a8      	cbz	r0, 801a084 <pow+0xac>
 801a058:	ec45 4b10 	vmov	d0, r4, r5
 801a05c:	f000 f82c 	bl	801a0b8 <finite>
 801a060:	b180      	cbz	r0, 801a084 <pow+0xac>
 801a062:	4632      	mov	r2, r6
 801a064:	463b      	mov	r3, r7
 801a066:	4630      	mov	r0, r6
 801a068:	4639      	mov	r1, r7
 801a06a:	f7e6 fd67 	bl	8000b3c <__aeabi_dcmpun>
 801a06e:	2800      	cmp	r0, #0
 801a070:	d0e2      	beq.n	801a038 <pow+0x60>
 801a072:	f7ff f84d 	bl	8019110 <__errno>
 801a076:	2321      	movs	r3, #33	@ 0x21
 801a078:	6003      	str	r3, [r0, #0]
 801a07a:	ecbd 8b02 	vpop	{d8}
 801a07e:	ec47 6b10 	vmov	d0, r6, r7
 801a082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a084:	2200      	movs	r2, #0
 801a086:	2300      	movs	r3, #0
 801a088:	4630      	mov	r0, r6
 801a08a:	4639      	mov	r1, r7
 801a08c:	f7e6 fd24 	bl	8000ad8 <__aeabi_dcmpeq>
 801a090:	2800      	cmp	r0, #0
 801a092:	d0f2      	beq.n	801a07a <pow+0xa2>
 801a094:	eeb0 0a48 	vmov.f32	s0, s16
 801a098:	eef0 0a68 	vmov.f32	s1, s17
 801a09c:	f000 f80c 	bl	801a0b8 <finite>
 801a0a0:	2800      	cmp	r0, #0
 801a0a2:	d0ea      	beq.n	801a07a <pow+0xa2>
 801a0a4:	ec45 4b10 	vmov	d0, r4, r5
 801a0a8:	f000 f806 	bl	801a0b8 <finite>
 801a0ac:	e7c3      	b.n	801a036 <pow+0x5e>
 801a0ae:	2600      	movs	r6, #0
 801a0b0:	4f00      	ldr	r7, [pc, #0]	@ (801a0b4 <pow+0xdc>)
 801a0b2:	e7e2      	b.n	801a07a <pow+0xa2>
 801a0b4:	3ff00000 	.word	0x3ff00000

0801a0b8 <finite>:
 801a0b8:	b082      	sub	sp, #8
 801a0ba:	ed8d 0b00 	vstr	d0, [sp]
 801a0be:	9801      	ldr	r0, [sp, #4]
 801a0c0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801a0c4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801a0c8:	0fc0      	lsrs	r0, r0, #31
 801a0ca:	b002      	add	sp, #8
 801a0cc:	4770      	bx	lr
	...

0801a0d0 <__ieee754_pow>:
 801a0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0d4:	b091      	sub	sp, #68	@ 0x44
 801a0d6:	ed8d 1b00 	vstr	d1, [sp]
 801a0da:	e9dd 1900 	ldrd	r1, r9, [sp]
 801a0de:	ec57 6b10 	vmov	r6, r7, d0
 801a0e2:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801a0e6:	ea5a 0001 	orrs.w	r0, sl, r1
 801a0ea:	d113      	bne.n	801a114 <__ieee754_pow+0x44>
 801a0ec:	19b3      	adds	r3, r6, r6
 801a0ee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801a0f2:	4152      	adcs	r2, r2
 801a0f4:	4298      	cmp	r0, r3
 801a0f6:	4b9a      	ldr	r3, [pc, #616]	@ (801a360 <__ieee754_pow+0x290>)
 801a0f8:	4193      	sbcs	r3, r2
 801a0fa:	f080 84ef 	bcs.w	801aadc <__ieee754_pow+0xa0c>
 801a0fe:	4630      	mov	r0, r6
 801a100:	4639      	mov	r1, r7
 801a102:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a106:	f7e6 f8c9 	bl	800029c <__adddf3>
 801a10a:	ec41 0b10 	vmov	d0, r0, r1
 801a10e:	b011      	add	sp, #68	@ 0x44
 801a110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a114:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 801a118:	4a92      	ldr	r2, [pc, #584]	@ (801a364 <__ieee754_pow+0x294>)
 801a11a:	46b8      	mov	r8, r7
 801a11c:	4633      	mov	r3, r6
 801a11e:	4295      	cmp	r5, r2
 801a120:	d80a      	bhi.n	801a138 <__ieee754_pow+0x68>
 801a122:	d104      	bne.n	801a12e <__ieee754_pow+0x5e>
 801a124:	2e00      	cmp	r6, #0
 801a126:	d1ea      	bne.n	801a0fe <__ieee754_pow+0x2e>
 801a128:	45aa      	cmp	sl, r5
 801a12a:	d8e8      	bhi.n	801a0fe <__ieee754_pow+0x2e>
 801a12c:	e001      	b.n	801a132 <__ieee754_pow+0x62>
 801a12e:	4592      	cmp	sl, r2
 801a130:	d802      	bhi.n	801a138 <__ieee754_pow+0x68>
 801a132:	4592      	cmp	sl, r2
 801a134:	d10f      	bne.n	801a156 <__ieee754_pow+0x86>
 801a136:	b171      	cbz	r1, 801a156 <__ieee754_pow+0x86>
 801a138:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801a13c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801a140:	ea58 0803 	orrs.w	r8, r8, r3
 801a144:	d1db      	bne.n	801a0fe <__ieee754_pow+0x2e>
 801a146:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a14a:	18db      	adds	r3, r3, r3
 801a14c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801a150:	4152      	adcs	r2, r2
 801a152:	4598      	cmp	r8, r3
 801a154:	e7cf      	b.n	801a0f6 <__ieee754_pow+0x26>
 801a156:	f1b8 0f00 	cmp.w	r8, #0
 801a15a:	46ab      	mov	fp, r5
 801a15c:	da43      	bge.n	801a1e6 <__ieee754_pow+0x116>
 801a15e:	4a82      	ldr	r2, [pc, #520]	@ (801a368 <__ieee754_pow+0x298>)
 801a160:	4592      	cmp	sl, r2
 801a162:	d856      	bhi.n	801a212 <__ieee754_pow+0x142>
 801a164:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801a168:	4592      	cmp	sl, r2
 801a16a:	f240 84c6 	bls.w	801aafa <__ieee754_pow+0xa2a>
 801a16e:	ea4f 522a 	mov.w	r2, sl, asr #20
 801a172:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801a176:	2a14      	cmp	r2, #20
 801a178:	dd18      	ble.n	801a1ac <__ieee754_pow+0xdc>
 801a17a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801a17e:	fa21 f402 	lsr.w	r4, r1, r2
 801a182:	fa04 f202 	lsl.w	r2, r4, r2
 801a186:	428a      	cmp	r2, r1
 801a188:	f040 84b7 	bne.w	801aafa <__ieee754_pow+0xa2a>
 801a18c:	f004 0401 	and.w	r4, r4, #1
 801a190:	f1c4 0402 	rsb	r4, r4, #2
 801a194:	2900      	cmp	r1, #0
 801a196:	d159      	bne.n	801a24c <__ieee754_pow+0x17c>
 801a198:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801a19c:	d148      	bne.n	801a230 <__ieee754_pow+0x160>
 801a19e:	4632      	mov	r2, r6
 801a1a0:	463b      	mov	r3, r7
 801a1a2:	4630      	mov	r0, r6
 801a1a4:	4639      	mov	r1, r7
 801a1a6:	f7e6 fa2f 	bl	8000608 <__aeabi_dmul>
 801a1aa:	e7ae      	b.n	801a10a <__ieee754_pow+0x3a>
 801a1ac:	2900      	cmp	r1, #0
 801a1ae:	d14c      	bne.n	801a24a <__ieee754_pow+0x17a>
 801a1b0:	f1c2 0214 	rsb	r2, r2, #20
 801a1b4:	fa4a f402 	asr.w	r4, sl, r2
 801a1b8:	fa04 f202 	lsl.w	r2, r4, r2
 801a1bc:	4552      	cmp	r2, sl
 801a1be:	f040 8499 	bne.w	801aaf4 <__ieee754_pow+0xa24>
 801a1c2:	f004 0401 	and.w	r4, r4, #1
 801a1c6:	f1c4 0402 	rsb	r4, r4, #2
 801a1ca:	4a68      	ldr	r2, [pc, #416]	@ (801a36c <__ieee754_pow+0x29c>)
 801a1cc:	4592      	cmp	sl, r2
 801a1ce:	d1e3      	bne.n	801a198 <__ieee754_pow+0xc8>
 801a1d0:	f1b9 0f00 	cmp.w	r9, #0
 801a1d4:	f280 848a 	bge.w	801aaec <__ieee754_pow+0xa1c>
 801a1d8:	4632      	mov	r2, r6
 801a1da:	463b      	mov	r3, r7
 801a1dc:	2000      	movs	r0, #0
 801a1de:	4963      	ldr	r1, [pc, #396]	@ (801a36c <__ieee754_pow+0x29c>)
 801a1e0:	f7e6 fb3c 	bl	800085c <__aeabi_ddiv>
 801a1e4:	e791      	b.n	801a10a <__ieee754_pow+0x3a>
 801a1e6:	2400      	movs	r4, #0
 801a1e8:	bb81      	cbnz	r1, 801a24c <__ieee754_pow+0x17c>
 801a1ea:	4a5e      	ldr	r2, [pc, #376]	@ (801a364 <__ieee754_pow+0x294>)
 801a1ec:	4592      	cmp	sl, r2
 801a1ee:	d1ec      	bne.n	801a1ca <__ieee754_pow+0xfa>
 801a1f0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 801a1f4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801a1f8:	431a      	orrs	r2, r3
 801a1fa:	f000 846f 	beq.w	801aadc <__ieee754_pow+0xa0c>
 801a1fe:	4b5c      	ldr	r3, [pc, #368]	@ (801a370 <__ieee754_pow+0x2a0>)
 801a200:	429d      	cmp	r5, r3
 801a202:	d908      	bls.n	801a216 <__ieee754_pow+0x146>
 801a204:	f1b9 0f00 	cmp.w	r9, #0
 801a208:	f280 846c 	bge.w	801aae4 <__ieee754_pow+0xa14>
 801a20c:	2000      	movs	r0, #0
 801a20e:	2100      	movs	r1, #0
 801a210:	e77b      	b.n	801a10a <__ieee754_pow+0x3a>
 801a212:	2402      	movs	r4, #2
 801a214:	e7e8      	b.n	801a1e8 <__ieee754_pow+0x118>
 801a216:	f1b9 0f00 	cmp.w	r9, #0
 801a21a:	f04f 0000 	mov.w	r0, #0
 801a21e:	f04f 0100 	mov.w	r1, #0
 801a222:	f6bf af72 	bge.w	801a10a <__ieee754_pow+0x3a>
 801a226:	e9dd 0300 	ldrd	r0, r3, [sp]
 801a22a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801a22e:	e76c      	b.n	801a10a <__ieee754_pow+0x3a>
 801a230:	4a50      	ldr	r2, [pc, #320]	@ (801a374 <__ieee754_pow+0x2a4>)
 801a232:	4591      	cmp	r9, r2
 801a234:	d10a      	bne.n	801a24c <__ieee754_pow+0x17c>
 801a236:	f1b8 0f00 	cmp.w	r8, #0
 801a23a:	db07      	blt.n	801a24c <__ieee754_pow+0x17c>
 801a23c:	ec47 6b10 	vmov	d0, r6, r7
 801a240:	b011      	add	sp, #68	@ 0x44
 801a242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a246:	f000 bd4f 	b.w	801ace8 <__ieee754_sqrt>
 801a24a:	2400      	movs	r4, #0
 801a24c:	9302      	str	r3, [sp, #8]
 801a24e:	ec47 6b10 	vmov	d0, r6, r7
 801a252:	f000 fc87 	bl	801ab64 <fabs>
 801a256:	9b02      	ldr	r3, [sp, #8]
 801a258:	ec51 0b10 	vmov	r0, r1, d0
 801a25c:	bb43      	cbnz	r3, 801a2b0 <__ieee754_pow+0x1e0>
 801a25e:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 801a262:	4b42      	ldr	r3, [pc, #264]	@ (801a36c <__ieee754_pow+0x29c>)
 801a264:	429a      	cmp	r2, r3
 801a266:	d000      	beq.n	801a26a <__ieee754_pow+0x19a>
 801a268:	bb15      	cbnz	r5, 801a2b0 <__ieee754_pow+0x1e0>
 801a26a:	f1b9 0f00 	cmp.w	r9, #0
 801a26e:	da05      	bge.n	801a27c <__ieee754_pow+0x1ac>
 801a270:	4602      	mov	r2, r0
 801a272:	460b      	mov	r3, r1
 801a274:	2000      	movs	r0, #0
 801a276:	493d      	ldr	r1, [pc, #244]	@ (801a36c <__ieee754_pow+0x29c>)
 801a278:	f7e6 faf0 	bl	800085c <__aeabi_ddiv>
 801a27c:	f1b8 0f00 	cmp.w	r8, #0
 801a280:	f6bf af43 	bge.w	801a10a <__ieee754_pow+0x3a>
 801a284:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801a288:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801a28c:	4325      	orrs	r5, r4
 801a28e:	d108      	bne.n	801a2a2 <__ieee754_pow+0x1d2>
 801a290:	4602      	mov	r2, r0
 801a292:	460b      	mov	r3, r1
 801a294:	4610      	mov	r0, r2
 801a296:	4619      	mov	r1, r3
 801a298:	f7e5 fffe 	bl	8000298 <__aeabi_dsub>
 801a29c:	4602      	mov	r2, r0
 801a29e:	460b      	mov	r3, r1
 801a2a0:	e79e      	b.n	801a1e0 <__ieee754_pow+0x110>
 801a2a2:	2c01      	cmp	r4, #1
 801a2a4:	f47f af31 	bne.w	801a10a <__ieee754_pow+0x3a>
 801a2a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a2ac:	4619      	mov	r1, r3
 801a2ae:	e72c      	b.n	801a10a <__ieee754_pow+0x3a>
 801a2b0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 801a2b4:	3b01      	subs	r3, #1
 801a2b6:	ea53 0204 	orrs.w	r2, r3, r4
 801a2ba:	d102      	bne.n	801a2c2 <__ieee754_pow+0x1f2>
 801a2bc:	4632      	mov	r2, r6
 801a2be:	463b      	mov	r3, r7
 801a2c0:	e7e8      	b.n	801a294 <__ieee754_pow+0x1c4>
 801a2c2:	3c01      	subs	r4, #1
 801a2c4:	431c      	orrs	r4, r3
 801a2c6:	d016      	beq.n	801a2f6 <__ieee754_pow+0x226>
 801a2c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801a350 <__ieee754_pow+0x280>
 801a2cc:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801a2d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a2d4:	f240 8110 	bls.w	801a4f8 <__ieee754_pow+0x428>
 801a2d8:	4b27      	ldr	r3, [pc, #156]	@ (801a378 <__ieee754_pow+0x2a8>)
 801a2da:	459a      	cmp	sl, r3
 801a2dc:	4b24      	ldr	r3, [pc, #144]	@ (801a370 <__ieee754_pow+0x2a0>)
 801a2de:	d916      	bls.n	801a30e <__ieee754_pow+0x23e>
 801a2e0:	429d      	cmp	r5, r3
 801a2e2:	d80b      	bhi.n	801a2fc <__ieee754_pow+0x22c>
 801a2e4:	f1b9 0f00 	cmp.w	r9, #0
 801a2e8:	da0b      	bge.n	801a302 <__ieee754_pow+0x232>
 801a2ea:	2000      	movs	r0, #0
 801a2ec:	b011      	add	sp, #68	@ 0x44
 801a2ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2f2:	f000 bcf1 	b.w	801acd8 <__math_oflow>
 801a2f6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 801a358 <__ieee754_pow+0x288>
 801a2fa:	e7e7      	b.n	801a2cc <__ieee754_pow+0x1fc>
 801a2fc:	f1b9 0f00 	cmp.w	r9, #0
 801a300:	dcf3      	bgt.n	801a2ea <__ieee754_pow+0x21a>
 801a302:	2000      	movs	r0, #0
 801a304:	b011      	add	sp, #68	@ 0x44
 801a306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a30a:	f000 bcdd 	b.w	801acc8 <__math_uflow>
 801a30e:	429d      	cmp	r5, r3
 801a310:	d20c      	bcs.n	801a32c <__ieee754_pow+0x25c>
 801a312:	2200      	movs	r2, #0
 801a314:	2300      	movs	r3, #0
 801a316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a31a:	f7e6 fbe7 	bl	8000aec <__aeabi_dcmplt>
 801a31e:	3800      	subs	r0, #0
 801a320:	bf18      	it	ne
 801a322:	2001      	movne	r0, #1
 801a324:	f1b9 0f00 	cmp.w	r9, #0
 801a328:	daec      	bge.n	801a304 <__ieee754_pow+0x234>
 801a32a:	e7df      	b.n	801a2ec <__ieee754_pow+0x21c>
 801a32c:	4b0f      	ldr	r3, [pc, #60]	@ (801a36c <__ieee754_pow+0x29c>)
 801a32e:	2200      	movs	r2, #0
 801a330:	429d      	cmp	r5, r3
 801a332:	d923      	bls.n	801a37c <__ieee754_pow+0x2ac>
 801a334:	2300      	movs	r3, #0
 801a336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a33a:	f7e6 fbd7 	bl	8000aec <__aeabi_dcmplt>
 801a33e:	3800      	subs	r0, #0
 801a340:	bf18      	it	ne
 801a342:	2001      	movne	r0, #1
 801a344:	f1b9 0f00 	cmp.w	r9, #0
 801a348:	dcd0      	bgt.n	801a2ec <__ieee754_pow+0x21c>
 801a34a:	e7db      	b.n	801a304 <__ieee754_pow+0x234>
 801a34c:	f3af 8000 	nop.w
 801a350:	00000000 	.word	0x00000000
 801a354:	3ff00000 	.word	0x3ff00000
 801a358:	00000000 	.word	0x00000000
 801a35c:	bff00000 	.word	0xbff00000
 801a360:	fff00000 	.word	0xfff00000
 801a364:	7ff00000 	.word	0x7ff00000
 801a368:	433fffff 	.word	0x433fffff
 801a36c:	3ff00000 	.word	0x3ff00000
 801a370:	3fefffff 	.word	0x3fefffff
 801a374:	3fe00000 	.word	0x3fe00000
 801a378:	43f00000 	.word	0x43f00000
 801a37c:	4b5a      	ldr	r3, [pc, #360]	@ (801a4e8 <__ieee754_pow+0x418>)
 801a37e:	f7e5 ff8b 	bl	8000298 <__aeabi_dsub>
 801a382:	4604      	mov	r4, r0
 801a384:	460d      	mov	r5, r1
 801a386:	a350      	add	r3, pc, #320	@ (adr r3, 801a4c8 <__ieee754_pow+0x3f8>)
 801a388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a38c:	f7e6 f93c 	bl	8000608 <__aeabi_dmul>
 801a390:	4606      	mov	r6, r0
 801a392:	460f      	mov	r7, r1
 801a394:	4620      	mov	r0, r4
 801a396:	4629      	mov	r1, r5
 801a398:	a34d      	add	r3, pc, #308	@ (adr r3, 801a4d0 <__ieee754_pow+0x400>)
 801a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a39e:	f7e6 f933 	bl	8000608 <__aeabi_dmul>
 801a3a2:	2200      	movs	r2, #0
 801a3a4:	4682      	mov	sl, r0
 801a3a6:	468b      	mov	fp, r1
 801a3a8:	4b50      	ldr	r3, [pc, #320]	@ (801a4ec <__ieee754_pow+0x41c>)
 801a3aa:	4620      	mov	r0, r4
 801a3ac:	4629      	mov	r1, r5
 801a3ae:	f7e6 f92b 	bl	8000608 <__aeabi_dmul>
 801a3b2:	4602      	mov	r2, r0
 801a3b4:	460b      	mov	r3, r1
 801a3b6:	a148      	add	r1, pc, #288	@ (adr r1, 801a4d8 <__ieee754_pow+0x408>)
 801a3b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a3bc:	f7e5 ff6c 	bl	8000298 <__aeabi_dsub>
 801a3c0:	4622      	mov	r2, r4
 801a3c2:	462b      	mov	r3, r5
 801a3c4:	f7e6 f920 	bl	8000608 <__aeabi_dmul>
 801a3c8:	4602      	mov	r2, r0
 801a3ca:	460b      	mov	r3, r1
 801a3cc:	2000      	movs	r0, #0
 801a3ce:	4948      	ldr	r1, [pc, #288]	@ (801a4f0 <__ieee754_pow+0x420>)
 801a3d0:	f7e5 ff62 	bl	8000298 <__aeabi_dsub>
 801a3d4:	4680      	mov	r8, r0
 801a3d6:	4689      	mov	r9, r1
 801a3d8:	4622      	mov	r2, r4
 801a3da:	462b      	mov	r3, r5
 801a3dc:	4620      	mov	r0, r4
 801a3de:	4629      	mov	r1, r5
 801a3e0:	2400      	movs	r4, #0
 801a3e2:	f7e6 f911 	bl	8000608 <__aeabi_dmul>
 801a3e6:	4602      	mov	r2, r0
 801a3e8:	460b      	mov	r3, r1
 801a3ea:	4640      	mov	r0, r8
 801a3ec:	4649      	mov	r1, r9
 801a3ee:	f7e6 f90b 	bl	8000608 <__aeabi_dmul>
 801a3f2:	a33b      	add	r3, pc, #236	@ (adr r3, 801a4e0 <__ieee754_pow+0x410>)
 801a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3f8:	f7e6 f906 	bl	8000608 <__aeabi_dmul>
 801a3fc:	4602      	mov	r2, r0
 801a3fe:	460b      	mov	r3, r1
 801a400:	4650      	mov	r0, sl
 801a402:	4659      	mov	r1, fp
 801a404:	f7e5 ff48 	bl	8000298 <__aeabi_dsub>
 801a408:	4602      	mov	r2, r0
 801a40a:	460b      	mov	r3, r1
 801a40c:	4680      	mov	r8, r0
 801a40e:	4689      	mov	r9, r1
 801a410:	4630      	mov	r0, r6
 801a412:	4639      	mov	r1, r7
 801a414:	f7e5 ff42 	bl	800029c <__adddf3>
 801a418:	4632      	mov	r2, r6
 801a41a:	463b      	mov	r3, r7
 801a41c:	4620      	mov	r0, r4
 801a41e:	460d      	mov	r5, r1
 801a420:	f7e5 ff3a 	bl	8000298 <__aeabi_dsub>
 801a424:	4602      	mov	r2, r0
 801a426:	460b      	mov	r3, r1
 801a428:	4640      	mov	r0, r8
 801a42a:	4649      	mov	r1, r9
 801a42c:	f7e5 ff34 	bl	8000298 <__aeabi_dsub>
 801a430:	4606      	mov	r6, r0
 801a432:	460f      	mov	r7, r1
 801a434:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a438:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a43c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a440:	2300      	movs	r3, #0
 801a442:	9304      	str	r3, [sp, #16]
 801a444:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801a448:	465b      	mov	r3, fp
 801a44a:	4652      	mov	r2, sl
 801a44c:	f7e5 ff24 	bl	8000298 <__aeabi_dsub>
 801a450:	4622      	mov	r2, r4
 801a452:	462b      	mov	r3, r5
 801a454:	f7e6 f8d8 	bl	8000608 <__aeabi_dmul>
 801a458:	4680      	mov	r8, r0
 801a45a:	4689      	mov	r9, r1
 801a45c:	4630      	mov	r0, r6
 801a45e:	4639      	mov	r1, r7
 801a460:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a464:	f7e6 f8d0 	bl	8000608 <__aeabi_dmul>
 801a468:	4602      	mov	r2, r0
 801a46a:	460b      	mov	r3, r1
 801a46c:	4640      	mov	r0, r8
 801a46e:	4649      	mov	r1, r9
 801a470:	f7e5 ff14 	bl	800029c <__adddf3>
 801a474:	4606      	mov	r6, r0
 801a476:	460f      	mov	r7, r1
 801a478:	465b      	mov	r3, fp
 801a47a:	4652      	mov	r2, sl
 801a47c:	4620      	mov	r0, r4
 801a47e:	4629      	mov	r1, r5
 801a480:	f7e6 f8c2 	bl	8000608 <__aeabi_dmul>
 801a484:	460b      	mov	r3, r1
 801a486:	4602      	mov	r2, r0
 801a488:	4680      	mov	r8, r0
 801a48a:	4689      	mov	r9, r1
 801a48c:	4630      	mov	r0, r6
 801a48e:	4639      	mov	r1, r7
 801a490:	f7e5 ff04 	bl	800029c <__adddf3>
 801a494:	4b17      	ldr	r3, [pc, #92]	@ (801a4f4 <__ieee754_pow+0x424>)
 801a496:	4604      	mov	r4, r0
 801a498:	460d      	mov	r5, r1
 801a49a:	4299      	cmp	r1, r3
 801a49c:	468b      	mov	fp, r1
 801a49e:	f340 820b 	ble.w	801a8b8 <__ieee754_pow+0x7e8>
 801a4a2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801a4a6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801a4aa:	4303      	orrs	r3, r0
 801a4ac:	f000 81ea 	beq.w	801a884 <__ieee754_pow+0x7b4>
 801a4b0:	2200      	movs	r2, #0
 801a4b2:	2300      	movs	r3, #0
 801a4b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a4b8:	f7e6 fb18 	bl	8000aec <__aeabi_dcmplt>
 801a4bc:	3800      	subs	r0, #0
 801a4be:	bf18      	it	ne
 801a4c0:	2001      	movne	r0, #1
 801a4c2:	e713      	b.n	801a2ec <__ieee754_pow+0x21c>
 801a4c4:	f3af 8000 	nop.w
 801a4c8:	60000000 	.word	0x60000000
 801a4cc:	3ff71547 	.word	0x3ff71547
 801a4d0:	f85ddf44 	.word	0xf85ddf44
 801a4d4:	3e54ae0b 	.word	0x3e54ae0b
 801a4d8:	55555555 	.word	0x55555555
 801a4dc:	3fd55555 	.word	0x3fd55555
 801a4e0:	652b82fe 	.word	0x652b82fe
 801a4e4:	3ff71547 	.word	0x3ff71547
 801a4e8:	3ff00000 	.word	0x3ff00000
 801a4ec:	3fd00000 	.word	0x3fd00000
 801a4f0:	3fe00000 	.word	0x3fe00000
 801a4f4:	408fffff 	.word	0x408fffff
 801a4f8:	4bd5      	ldr	r3, [pc, #852]	@ (801a850 <__ieee754_pow+0x780>)
 801a4fa:	2200      	movs	r2, #0
 801a4fc:	ea08 0303 	and.w	r3, r8, r3
 801a500:	b92b      	cbnz	r3, 801a50e <__ieee754_pow+0x43e>
 801a502:	4bd4      	ldr	r3, [pc, #848]	@ (801a854 <__ieee754_pow+0x784>)
 801a504:	f7e6 f880 	bl	8000608 <__aeabi_dmul>
 801a508:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801a50c:	468b      	mov	fp, r1
 801a50e:	ea4f 532b 	mov.w	r3, fp, asr #20
 801a512:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801a516:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801a51a:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801a51e:	4413      	add	r3, r2
 801a520:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801a524:	930a      	str	r3, [sp, #40]	@ 0x28
 801a526:	4bcc      	ldr	r3, [pc, #816]	@ (801a858 <__ieee754_pow+0x788>)
 801a528:	459b      	cmp	fp, r3
 801a52a:	dd08      	ble.n	801a53e <__ieee754_pow+0x46e>
 801a52c:	4bcb      	ldr	r3, [pc, #812]	@ (801a85c <__ieee754_pow+0x78c>)
 801a52e:	459b      	cmp	fp, r3
 801a530:	f340 81a5 	ble.w	801a87e <__ieee754_pow+0x7ae>
 801a534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a536:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801a53a:	3301      	adds	r3, #1
 801a53c:	930a      	str	r3, [sp, #40]	@ 0x28
 801a53e:	f04f 0a00 	mov.w	sl, #0
 801a542:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801a546:	4629      	mov	r1, r5
 801a548:	106d      	asrs	r5, r5, #1
 801a54a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a54c:	4bc4      	ldr	r3, [pc, #784]	@ (801a860 <__ieee754_pow+0x790>)
 801a54e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801a552:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a556:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801a55a:	ed93 7b00 	vldr	d7, [r3]
 801a55e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a562:	ec53 2b17 	vmov	r2, r3, d7
 801a566:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a56a:	f7e5 fe95 	bl	8000298 <__aeabi_dsub>
 801a56e:	4606      	mov	r6, r0
 801a570:	460f      	mov	r7, r1
 801a572:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a57a:	f7e5 fe8f 	bl	800029c <__adddf3>
 801a57e:	4602      	mov	r2, r0
 801a580:	460b      	mov	r3, r1
 801a582:	2000      	movs	r0, #0
 801a584:	49b7      	ldr	r1, [pc, #732]	@ (801a864 <__ieee754_pow+0x794>)
 801a586:	f7e6 f969 	bl	800085c <__aeabi_ddiv>
 801a58a:	4602      	mov	r2, r0
 801a58c:	460b      	mov	r3, r1
 801a58e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801a592:	4630      	mov	r0, r6
 801a594:	4639      	mov	r1, r7
 801a596:	f7e6 f837 	bl	8000608 <__aeabi_dmul>
 801a59a:	2200      	movs	r2, #0
 801a59c:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801a5a0:	4614      	mov	r4, r2
 801a5a2:	461d      	mov	r5, r3
 801a5a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a5a8:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801a5ac:	f04f 0b00 	mov.w	fp, #0
 801a5b0:	4661      	mov	r1, ip
 801a5b2:	46e1      	mov	r9, ip
 801a5b4:	4658      	mov	r0, fp
 801a5b6:	46d8      	mov	r8, fp
 801a5b8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801a5bc:	f7e6 f824 	bl	8000608 <__aeabi_dmul>
 801a5c0:	4602      	mov	r2, r0
 801a5c2:	460b      	mov	r3, r1
 801a5c4:	4630      	mov	r0, r6
 801a5c6:	4639      	mov	r1, r7
 801a5c8:	f7e5 fe66 	bl	8000298 <__aeabi_dsub>
 801a5cc:	4606      	mov	r6, r0
 801a5ce:	460f      	mov	r7, r1
 801a5d0:	4620      	mov	r0, r4
 801a5d2:	4629      	mov	r1, r5
 801a5d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a5d8:	f7e5 fe5e 	bl	8000298 <__aeabi_dsub>
 801a5dc:	4602      	mov	r2, r0
 801a5de:	460b      	mov	r3, r1
 801a5e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a5e4:	f7e5 fe58 	bl	8000298 <__aeabi_dsub>
 801a5e8:	465a      	mov	r2, fp
 801a5ea:	464b      	mov	r3, r9
 801a5ec:	f7e6 f80c 	bl	8000608 <__aeabi_dmul>
 801a5f0:	4602      	mov	r2, r0
 801a5f2:	460b      	mov	r3, r1
 801a5f4:	4630      	mov	r0, r6
 801a5f6:	4639      	mov	r1, r7
 801a5f8:	f7e5 fe4e 	bl	8000298 <__aeabi_dsub>
 801a5fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801a600:	f7e6 f802 	bl	8000608 <__aeabi_dmul>
 801a604:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a608:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a60c:	4610      	mov	r0, r2
 801a60e:	4619      	mov	r1, r3
 801a610:	f7e5 fffa 	bl	8000608 <__aeabi_dmul>
 801a614:	4604      	mov	r4, r0
 801a616:	460d      	mov	r5, r1
 801a618:	a37b      	add	r3, pc, #492	@ (adr r3, 801a808 <__ieee754_pow+0x738>)
 801a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a61e:	f7e5 fff3 	bl	8000608 <__aeabi_dmul>
 801a622:	a37b      	add	r3, pc, #492	@ (adr r3, 801a810 <__ieee754_pow+0x740>)
 801a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a628:	f7e5 fe38 	bl	800029c <__adddf3>
 801a62c:	4622      	mov	r2, r4
 801a62e:	462b      	mov	r3, r5
 801a630:	f7e5 ffea 	bl	8000608 <__aeabi_dmul>
 801a634:	a378      	add	r3, pc, #480	@ (adr r3, 801a818 <__ieee754_pow+0x748>)
 801a636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a63a:	f7e5 fe2f 	bl	800029c <__adddf3>
 801a63e:	4622      	mov	r2, r4
 801a640:	462b      	mov	r3, r5
 801a642:	f7e5 ffe1 	bl	8000608 <__aeabi_dmul>
 801a646:	a376      	add	r3, pc, #472	@ (adr r3, 801a820 <__ieee754_pow+0x750>)
 801a648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a64c:	f7e5 fe26 	bl	800029c <__adddf3>
 801a650:	4622      	mov	r2, r4
 801a652:	462b      	mov	r3, r5
 801a654:	f7e5 ffd8 	bl	8000608 <__aeabi_dmul>
 801a658:	a373      	add	r3, pc, #460	@ (adr r3, 801a828 <__ieee754_pow+0x758>)
 801a65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a65e:	f7e5 fe1d 	bl	800029c <__adddf3>
 801a662:	4622      	mov	r2, r4
 801a664:	462b      	mov	r3, r5
 801a666:	f7e5 ffcf 	bl	8000608 <__aeabi_dmul>
 801a66a:	a371      	add	r3, pc, #452	@ (adr r3, 801a830 <__ieee754_pow+0x760>)
 801a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a670:	f7e5 fe14 	bl	800029c <__adddf3>
 801a674:	4606      	mov	r6, r0
 801a676:	460f      	mov	r7, r1
 801a678:	4622      	mov	r2, r4
 801a67a:	462b      	mov	r3, r5
 801a67c:	4620      	mov	r0, r4
 801a67e:	4629      	mov	r1, r5
 801a680:	f7e5 ffc2 	bl	8000608 <__aeabi_dmul>
 801a684:	4602      	mov	r2, r0
 801a686:	460b      	mov	r3, r1
 801a688:	4630      	mov	r0, r6
 801a68a:	4639      	mov	r1, r7
 801a68c:	f7e5 ffbc 	bl	8000608 <__aeabi_dmul>
 801a690:	465a      	mov	r2, fp
 801a692:	4604      	mov	r4, r0
 801a694:	460d      	mov	r5, r1
 801a696:	464b      	mov	r3, r9
 801a698:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a69c:	f7e5 fdfe 	bl	800029c <__adddf3>
 801a6a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a6a4:	f7e5 ffb0 	bl	8000608 <__aeabi_dmul>
 801a6a8:	4622      	mov	r2, r4
 801a6aa:	462b      	mov	r3, r5
 801a6ac:	f7e5 fdf6 	bl	800029c <__adddf3>
 801a6b0:	465a      	mov	r2, fp
 801a6b2:	464b      	mov	r3, r9
 801a6b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a6b8:	4658      	mov	r0, fp
 801a6ba:	4649      	mov	r1, r9
 801a6bc:	f7e5 ffa4 	bl	8000608 <__aeabi_dmul>
 801a6c0:	2200      	movs	r2, #0
 801a6c2:	4b69      	ldr	r3, [pc, #420]	@ (801a868 <__ieee754_pow+0x798>)
 801a6c4:	4606      	mov	r6, r0
 801a6c6:	460f      	mov	r7, r1
 801a6c8:	f7e5 fde8 	bl	800029c <__adddf3>
 801a6cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a6d0:	f7e5 fde4 	bl	800029c <__adddf3>
 801a6d4:	460d      	mov	r5, r1
 801a6d6:	460b      	mov	r3, r1
 801a6d8:	4640      	mov	r0, r8
 801a6da:	4649      	mov	r1, r9
 801a6dc:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801a6e0:	465c      	mov	r4, fp
 801a6e2:	465a      	mov	r2, fp
 801a6e4:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801a6e8:	f7e5 ff8e 	bl	8000608 <__aeabi_dmul>
 801a6ec:	2200      	movs	r2, #0
 801a6ee:	4680      	mov	r8, r0
 801a6f0:	4689      	mov	r9, r1
 801a6f2:	4b5d      	ldr	r3, [pc, #372]	@ (801a868 <__ieee754_pow+0x798>)
 801a6f4:	4620      	mov	r0, r4
 801a6f6:	4629      	mov	r1, r5
 801a6f8:	f7e5 fdce 	bl	8000298 <__aeabi_dsub>
 801a6fc:	4632      	mov	r2, r6
 801a6fe:	463b      	mov	r3, r7
 801a700:	f7e5 fdca 	bl	8000298 <__aeabi_dsub>
 801a704:	4602      	mov	r2, r0
 801a706:	460b      	mov	r3, r1
 801a708:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a70c:	f7e5 fdc4 	bl	8000298 <__aeabi_dsub>
 801a710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a714:	f7e5 ff78 	bl	8000608 <__aeabi_dmul>
 801a718:	4606      	mov	r6, r0
 801a71a:	460f      	mov	r7, r1
 801a71c:	4622      	mov	r2, r4
 801a71e:	462b      	mov	r3, r5
 801a720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a724:	f7e5 ff70 	bl	8000608 <__aeabi_dmul>
 801a728:	4602      	mov	r2, r0
 801a72a:	460b      	mov	r3, r1
 801a72c:	4630      	mov	r0, r6
 801a72e:	4639      	mov	r1, r7
 801a730:	f7e5 fdb4 	bl	800029c <__adddf3>
 801a734:	4606      	mov	r6, r0
 801a736:	460f      	mov	r7, r1
 801a738:	4602      	mov	r2, r0
 801a73a:	460b      	mov	r3, r1
 801a73c:	4640      	mov	r0, r8
 801a73e:	4649      	mov	r1, r9
 801a740:	f7e5 fdac 	bl	800029c <__adddf3>
 801a744:	460d      	mov	r5, r1
 801a746:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801a74a:	a33b      	add	r3, pc, #236	@ (adr r3, 801a838 <__ieee754_pow+0x768>)
 801a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a750:	465c      	mov	r4, fp
 801a752:	4658      	mov	r0, fp
 801a754:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801a758:	f7e5 ff56 	bl	8000608 <__aeabi_dmul>
 801a75c:	4642      	mov	r2, r8
 801a75e:	464b      	mov	r3, r9
 801a760:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a764:	4620      	mov	r0, r4
 801a766:	4629      	mov	r1, r5
 801a768:	f7e5 fd96 	bl	8000298 <__aeabi_dsub>
 801a76c:	4602      	mov	r2, r0
 801a76e:	460b      	mov	r3, r1
 801a770:	4630      	mov	r0, r6
 801a772:	4639      	mov	r1, r7
 801a774:	f7e5 fd90 	bl	8000298 <__aeabi_dsub>
 801a778:	a331      	add	r3, pc, #196	@ (adr r3, 801a840 <__ieee754_pow+0x770>)
 801a77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a77e:	f7e5 ff43 	bl	8000608 <__aeabi_dmul>
 801a782:	4606      	mov	r6, r0
 801a784:	460f      	mov	r7, r1
 801a786:	4620      	mov	r0, r4
 801a788:	4629      	mov	r1, r5
 801a78a:	a32f      	add	r3, pc, #188	@ (adr r3, 801a848 <__ieee754_pow+0x778>)
 801a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a790:	f7e5 ff3a 	bl	8000608 <__aeabi_dmul>
 801a794:	4602      	mov	r2, r0
 801a796:	460b      	mov	r3, r1
 801a798:	4630      	mov	r0, r6
 801a79a:	4639      	mov	r1, r7
 801a79c:	f7e5 fd7e 	bl	800029c <__adddf3>
 801a7a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a7a2:	4b32      	ldr	r3, [pc, #200]	@ (801a86c <__ieee754_pow+0x79c>)
 801a7a4:	4413      	add	r3, r2
 801a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7aa:	f7e5 fd77 	bl	800029c <__adddf3>
 801a7ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a7b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801a7b4:	f7e5 febe 	bl	8000534 <__aeabi_i2d>
 801a7b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a7ba:	4b2d      	ldr	r3, [pc, #180]	@ (801a870 <__ieee754_pow+0x7a0>)
 801a7bc:	4606      	mov	r6, r0
 801a7be:	460f      	mov	r7, r1
 801a7c0:	4413      	add	r3, r2
 801a7c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a7c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a7ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a7ce:	f7e5 fd65 	bl	800029c <__adddf3>
 801a7d2:	4642      	mov	r2, r8
 801a7d4:	464b      	mov	r3, r9
 801a7d6:	f7e5 fd61 	bl	800029c <__adddf3>
 801a7da:	4632      	mov	r2, r6
 801a7dc:	463b      	mov	r3, r7
 801a7de:	f7e5 fd5d 	bl	800029c <__adddf3>
 801a7e2:	4632      	mov	r2, r6
 801a7e4:	463b      	mov	r3, r7
 801a7e6:	460d      	mov	r5, r1
 801a7e8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801a7ec:	4658      	mov	r0, fp
 801a7ee:	465c      	mov	r4, fp
 801a7f0:	f7e5 fd52 	bl	8000298 <__aeabi_dsub>
 801a7f4:	4642      	mov	r2, r8
 801a7f6:	464b      	mov	r3, r9
 801a7f8:	f7e5 fd4e 	bl	8000298 <__aeabi_dsub>
 801a7fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a800:	f7e5 fd4a 	bl	8000298 <__aeabi_dsub>
 801a804:	e036      	b.n	801a874 <__ieee754_pow+0x7a4>
 801a806:	bf00      	nop
 801a808:	4a454eef 	.word	0x4a454eef
 801a80c:	3fca7e28 	.word	0x3fca7e28
 801a810:	93c9db65 	.word	0x93c9db65
 801a814:	3fcd864a 	.word	0x3fcd864a
 801a818:	a91d4101 	.word	0xa91d4101
 801a81c:	3fd17460 	.word	0x3fd17460
 801a820:	518f264d 	.word	0x518f264d
 801a824:	3fd55555 	.word	0x3fd55555
 801a828:	db6fabff 	.word	0xdb6fabff
 801a82c:	3fdb6db6 	.word	0x3fdb6db6
 801a830:	33333303 	.word	0x33333303
 801a834:	3fe33333 	.word	0x3fe33333
 801a838:	e0000000 	.word	0xe0000000
 801a83c:	3feec709 	.word	0x3feec709
 801a840:	dc3a03fd 	.word	0xdc3a03fd
 801a844:	3feec709 	.word	0x3feec709
 801a848:	145b01f5 	.word	0x145b01f5
 801a84c:	be3e2fe0 	.word	0xbe3e2fe0
 801a850:	7ff00000 	.word	0x7ff00000
 801a854:	43400000 	.word	0x43400000
 801a858:	0003988e 	.word	0x0003988e
 801a85c:	000bb679 	.word	0x000bb679
 801a860:	0801d530 	.word	0x0801d530
 801a864:	3ff00000 	.word	0x3ff00000
 801a868:	40080000 	.word	0x40080000
 801a86c:	0801d510 	.word	0x0801d510
 801a870:	0801d520 	.word	0x0801d520
 801a874:	4602      	mov	r2, r0
 801a876:	460b      	mov	r3, r1
 801a878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a87c:	e5d6      	b.n	801a42c <__ieee754_pow+0x35c>
 801a87e:	f04f 0a01 	mov.w	sl, #1
 801a882:	e65e      	b.n	801a542 <__ieee754_pow+0x472>
 801a884:	a3b5      	add	r3, pc, #724	@ (adr r3, 801ab5c <__ieee754_pow+0xa8c>)
 801a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a88a:	4630      	mov	r0, r6
 801a88c:	4639      	mov	r1, r7
 801a88e:	f7e5 fd05 	bl	800029c <__adddf3>
 801a892:	4642      	mov	r2, r8
 801a894:	464b      	mov	r3, r9
 801a896:	e9cd 0100 	strd	r0, r1, [sp]
 801a89a:	4620      	mov	r0, r4
 801a89c:	4629      	mov	r1, r5
 801a89e:	f7e5 fcfb 	bl	8000298 <__aeabi_dsub>
 801a8a2:	4602      	mov	r2, r0
 801a8a4:	460b      	mov	r3, r1
 801a8a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a8aa:	f7e6 f93d 	bl	8000b28 <__aeabi_dcmpgt>
 801a8ae:	2800      	cmp	r0, #0
 801a8b0:	f47f adfe 	bne.w	801a4b0 <__ieee754_pow+0x3e0>
 801a8b4:	4ba2      	ldr	r3, [pc, #648]	@ (801ab40 <__ieee754_pow+0xa70>)
 801a8b6:	e022      	b.n	801a8fe <__ieee754_pow+0x82e>
 801a8b8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a8bc:	4ca1      	ldr	r4, [pc, #644]	@ (801ab44 <__ieee754_pow+0xa74>)
 801a8be:	42a3      	cmp	r3, r4
 801a8c0:	d919      	bls.n	801a8f6 <__ieee754_pow+0x826>
 801a8c2:	4ba1      	ldr	r3, [pc, #644]	@ (801ab48 <__ieee754_pow+0xa78>)
 801a8c4:	440b      	add	r3, r1
 801a8c6:	4303      	orrs	r3, r0
 801a8c8:	d009      	beq.n	801a8de <__ieee754_pow+0x80e>
 801a8ca:	2200      	movs	r2, #0
 801a8cc:	2300      	movs	r3, #0
 801a8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a8d2:	f7e6 f90b 	bl	8000aec <__aeabi_dcmplt>
 801a8d6:	3800      	subs	r0, #0
 801a8d8:	bf18      	it	ne
 801a8da:	2001      	movne	r0, #1
 801a8dc:	e512      	b.n	801a304 <__ieee754_pow+0x234>
 801a8de:	4642      	mov	r2, r8
 801a8e0:	464b      	mov	r3, r9
 801a8e2:	f7e5 fcd9 	bl	8000298 <__aeabi_dsub>
 801a8e6:	4632      	mov	r2, r6
 801a8e8:	463b      	mov	r3, r7
 801a8ea:	f7e6 f913 	bl	8000b14 <__aeabi_dcmpge>
 801a8ee:	2800      	cmp	r0, #0
 801a8f0:	d1eb      	bne.n	801a8ca <__ieee754_pow+0x7fa>
 801a8f2:	4b96      	ldr	r3, [pc, #600]	@ (801ab4c <__ieee754_pow+0xa7c>)
 801a8f4:	e003      	b.n	801a8fe <__ieee754_pow+0x82e>
 801a8f6:	4a96      	ldr	r2, [pc, #600]	@ (801ab50 <__ieee754_pow+0xa80>)
 801a8f8:	4293      	cmp	r3, r2
 801a8fa:	f240 80e8 	bls.w	801aace <__ieee754_pow+0x9fe>
 801a8fe:	151b      	asrs	r3, r3, #20
 801a900:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 801a904:	4893      	ldr	r0, [pc, #588]	@ (801ab54 <__ieee754_pow+0xa84>)
 801a906:	f1bb 0f00 	cmp.w	fp, #0
 801a90a:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801a90e:	f04f 0200 	mov.w	r2, #0
 801a912:	fa4a fa03 	asr.w	sl, sl, r3
 801a916:	44da      	add	sl, fp
 801a918:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801a91c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801a920:	fa40 f001 	asr.w	r0, r0, r1
 801a924:	f1c1 0114 	rsb	r1, r1, #20
 801a928:	ea00 030a 	and.w	r3, r0, sl
 801a92c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801a930:	4640      	mov	r0, r8
 801a932:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801a936:	fa4a fa01 	asr.w	sl, sl, r1
 801a93a:	4649      	mov	r1, r9
 801a93c:	bfb8      	it	lt
 801a93e:	f1ca 0a00 	rsblt	sl, sl, #0
 801a942:	f7e5 fca9 	bl	8000298 <__aeabi_dsub>
 801a946:	4680      	mov	r8, r0
 801a948:	4689      	mov	r9, r1
 801a94a:	2400      	movs	r4, #0
 801a94c:	4632      	mov	r2, r6
 801a94e:	463b      	mov	r3, r7
 801a950:	4640      	mov	r0, r8
 801a952:	4649      	mov	r1, r9
 801a954:	f7e5 fca2 	bl	800029c <__adddf3>
 801a958:	460d      	mov	r5, r1
 801a95a:	4620      	mov	r0, r4
 801a95c:	a368      	add	r3, pc, #416	@ (adr r3, 801ab00 <__ieee754_pow+0xa30>)
 801a95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a962:	f7e5 fe51 	bl	8000608 <__aeabi_dmul>
 801a966:	4642      	mov	r2, r8
 801a968:	464b      	mov	r3, r9
 801a96a:	e9cd 0100 	strd	r0, r1, [sp]
 801a96e:	4620      	mov	r0, r4
 801a970:	4629      	mov	r1, r5
 801a972:	f7e5 fc91 	bl	8000298 <__aeabi_dsub>
 801a976:	4602      	mov	r2, r0
 801a978:	460b      	mov	r3, r1
 801a97a:	4630      	mov	r0, r6
 801a97c:	4639      	mov	r1, r7
 801a97e:	f7e5 fc8b 	bl	8000298 <__aeabi_dsub>
 801a982:	a361      	add	r3, pc, #388	@ (adr r3, 801ab08 <__ieee754_pow+0xa38>)
 801a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a988:	f7e5 fe3e 	bl	8000608 <__aeabi_dmul>
 801a98c:	4680      	mov	r8, r0
 801a98e:	4689      	mov	r9, r1
 801a990:	4620      	mov	r0, r4
 801a992:	4629      	mov	r1, r5
 801a994:	a35e      	add	r3, pc, #376	@ (adr r3, 801ab10 <__ieee754_pow+0xa40>)
 801a996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a99a:	f7e5 fe35 	bl	8000608 <__aeabi_dmul>
 801a99e:	4602      	mov	r2, r0
 801a9a0:	460b      	mov	r3, r1
 801a9a2:	4640      	mov	r0, r8
 801a9a4:	4649      	mov	r1, r9
 801a9a6:	f7e5 fc79 	bl	800029c <__adddf3>
 801a9aa:	4604      	mov	r4, r0
 801a9ac:	460d      	mov	r5, r1
 801a9ae:	4602      	mov	r2, r0
 801a9b0:	460b      	mov	r3, r1
 801a9b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a9b6:	f7e5 fc71 	bl	800029c <__adddf3>
 801a9ba:	4680      	mov	r8, r0
 801a9bc:	4689      	mov	r9, r1
 801a9be:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a9c2:	f7e5 fc69 	bl	8000298 <__aeabi_dsub>
 801a9c6:	4602      	mov	r2, r0
 801a9c8:	460b      	mov	r3, r1
 801a9ca:	4620      	mov	r0, r4
 801a9cc:	4629      	mov	r1, r5
 801a9ce:	f7e5 fc63 	bl	8000298 <__aeabi_dsub>
 801a9d2:	4642      	mov	r2, r8
 801a9d4:	4606      	mov	r6, r0
 801a9d6:	460f      	mov	r7, r1
 801a9d8:	464b      	mov	r3, r9
 801a9da:	4640      	mov	r0, r8
 801a9dc:	4649      	mov	r1, r9
 801a9de:	f7e5 fe13 	bl	8000608 <__aeabi_dmul>
 801a9e2:	4604      	mov	r4, r0
 801a9e4:	460d      	mov	r5, r1
 801a9e6:	a34c      	add	r3, pc, #304	@ (adr r3, 801ab18 <__ieee754_pow+0xa48>)
 801a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9ec:	f7e5 fe0c 	bl	8000608 <__aeabi_dmul>
 801a9f0:	a34b      	add	r3, pc, #300	@ (adr r3, 801ab20 <__ieee754_pow+0xa50>)
 801a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9f6:	f7e5 fc4f 	bl	8000298 <__aeabi_dsub>
 801a9fa:	4622      	mov	r2, r4
 801a9fc:	462b      	mov	r3, r5
 801a9fe:	f7e5 fe03 	bl	8000608 <__aeabi_dmul>
 801aa02:	a349      	add	r3, pc, #292	@ (adr r3, 801ab28 <__ieee754_pow+0xa58>)
 801aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa08:	f7e5 fc48 	bl	800029c <__adddf3>
 801aa0c:	4622      	mov	r2, r4
 801aa0e:	462b      	mov	r3, r5
 801aa10:	f7e5 fdfa 	bl	8000608 <__aeabi_dmul>
 801aa14:	a346      	add	r3, pc, #280	@ (adr r3, 801ab30 <__ieee754_pow+0xa60>)
 801aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa1a:	f7e5 fc3d 	bl	8000298 <__aeabi_dsub>
 801aa1e:	4622      	mov	r2, r4
 801aa20:	462b      	mov	r3, r5
 801aa22:	f7e5 fdf1 	bl	8000608 <__aeabi_dmul>
 801aa26:	a344      	add	r3, pc, #272	@ (adr r3, 801ab38 <__ieee754_pow+0xa68>)
 801aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa2c:	f7e5 fc36 	bl	800029c <__adddf3>
 801aa30:	4622      	mov	r2, r4
 801aa32:	462b      	mov	r3, r5
 801aa34:	f7e5 fde8 	bl	8000608 <__aeabi_dmul>
 801aa38:	4602      	mov	r2, r0
 801aa3a:	460b      	mov	r3, r1
 801aa3c:	4640      	mov	r0, r8
 801aa3e:	4649      	mov	r1, r9
 801aa40:	f7e5 fc2a 	bl	8000298 <__aeabi_dsub>
 801aa44:	4604      	mov	r4, r0
 801aa46:	460d      	mov	r5, r1
 801aa48:	4602      	mov	r2, r0
 801aa4a:	460b      	mov	r3, r1
 801aa4c:	4640      	mov	r0, r8
 801aa4e:	4649      	mov	r1, r9
 801aa50:	f7e5 fdda 	bl	8000608 <__aeabi_dmul>
 801aa54:	2200      	movs	r2, #0
 801aa56:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801aa5a:	e9cd 0100 	strd	r0, r1, [sp]
 801aa5e:	4620      	mov	r0, r4
 801aa60:	4629      	mov	r1, r5
 801aa62:	f7e5 fc19 	bl	8000298 <__aeabi_dsub>
 801aa66:	4602      	mov	r2, r0
 801aa68:	460b      	mov	r3, r1
 801aa6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aa6e:	f7e5 fef5 	bl	800085c <__aeabi_ddiv>
 801aa72:	4632      	mov	r2, r6
 801aa74:	4604      	mov	r4, r0
 801aa76:	460d      	mov	r5, r1
 801aa78:	463b      	mov	r3, r7
 801aa7a:	4640      	mov	r0, r8
 801aa7c:	4649      	mov	r1, r9
 801aa7e:	f7e5 fdc3 	bl	8000608 <__aeabi_dmul>
 801aa82:	4632      	mov	r2, r6
 801aa84:	463b      	mov	r3, r7
 801aa86:	f7e5 fc09 	bl	800029c <__adddf3>
 801aa8a:	4602      	mov	r2, r0
 801aa8c:	460b      	mov	r3, r1
 801aa8e:	4620      	mov	r0, r4
 801aa90:	4629      	mov	r1, r5
 801aa92:	f7e5 fc01 	bl	8000298 <__aeabi_dsub>
 801aa96:	4642      	mov	r2, r8
 801aa98:	464b      	mov	r3, r9
 801aa9a:	f7e5 fbfd 	bl	8000298 <__aeabi_dsub>
 801aa9e:	460b      	mov	r3, r1
 801aaa0:	4602      	mov	r2, r0
 801aaa2:	492d      	ldr	r1, [pc, #180]	@ (801ab58 <__ieee754_pow+0xa88>)
 801aaa4:	2000      	movs	r0, #0
 801aaa6:	f7e5 fbf7 	bl	8000298 <__aeabi_dsub>
 801aaaa:	ec41 0b10 	vmov	d0, r0, r1
 801aaae:	ee10 3a90 	vmov	r3, s1
 801aab2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801aab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801aaba:	da0b      	bge.n	801aad4 <__ieee754_pow+0xa04>
 801aabc:	4650      	mov	r0, sl
 801aabe:	f000 f85b 	bl	801ab78 <scalbn>
 801aac2:	ec51 0b10 	vmov	r0, r1, d0
 801aac6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801aaca:	f7ff bb6c 	b.w	801a1a6 <__ieee754_pow+0xd6>
 801aace:	f8dd a010 	ldr.w	sl, [sp, #16]
 801aad2:	e73a      	b.n	801a94a <__ieee754_pow+0x87a>
 801aad4:	ec51 0b10 	vmov	r0, r1, d0
 801aad8:	4619      	mov	r1, r3
 801aada:	e7f4      	b.n	801aac6 <__ieee754_pow+0x9f6>
 801aadc:	2000      	movs	r0, #0
 801aade:	491e      	ldr	r1, [pc, #120]	@ (801ab58 <__ieee754_pow+0xa88>)
 801aae0:	f7ff bb13 	b.w	801a10a <__ieee754_pow+0x3a>
 801aae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aae8:	f7ff bb0f 	b.w	801a10a <__ieee754_pow+0x3a>
 801aaec:	4630      	mov	r0, r6
 801aaee:	4639      	mov	r1, r7
 801aaf0:	f7ff bb0b 	b.w	801a10a <__ieee754_pow+0x3a>
 801aaf4:	460c      	mov	r4, r1
 801aaf6:	f7ff bb68 	b.w	801a1ca <__ieee754_pow+0xfa>
 801aafa:	2400      	movs	r4, #0
 801aafc:	f7ff bb4a 	b.w	801a194 <__ieee754_pow+0xc4>
 801ab00:	00000000 	.word	0x00000000
 801ab04:	3fe62e43 	.word	0x3fe62e43
 801ab08:	fefa39ef 	.word	0xfefa39ef
 801ab0c:	3fe62e42 	.word	0x3fe62e42
 801ab10:	0ca86c39 	.word	0x0ca86c39
 801ab14:	be205c61 	.word	0xbe205c61
 801ab18:	72bea4d0 	.word	0x72bea4d0
 801ab1c:	3e663769 	.word	0x3e663769
 801ab20:	c5d26bf1 	.word	0xc5d26bf1
 801ab24:	3ebbbd41 	.word	0x3ebbbd41
 801ab28:	af25de2c 	.word	0xaf25de2c
 801ab2c:	3f11566a 	.word	0x3f11566a
 801ab30:	16bebd93 	.word	0x16bebd93
 801ab34:	3f66c16c 	.word	0x3f66c16c
 801ab38:	5555553e 	.word	0x5555553e
 801ab3c:	3fc55555 	.word	0x3fc55555
 801ab40:	40900000 	.word	0x40900000
 801ab44:	4090cbff 	.word	0x4090cbff
 801ab48:	3f6f3400 	.word	0x3f6f3400
 801ab4c:	4090cc00 	.word	0x4090cc00
 801ab50:	3fe00000 	.word	0x3fe00000
 801ab54:	fff00000 	.word	0xfff00000
 801ab58:	3ff00000 	.word	0x3ff00000
 801ab5c:	652b82fe 	.word	0x652b82fe
 801ab60:	3c971547 	.word	0x3c971547

0801ab64 <fabs>:
 801ab64:	ec51 0b10 	vmov	r0, r1, d0
 801ab68:	4602      	mov	r2, r0
 801ab6a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ab6e:	ec43 2b10 	vmov	d0, r2, r3
 801ab72:	4770      	bx	lr
 801ab74:	0000      	movs	r0, r0
	...

0801ab78 <scalbn>:
 801ab78:	b570      	push	{r4, r5, r6, lr}
 801ab7a:	ec55 4b10 	vmov	r4, r5, d0
 801ab7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801ab82:	4606      	mov	r6, r0
 801ab84:	462b      	mov	r3, r5
 801ab86:	b991      	cbnz	r1, 801abae <scalbn+0x36>
 801ab88:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801ab8c:	4323      	orrs	r3, r4
 801ab8e:	d03b      	beq.n	801ac08 <scalbn+0x90>
 801ab90:	4b33      	ldr	r3, [pc, #204]	@ (801ac60 <scalbn+0xe8>)
 801ab92:	4620      	mov	r0, r4
 801ab94:	4629      	mov	r1, r5
 801ab96:	2200      	movs	r2, #0
 801ab98:	f7e5 fd36 	bl	8000608 <__aeabi_dmul>
 801ab9c:	4b31      	ldr	r3, [pc, #196]	@ (801ac64 <scalbn+0xec>)
 801ab9e:	4604      	mov	r4, r0
 801aba0:	460d      	mov	r5, r1
 801aba2:	429e      	cmp	r6, r3
 801aba4:	da0f      	bge.n	801abc6 <scalbn+0x4e>
 801aba6:	a326      	add	r3, pc, #152	@ (adr r3, 801ac40 <scalbn+0xc8>)
 801aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abac:	e01e      	b.n	801abec <scalbn+0x74>
 801abae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801abb2:	4291      	cmp	r1, r2
 801abb4:	d10b      	bne.n	801abce <scalbn+0x56>
 801abb6:	4622      	mov	r2, r4
 801abb8:	4620      	mov	r0, r4
 801abba:	4629      	mov	r1, r5
 801abbc:	f7e5 fb6e 	bl	800029c <__adddf3>
 801abc0:	4604      	mov	r4, r0
 801abc2:	460d      	mov	r5, r1
 801abc4:	e020      	b.n	801ac08 <scalbn+0x90>
 801abc6:	460b      	mov	r3, r1
 801abc8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801abcc:	3936      	subs	r1, #54	@ 0x36
 801abce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801abd2:	4296      	cmp	r6, r2
 801abd4:	dd0d      	ble.n	801abf2 <scalbn+0x7a>
 801abd6:	2d00      	cmp	r5, #0
 801abd8:	a11b      	add	r1, pc, #108	@ (adr r1, 801ac48 <scalbn+0xd0>)
 801abda:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abde:	da02      	bge.n	801abe6 <scalbn+0x6e>
 801abe0:	a11b      	add	r1, pc, #108	@ (adr r1, 801ac50 <scalbn+0xd8>)
 801abe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801abe6:	a318      	add	r3, pc, #96	@ (adr r3, 801ac48 <scalbn+0xd0>)
 801abe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abec:	f7e5 fd0c 	bl	8000608 <__aeabi_dmul>
 801abf0:	e7e6      	b.n	801abc0 <scalbn+0x48>
 801abf2:	1872      	adds	r2, r6, r1
 801abf4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801abf8:	428a      	cmp	r2, r1
 801abfa:	dcec      	bgt.n	801abd6 <scalbn+0x5e>
 801abfc:	2a00      	cmp	r2, #0
 801abfe:	dd06      	ble.n	801ac0e <scalbn+0x96>
 801ac00:	f36f 531e 	bfc	r3, #20, #11
 801ac04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ac08:	ec45 4b10 	vmov	d0, r4, r5
 801ac0c:	bd70      	pop	{r4, r5, r6, pc}
 801ac0e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801ac12:	da08      	bge.n	801ac26 <scalbn+0xae>
 801ac14:	2d00      	cmp	r5, #0
 801ac16:	a10a      	add	r1, pc, #40	@ (adr r1, 801ac40 <scalbn+0xc8>)
 801ac18:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac1c:	dac3      	bge.n	801aba6 <scalbn+0x2e>
 801ac1e:	a10e      	add	r1, pc, #56	@ (adr r1, 801ac58 <scalbn+0xe0>)
 801ac20:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac24:	e7bf      	b.n	801aba6 <scalbn+0x2e>
 801ac26:	3236      	adds	r2, #54	@ 0x36
 801ac28:	f36f 531e 	bfc	r3, #20, #11
 801ac2c:	4620      	mov	r0, r4
 801ac2e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ac32:	2200      	movs	r2, #0
 801ac34:	4b0c      	ldr	r3, [pc, #48]	@ (801ac68 <scalbn+0xf0>)
 801ac36:	4629      	mov	r1, r5
 801ac38:	e7d8      	b.n	801abec <scalbn+0x74>
 801ac3a:	bf00      	nop
 801ac3c:	f3af 8000 	nop.w
 801ac40:	c2f8f359 	.word	0xc2f8f359
 801ac44:	01a56e1f 	.word	0x01a56e1f
 801ac48:	8800759c 	.word	0x8800759c
 801ac4c:	7e37e43c 	.word	0x7e37e43c
 801ac50:	8800759c 	.word	0x8800759c
 801ac54:	fe37e43c 	.word	0xfe37e43c
 801ac58:	c2f8f359 	.word	0xc2f8f359
 801ac5c:	81a56e1f 	.word	0x81a56e1f
 801ac60:	43500000 	.word	0x43500000
 801ac64:	ffff3cb0 	.word	0xffff3cb0
 801ac68:	3c900000 	.word	0x3c900000

0801ac6c <with_errno>:
 801ac6c:	b510      	push	{r4, lr}
 801ac6e:	ed2d 8b02 	vpush	{d8}
 801ac72:	eeb0 8a40 	vmov.f32	s16, s0
 801ac76:	eef0 8a60 	vmov.f32	s17, s1
 801ac7a:	4604      	mov	r4, r0
 801ac7c:	f7fe fa48 	bl	8019110 <__errno>
 801ac80:	6004      	str	r4, [r0, #0]
 801ac82:	eeb0 0a48 	vmov.f32	s0, s16
 801ac86:	eef0 0a68 	vmov.f32	s1, s17
 801ac8a:	ecbd 8b02 	vpop	{d8}
 801ac8e:	bd10      	pop	{r4, pc}

0801ac90 <xflow>:
 801ac90:	4603      	mov	r3, r0
 801ac92:	b507      	push	{r0, r1, r2, lr}
 801ac94:	ec51 0b10 	vmov	r0, r1, d0
 801ac98:	b183      	cbz	r3, 801acbc <xflow+0x2c>
 801ac9a:	4602      	mov	r2, r0
 801ac9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801aca0:	e9cd 2300 	strd	r2, r3, [sp]
 801aca4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aca8:	f7e5 fcae 	bl	8000608 <__aeabi_dmul>
 801acac:	ec41 0b10 	vmov	d0, r0, r1
 801acb0:	2022      	movs	r0, #34	@ 0x22
 801acb2:	b003      	add	sp, #12
 801acb4:	f85d eb04 	ldr.w	lr, [sp], #4
 801acb8:	f7ff bfd8 	b.w	801ac6c <with_errno>
 801acbc:	4602      	mov	r2, r0
 801acbe:	460b      	mov	r3, r1
 801acc0:	e7ee      	b.n	801aca0 <xflow+0x10>
 801acc2:	0000      	movs	r0, r0
 801acc4:	0000      	movs	r0, r0
	...

0801acc8 <__math_uflow>:
 801acc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801acd0 <__math_uflow+0x8>
 801accc:	f7ff bfe0 	b.w	801ac90 <xflow>
 801acd0:	00000000 	.word	0x00000000
 801acd4:	10000000 	.word	0x10000000

0801acd8 <__math_oflow>:
 801acd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801ace0 <__math_oflow+0x8>
 801acdc:	f7ff bfd8 	b.w	801ac90 <xflow>
 801ace0:	00000000 	.word	0x00000000
 801ace4:	70000000 	.word	0x70000000

0801ace8 <__ieee754_sqrt>:
 801ace8:	4a69      	ldr	r2, [pc, #420]	@ (801ae90 <__ieee754_sqrt+0x1a8>)
 801acea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acee:	ec55 4b10 	vmov	r4, r5, d0
 801acf2:	43aa      	bics	r2, r5
 801acf4:	462b      	mov	r3, r5
 801acf6:	4621      	mov	r1, r4
 801acf8:	d110      	bne.n	801ad1c <__ieee754_sqrt+0x34>
 801acfa:	4622      	mov	r2, r4
 801acfc:	4620      	mov	r0, r4
 801acfe:	4629      	mov	r1, r5
 801ad00:	f7e5 fc82 	bl	8000608 <__aeabi_dmul>
 801ad04:	4602      	mov	r2, r0
 801ad06:	460b      	mov	r3, r1
 801ad08:	4620      	mov	r0, r4
 801ad0a:	4629      	mov	r1, r5
 801ad0c:	f7e5 fac6 	bl	800029c <__adddf3>
 801ad10:	4604      	mov	r4, r0
 801ad12:	460d      	mov	r5, r1
 801ad14:	ec45 4b10 	vmov	d0, r4, r5
 801ad18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad1c:	2d00      	cmp	r5, #0
 801ad1e:	dc0e      	bgt.n	801ad3e <__ieee754_sqrt+0x56>
 801ad20:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801ad24:	4322      	orrs	r2, r4
 801ad26:	d0f5      	beq.n	801ad14 <__ieee754_sqrt+0x2c>
 801ad28:	b19d      	cbz	r5, 801ad52 <__ieee754_sqrt+0x6a>
 801ad2a:	4622      	mov	r2, r4
 801ad2c:	4620      	mov	r0, r4
 801ad2e:	4629      	mov	r1, r5
 801ad30:	f7e5 fab2 	bl	8000298 <__aeabi_dsub>
 801ad34:	4602      	mov	r2, r0
 801ad36:	460b      	mov	r3, r1
 801ad38:	f7e5 fd90 	bl	800085c <__aeabi_ddiv>
 801ad3c:	e7e8      	b.n	801ad10 <__ieee754_sqrt+0x28>
 801ad3e:	152a      	asrs	r2, r5, #20
 801ad40:	d115      	bne.n	801ad6e <__ieee754_sqrt+0x86>
 801ad42:	2000      	movs	r0, #0
 801ad44:	e009      	b.n	801ad5a <__ieee754_sqrt+0x72>
 801ad46:	0acb      	lsrs	r3, r1, #11
 801ad48:	3a15      	subs	r2, #21
 801ad4a:	0549      	lsls	r1, r1, #21
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d0fa      	beq.n	801ad46 <__ieee754_sqrt+0x5e>
 801ad50:	e7f7      	b.n	801ad42 <__ieee754_sqrt+0x5a>
 801ad52:	462a      	mov	r2, r5
 801ad54:	e7fa      	b.n	801ad4c <__ieee754_sqrt+0x64>
 801ad56:	005b      	lsls	r3, r3, #1
 801ad58:	3001      	adds	r0, #1
 801ad5a:	02dc      	lsls	r4, r3, #11
 801ad5c:	d5fb      	bpl.n	801ad56 <__ieee754_sqrt+0x6e>
 801ad5e:	1e44      	subs	r4, r0, #1
 801ad60:	1b12      	subs	r2, r2, r4
 801ad62:	f1c0 0420 	rsb	r4, r0, #32
 801ad66:	fa21 f404 	lsr.w	r4, r1, r4
 801ad6a:	4081      	lsls	r1, r0
 801ad6c:	4323      	orrs	r3, r4
 801ad6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ad72:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801ad76:	07d2      	lsls	r2, r2, #31
 801ad78:	f04f 0600 	mov.w	r6, #0
 801ad7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ad80:	ea4f 0767 	mov.w	r7, r7, asr #1
 801ad84:	f04f 0016 	mov.w	r0, #22
 801ad88:	4632      	mov	r2, r6
 801ad8a:	bf58      	it	pl
 801ad8c:	005b      	lslpl	r3, r3, #1
 801ad8e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801ad92:	bf5c      	itt	pl
 801ad94:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801ad98:	0049      	lslpl	r1, r1, #1
 801ad9a:	005b      	lsls	r3, r3, #1
 801ad9c:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801ada0:	0049      	lsls	r1, r1, #1
 801ada2:	1915      	adds	r5, r2, r4
 801ada4:	429d      	cmp	r5, r3
 801ada6:	bfde      	ittt	le
 801ada8:	192a      	addle	r2, r5, r4
 801adaa:	1b5b      	suble	r3, r3, r5
 801adac:	1936      	addle	r6, r6, r4
 801adae:	0fcd      	lsrs	r5, r1, #31
 801adb0:	3801      	subs	r0, #1
 801adb2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801adb6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801adba:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801adbe:	d1f0      	bne.n	801ada2 <__ieee754_sqrt+0xba>
 801adc0:	4605      	mov	r5, r0
 801adc2:	2420      	movs	r4, #32
 801adc4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801adc8:	4293      	cmp	r3, r2
 801adca:	eb0c 0e00 	add.w	lr, ip, r0
 801adce:	dc02      	bgt.n	801add6 <__ieee754_sqrt+0xee>
 801add0:	d113      	bne.n	801adfa <__ieee754_sqrt+0x112>
 801add2:	458e      	cmp	lr, r1
 801add4:	d811      	bhi.n	801adfa <__ieee754_sqrt+0x112>
 801add6:	f1be 0f00 	cmp.w	lr, #0
 801adda:	eb0e 000c 	add.w	r0, lr, ip
 801adde:	da3f      	bge.n	801ae60 <__ieee754_sqrt+0x178>
 801ade0:	2800      	cmp	r0, #0
 801ade2:	db3d      	blt.n	801ae60 <__ieee754_sqrt+0x178>
 801ade4:	f102 0801 	add.w	r8, r2, #1
 801ade8:	1a9b      	subs	r3, r3, r2
 801adea:	458e      	cmp	lr, r1
 801adec:	4465      	add	r5, ip
 801adee:	eba1 010e 	sub.w	r1, r1, lr
 801adf2:	bf88      	it	hi
 801adf4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801adf8:	4642      	mov	r2, r8
 801adfa:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801adfe:	3c01      	subs	r4, #1
 801ae00:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ae04:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801ae08:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801ae0c:	d1dc      	bne.n	801adc8 <__ieee754_sqrt+0xe0>
 801ae0e:	4319      	orrs	r1, r3
 801ae10:	d01b      	beq.n	801ae4a <__ieee754_sqrt+0x162>
 801ae12:	f8df a080 	ldr.w	sl, [pc, #128]	@ 801ae94 <__ieee754_sqrt+0x1ac>
 801ae16:	f8df b080 	ldr.w	fp, [pc, #128]	@ 801ae98 <__ieee754_sqrt+0x1b0>
 801ae1a:	e9da 0100 	ldrd	r0, r1, [sl]
 801ae1e:	e9db 2300 	ldrd	r2, r3, [fp]
 801ae22:	e9da 8900 	ldrd	r8, r9, [sl]
 801ae26:	f7e5 fa37 	bl	8000298 <__aeabi_dsub>
 801ae2a:	4602      	mov	r2, r0
 801ae2c:	460b      	mov	r3, r1
 801ae2e:	4640      	mov	r0, r8
 801ae30:	4649      	mov	r1, r9
 801ae32:	f7e5 fe65 	bl	8000b00 <__aeabi_dcmple>
 801ae36:	b140      	cbz	r0, 801ae4a <__ieee754_sqrt+0x162>
 801ae38:	f1b5 3fff 	cmp.w	r5, #4294967295
 801ae3c:	e9da 0100 	ldrd	r0, r1, [sl]
 801ae40:	e9db 2300 	ldrd	r2, r3, [fp]
 801ae44:	d10e      	bne.n	801ae64 <__ieee754_sqrt+0x17c>
 801ae46:	3601      	adds	r6, #1
 801ae48:	4625      	mov	r5, r4
 801ae4a:	1073      	asrs	r3, r6, #1
 801ae4c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801ae50:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 801ae54:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801ae58:	086b      	lsrs	r3, r5, #1
 801ae5a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801ae5e:	e757      	b.n	801ad10 <__ieee754_sqrt+0x28>
 801ae60:	4690      	mov	r8, r2
 801ae62:	e7c1      	b.n	801ade8 <__ieee754_sqrt+0x100>
 801ae64:	e9da 8900 	ldrd	r8, r9, [sl]
 801ae68:	f7e5 fa18 	bl	800029c <__adddf3>
 801ae6c:	4602      	mov	r2, r0
 801ae6e:	460b      	mov	r3, r1
 801ae70:	4640      	mov	r0, r8
 801ae72:	4649      	mov	r1, r9
 801ae74:	f7e5 fe3a 	bl	8000aec <__aeabi_dcmplt>
 801ae78:	b128      	cbz	r0, 801ae86 <__ieee754_sqrt+0x19e>
 801ae7a:	1cab      	adds	r3, r5, #2
 801ae7c:	f105 0502 	add.w	r5, r5, #2
 801ae80:	bf08      	it	eq
 801ae82:	3601      	addeq	r6, #1
 801ae84:	e7e1      	b.n	801ae4a <__ieee754_sqrt+0x162>
 801ae86:	1c6b      	adds	r3, r5, #1
 801ae88:	f023 0501 	bic.w	r5, r3, #1
 801ae8c:	e7dd      	b.n	801ae4a <__ieee754_sqrt+0x162>
 801ae8e:	bf00      	nop
 801ae90:	7ff00000 	.word	0x7ff00000
 801ae94:	0801d548 	.word	0x0801d548
 801ae98:	0801d540 	.word	0x0801d540

0801ae9c <_init>:
 801ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae9e:	bf00      	nop
 801aea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aea2:	bc08      	pop	{r3}
 801aea4:	469e      	mov	lr, r3
 801aea6:	4770      	bx	lr

0801aea8 <_fini>:
 801aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeaa:	bf00      	nop
 801aeac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aeae:	bc08      	pop	{r3}
 801aeb0:	469e      	mov	lr, r3
 801aeb2:	4770      	bx	lr
